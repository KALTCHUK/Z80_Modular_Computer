0001   0000             ;==================================================================================
0002   0000             ; Contents of this file are copyright Grant Searle
0003   0000             ; Blocking/unblocking routines are the published version by Digital Research
0004   0000             ; (bugfixed, as found on the web)
0005   0000             ;
0006   0000             ; You have permission to use this for NON COMMERCIAL USE ONLY
0007   0000             ; If you wish to use it elsewhere, please include an acknowledgement to myself.
0008   0000             ;
0009   0000             ; http://searle.hostei.com/grant/index.html
0010   0000             ;
0011   0000             ; eMail: home.micros01@btinternet.com
0012   0000             ;
0013   0000             ; If the above don't work, please perform an Internet search to see if I have
0014   0000             ; updated the web page hosting service.
0015   0000             ;
0016   0000             ; Customized by Kaltchuk for use with Z80 Modular Computer, december/2020.
0017   0000             ; CP/M is booted from ROM.
0018   0000             ; 04/02/21 - This version corrects a bug in wboot.
0019   0000             ;
0020   0000             ;==================================================================================
0021   0000             CCP				.EQU	0D000h			; Base of CCP (or Monitor).
0022   0000             BIOS			.EQU	0E600h			; Base of BIOS.
0023   0000             ROM_CCP			.EQU	01000h			; Base of CCP in ROM
0024   0000             ROM_BIOS		.EQU	02600h			; Base of BIOS in ROM
0025   0000             
0026   0000             ccp				.EQU	0D000h			; Base of CCP.
0027   0000             bdos			.EQU	ccp + 0806h		; Base of BDOS.
0028   0000             bios			.EQU	0E600h			; Base of BIOS.
0029   0000             
0030   0000             ; Set CP/M low memory data, vector and buffer addresses.
0031   0000             
0032   0000             iobyte			.EQU	03h				; Intel standard I/O definition byte.
0033   0000             userdrv			.EQU	04h				; Current user number and drive.
0034   0000             tpabuf			.EQU	80h				; Default I/O buffer and command line storage.
0035   0000             
0036   0000             blksiz			.equ	4096			;CP/M allocation size
0037   0000             hstsiz			.equ	512				;host disk sector size
0038   0000             hstspt			.equ	32				;host disk sectors/trk
0039   0000             hstblk			.equ	hstsiz/128		;CP/M sects/host buff
0040   0000             cpmspt			.equ	hstblk * hstspt	;CP/M sectors/track
0041   0000             secmsk			.equ	hstblk-1		;sector mask
0042   0000             										;compute sector mask
0043   0000             ;secshf			.equ	2				;log2(hstblk)
0044   0000             	
0045   0000             wrall			.equ	0				;write to allocated
0046   0000             wrdir			.equ	1				;write to directory
0047   0000             wrual			.equ	2				;write to unallocated
0048   0000             
0049   0000             ; MEM card stuff
0050   0000             ROM_RAM0		.EQU	0F0H			; ROM + RAM bank 0
0051   0000             NOROM_RAM0		.EQU	0F1H			; no ROM + RAM bank 0 (full RAM)
0052   0000             ROM_RAM1		.EQU	0F2H			; ROM + RAM bank 1
0053   0000             NOROM_RAM1		.EQU	0F3H			; no ROM + RAM bank 1 (full RAM)
0054   0000             
0055   0000             ; USART card stuff
0056   0000             USART_DAT		.EQU	0D0H			; USART data addr
0057   0000             USART_CMD		.EQU	0D1H			; USART command addr
0058   0000             USART_STA		.EQU	0D1H			; USART status addr
0059   0000             UMODE			.EQU	06FH			; 8N1 (8 bit, no parity, 1 stop), baud=clock/64
0060   0000             UCMD0			.EQU	015H			; initial command: Rx enable, Tx enable, reset error flags
0061   0000             
0062   0000             ; LCD card address list.
0063   0000             LCD_ADDR	.EQU	0E0H
0064   0000             DAT_WR		.EQU	LCD_ADDR+1
0065   0000             DAT_RD		.EQU	LCD_ADDR+3
0066   0000             CMD_WR		.EQU	LCD_ADDR
0067   0000             CMD_RD		.EQU	LCD_ADDR+2
0068   0000             
0069   0000             
0070   0000             ; FLASH card stuff
0071   0000             FLASH_ADDR		.EQU	0B0H			; Base I/O address for compact flash card
0072   0000             CF_DATA			.EQU	(FLASH_ADDR+0)	; R/W
0073   0000             CF_FEATURES		.EQU	(FLASH_ADDR+1)	; W
0074   0000             CF_ERROR		.EQU	(FLASH_ADDR+1)	; R
0075   0000             CF_SECCOUNT		.EQU	(FLASH_ADDR+2)	; W
0076   0000             
0077   0000             CF_SECTOR		.EQU	(FLASH_ADDR+3)	; W
0078   0000             CF_CYL_LOW		.EQU	(FLASH_ADDR+4)	; W
0079   0000             CF_CYL_HI		.EQU	(FLASH_ADDR+5)	; W
0080   0000             CF_HEAD			.EQU	(FLASH_ADDR+6)	; W
0081   0000             
0082   0000             CF_LBA0			.EQU	(FLASH_ADDR+3)	; W
0083   0000             CF_LBA1			.EQU	(FLASH_ADDR+4)	; W
0084   0000             CF_LBA2			.EQU	(FLASH_ADDR+5)	; W
0085   0000             CF_LBA3			.EQU	(FLASH_ADDR+6)	; W
0086   0000             
0087   0000             CF_STATUS		.EQU	(FLASH_ADDR+7)	; R
0088   0000             CF_COMMAND		.EQU	(FLASH_ADDR+7)	; W
0089   0000             
0090   0000             ;CF Features
0091   0000             CF_8BIT			.EQU	1
0092   0000             CF_NOCACHE		.EQU	082H
0093   0000             
0094   0000             ;CF Commands
0095   0000             CF_READ_SEC		.EQU	020H
0096   0000             CF_WRITE_SEC	.EQU	030H
0097   0000             CF_SET_FEAT		.EQU 	0EFH
0098   0000             
0099   0000             ;================================================================================================
0100   0000             ; ASCII characters.
0101   0000             ;================================================================================================
0102   0000             NUL			.EQU	00H
0103   0000             LF			.EQU	0AH
0104   0000             FF			.EQU	0CH
0105   0000             CR			.EQU	0DH
0106   0000             DC1			.EQU	11H
0107   0000             DC2			.EQU	12H
0108   0000             DC3			.EQU	13H
0109   0000             DC4			.EQU	14H
0110   0000             ;================================================================================================
0111   0000             
0112   E600             		.ORG	bios					; BIOS origin.
0113   E600             
0114   E600             ;================================================================================================
0115   E600             ; BIOS jump table.
0116   E600             ;================================================================================================
0117   E600 C3 63 E7    		JP	boot						;  0 Initialize.
0118   E603 C3 23 E8    wboote:	JP	wboot						;  1 Warm boot.
0119   E606 C3 A7 E8    		JP	CONST						;  2 Console status.
0120   E609 C3 BA E8    		JP	CONIN						;  3 Console input.
0121   E60C C3 DC E8    		JP	CONOUT						;  4 Console OUTput.
0122   E60F C3 E9 E8    		JP	LIST						;  5 List OUTput.
0123   E612 C3 F6 E8    		JP	PUNCH						;  6 punch OUTput.
0124   E615 C3 E6 E8    		JP	READER						;  7 Reader input.
0125   E618 C3 48 EA    		JP	home						;  8 Home disk.
0126   E61B C3 20 EA    		JP	seldsk						;  9 Select disk.
0127   E61E C3 54 EA    		JP	settrk						; 10 Select track.
0128   E621 C3 59 EA    		JP	setsec						; 11 Select sector.
0129   E624 C3 5E EA    		JP	setdma						; 12 Set DMA ADDress.
0130   E627 C3 66 EA    		JP	read						; 13 Read 128 bytes.
0131   E62A C3 7A EA    		JP	write						; 14 Write 128 bytes.
0132   E62D C3 F9 E8    		JP	LISTST						; 15 List status.
0133   E630 C3 63 EA    		JP	sectran						; 16 Sector translate.
0134   E633 C3 54 EC    		JP	PRINTSEQ					; not a BIOS function
0135   E636             
0136   E636             ;================================================================================================
0137   E636             ; Disk parameter headers for disk 0 to 15
0138   E636             ;================================================================================================
0139   E636             dpbase:
0140   E636 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb0,0000h,alv00
0140   E63A 00 00 00 00 
0140   E63E 68 EC 36 E7 
0140   E642 00 00 E8 EC 
0141   E646 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv01
0141   E64A 00 00 00 00 
0141   E64E 68 EC 45 E7 
0141   E652 00 00 E9 ED 
0142   E656 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv02
0142   E65A 00 00 00 00 
0142   E65E 68 EC 45 E7 
0142   E662 00 00 EA EE 
0143   E666 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv03
0143   E66A 00 00 00 00 
0143   E66E 68 EC 45 E7 
0143   E672 00 00 EB EF 
0144   E676 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv04
0144   E67A 00 00 00 00 
0144   E67E 68 EC 45 E7 
0144   E682 00 00 EC F0 
0145   E686 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv05
0145   E68A 00 00 00 00 
0145   E68E 68 EC 45 E7 
0145   E692 00 00 ED F1 
0146   E696 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv06
0146   E69A 00 00 00 00 
0146   E69E 68 EC 45 E7 
0146   E6A2 00 00 EE F2 
0147   E6A6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv07
0147   E6AA 00 00 00 00 
0147   E6AE 68 EC 45 E7 
0147   E6B2 00 00 EF F3 
0148   E6B6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv08
0148   E6BA 00 00 00 00 
0148   E6BE 68 EC 45 E7 
0148   E6C2 00 00 F0 F4 
0149   E6C6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv09
0149   E6CA 00 00 00 00 
0149   E6CE 68 EC 45 E7 
0149   E6D2 00 00 F1 F5 
0150   E6D6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv10
0150   E6DA 00 00 00 00 
0150   E6DE 68 EC 45 E7 
0150   E6E2 00 00 F2 F6 
0151   E6E6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv11
0151   E6EA 00 00 00 00 
0151   E6EE 68 EC 45 E7 
0151   E6F2 00 00 F3 F7 
0152   E6F6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv12
0152   E6FA 00 00 00 00 
0152   E6FE 68 EC 45 E7 
0152   E702 00 00 F4 F8 
0153   E706 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv13
0153   E70A 00 00 00 00 
0153   E70E 68 EC 45 E7 
0153   E712 00 00 F5 F9 
0154   E716 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv14
0154   E71A 00 00 00 00 
0154   E71E 68 EC 45 E7 
0154   E722 00 00 F6 FA 
0155   E726 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpbLast,0000h,alv15
0155   E72A 00 00 00 00 
0155   E72E 68 EC 54 E7 
0155   E732 00 00 F7 FB 
0156   E736             
0157   E736             ; First drive has a reserved track for CP/M
0158   E736             dpb0:
0159   E736 80 00       		.DW 128 ;SPT - sectors per track
0160   E738 05          		.DB 5   ;BSH - block shift factor
0161   E739 1F          		.DB 31  ;BLM - block mask
0162   E73A 01          		.DB 1   ;EXM - Extent mask
0163   E73B FB 07       		.DW 2043 ; (2047-4) DSM - Storage size (blocks - 1)
0164   E73D FF 01       		.DW 511 ;DRM - Number of directory entries - 1
0165   E73F F0          		.DB 240 ;AL0 - 1 bit set per directory block
0166   E740 00          		.DB 0   ;AL1 -            "
0167   E741 00 00       		.DW 0   ;CKS - DIR check vector size (DRM+1)/4 (0=fixed disk)
0168   E743 01 00       		.DW 1   ;ON  - Reserved tracks
0169   E745             
0170   E745             dpb:
0171   E745 80 00       		.DW 128 ;SPT - sectors per track
0172   E747 05          		.DB 5   ;BSH - block shift factor
0173   E748 1F          		.DB 31  ;BLM - block mask
0174   E749 01          		.DB 1   ;EXM - Extent mask
0175   E74A FF 07       		.DW 2047 ;DSM - Storage size (blocks - 1)
0176   E74C FF 01       		.DW 511 ;DRM - Number of directory entries - 1
0177   E74E F0          		.DB 240 ;AL0 - 1 bit set per directory block
0178   E74F 00          		.DB 0   ;AL1 -            "
0179   E750 00 00       		.DW 0   ;CKS - DIR check vector size (DRM+1)/4 (0=fixed disk)
0180   E752 00 00       		.DW 0   ;OFF - Reserved tracks
0181   E754             
0182   E754             ; Last drive is smaller because CF is never full 64MB or 128MB
0183   E754             dpbLast:
0184   E754 80 00       		.DW 128 ;SPT - sectors per track
0185   E756 05          		.DB 5   ;BSH - block shift factor
0186   E757 1F          		.DB 31  ;BLM - block mask
0187   E758 01          		.DB 1   ;EXM - Extent mask
0188   E759 FF 01       		.DW 511 ;DSM - Storage size (blocks - 1)  ; 511 = 2MB (for 128MB card), 1279 = 5MB (for 64MB card)
0189   E75B FF 01       		.DW 511 ;DRM - Number of directory entries - 1
0190   E75D F0          		.DB 240 ;AL0 - 1 bit set per directory block
0191   E75E 00          		.DB 0   ;AL1 -            "
0192   E75F 00 00       		.DW 0   ;CKS - DIR check vector size (DRM+1)/4 (0=fixed disk)
0193   E761 00 00       		.DW 0   ;OFF - Reserved tracks
0194   E763             
0195   E763             ;================================================================================================
0196   E763             ; Cold boot
0197   E763             ;================================================================================================
0198   E763             
0199   E763             boot:
0200   E763 F3          		DI						; Disable interrupts.
0201   E764 31 87 FF    		LD	SP,BIOSSTACK		; Set default stack.
0202   E767             
0203   E767 D3 F1       		OUT (NOROM_RAM0),A		; Turn off ROM. Doesn't matter what we output
0204   E769             
0205   E769 CD 90 E8    		CALL USARTINIT			; Initialize USART
0206   E76C             
0207   E76C 01 13 FF    		LD	BC,BUFINI			; Initialize pointers for USART buffer
0208   E76F ED 43 63 FF 		LD	(WRPTR),BC
0209   E773 ED 43 65 FF 		LD	(RDPTR),BC
0210   E777             
0211   E777 CD 49 EC    		CALL	cfWait			; Initialize FLASH
0212   E77A 3E 01       		LD 	A,CF_8BIT			; Set IDE to be 8bit
0213   E77C D3 B1       		OUT	(CF_FEATURES),A
0214   E77E 3E EF       		LD	A,CF_SET_FEAT
0215   E780 D3 B7       		OUT	(CF_COMMAND),A
0216   E782             
0217   E782 CD 49 EC    		CALL	cfWait
0218   E785 3E 82       		LD 	A,CF_NOCACHE		; No write cache
0219   E787 D3 B1       		OUT	(CF_FEATURES),A
0220   E789 3E EF       		LD	A,CF_SET_FEAT
0221   E78B D3 B7       		OUT	(CF_COMMAND),A
0222   E78D             
0223   E78D AF          		XOR	A					; set drive byte to A:
0224   E78E 32 04 00    		LD	(userdrv),A
0225   E791             
0226   E791 01 13 FF    		LD	BC,BUFINI			; reset serial input buffer
0227   E794 ED 43 63 FF 		LD	(WRPTR),BC
0228   E798 ED 43 65 FF 		LD	(RDPTR),BC
0229   E79C             
0230   E79C             
0231   E79C CD 54 EC    		CALL	PRINTSEQ
0232   E79F 5A 38 30 20 		.DB "Z80 Modular Computer by Kaltchuk 2020.",CR,LF
0232   E7A3 4D 6F 64 75 
0232   E7A7 6C 61 72 20 
0232   E7AB 43 6F 6D 70 
0232   E7AF 75 74 65 72 
0232   E7B3 20 62 79 20 
0232   E7B7 4B 61 6C 74 
0232   E7BB 63 68 75 6B 
0232   E7BF 20 32 30 32 
0232   E7C3 30 2E 0D 0A 
0233   E7C7 42 49 4F 53 		.DB "BIOS 1.0B - 128MB Flash, LCD drive.",CR,LF
0233   E7CB 20 31 2E 30 
0233   E7CF 42 20 2D 20 
0233   E7D3 31 32 38 4D 
0233   E7D7 42 20 46 6C 
0233   E7DB 61 73 68 2C 
0233   E7DF 20 4C 43 44 
0233   E7E3 20 64 72 69 
0233   E7E7 76 65 2E 0D 
0233   E7EB 0A 
0234   E7EC 43 50 2F 4D 		.DB "CP/M 2.2 Copyright 1979 (c) by Digital Research",CR,LF,CR,LF,0
0234   E7F0 20 32 2E 32 
0234   E7F4 20 43 6F 70 
0234   E7F8 79 72 69 67 
0234   E7FC 68 74 20 31 
0234   E800 39 37 39 20 
0234   E804 28 63 29 20 
0234   E808 62 79 20 44 
0234   E80C 69 67 69 74 
0234   E810 61 6C 20 52 
0234   E814 65 73 65 61 
0234   E818 72 63 68 0D 
0234   E81C 0A 0D 0A 00 
0235   E820             
0236   E820 C3 36 E8    		JP	gocpm
0237   E823             
0238   E823             ;================================================================================================
0239   E823             ; Warm boot
0240   E823             ;================================================================================================
0241   E823             
0242   E823             wboot:
0243   E823 F3          		DI						; Disable interrupts.
0244   E824 31 87 FF    		LD	SP,BIOSSTACK		; Set default stack.
0245   E827             
0246   E827 D3 F0       		OUT (ROM_RAM0),A		; Turn on ROM. Doesn't matter what we output
0247   E829             
0248   E829 01 00 16    		LD	BC,01600H			; Copy CP/M ROM (01000h) to RAM (0D000h)
0249   E82C 11 00 D0    		LD	DE,CCP				; Don't copy the BIOS!!!
0250   E82F 21 00 10    		LD	HL,ROM_CCP
0251   E832 ED B0       		LDIR
0252   E834             
0253   E834 D3 F1       		OUT (NOROM_RAM0),A		; Turn off ROM. Doesn't matter what we output
0254   E836             
0255   E836             
0256   E836             ;================================================================================================
0257   E836             ; Common code for cold and warm boot
0258   E836             ;================================================================================================
0259   E836             
0260   E836             gocpm:
0261   E836 AF          		XOR	A					; 0 to accumulator
0262   E837 32 06 FD    		LD	(hstact),A			; host buffer inactive
0263   E83A 32 08 FD    		LD	(unacnt),A			; clear unalloc count
0264   E83D             
0265   E83D 21 80 00    		LD	HL,tpabuf			; ADDress of BIOS DMA buffer.
0266   E840 22 11 FD    		LD	(dmaAddr),HL
0267   E843             		
0268   E843 3E C3       		LD	A,0C3h				; Opcode for 'JP'.
0269   E845 32 00 00    		LD	(00h),A				; Load at start of RAM.
0270   E848 21 03 E6    		LD	HL,wboote			; ADDress of jump for a warm boot.
0271   E84B 22 01 00    		LD	(01h),HL
0272   E84E 32 05 00    		LD	(05h),A				; Opcode for 'JP'.
0273   E851 21 06 D8    		LD	HL,bdos				; ADDress of jump for the BDOS.
0274   E854 22 06 00    		LD	(06h),HL
0275   E857 32 38 00    		LD	(038H),A			; at 038h write "JP UINT"
0276   E85A 21 6F E8    		LD	HL,UINT				; which is the interrupt routine to catch incoming
0277   E85D 22 39 00    		LD	(039H),HL			; character on the USART
0278   E860 3E 00       		LD	A,0
0279   E862 32 03 00    		LD	(iobyte),A			; Set IOBYTE to 00
0280   E865 3A 04 00    		LD	A,(userdrv)			; Save new drive number (0).
0281   E868 4F          		LD	C,A					; Pass drive number in C.
0282   E869             
0283   E869 ED 56       		IM	1
0284   E86B FB          		EI
0285   E86C             	
0286   E86C C3 00 D0    		JP	ccp					; Start CP/M by jumping to the CCP.
0287   E86F             
0288   E86F             ;================================================================================================
0289   E86F             ; Interrupt routine for USART
0290   E86F             ;================================================================================================
0291   E86F             UINT:
0292   E86F C5          		PUSH	BC
0293   E870 E5          		PUSH	HL
0294   E871             
0295   E871 DB D0       		IN	A,(USART_DAT)		; read incoming byte
0296   E873             ;		OUT	(USART_DAT),A		; send character
0297   E873 ED 4B 63 FF 		LD	BC,(WRPTR)
0298   E877 02          		LD	(BC),A
0299   E878 03          		INC	BC
0300   E879 21 63 FF    		LD	HL,BUFEND
0301   E87C 37          		SCF
0302   E87D 3F          		CCF
0303   E87E ED 42       		SBC	HL,BC
0304   E880 20 03       		JR	NZ,EOINT
0305   E882 01 13 FF    		LD	BC,BUFINI
0306   E885 ED 43 63 FF EOINT:	LD	(WRPTR),BC
0307   E889             
0308   E889 E1          		POP	HL
0309   E88A C1          		POP	BC
0310   E88B ED 56       		IM	1
0311   E88D FB          		EI
0312   E88E ED 4D       		RETI
0313   E890             
0314   E890             ;================================================================================================
0315   E890             ; Initialize USART
0316   E890             ;================================================================================================
0317   E890             USARTINIT:
0318   E890 3E 00       		LD 	A,0					; Worst case init: put in SYNC mode, 
0319   E892 D3 D1       		OUT	(USART_CMD),A		; send 2 dummy 00 sync chars and reset
0320   E894 00          		NOP
0321   E895 D3 D1       		OUT	(USART_CMD),A
0322   E897 00          		NOP
0323   E898 D3 D1       		OUT	(USART_CMD),A
0324   E89A 3E 40       		LD 	A,040H				; Reset USART
0325   E89C D3 D1       		OUT	(USART_CMD),A
0326   E89E 3E 6F       		LD 	A,UMODE				; Set USART mode
0327   E8A0 D3 D1       		OUT	(USART_CMD),A
0328   E8A2 3E 15       		LD 	A,UCMD0				; Set USART initial command
0329   E8A4 D3 D1       		OUT	(USART_CMD),A
0330   E8A6 C9          		RET
0331   E8A7             
0332   E8A7             ;================================================================================================
0333   E8A7             ; Console I/O routines
0334   E8A7             ;================================================================================================
0335   E8A7             ;================================================================================================
0336   E8A7             ; Console Status (Return A=0FFh if character waiting. Otherwise, A=0)
0337   E8A7             ;================================================================================================
0338   E8A7             CONST:
0339   E8A7 C5          		PUSH	BC
0340   E8A8 E5          		PUSH	HL
0341   E8A9 ED 4B 63 FF 		LD	BC,(WRPTR)
0342   E8AD 2A 65 FF    		LD	HL,(RDPTR)
0343   E8B0 AF          		XOR	A					; Reset carry flag
0344   E8B1 ED 42       		SBC	HL,BC
0345   E8B3 28 02       		JR	Z,CONVOID
0346   E8B5 3E FF       		LD	A,0FFH
0347   E8B7             CONVOID:
0348   E8B7 E1          		POP	HL
0349   E8B8 C1          		POP	BC
0350   E8B9 C9          	  	RET
0351   E8BA             
0352   E8BA             ;================================================================================================
0353   E8BA             ; Console Input (Wait for input and return character in A)
0354   E8BA             ;================================================================================================
0355   E8BA             CONIN:
0356   E8BA C5          		PUSH	BC	
0357   E8BB E5          		PUSH	HL	
0358   E8BC CD A7 E8    AGAIN:	CALL	CONST
0359   E8BF FE 00       		CP	0
0360   E8C1 28 F9       		JR	Z,AGAIN			; Keep trying till we receive something
0361   E8C3 ED 4B 65 FF 		LD	BC,(RDPTR)
0362   E8C7 0A          		LD	A,(BC)
0363   E8C8 03          		INC	BC
0364   E8C9 21 63 FF    		LD	HL,BUFEND
0365   E8CC 37          		SCF
0366   E8CD 3F          		CCF
0367   E8CE ED 42       		SBC	HL,BC
0368   E8D0 20 03       		JR	NZ,EOCONIN
0369   E8D2 01 13 FF    		LD	BC,BUFINI
0370   E8D5 ED 43 65 FF EOCONIN:	LD	(RDPTR),BC
0371   E8D9 E1          		POP	HL
0372   E8DA C1          		POP	BC
0373   E8DB C9          		RET					; Char read returns in A
0374   E8DC             
0375   E8DC             ;================================================================================================
0376   E8DC             ; Console Output (Send character in reg C)
0377   E8DC             ;================================================================================================
0378   E8DC             CONOUT:
0379   E8DC DB D1       		IN	A,(USART_STA)		; read USART status byte
0380   E8DE E6 04       		AND	04H				; get only the TxEMPTY bit
0381   E8E0 28 FA       		JR	Z,CONOUT
0382   E8E2 79          		LD	A,C
0383   E8E3 D3 D0       		OUT	(USART_DAT),A		; send character
0384   E8E5 C9          		RET
0385   E8E6             
0386   E8E6             ;================================================================================================
0387   E8E6             ; Reader Input
0388   E8E6             ;================================================================================================
0389   E8E6 C3 BA E8    READER:	JP CONIN	
0390   E8E9             
0391   E8E9             ;================================================================================================
0392   E8E9             ; List Output
0393   E8E9             ;================================================================================================
0394   E8E9 3A 03 00    LIST:		LD	A,(iobyte)
0395   E8EC E6 C0       			AND	0C0H			; Get LIST portion of IOBYTE
0396   E8EE FE C0       			CP	0C0H
0397   E8F0 CA 0A E9    			JP	Z,LCD
0398   E8F3 C3 DC E8    			JP CONOUT
0399   E8F6             
0400   E8F6             ;================================================================================================
0401   E8F6             ; Punch Output
0402   E8F6             ;================================================================================================
0403   E8F6 C3 DC E8    PUNCH:	JP CONOUT	
0404   E8F9             
0405   E8F9             ;================================================================================================
0406   E8F9             ; List Status (List = Console)
0407   E8F9             ;================================================================================================
0408   E8F9 3A 03 00    LISTST:		LD	A,(iobyte)
0409   E8FC E6 C0       			AND	0C0H			; Get LIST portion of IOBYTE
0410   E8FE FE C0       			CP	0C0H
0411   E900 CA 06 E9    			JP	Z,LCDST
0412   E903 C3 A7 E8    			JP CONST
0413   E906             
0414   E906             ;================================================================================================
0415   E906             ; LCD STATUS. Return A=LCD_card_addr. A=0 if no card initialized.
0416   E906             ;================================================================================================
0417   E906 CD 79 E9    LCDST:		CALL BWAIT
0418   E909 C9          			RET
0419   E90A             
0420   E90A             ;================================================================================================
0421   E90A             ; LCD OUTPUT. Send C to LCD, if C>1FH (printable range). 
0422   E90A             ; Accepts also LF, CR and FF (Form Feed = clear LCD).
0423   E90A             ; If C=DC1, initialize LCD card.
0424   E90A             ; If C=DC2, position cursor as indicated in regB.
0425   E90A             ;================================================================================================
0426   E90A E5          LCD:		PUSH HL
0427   E90B 79          			LD	A,C
0428   E90C FE 14       			CP	20
0429   E90E FA 16 E9    			JP	M,ASCIILO
0430   E911 CD 8B E9    			CALL LCDPUT
0431   E914 18 19       			JR	GETOUT
0432   E916 FE 0A       ASCIILO:	CP	LF
0433   E918 CC AB E9    			CALL Z,LCDLF			; Line Feed
0434   E91B FE 0D       			CP	CR
0435   E91D CC 9F E9    			CALL Z,LCDCR			; Carriage Return
0436   E920 FE 0C       			CP	FF
0437   E922 CC 81 E9    			CALL Z,LCDCLEAR			; Form Feed, which is a 'clear LCD'
0438   E925 FE 11       			CP	DC1
0439   E927 CC 31 E9    			CALL Z,LCDINIT			; Initialize LCD card.
0440   E92A FE 12       			CP	DC2
0441   E92C CC 94 E9    			CALL Z,LCDPOS			; Cursor reposition request. New position in regB
0442   E92F E1          GETOUT:		POP	HL
0443   E930 C9          			RET
0444   E931             
0445   E931             ;================================================================================================
0446   E931             ; Initialize LCD
0447   E931             ;================================================================================================
0448   E931 06 0F       LCDINIT:	LD	B,15			; wait 15ms
0449   E933 CD FC E9    			CALL DELAYMS
0450   E936 3E 30       			LD	A,030H			; write command 030h
0451   E938 D3 E0       			OUT	(CMD_WR),A
0452   E93A 06 05       			LD	B,5				; wait 5ms
0453   E93C CD FC E9    			CALL DELAYMS
0454   E93F 3E 30       			LD	A,030H			; write command 030h
0455   E941 D3 E0       			OUT	(CMD_WR),A
0456   E943 0E 14       			LD	C,20			; wait (5X20) 100us
0457   E945 CD 08 EA    			CALL DELAY5US
0458   E948 3E 30       			LD	A,030H			; write command 030h
0459   E94A D3 E0       			OUT	(CMD_WR),A
0460   E94C 0E 14       			LD	C,20			; wait (5X20) 100us
0461   E94E CD 08 EA    			CALL DELAY5US
0462   E951 3E 38       			LD	A,038H			; write command 038h = function set (8-bits, 2-lines, 5x7dots)
0463   E953 D3 E0       			OUT	(CMD_WR),A
0464   E955 CD 79 E9    			CALL BWAIT
0465   E958 3E 08       			LD	A,08H			; write command 08h = display (off)
0466   E95A D3 E0       			OUT	(CMD_WR),A
0467   E95C CD 79 E9    			CALL BWAIT
0468   E95F 3E 01       			LD	A,01H			; write command 01h = clear display
0469   E961 D3 E0       			OUT	(CMD_WR),A
0470   E963 CD 79 E9    			CALL BWAIT
0471   E966 3E 06       			LD	A,06H			; write command 06h = entry mode (increment)
0472   E968 D3 E0       			OUT	(CMD_WR),A
0473   E96A CD 79 E9    			CALL BWAIT
0474   E96D 3E 0C       			LD	A,0CH			; write command 0Ch = display (on)
0475   E96F D3 E0       			OUT	(CMD_WR),A
0476   E971 3E E0       			LD	A,LCD_ADDR
0477   E973 32 0F EA    			LD	(LCDSTATUS),A
0478   E976 3E 00       			LD	A,0
0479   E978 C9          			RET
0480   E979             
0481   E979             ;================================================================================================
0482   E979             ; Wait until Busy flag = 0
0483   E979             ;================================================================================================
0484   E979 DB E2       BWAIT:		IN	A,(CMD_RD)
0485   E97B 07          			RLCA
0486   E97C 38 FB       			JR	C,BWAIT
0487   E97E CB 3F       			SRL	A
0488   E980 C9          			RET
0489   E981             			
0490   E981             ;================================================================================================
0491   E981             ; Clear LCD and goto line 1, column 1.
0492   E981             ;================================================================================================
0493   E981 CD 79 E9    LCDCLEAR:	CALL BWAIT
0494   E984 3E 01       			LD	A,01H
0495   E986 D3 E0       			OUT	(CMD_WR),A
0496   E988 3E 00       			LD	A,0
0497   E98A C9          			RET
0498   E98B             
0499   E98B             ;================================================================================================
0500   E98B             ; Send to LCD char in regC. Print at current position (what ever it is)
0501   E98B             ;================================================================================================
0502   E98B CD 79 E9    LCDPUT:		CALL BWAIT
0503   E98E 79          			LD	A,C	
0504   E98F D3 E1       			OUT	(DAT_WR),A
0505   E991 3E 00       			LD	A,0
0506   E993 C9          			RET
0507   E994             
0508   E994             ;================================================================================================
0509   E994             ; Position LCD cursor at regB.
0510   E994             ;================================================================================================
0511   E994 CD 79 E9    LCDPOS:		CALL BWAIT
0512   E997 78          			LD	A,B
0513   E998 F6 80       			OR	80H
0514   E99A D3 E0       			OUT	(CMD_WR),A
0515   E99C 3E 00       			LD	A,0
0516   E99E C9          			RET
0517   E99F             
0518   E99F             ;================================================================================================
0519   E99F             ; Do CR (Carriage Return)
0520   E99F             ;================================================================================================
0521   E99F CD 79 E9    LCDCR:		CALL BWAIT
0522   E9A2 E6 F0       			AND	0F0H			; Keep line info, set column to 1.
0523   E9A4 F6 80       			OR	080H
0524   E9A6 D3 E0       			OUT	(CMD_WR),A
0525   E9A8 3E 00       			LD	A,0
0526   E9AA C9          			RET
0527   E9AB             			
0528   E9AB             ;================================================================================================
0529   E9AB             ; Do LF (Line Feed)
0530   E9AB             ;================================================================================================
0531   E9AB CD 79 E9    LCDLF:		CALL BWAIT			; regA holds LCD address counter
0532   E9AE 57          			LD	D,A
0533   E9AF E6 40       			AND	40H				; get only the 7th bit to see on which line the cursor is.
0534   E9B1 28 26       			JR	Z,LN11
0535   E9B3 CD 79 E9    			CALL BWAIT
0536   E9B6 3E C0       			LD	A,0C0H
0537   E9B8 D3 E0       			OUT	(CMD_WR),A		; set addr counter to source position (2,1)
0538   E9BA 21 10 EA    			LD	HL,BUF
0539   E9BD 06 10       			LD	B,10H
0540   E9BF CD 79 E9    NEWSRC:		CALL BWAIT
0541   E9C2 DB E3       			IN	A,(DAT_RD)		; get data from source position
0542   E9C4 77          			LD	(HL),A			; Store char in buffer
0543   E9C5 23          			INC	HL
0544   E9C6 10 F7       			DJNZ NEWSRC
0545   E9C8 CD 81 E9    			CALL LCDCLEAR
0546   E9CB 21 10 EA    			LD	HL,BUF
0547   E9CE 06 10       			LD	B,10H
0548   E9D0 CD 79 E9    NEWTGT:		CALL BWAIT
0549   E9D3 7E          			LD	A,(HL)
0550   E9D4 23          			INC	HL
0551   E9D5 D3 E1       			OUT	(DAT_WR),A
0552   E9D7 10 F7       			DJNZ NEWTGT
0553   E9D9             
0554   E9D9 CD 79 E9    LN11:		CALL BWAIT
0555   E9DC 7A          			LD	A,D
0556   E9DD E6 0F       			AND	0FH
0557   E9DF F6 C0       			OR	0C0H
0558   E9E1 D3 E0       			OUT	(CMD_WR),A
0559   E9E3 3E 00       			LD	A,0
0560   E9E5 C9          			RET
0561   E9E6             
0562   E9E6             ;================================================================================================
0563   E9E6             ; Delay X seconds, with X passed on reg B
0564   E9E6             ;================================================================================================
0565   E9E6 C5          DELAYS:		PUSH BC
0566   E9E7 E5          			PUSH HL
0567   E9E8 21 8F 02    LOOP0:		LD	HL,655		;2.5				\
0568   E9EB 0E FF       LOOP1:		LD	C,255		;1.75	\			|
0569   E9ED 0D          LOOP2:		DEC	C			;1		|			|
0570   E9EE 00          			NOP				;1		| t=6C+0.5	| 
0571   E9EF 79          			LD	A,C			;1		|			| t=HL(6C+6.5)+1.25
0572   E9F0 20 FB       			JR	NZ,LOOP2	;3/1.75	/			|
0573   E9F2 2B          			DEC	HL			;1					| with HL=655 and c=255, t=1.006sec (WOW!!!)
0574   E9F3 7C          			LD	A,H			;1					|
0575   E9F4 B5          			OR	L			;1					|
0576   E9F5 20 F4       			JR	NZ,LOOP1	;3/1.75				/
0577   E9F7 10 EF       			DJNZ LOOP0		;3.25/2
0578   E9F9 E1          			POP	HL
0579   E9FA C1          			POP	BC
0580   E9FB C9          			RET
0581   E9FC             
0582   E9FC             ;================================================================================================
0583   E9FC             ; Delay X miliseconds, with X passed on reg B
0584   E9FC             ;================================================================================================
0585   E9FC C5          DELAYMS:	PUSH BC
0586   E9FD 0E C8       DECB:		LD	C,0C8H
0587   E9FF 00          DECC:		NOP
0588   EA00 0D          			DEC	C
0589   EA01 20 FC       			JR	NZ,DECC
0590   EA03 05          			DEC	B
0591   EA04 20 F7       			JR	NZ,DECB
0592   EA06 C1          			POP	BC
0593   EA07 C9          			RET
0594   EA08             
0595   EA08             ;================================================================================================
0596   EA08             ; Delay 5*X microseconds, with X passed on reg C
0597   EA08             ;================================================================================================
0598   EA08 C5          DELAY5US:	PUSH BC
0599   EA09 00          DEC:		NOP
0600   EA0A 0D          			DEC	C
0601   EA0B 20 FC       			JR	NZ,DEC
0602   EA0D C1          			POP	BC
0603   EA0E C9          			RET
0604   EA0F             
0605   EA0F             ;================================================================================================
0606   EA0F 00          LCDSTATUS	.DB	0			; After LCD has been initialized, it will hold card addr.
0607   EA10             BUF			.DS	10H			; Buffer for Line Feed operation
0608   EA20             ;================================================================================================
0609   EA20             ; Disk processing entry points
0610   EA20             ;================================================================================================
0611   EA20             seldsk:
0612   EA20 21 00 00    		LD	HL,$0000
0613   EA23 79          		LD	A,C
0614   EA24 FE 10       		CP	16		; 16 for 128MB disk, 8 for 64MB disk
0615   EA26 38 0D       		jr	C,chgdsk	; if invalid drive will give BDOS error
0616   EA28 3A 04 00    		LD	A,(userdrv)	; so set the drive back to a:
0617   EA2B B9          		CP	C		; If the default disk is not the same as the
0618   EA2C C0          		RET	NZ		; selected drive then return, 
0619   EA2D AF          		XOR	A		; else reset default back to a:
0620   EA2E 32 04 00    		LD	(userdrv),A	; otherwise will be stuck in a loop
0621   EA31 32 FC FC    		LD	(sekdsk),A
0622   EA34 C9          		ret
0623   EA35             
0624   EA35 32 FC FC    chgdsk:		LD 	(sekdsk),A
0625   EA38 CB 07       		RLC	a		;*2
0626   EA3A CB 07       		RLC	a		;*4
0627   EA3C CB 07       		RLC	a		;*8
0628   EA3E CB 07       		RLC	a		;*16
0629   EA40 21 36 E6    		LD 	HL,dpbase
0630   EA43 06 00       		LD	b,0
0631   EA45 4F          		LD	c,A	
0632   EA46 09          		ADD	HL,BC
0633   EA47             
0634   EA47 C9          		RET
0635   EA48             
0636   EA48             ;------------------------------------------------------------------------------------------------
0637   EA48             home:
0638   EA48 3A 07 FD    		ld	a,(hstwrt)	;check for pending write
0639   EA4B B7          		or	a
0640   EA4C 20 03       		jr	nz,homed
0641   EA4E 32 06 FD    		ld	(hstact),a	;clear host active flag
0642   EA51             homed:
0643   EA51 01 00 00    		LD 	BC,0000h
0644   EA54             
0645   EA54             ;------------------------------------------------------------------------------------------------
0646   EA54 ED 43 FD FC settrk:		LD 	(sektrk),BC	; Set track passed from BDOS in register BC.
0647   EA58 C9          		RET
0648   EA59             
0649   EA59             ;------------------------------------------------------------------------------------------------
0650   EA59 ED 43 FF FC setsec:		LD 	(seksec),BC	; Set sector passed from BDOS in register BC.
0651   EA5D C9          		RET
0652   EA5E             
0653   EA5E             ;------------------------------------------------------------------------------------------------
0654   EA5E ED 43 11 FD setdma:		LD 	(dmaAddr),BC	; Set DMA ADDress given by registers BC.
0655   EA62 C9          		RET
0656   EA63             
0657   EA63             ;------------------------------------------------------------------------------------------------
0658   EA63 C5          sectran:	PUSH 	BC
0659   EA64 E1          		POP 	HL
0660   EA65 C9          		RET
0661   EA66             
0662   EA66             ;------------------------------------------------------------------------------------------------
0663   EA66             read:
0664   EA66             		;read the selected CP/M sector
0665   EA66 AF          		xor	a
0666   EA67 32 08 FD    		ld	(unacnt),a
0667   EA6A 3E 01       		ld	a,1
0668   EA6C 32 0F FD    		ld	(readop),a		;read operation
0669   EA6F 32 0E FD    		ld	(rsflag),a		;must read data
0670   EA72 3E 02       		ld	a,wrual
0671   EA74 32 10 FD    		ld	(wrtype),a		;treat as unalloc
0672   EA77 C3 E1 EA    		jp	rwoper			;to perform the read
0673   EA7A             
0674   EA7A             
0675   EA7A             ;------------------------------------------------------------------------------------------------
0676   EA7A             write:
0677   EA7A             		;write the selected CP/M sector
0678   EA7A AF          		xor	a		;0 to accumulator
0679   EA7B 32 0F FD    		ld	(readop),a	;not a read operation
0680   EA7E 79          		ld	a,c		;write type in c
0681   EA7F 32 10 FD    		ld	(wrtype),a
0682   EA82 FE 02       		cp	wrual		;write unallocated?
0683   EA84 20 17       		jr	nz,chkuna	;check for unalloc
0684   EA86             ;
0685   EA86             ;		write to unallocated, set parameters
0686   EA86 3E 20       		ld	a,blksiz/128	;next unalloc recs
0687   EA88 32 08 FD    		ld	(unacnt),a
0688   EA8B 3A FC FC    		ld	a,(sekdsk)		;disk to seek
0689   EA8E 32 09 FD    		ld	(unadsk),a		;unadsk = sekdsk
0690   EA91 2A FD FC    		ld	hl,(sektrk)
0691   EA94 22 0A FD    		ld	(unatrk),hl		;unatrk = sectrk
0692   EA97 3A FF FC    		ld	a,(seksec)
0693   EA9A 32 0C FD    		ld	(unasec),a		;unasec = seksec
0694   EA9D             ;
0695   EA9D             chkuna:
0696   EA9D             ;		check for write to unallocated sector
0697   EA9D 3A 08 FD    		ld	a,(unacnt)		;any unalloc remain?
0698   EAA0 B7          		or	a	
0699   EAA1 28 36       		jr	z,alloc		;skip if not
0700   EAA3             ;
0701   EAA3             ;		more unallocated records remain
0702   EAA3 3D          		dec	a		;unacnt = unacnt-1
0703   EAA4 32 08 FD    		ld	(unacnt),a
0704   EAA7 3A FC FC    		ld	a,(sekdsk)		;same disk?
0705   EAAA 21 09 FD    		ld	hl,unadsk
0706   EAAD BE          		cp	(hl)		;sekdsk = unadsk?
0707   EAAE C2 D9 EA    		jp	nz,alloc		;skip if not
0708   EAB1             ;
0709   EAB1             ;		disks are the same
0710   EAB1 21 0A FD    		ld	hl,unatrk
0711   EAB4 CD 78 EB    		call	sektrkcmp	;sektrk = unatrk?
0712   EAB7 C2 D9 EA    		jp	nz,alloc		;skip if not
0713   EABA             ;
0714   EABA             ;		tracks are the same
0715   EABA 3A FF FC    		ld	a,(seksec)		;same sector?
0716   EABD 21 0C FD    		ld	hl,unasec
0717   EAC0 BE          		cp	(hl)		;seksec = unasec?
0718   EAC1 C2 D9 EA    		jp	nz,alloc		;skip if not
0719   EAC4             ;
0720   EAC4             ;		match, move to next sector for future ref
0721   EAC4 34          		inc	(hl)		;unasec = unasec+1
0722   EAC5 7E          		ld	a,(hl)		;end of track?
0723   EAC6 FE 80       		cp	cpmspt		;count CP/M sectors
0724   EAC8 38 09       		jr	c,noovf		;skip if no overflow
0725   EACA             ;
0726   EACA             ;		overflow to next track
0727   EACA 36 00       		ld	(hl),0		;unasec = 0
0728   EACC 2A 0A FD    		ld	hl,(unatrk)
0729   EACF 23          		inc	hl
0730   EAD0 22 0A FD    		ld	(unatrk),hl		;unatrk = unatrk+1
0731   EAD3             ;
0732   EAD3             noovf:
0733   EAD3             		;match found, mark as unnecessary read
0734   EAD3 AF          		xor	a		;0 to accumulator
0735   EAD4 32 0E FD    		ld	(rsflag),a		;rsflag = 0
0736   EAD7 18 08       		jr	rwoper		;to perform the write
0737   EAD9             ;
0738   EAD9             alloc:
0739   EAD9             		;not an unallocated record, requires pre-read
0740   EAD9 AF          		xor	a		;0 to accum
0741   EADA 32 08 FD    		ld	(unacnt),a		;unacnt = 0
0742   EADD 3C          		inc	a		;1 to accum
0743   EADE 32 0E FD    		ld	(rsflag),a		;rsflag = 1
0744   EAE1             
0745   EAE1             ;------------------------------------------------------------------------------------------------
0746   EAE1             rwoper:
0747   EAE1             		;enter here to perform the read/write
0748   EAE1 AF          		xor	a		;zero to accum
0749   EAE2 32 0D FD    		ld	(erflag),a		;no errors (yet)
0750   EAE5 3A FF FC    		ld	a,(seksec)		;compute host sector
0751   EAE8 B7          		or	a		;carry = 0
0752   EAE9 1F          		rra			;shift right
0753   EAEA B7          		or	a		;carry = 0
0754   EAEB 1F          		rra			;shift right
0755   EAEC 32 05 FD    		ld	(sekhst),a		;host sector to seek
0756   EAEF             ;
0757   EAEF             ;		active host sector?
0758   EAEF 21 06 FD    		ld	hl,hstact	;host active flag
0759   EAF2 7E          		ld	a,(hl)
0760   EAF3 36 01       		ld	(hl),1		;always becomes 1
0761   EAF5 B7          		or	a		;was it already?
0762   EAF6 28 21       		jr	z,filhst		;fill host if not
0763   EAF8             ;
0764   EAF8             ;		host buffer active, same as seek buffer?
0765   EAF8 3A FC FC    		ld	a,(sekdsk)
0766   EAFB 21 01 FD    		ld	hl,hstdsk	;same disk?
0767   EAFE BE          		cp	(hl)		;sekdsk = hstdsk?
0768   EAFF 20 11       		jr	nz,nomatch
0769   EB01             ;
0770   EB01             ;		same disk, same track?
0771   EB01 21 02 FD    		ld	hl,hsttrk
0772   EB04 CD 78 EB    		call	sektrkcmp	;sektrk = hsttrk?
0773   EB07 20 09       		jr	nz,nomatch
0774   EB09             ;
0775   EB09             ;		same disk, same track, same buffer?
0776   EB09 3A 05 FD    		ld	a,(sekhst)
0777   EB0C 21 04 FD    		ld	hl,hstsec	;sekhst = hstsec?
0778   EB0F BE          		cp	(hl)
0779   EB10 28 24       		jr	z,match		;skip if match
0780   EB12             ;
0781   EB12             nomatch:
0782   EB12             		;proper disk, but not correct sector
0783   EB12 3A 07 FD    		ld	a,(hstwrt)		;host written?
0784   EB15 B7          		or	a
0785   EB16 C4 20 EC    		call	nz,writehst	;clear host buff
0786   EB19             ;
0787   EB19             filhst:
0788   EB19             		;may have to fill the host buffer
0789   EB19 3A FC FC    		ld	a,(sekdsk)
0790   EB1C 32 01 FD    		ld	(hstdsk),a
0791   EB1F 2A FD FC    		ld	hl,(sektrk)
0792   EB22 22 02 FD    		ld	(hsttrk),hl
0793   EB25 3A 05 FD    		ld	a,(sekhst)
0794   EB28 32 04 FD    		ld	(hstsec),a
0795   EB2B 3A 0E FD    		ld	a,(rsflag)		;need to read?
0796   EB2E B7          		or	a
0797   EB2F C4 F7 EB    		call	nz,readhst		;yes, if 1
0798   EB32 AF          		xor	a		;0 to accum
0799   EB33 32 07 FD    		ld	(hstwrt),a		;no pending write
0800   EB36             ;
0801   EB36             match:
0802   EB36             		;copy data to or from buffer
0803   EB36 3A FF FC    		ld	a,(seksec)		;mask buffer number
0804   EB39 E6 03       		and	secmsk		;least signif bits
0805   EB3B 6F          		ld	l,a		;ready to shift
0806   EB3C 26 00       		ld	h,0		;double count
0807   EB3E 29          		add	hl,hl
0808   EB3F 29          		add	hl,hl
0809   EB40 29          		add	hl,hl
0810   EB41 29          		add	hl,hl
0811   EB42 29          		add	hl,hl
0812   EB43 29          		add	hl,hl
0813   EB44 29          		add	hl,hl
0814   EB45             ;		hl has relative host buffer address
0815   EB45 11 13 FD    		ld	de,hstbuf
0816   EB48 19          		add	hl,de		;hl = host address
0817   EB49 EB          		ex	de,hl			;now in DE
0818   EB4A 2A 11 FD    		ld	hl,(dmaAddr)		;get/put CP/M data
0819   EB4D 0E 80       		ld	c,128		;length of move
0820   EB4F 3A 0F FD    		ld	a,(readop)		;which way?
0821   EB52 B7          		or	a
0822   EB53 20 06       		jr	nz,rwmove		;skip if read
0823   EB55             ;
0824   EB55             ;	write operation, mark and switch direction
0825   EB55 3E 01       		ld	a,1
0826   EB57 32 07 FD    		ld	(hstwrt),a		;hstwrt = 1
0827   EB5A EB          		ex	de,hl			;source/dest swap
0828   EB5B             ;
0829   EB5B             rwmove:
0830   EB5B             		;C initially 128, DE is source, HL is dest
0831   EB5B 1A          		ld	a,(de)		;source character
0832   EB5C 13          		inc	de
0833   EB5D 77          		ld	(hl),a		;to dest
0834   EB5E 23          		inc	hl
0835   EB5F 0D          		dec	c		;loop 128 times
0836   EB60 20 F9       		jr	nz,rwmove
0837   EB62             ;
0838   EB62             ;		data has been moved to/from host buffer
0839   EB62 3A 10 FD    		ld	a,(wrtype)		;write type
0840   EB65 FE 01       		cp	wrdir		;to directory?
0841   EB67 3A 0D FD    		ld	a,(erflag)		;in case of errors
0842   EB6A C0          		ret	nz			;no further processing
0843   EB6B             ;
0844   EB6B             ;		clear host buffer for directory write
0845   EB6B B7          		or	a		;errors?
0846   EB6C C0          		ret	nz			;skip if so
0847   EB6D AF          		xor	a		;0 to accum
0848   EB6E 32 07 FD    		ld	(hstwrt),a		;buffer written
0849   EB71 CD 20 EC    		call	writehst
0850   EB74 3A 0D FD    		ld	a,(erflag)
0851   EB77 C9          		ret
0852   EB78             
0853   EB78             ;------------------------------------------------------------------------------------------------
0854   EB78             ;Utility subroutine for 16-bit compare
0855   EB78             sektrkcmp:
0856   EB78             		;HL = .unatrk or .hsttrk, compare with sektrk
0857   EB78 EB          		ex	de,hl
0858   EB79 21 FD FC    		ld	hl,sektrk
0859   EB7C 1A          		ld	a,(de)		;low byte compare
0860   EB7D BE          		cp	(HL)		;same?
0861   EB7E C0          		ret	nz			;return if not
0862   EB7F             ;		low bytes equal, test high 1s
0863   EB7F 13          		inc	de
0864   EB80 23          		inc	hl
0865   EB81 1A          		ld	a,(de)
0866   EB82 BE          		cp	(hl)	;sets flags
0867   EB83 C9          		ret
0868   EB84             
0869   EB84             ;================================================================================================
0870   EB84             ; Convert track/head/sector into LBA for physical access to the disk
0871   EB84             ;================================================================================================
0872   EB84             setLBAaddr:	
0873   EB84 2A 02 FD    		LD	HL,(hsttrk)
0874   EB87 CB 05       		RLC	L
0875   EB89 CB 05       		RLC	L
0876   EB8B CB 05       		RLC	L
0877   EB8D CB 05       		RLC	L
0878   EB8F CB 05       		RLC	L
0879   EB91 7D          		LD	A,L
0880   EB92 E6 E0       		AND	0E0H
0881   EB94 6F          		LD	L,A
0882   EB95 3A 04 FD    		LD	A,(hstsec)
0883   EB98 85          		ADD	A,L
0884   EB99 32 F8 FC    		LD	(lba0),A
0885   EB9C             
0886   EB9C 2A 02 FD    		LD	HL,(hsttrk)
0887   EB9F CB 0D       		RRC	L
0888   EBA1 CB 0D       		RRC	L
0889   EBA3 CB 0D       		RRC	L
0890   EBA5 7D          		LD	A,L
0891   EBA6 E6 1F       		AND	01FH
0892   EBA8 6F          		LD	L,A
0893   EBA9 CB 04       		RLC	H
0894   EBAB CB 04       		RLC	H
0895   EBAD CB 04       		RLC	H
0896   EBAF CB 04       		RLC	H
0897   EBB1 CB 04       		RLC	H
0898   EBB3 7C          		LD	A,H
0899   EBB4 E6 20       		AND	020H
0900   EBB6 67          		LD	H,A
0901   EBB7 3A 01 FD    		LD	A,(hstdsk)
0902   EBBA CB 07       		RLC	a
0903   EBBC CB 07       		RLC	a
0904   EBBE CB 07       		RLC	a
0905   EBC0 CB 07       		RLC	a
0906   EBC2 CB 07       		RLC	a
0907   EBC4 CB 07       		RLC	a
0908   EBC6 E6 C0       		AND	0C0H
0909   EBC8 84          		ADD	A,H
0910   EBC9 85          		ADD	A,L
0911   EBCA 32 F9 FC    		LD	(lba1),A
0912   EBCD             		
0913   EBCD             
0914   EBCD 3A 01 FD    		LD	A,(hstdsk)
0915   EBD0 CB 0F       		RRC	A
0916   EBD2 CB 0F       		RRC	A
0917   EBD4 E6 03       		AND	03H
0918   EBD6 32 FA FC    		LD	(lba2),A
0919   EBD9             
0920   EBD9             ; LBA Mode using drive 0 = E0
0921   EBD9 3E E0       		LD	a,0E0H
0922   EBDB 32 FB FC    		LD	(lba3),A
0923   EBDE             
0924   EBDE             
0925   EBDE 3A F8 FC    		LD	A,(lba0)
0926   EBE1 D3 B3       		OUT 	(CF_LBA0),A
0927   EBE3             
0928   EBE3 3A F9 FC    		LD	A,(lba1)
0929   EBE6 D3 B4       		OUT 	(CF_LBA1),A
0930   EBE8             
0931   EBE8 3A FA FC    		LD	A,(lba2)
0932   EBEB D3 B5       		OUT 	(CF_LBA2),A
0933   EBED             
0934   EBED 3A FB FC    		LD	A,(lba3)
0935   EBF0 D3 B6       		OUT 	(CF_LBA3),A
0936   EBF2             
0937   EBF2 3E 01       		LD 	A,1
0938   EBF4 D3 B2       		OUT 	(CF_SECCOUNT),A
0939   EBF6             
0940   EBF6 C9          		RET				
0941   EBF7             
0942   EBF7             ;================================================================================================
0943   EBF7             ; Read physical sector from host
0944   EBF7             ;================================================================================================
0945   EBF7             readhst:
0946   EBF7 F5          		PUSH 	AF
0947   EBF8 C5          		PUSH 	BC
0948   EBF9 E5          		PUSH 	HL
0949   EBFA             
0950   EBFA CD 49 EC    		CALL 	cfWait
0951   EBFD             
0952   EBFD CD 84 EB    		CALL 	setLBAaddr
0953   EC00             
0954   EC00 3E 20       		LD 	A,CF_READ_SEC
0955   EC02 D3 B7       		OUT 	(CF_COMMAND),A
0956   EC04             
0957   EC04 CD 49 EC    		CALL 	cfWait
0958   EC07             
0959   EC07 0E 04       		LD 	c,4
0960   EC09 21 13 FD    		LD 	HL,hstbuf
0961   EC0C             rd4secs:
0962   EC0C 06 80       		LD 	b,128
0963   EC0E             rdByte:
0964   EC0E DB B0       		in 	A,(CF_DATA)
0965   EC10 77          		LD 	(HL),A
0966   EC11 23          		iNC 	HL
0967   EC12 05          		dec 	b
0968   EC13 20 F9       		JR 	NZ, rdByte
0969   EC15 0D          		dec 	c
0970   EC16 20 F4       		JR 	NZ,rd4secs
0971   EC18             
0972   EC18 E1          		POP 	HL
0973   EC19 C1          		POP 	BC
0974   EC1A F1          		POP 	AF
0975   EC1B             
0976   EC1B AF          		XOR 	a
0977   EC1C 32 0D FD    		ld	(erflag),a
0978   EC1F C9          		RET
0979   EC20             
0980   EC20             ;================================================================================================
0981   EC20             ; Write physical sector to host
0982   EC20             ;================================================================================================
0983   EC20             writehst:
0984   EC20 F5          		PUSH 	AF
0985   EC21 C5          		PUSH 	BC
0986   EC22 E5          		PUSH 	HL
0987   EC23             
0988   EC23 CD 49 EC    		CALL 	cfWait
0989   EC26             
0990   EC26 CD 84 EB    		CALL 	setLBAaddr
0991   EC29             
0992   EC29 3E 30       		LD 	A,CF_WRITE_SEC
0993   EC2B D3 B7       		OUT 	(CF_COMMAND),A
0994   EC2D             
0995   EC2D CD 49 EC    		CALL 	cfWait
0996   EC30             
0997   EC30 0E 04       		LD 	c,4
0998   EC32 21 13 FD    		LD 	HL,hstbuf
0999   EC35             wr4secs:
1000   EC35 06 80       		LD 	b,128
1001   EC37 7E          wrByte:		LD 	A,(HL)
1002   EC38 D3 B0       		OUT 	(CF_DATA),A
1003   EC3A 23          		iNC 	HL
1004   EC3B 05          		dec 	b
1005   EC3C 20 F9       		JR 	NZ, wrByte
1006   EC3E             
1007   EC3E 0D          		dec 	c
1008   EC3F 20 F4       		JR 	NZ,wr4secs
1009   EC41             
1010   EC41 E1          		POP 	HL
1011   EC42 C1          		POP 	BC
1012   EC43 F1          		POP 	AF
1013   EC44             
1014   EC44 AF          		XOR 	a
1015   EC45 32 0D FD    		ld	(erflag),a
1016   EC48 C9          		RET
1017   EC49             
1018   EC49             ;================================================================================================
1019   EC49             ; Wait for disk to be ready (busy=0,ready=1)
1020   EC49             ;================================================================================================
1021   EC49             cfWait:
1022   EC49 F5          		PUSH 	AF
1023   EC4A             cfWait1:
1024   EC4A DB B7       		in 	A,(CF_STATUS)
1025   EC4C E6 80       		AND 	080H
1026   EC4E FE 80       		cp 	080H
1027   EC50 28 F8       		JR	Z,cfWait1
1028   EC52 F1          		POP 	AF
1029   EC53 C9          		RET
1030   EC54             
1031   EC54             ;================================================================================================
1032   EC54             ; Print (on console) a sequence of characters ending with zero
1033   EC54             ;================================================================================================
1034   EC54             PRINTSEQ:
1035   EC54 E3          		EX 	(SP),HL 		; Push HL and put RET address into HL
1036   EC55 F5          		PUSH 	AF
1037   EC56 C5          		PUSH 	BC
1038   EC57             NEXTCHAR:
1039   EC57 7E          		LD 	A,(HL)
1040   EC58 FE 00       		CP	0
1041   EC5A 28 07       		JR	Z,ENDOFPRINT
1042   EC5C 4F          		LD  	C,A
1043   EC5D CD DC E8    		CALL 	CONOUT		; Print to console
1044   EC60 23          		INC 	HL
1045   EC61 18 F4       		JR	NEXTCHAR
1046   EC63             ENDOFPRINT:
1047   EC63 23          		INC 	HL 			; Get past "null" terminator
1048   EC64 C1          		POP 	BC
1049   EC65 F1          		POP 	AF
1050   EC66 E3          		EX 	(SP),HL 		; Push new RET address on stack and restore HL
1051   EC67 C9          		RET
1052   EC68             
1053   EC68             ;================================================================================================
1054   EC68             ; Data storage
1055   EC68             ;================================================================================================
1056   EC68             dirbuf: 	.ds 128 		;scratch directory area
1057   ECE8             alv00: 		.ds 257			;allocation vector 0
1058   EDE9             alv01: 		.ds 257			;allocation vector 1
1059   EEEA             alv02: 		.ds 257			;allocation vector 2
1060   EFEB             alv03: 		.ds 257			;allocation vector 3
1061   F0EC             alv04: 		.ds 257			;allocation vector 4
1062   F1ED             alv05: 		.ds 257			;allocation vector 5
1063   F2EE             alv06: 		.ds 257			;allocation vector 6
1064   F3EF             alv07: 		.ds 257			;allocation vector 7
1065   F4F0             alv08: 		.ds 257			;allocation vector 8
1066   F5F1             alv09: 		.ds 257			;allocation vector 9
1067   F6F2             alv10: 		.ds 257			;allocation vector 10
1068   F7F3             alv11: 		.ds 257			;allocation vector 11
1069   F8F4             alv12: 		.ds 257			;allocation vector 12
1070   F9F5             alv13: 		.ds 257			;allocation vector 13
1071   FAF6             alv14: 		.ds 257			;allocation vector 14
1072   FBF7             alv15: 		.ds 257			;allocation vector 15
1073   FCF8             
1074   FCF8 00          lba0		.DB	00h
1075   FCF9 00          lba1		.DB	00h
1076   FCFA 00          lba2		.DB	00h
1077   FCFB 00          lba3		.DB	00h
1078   FCFC             
1079   FCFC             sekdsk:		.ds	1		;seek disk number
1080   FCFD             sektrk:		.ds	2		;seek track number
1081   FCFF             seksec:		.ds	2		;seek sector number
1082   FD01             ;
1083   FD01             hstdsk:		.ds	1		;host disk number
1084   FD02             hsttrk:		.ds	2		;host track number
1085   FD04             hstsec:		.ds	1		;host sector number
1086   FD05             ;
1087   FD05             sekhst:		.ds	1		;seek shr secshf
1088   FD06             hstact:		.ds	1		;host active flag
1089   FD07             hstwrt:		.ds	1		;host written flag
1090   FD08             ;
1091   FD08             unacnt:		.ds	1		;unalloc rec cnt
1092   FD09             unadsk:		.ds	1		;last unalloc disk
1093   FD0A             unatrk:		.ds	2		;last unalloc track
1094   FD0C             unasec:		.ds	1		;last unalloc sector
1095   FD0D             ;
1096   FD0D             erflag:		.ds	1		;error reporting
1097   FD0E             rsflag:		.ds	1		;read sector flag
1098   FD0F             readop:		.ds	1		;1 if read operation
1099   FD10             wrtype:		.ds	1		;write operation type
1100   FD11             dmaAddr:	.ds	2		;last dma address
1101   FD13             hstbuf:		.ds	512		;host buffer
1102   FF13             hstBufEnd:	.EQU	$
1103   FF13             
1104   FF13             BUFINI		.EQU	$
1105   FF13             			.DS	050H
1106   FF63             BUFEND		.EQU	$
1107   FF63             WRPTR:		.DS	2			; write pointer
1108   FF65             RDPTR:		.DS	2			; read pointer
1109   FF67             
1110   FF67             			.DS	020h			; Start of BIOS stack area.
1111   FF87             BIOSSTACK:	.EQU	$
1112   FF87             
1113   FF87             biosEnd:	.EQU	$
1114   FF87             
1115   FF87             		.END
tasm: Number of errors = 0
