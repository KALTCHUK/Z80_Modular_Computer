0001   0000             ;==================================================================================
0002   0000             ; Contents of this file are copyright Grant Searle
0003   0000             ; Blocking/unblocking routines are the published version by Digital Research
0004   0000             ; (bugfixed, as found on the web)
0005   0000             ;
0006   0000             ; You have permission to use this for NON COMMERCIAL USE ONLY
0007   0000             ;
0008   0000             ; Customized by Kaltchuk for use with Z80 Modular Computer, december/2020.
0009   0000             ; CP/M is booted from ROM.
0010   0000             ; 04/02/21 - version B corrects a bug in wboot.
0011   0000             ; 09/06/21 - version C sets serial comm to 38.4kbps 
0012   0000             ;            and puts IOBYTE set in cold boot.
0013   0000             ; 12/06/21 - version D fixes a bug with CONIN.
0014   0000             ;==================================================================================
0015   0000             #INCLUDE	"equates.h"
0001+  0000             
0002+  0000             CCP				.EQU	0D000h			; Base of CCP (or Monitor).
0003+  0000             BIOS			.EQU	0E620h			; Base of BIOS.
0004+  0000             ROM_CCP			.EQU	CCP-0C000h		; Base of CCP in ROM
0005+  0000             ROM_BIOS		.EQU	BIOS-0C000h		; Base of BIOS in ROM
0006+  0000             
0007+  0000             ccp				.EQU	CCP
0008+  0000             bios			.EQU	BIOS
0016   0000             
0017   0000             ; Set CP/M low memory data, vector and buffer addresses.
0018   0000             
0019   0000             iobyte			.EQU	03h				; Intel standard I/O definition byte.
0020   0000             userdrv			.EQU	04h				; Current user number and drive.
0021   0000             tpabuf			.EQU	80h				; Default I/O buffer and command line storage.
0022   0000             
0023   0000             blksiz			.equ	4096			;CP/M allocation size
0024   0000             hstsiz			.equ	512				;host disk sector size
0025   0000             hstspt			.equ	32				;host disk sectors/trk
0026   0000             hstblk			.equ	hstsiz/128		;CP/M sects/host buff
0027   0000             cpmspt			.equ	hstblk * hstspt	;CP/M sectors/track
0028   0000             secmsk			.equ	hstblk-1		;sector mask
0029   0000             										;compute sector mask
0030   0000             ;secshf			.equ	2				;log2(hstblk)
0031   0000             	
0032   0000             wrall			.equ	0				;write to allocated
0033   0000             wrdir			.equ	1				;write to directory
0034   0000             wrual			.equ	2				;write to unallocated
0035   0000             
0036   0000             ; MEM card stuff
0037   0000             ROM_RAM0		.EQU	0F0H			; ROM + RAM bank 0
0038   0000             NOROM_RAM0		.EQU	0F1H			; no ROM + RAM bank 0 (full RAM)
0039   0000             ROM_RAM1		.EQU	0F2H			; ROM + RAM bank 1
0040   0000             NOROM_RAM1		.EQU	0F3H			; no ROM + RAM bank 1 (full RAM)
0041   0000             
0042   0000             ; USART card stuff
0043   0000             USART_DAT		.EQU	0D0H			; USART data addr
0044   0000             USART_CMD		.EQU	0D1H			; USART command addr
0045   0000             USART_STA		.EQU	0D1H			; USART status addr
0046   0000             ;UMODE			.EQU	06FH			 8N1 , baud=RxC/64 (RxC=614.4kHz =>  9600bps)
0047   0000             UMODE			.EQU	06EH			; 8N1 , baud=RxC/16 (RxC=614.4kHz => 38400bps)
0048   0000             UCMD0			.EQU	015H			; initial command: Rx enable, Tx enable, reset error flags
0049   0000             
0050   0000             ; LCD card address list.
0051   0000             LCD_ADDR	.EQU	0E0H
0052   0000             DAT_WR		.EQU	LCD_ADDR+1
0053   0000             DAT_RD		.EQU	LCD_ADDR+3
0054   0000             CMD_WR		.EQU	LCD_ADDR
0055   0000             CMD_RD		.EQU	LCD_ADDR+2
0056   0000             
0057   0000             
0058   0000             ; FLASH card stuff
0059   0000             FLASH_ADDR		.EQU	0B0H			; Base I/O address for compact flash card
0060   0000             CF_DATA			.EQU	(FLASH_ADDR+0)	; R/W
0061   0000             CF_FEATURES		.EQU	(FLASH_ADDR+1)	; W
0062   0000             CF_ERROR		.EQU	(FLASH_ADDR+1)	; R
0063   0000             CF_SECCOUNT		.EQU	(FLASH_ADDR+2)	; W
0064   0000             
0065   0000             CF_SECTOR		.EQU	(FLASH_ADDR+3)	; W
0066   0000             CF_CYL_LOW		.EQU	(FLASH_ADDR+4)	; W
0067   0000             CF_CYL_HI		.EQU	(FLASH_ADDR+5)	; W
0068   0000             CF_HEAD			.EQU	(FLASH_ADDR+6)	; W
0069   0000             
0070   0000             CF_LBA0			.EQU	(FLASH_ADDR+3)	; W
0071   0000             CF_LBA1			.EQU	(FLASH_ADDR+4)	; W
0072   0000             CF_LBA2			.EQU	(FLASH_ADDR+5)	; W
0073   0000             CF_LBA3			.EQU	(FLASH_ADDR+6)	; W
0074   0000             
0075   0000             CF_STATUS		.EQU	(FLASH_ADDR+7)	; R
0076   0000             CF_COMMAND		.EQU	(FLASH_ADDR+7)	; W
0077   0000             
0078   0000             ;CF Features
0079   0000             CF_8BIT			.EQU	1
0080   0000             CF_NOCACHE		.EQU	082H
0081   0000             
0082   0000             ;CF Commands
0083   0000             CF_READ_SEC		.EQU	020H
0084   0000             CF_WRITE_SEC	.EQU	030H
0085   0000             CF_SET_FEAT		.EQU 	0EFH
0086   0000             
0087   0000             ;================================================================================================
0088   0000             ; ASCII characters.
0089   0000             ;================================================================================================
0090   0000             NUL			.EQU	00H
0091   0000             LF			.EQU	0AH
0092   0000             FF			.EQU	0CH
0093   0000             CR			.EQU	0DH
0094   0000             DC1			.EQU	11H
0095   0000             DC2			.EQU	12H
0096   0000             DC3			.EQU	13H
0097   0000             DC4			.EQU	14H
0098   0000             ;================================================================================================
0099   0000             
0100   E620             		.ORG	bios					; BIOS origin.
0101   E620             
0102   E620             ;================================================================================================
0103   E620             ; BIOS jump table.
0104   E620             ;================================================================================================
0105   E620 C3 83 E7    		JP	boot						;  0 Initialize.
0106   E623 C3 51 E8    wboote:	JP	wboot						;  1 Warm boot.
0107   E626 C3 D0 E8    		JP	CONST						;  2 Console status.
0108   E629 C3 E3 E8    		JP	CONIN						;  3 Console input.
0109   E62C C3 09 E9    		JP	CONOUT						;  4 Console OUTput.
0110   E62F C3 16 E9    		JP	LIST						;  5 List OUTput.
0111   E632 C3 23 E9    		JP	PUNCH						;  6 punch OUTput.
0112   E635 C3 13 E9    		JP	READER						;  7 Reader input.
0113   E638 C3 75 EA    		JP	home						;  8 Home disk.
0114   E63B C3 4D EA    		JP	seldsk						;  9 Select disk.
0115   E63E C3 81 EA    		JP	settrk						; 10 Select track.
0116   E641 C3 86 EA    		JP	setsec						; 11 Select sector.
0117   E644 C3 8B EA    		JP	setdma						; 12 Set DMA ADDress.
0118   E647 C3 93 EA    		JP	read						; 13 Read 128 bytes.
0119   E64A C3 A7 EA    		JP	write						; 14 Write 128 bytes.
0120   E64D C3 26 E9    		JP	LISTST						; 15 List status.
0121   E650 C3 90 EA    		JP	sectran						; 16 Sector translate.
0122   E653 C3 81 EC    		JP	PRINTSEQ					; not a BIOS function
0123   E656             
0124   E656             ;================================================================================================
0125   E656             ; Disk parameter headers for disk 0 to 15
0126   E656             ;================================================================================================
0127   E656             dpbase:
0128   E656 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb0,0000h,alv00
0128   E65A 00 00 00 00 
0128   E65E 95 EC 56 E7 
0128   E662 00 00 15 ED 
0129   E666 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv01
0129   E66A 00 00 00 00 
0129   E66E 95 EC 65 E7 
0129   E672 00 00 16 EE 
0130   E676 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv02
0130   E67A 00 00 00 00 
0130   E67E 95 EC 65 E7 
0130   E682 00 00 17 EF 
0131   E686 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv03
0131   E68A 00 00 00 00 
0131   E68E 95 EC 65 E7 
0131   E692 00 00 18 F0 
0132   E696 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv04
0132   E69A 00 00 00 00 
0132   E69E 95 EC 65 E7 
0132   E6A2 00 00 19 F1 
0133   E6A6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv05
0133   E6AA 00 00 00 00 
0133   E6AE 95 EC 65 E7 
0133   E6B2 00 00 1A F2 
0134   E6B6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv06
0134   E6BA 00 00 00 00 
0134   E6BE 95 EC 65 E7 
0134   E6C2 00 00 1B F3 
0135   E6C6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv07
0135   E6CA 00 00 00 00 
0135   E6CE 95 EC 65 E7 
0135   E6D2 00 00 1C F4 
0136   E6D6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv08
0136   E6DA 00 00 00 00 
0136   E6DE 95 EC 65 E7 
0136   E6E2 00 00 1D F5 
0137   E6E6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv09
0137   E6EA 00 00 00 00 
0137   E6EE 95 EC 65 E7 
0137   E6F2 00 00 1E F6 
0138   E6F6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv10
0138   E6FA 00 00 00 00 
0138   E6FE 95 EC 65 E7 
0138   E702 00 00 1F F7 
0139   E706 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv11
0139   E70A 00 00 00 00 
0139   E70E 95 EC 65 E7 
0139   E712 00 00 20 F8 
0140   E716 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv12
0140   E71A 00 00 00 00 
0140   E71E 95 EC 65 E7 
0140   E722 00 00 21 F9 
0141   E726 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv13
0141   E72A 00 00 00 00 
0141   E72E 95 EC 65 E7 
0141   E732 00 00 22 FA 
0142   E736 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv14
0142   E73A 00 00 00 00 
0142   E73E 95 EC 65 E7 
0142   E742 00 00 23 FB 
0143   E746 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpbLast,0000h,alv15
0143   E74A 00 00 00 00 
0143   E74E 95 EC 74 E7 
0143   E752 00 00 24 FC 
0144   E756             
0145   E756             ; First drive has a reserved track for CP/M
0146   E756             dpb0:
0147   E756 80 00       		.DW 128 ;SPT - sectors per track
0148   E758 05          		.DB 5   ;BSH - block shift factor
0149   E759 1F          		.DB 31  ;BLM - block mask
0150   E75A 01          		.DB 1   ;EXM - Extent mask
0151   E75B FB 07       		.DW 2043 ; (2047-4) DSM - Storage size (blocks - 1)
0152   E75D FF 01       		.DW 511 ;DRM - Number of directory entries - 1
0153   E75F F0          		.DB 240 ;AL0 - 1 bit set per directory block
0154   E760 00          		.DB 0   ;AL1 -            "
0155   E761 00 00       		.DW 0   ;CKS - DIR check vector size (DRM+1)/4 (0=fixed disk)
0156   E763 01 00       		.DW 1   ;ON  - Reserved tracks
0157   E765             
0158   E765             dpb:
0159   E765 80 00       		.DW 128 ;SPT - sectors per track
0160   E767 05          		.DB 5   ;BSH - block shift factor
0161   E768 1F          		.DB 31  ;BLM - block mask
0162   E769 01          		.DB 1   ;EXM - Extent mask
0163   E76A FF 07       		.DW 2047 ;DSM - Storage size (blocks - 1)
0164   E76C FF 01       		.DW 511 ;DRM - Number of directory entries - 1
0165   E76E F0          		.DB 240 ;AL0 - 1 bit set per directory block
0166   E76F 00          		.DB 0   ;AL1 -            "
0167   E770 00 00       		.DW 0   ;CKS - DIR check vector size (DRM+1)/4 (0=fixed disk)
0168   E772 00 00       		.DW 0   ;OFF - Reserved tracks
0169   E774             
0170   E774             ; Last drive is smaller because CF is never full 64MB or 128MB
0171   E774             dpbLast:
0172   E774 80 00       		.DW 128 ;SPT - sectors per track
0173   E776 05          		.DB 5   ;BSH - block shift factor
0174   E777 1F          		.DB 31  ;BLM - block mask
0175   E778 01          		.DB 1   ;EXM - Extent mask
0176   E779 FF 01       		.DW 511 ;DSM - Storage size (blocks - 1)  ; 511 = 2MB (for 128MB card), 1279 = 5MB (for 64MB card)
0177   E77B FF 01       		.DW 511 ;DRM - Number of directory entries - 1
0178   E77D F0          		.DB 240 ;AL0 - 1 bit set per directory block
0179   E77E 00          		.DB 0   ;AL1 -            "
0180   E77F 00 00       		.DW 0   ;CKS - DIR check vector size (DRM+1)/4 (0=fixed disk)
0181   E781 00 00       		.DW 0   ;OFF - Reserved tracks
0182   E783             
0183   E783             ;================================================================================================
0184   E783             ; Cold boot
0185   E783             ;================================================================================================
0186   E783             
0187   E783             boot:
0188   E783 F3          		DI						; Disable interrupts.
0189   E784 31 B4 FF    		LD	SP,BIOSSTACK		; Set default stack.
0190   E787             
0191   E787 D3 F1       		OUT (NOROM_RAM0),A		; Turn off ROM. Doesn't matter what we output
0192   E789             
0193   E789 CD B9 E8    		CALL USARTINIT			; Initialize USART
0194   E78C             
0195   E78C 01 40 FF    		LD	BC,BUFINI			; Initialize pointers for USART buffer
0196   E78F ED 43 90 FF 		LD	(WRPTR),BC
0197   E793 ED 43 92 FF 		LD	(RDPTR),BC
0198   E797             
0199   E797 CD 76 EC    		CALL	cfWait			; Initialize FLASH
0200   E79A 3E 01       		LD 	A,CF_8BIT			; Set IDE to be 8bit
0201   E79C D3 B1       		OUT	(CF_FEATURES),A
0202   E79E 3E EF       		LD	A,CF_SET_FEAT
0203   E7A0 D3 B7       		OUT	(CF_COMMAND),A
0204   E7A2             
0205   E7A2 CD 76 EC    		CALL	cfWait
0206   E7A5 3E 82       		LD 	A,CF_NOCACHE		; No write cache
0207   E7A7 D3 B1       		OUT	(CF_FEATURES),A
0208   E7A9 3E EF       		LD	A,CF_SET_FEAT
0209   E7AB D3 B7       		OUT	(CF_COMMAND),A
0210   E7AD             
0211   E7AD AF          		XOR	A
0212   E7AE 32 04 00    		LD	(userdrv),A			; set drive byte to A:
0213   E7B1 32 03 00    		LD	(iobyte),A			; Set IOBYTE to 00
0214   E7B4             
0215   E7B4 01 40 FF    		LD	BC,BUFINI			; reset serial input buffer
0216   E7B7 ED 43 90 FF 		LD	(WRPTR),BC
0217   E7BB ED 43 92 FF 		LD	(RDPTR),BC
0218   E7BF             
0219   E7BF             
0220   E7BF CD 81 EC    		CALL	PRINTSEQ
0221   E7C2 0D 0A 5A 38 		.DB CR,LF,"Z80 Modular Computer by Kaltchuk 2020.",CR,LF
0221   E7C6 30 20 4D 6F 
0221   E7CA 64 75 6C 61 
0221   E7CE 72 20 43 6F 
0221   E7D2 6D 70 75 74 
0221   E7D6 65 72 20 62 
0221   E7DA 79 20 4B 61 
0221   E7DE 6C 74 63 68 
0221   E7E2 75 6B 20 32 
0221   E7E6 30 32 30 2E 
0221   E7EA 0D 0A 
0222   E7EC 42 49 4F 53 		.DB "BIOS 1.0C - 128MB Compact Flash, LCD drive.",CR,LF
0222   E7F0 20 31 2E 30 
0222   E7F4 43 20 2D 20 
0222   E7F8 31 32 38 4D 
0222   E7FC 42 20 43 6F 
0222   E800 6D 70 61 63 
0222   E804 74 20 46 6C 
0222   E808 61 73 68 2C 
0222   E80C 20 4C 43 44 
0222   E810 20 64 72 69 
0222   E814 76 65 2E 0D 
0222   E818 0A 
0223   E819 43 50 2F 4D 		.DB "CP/M 2.2+ Copyright 1979 (c) by Digital Research",CR,LF,CR,LF,0
0223   E81D 20 32 2E 32 
0223   E821 2B 20 43 6F 
0223   E825 70 79 72 69 
0223   E829 67 68 74 20 
0223   E82D 31 39 37 39 
0223   E831 20 28 63 29 
0223   E835 20 62 79 20 
0223   E839 44 69 67 69 
0223   E83D 74 61 6C 20 
0223   E841 52 65 73 65 
0223   E845 61 72 63 68 
0223   E849 0D 0A 0D 0A 
0223   E84D 00 
0224   E84E             
0225   E84E C3 64 E8    		JP	gocpm
0226   E851             
0227   E851             ;================================================================================================
0228   E851             ; Warm boot
0229   E851             ;================================================================================================
0230   E851             
0231   E851             wboot:
0232   E851 F3          		DI						; Disable interrupts.
0233   E852 31 B4 FF    		LD	SP,BIOSSTACK		; Set default stack.
0234   E855             
0235   E855 D3 F0       		OUT (ROM_RAM0),A		; Turn on ROM. Doesn't matter what we output
0236   E857             
0237   E857 01 00 16    		LD	BC,01600H			; Copy CP/M ROM (01000h) to RAM (0D000h)
0238   E85A 11 00 D0    		LD	DE,CCP				; Don't copy the BIOS!!!
0239   E85D 21 00 10    		LD	HL,ROM_CCP
0240   E860 ED B0       		LDIR
0241   E862             
0242   E862 D3 F1       		OUT (NOROM_RAM0),A		; Turn off ROM. Doesn't matter what we output
0243   E864             
0244   E864             
0245   E864             ;================================================================================================
0246   E864             ; Common code for cold and warm boot
0247   E864             ;================================================================================================
0248   E864             
0249   E864             gocpm:
0250   E864 AF          		XOR	A					; 0 to accumulator
0251   E865 32 33 FD    		LD	(hstact),A			; host buffer inactive
0252   E868 32 35 FD    		LD	(unacnt),A			; clear unalloc count
0253   E86B             
0254   E86B 21 80 00    		LD	HL,tpabuf			; ADDress of BIOS DMA buffer.
0255   E86E 22 3E FD    		LD	(dmaAddr),HL
0256   E871             		
0257   E871 3E C3       		LD	A,0C3h				; Opcode for 'JP'.
0258   E873 32 00 00    		LD	(00h),A				; Load at start of RAM.
0259   E876 21 23 E6    		LD	HL,wboote			; ADDress of jump for a warm boot.
0260   E879 22 01 00    		LD	(01h),HL
0261   E87C 32 05 00    		LD	(05h),A				; Opcode for 'JP'.
0262   E87F 2A 1E E6    		LD	HL,(BIOS-2)			; ADDress of jump for the BDOS.
0263   E882 22 06 00    		LD	(06h),HL
0264   E885 32 38 00    		LD	(038H),A			; at 038h write "JP UINT"
0265   E888 21 98 E8    		LD	HL,UINT				; which is the interrupt routine to catch incoming
0266   E88B 22 39 00    		LD	(039H),HL			; character on the USART
0267   E88E 3A 04 00    		LD	A,(userdrv)			; Save new drive number (0).
0268   E891 4F          		LD	C,A					; Pass drive number in C.
0269   E892             
0270   E892 ED 56       		IM	1
0271   E894 FB          		EI
0272   E895             	
0273   E895 C3 00 D0    		JP	ccp					; Start CP/M by jumping to the CCP.
0274   E898             
0275   E898             ;================================================================================================
0276   E898             ; Interrupt routine for USART
0277   E898             ;================================================================================================
0278   E898             UINT:
0279   E898 C5          		PUSH	BC
0280   E899 E5          		PUSH	HL
0281   E89A             
0282   E89A DB D0       		IN	A,(USART_DAT)		; read incoming byte
0283   E89C             ;		OUT	(USART_DAT),A		; send character
0284   E89C ED 4B 90 FF 		LD	BC,(WRPTR)
0285   E8A0 02          		LD	(BC),A
0286   E8A1 03          		INC	BC
0287   E8A2 21 90 FF    		LD	HL,BUFEND
0288   E8A5 37          		SCF
0289   E8A6 3F          		CCF
0290   E8A7 ED 42       		SBC	HL,BC
0291   E8A9 20 03       		JR	NZ,EOINT
0292   E8AB 01 40 FF    		LD	BC,BUFINI
0293   E8AE ED 43 90 FF EOINT:	LD	(WRPTR),BC
0294   E8B2             
0295   E8B2 E1          		POP	HL
0296   E8B3 C1          		POP	BC
0297   E8B4 ED 56       		IM	1
0298   E8B6 FB          		EI
0299   E8B7 ED 4D       		RETI
0300   E8B9             
0301   E8B9             ;================================================================================================
0302   E8B9             ; Initialize USART
0303   E8B9             ;================================================================================================
0304   E8B9             USARTINIT:
0305   E8B9 3E 00       		LD 	A,0					; Worst case init: put in SYNC mode, 
0306   E8BB D3 D1       		OUT	(USART_CMD),A		; send 2 dummy 00 sync chars and reset
0307   E8BD 00          		NOP
0308   E8BE D3 D1       		OUT	(USART_CMD),A
0309   E8C0 00          		NOP
0310   E8C1 D3 D1       		OUT	(USART_CMD),A
0311   E8C3 3E 40       		LD 	A,040H				; Reset USART
0312   E8C5 D3 D1       		OUT	(USART_CMD),A
0313   E8C7 3E 6E       		LD 	A,UMODE				; Set USART mode
0314   E8C9 D3 D1       		OUT	(USART_CMD),A
0315   E8CB 3E 15       		LD 	A,UCMD0				; Set USART initial command
0316   E8CD D3 D1       		OUT	(USART_CMD),A
0317   E8CF C9          		RET
0318   E8D0             
0319   E8D0             ;================================================================================================
0320   E8D0             ; Console I/O routines
0321   E8D0             ;================================================================================================
0322   E8D0             ;================================================================================================
0323   E8D0             ; Console Status (Return A=0FFh if character waiting. Otherwise, A=0)
0324   E8D0             ;================================================================================================
0325   E8D0             CONST:
0326   E8D0 C5          		PUSH	BC
0327   E8D1 E5          		PUSH	HL
0328   E8D2 ED 4B 90 FF 		LD	BC,(WRPTR)
0329   E8D6 2A 92 FF    		LD	HL,(RDPTR)
0330   E8D9 AF          		XOR	A					; Reset carry flag
0331   E8DA ED 42       		SBC	HL,BC
0332   E8DC 28 02       		JR	Z,CONVOID
0333   E8DE 3E FF       		LD	A,0FFH
0334   E8E0             CONVOID:
0335   E8E0 E1          		POP	HL
0336   E8E1 C1          		POP	BC
0337   E8E2 C9          	  	RET
0338   E8E3             
0339   E8E3             ;================================================================================================
0340   E8E3             ; Console Input (Wait for input and return character in A)
0341   E8E3             ;================================================================================================
0342   E8E3             CONIN:
0343   E8E3 C5          		PUSH	BC	
0344   E8E4 E5          		PUSH	HL	
0345   E8E5 CD D0 E8    AGAIN:	CALL	CONST
0346   E8E8 FE 00       		CP	0
0347   E8EA 28 F9       		JR	Z,AGAIN			; Keep trying till we receive something
0348   E8EC F3          		DI
0349   E8ED ED 4B 92 FF 		LD	BC,(RDPTR)
0350   E8F1 0A          		LD	A,(BC)
0351   E8F2 03          		INC	BC
0352   E8F3 21 90 FF    		LD	HL,BUFEND
0353   E8F6 37          		SCF
0354   E8F7 3F          		CCF
0355   E8F8 ED 42       		SBC	HL,BC
0356   E8FA 20 03       		JR	NZ,EOCONIN
0357   E8FC 01 40 FF    		LD	BC,BUFINI
0358   E8FF ED 43 92 FF EOCONIN:	LD	(RDPTR),BC
0359   E903 ED 56       		IM	1
0360   E905 FB          		EI
0361   E906 E1          		POP	HL
0362   E907 C1          		POP	BC
0363   E908 C9          		RET					; Char read returns in A
0364   E909             
0365   E909             ;================================================================================================
0366   E909             ; Console Output (Send character in reg C)
0367   E909             ;================================================================================================
0368   E909             CONOUT:
0369   E909 DB D1       		IN	A,(USART_STA)		; read USART status byte
0370   E90B E6 04       		AND	04H				; get only the TxEMPTY bit
0371   E90D 28 FA       		JR	Z,CONOUT
0372   E90F 79          		LD	A,C
0373   E910 D3 D0       		OUT	(USART_DAT),A		; send character
0374   E912 C9          		RET
0375   E913             
0376   E913             ;================================================================================================
0377   E913             ; Reader Input
0378   E913             ;================================================================================================
0379   E913 C3 E3 E8    READER:	JP CONIN	
0380   E916             
0381   E916             ;================================================================================================
0382   E916             ; List Output
0383   E916             ;================================================================================================
0384   E916 3A 03 00    LIST:		LD	A,(iobyte)
0385   E919 E6 C0       			AND	0C0H			; Get LIST portion of IOBYTE
0386   E91B FE C0       			CP	0C0H
0387   E91D CA 37 E9    			JP	Z,LCD
0388   E920 C3 09 E9    			JP CONOUT
0389   E923             
0390   E923             ;================================================================================================
0391   E923             ; Punch Output
0392   E923             ;================================================================================================
0393   E923 C3 09 E9    PUNCH:	JP CONOUT	
0394   E926             
0395   E926             ;================================================================================================
0396   E926             ; List Status (List = Console)
0397   E926             ;================================================================================================
0398   E926 3A 03 00    LISTST:		LD	A,(iobyte)
0399   E929 E6 C0       			AND	0C0H			; Get LIST portion of IOBYTE
0400   E92B FE C0       			CP	0C0H
0401   E92D CA 33 E9    			JP	Z,LCDST
0402   E930 C3 D0 E8    			JP CONST
0403   E933             
0404   E933             ;================================================================================================
0405   E933             ; LCD STATUS. Return A=LCD_card_addr. A=0 if no card initialized.
0406   E933             ;================================================================================================
0407   E933 CD A6 E9    LCDST:		CALL BWAIT
0408   E936 C9          			RET
0409   E937             
0410   E937             ;================================================================================================
0411   E937             ; LCD OUTPUT. Send C to LCD, if C>1FH (printable range). 
0412   E937             ; Accepts also LF, CR and FF (Form Feed = clear LCD).
0413   E937             ; If C=DC1, initialize LCD card.
0414   E937             ; If C=DC2, position cursor as indicated in regB.
0415   E937             ;================================================================================================
0416   E937 E5          LCD:		PUSH HL
0417   E938 79          			LD	A,C
0418   E939 FE 14       			CP	20
0419   E93B FA 43 E9    			JP	M,ASCIILO
0420   E93E CD B8 E9    			CALL LCDPUT
0421   E941 18 19       			JR	GETOUT
0422   E943 FE 0A       ASCIILO:	CP	LF
0423   E945 CC D8 E9    			CALL Z,LCDLF			; Line Feed
0424   E948 FE 0D       			CP	CR
0425   E94A CC CC E9    			CALL Z,LCDCR			; Carriage Return
0426   E94D FE 0C       			CP	FF
0427   E94F CC AE E9    			CALL Z,LCDCLEAR			; Form Feed, which is a 'clear LCD'
0428   E952 FE 11       			CP	DC1
0429   E954 CC 5E E9    			CALL Z,LCDINIT			; Initialize LCD card.
0430   E957 FE 12       			CP	DC2
0431   E959 CC C1 E9    			CALL Z,LCDPOS			; Cursor reposition request. New position in regB
0432   E95C E1          GETOUT:		POP	HL
0433   E95D C9          			RET
0434   E95E             
0435   E95E             ;================================================================================================
0436   E95E             ; Initialize LCD
0437   E95E             ;================================================================================================
0438   E95E 06 0F       LCDINIT:	LD	B,15			; wait 15ms
0439   E960 CD 29 EA    			CALL DELAYMS
0440   E963 3E 30       			LD	A,030H			; write command 030h
0441   E965 D3 E0       			OUT	(CMD_WR),A
0442   E967 06 05       			LD	B,5				; wait 5ms
0443   E969 CD 29 EA    			CALL DELAYMS
0444   E96C 3E 30       			LD	A,030H			; write command 030h
0445   E96E D3 E0       			OUT	(CMD_WR),A
0446   E970 0E 14       			LD	C,20			; wait (5X20) 100us
0447   E972 CD 35 EA    			CALL DELAY5US
0448   E975 3E 30       			LD	A,030H			; write command 030h
0449   E977 D3 E0       			OUT	(CMD_WR),A
0450   E979 0E 14       			LD	C,20			; wait (5X20) 100us
0451   E97B CD 35 EA    			CALL DELAY5US
0452   E97E 3E 38       			LD	A,038H			; write command 038h = function set (8-bits, 2-lines, 5x7dots)
0453   E980 D3 E0       			OUT	(CMD_WR),A
0454   E982 CD A6 E9    			CALL BWAIT
0455   E985 3E 08       			LD	A,08H			; write command 08h = display (off)
0456   E987 D3 E0       			OUT	(CMD_WR),A
0457   E989 CD A6 E9    			CALL BWAIT
0458   E98C 3E 01       			LD	A,01H			; write command 01h = clear display
0459   E98E D3 E0       			OUT	(CMD_WR),A
0460   E990 CD A6 E9    			CALL BWAIT
0461   E993 3E 06       			LD	A,06H			; write command 06h = entry mode (increment)
0462   E995 D3 E0       			OUT	(CMD_WR),A
0463   E997 CD A6 E9    			CALL BWAIT
0464   E99A 3E 0C       			LD	A,0CH			; write command 0Ch = display (on)
0465   E99C D3 E0       			OUT	(CMD_WR),A
0466   E99E 3E E0       			LD	A,LCD_ADDR
0467   E9A0 32 3C EA    			LD	(LCDSTATUS),A
0468   E9A3 3E 00       			LD	A,0
0469   E9A5 C9          			RET
0470   E9A6             
0471   E9A6             ;================================================================================================
0472   E9A6             ; Wait until Busy flag = 0
0473   E9A6             ;================================================================================================
0474   E9A6 DB E2       BWAIT:		IN	A,(CMD_RD)
0475   E9A8 07          			RLCA
0476   E9A9 38 FB       			JR	C,BWAIT
0477   E9AB CB 3F       			SRL	A
0478   E9AD C9          			RET
0479   E9AE             			
0480   E9AE             ;================================================================================================
0481   E9AE             ; Clear LCD and goto line 1, column 1.
0482   E9AE             ;================================================================================================
0483   E9AE CD A6 E9    LCDCLEAR:	CALL BWAIT
0484   E9B1 3E 01       			LD	A,01H
0485   E9B3 D3 E0       			OUT	(CMD_WR),A
0486   E9B5 3E 00       			LD	A,0
0487   E9B7 C9          			RET
0488   E9B8             
0489   E9B8             ;================================================================================================
0490   E9B8             ; Send to LCD char in regC. Print at current position (what ever it is)
0491   E9B8             ;================================================================================================
0492   E9B8 CD A6 E9    LCDPUT:		CALL BWAIT
0493   E9BB 79          			LD	A,C	
0494   E9BC D3 E1       			OUT	(DAT_WR),A
0495   E9BE 3E 00       			LD	A,0
0496   E9C0 C9          			RET
0497   E9C1             
0498   E9C1             ;================================================================================================
0499   E9C1             ; Position LCD cursor at regB.
0500   E9C1             ;================================================================================================
0501   E9C1 CD A6 E9    LCDPOS:		CALL BWAIT
0502   E9C4 78          			LD	A,B
0503   E9C5 F6 80       			OR	80H
0504   E9C7 D3 E0       			OUT	(CMD_WR),A
0505   E9C9 3E 00       			LD	A,0
0506   E9CB C9          			RET
0507   E9CC             
0508   E9CC             ;================================================================================================
0509   E9CC             ; Do CR (Carriage Return)
0510   E9CC             ;================================================================================================
0511   E9CC CD A6 E9    LCDCR:		CALL BWAIT
0512   E9CF E6 F0       			AND	0F0H			; Keep line info, set column to 1.
0513   E9D1 F6 80       			OR	080H
0514   E9D3 D3 E0       			OUT	(CMD_WR),A
0515   E9D5 3E 00       			LD	A,0
0516   E9D7 C9          			RET
0517   E9D8             			
0518   E9D8             ;================================================================================================
0519   E9D8             ; Do LF (Line Feed)
0520   E9D8             ;================================================================================================
0521   E9D8 CD A6 E9    LCDLF:		CALL BWAIT			; regA holds LCD address counter
0522   E9DB 57          			LD	D,A
0523   E9DC E6 40       			AND	40H				; get only the 7th bit to see on which line the cursor is.
0524   E9DE 28 26       			JR	Z,LN11
0525   E9E0 CD A6 E9    			CALL BWAIT
0526   E9E3 3E C0       			LD	A,0C0H
0527   E9E5 D3 E0       			OUT	(CMD_WR),A		; set addr counter to source position (2,1)
0528   E9E7 21 3D EA    			LD	HL,BUF
0529   E9EA 06 10       			LD	B,10H
0530   E9EC CD A6 E9    NEWSRC:		CALL BWAIT
0531   E9EF DB E3       			IN	A,(DAT_RD)		; get data from source position
0532   E9F1 77          			LD	(HL),A			; Store char in buffer
0533   E9F2 23          			INC	HL
0534   E9F3 10 F7       			DJNZ NEWSRC
0535   E9F5 CD AE E9    			CALL LCDCLEAR
0536   E9F8 21 3D EA    			LD	HL,BUF
0537   E9FB 06 10       			LD	B,10H
0538   E9FD CD A6 E9    NEWTGT:		CALL BWAIT
0539   EA00 7E          			LD	A,(HL)
0540   EA01 23          			INC	HL
0541   EA02 D3 E1       			OUT	(DAT_WR),A
0542   EA04 10 F7       			DJNZ NEWTGT
0543   EA06             
0544   EA06 CD A6 E9    LN11:		CALL BWAIT
0545   EA09 7A          			LD	A,D
0546   EA0A E6 0F       			AND	0FH
0547   EA0C F6 C0       			OR	0C0H
0548   EA0E D3 E0       			OUT	(CMD_WR),A
0549   EA10 3E 00       			LD	A,0
0550   EA12 C9          			RET
0551   EA13             
0552   EA13             ;================================================================================================
0553   EA13             ; Delay X seconds, with X passed on reg B
0554   EA13             ;================================================================================================
0555   EA13 C5          DELAYS:		PUSH BC
0556   EA14 E5          			PUSH HL
0557   EA15 21 8F 02    LOOP0:		LD	HL,655		;2.5				\
0558   EA18 0E FF       LOOP1:		LD	C,255		;1.75	\			|
0559   EA1A 0D          LOOP2:		DEC	C			;1		|			|
0560   EA1B 00          			NOP				;1		| t=6C+0.5	| 
0561   EA1C 79          			LD	A,C			;1		|			| t=HL(6C+6.5)+1.25
0562   EA1D 20 FB       			JR	NZ,LOOP2	;3/1.75	/			|
0563   EA1F 2B          			DEC	HL			;1					| with HL=655 and c=255, t=1.006sec (WOW!!!)
0564   EA20 7C          			LD	A,H			;1					|
0565   EA21 B5          			OR	L			;1					|
0566   EA22 20 F4       			JR	NZ,LOOP1	;3/1.75				/
0567   EA24 10 EF       			DJNZ LOOP0		;3.25/2
0568   EA26 E1          			POP	HL
0569   EA27 C1          			POP	BC
0570   EA28 C9          			RET
0571   EA29             
0572   EA29             ;================================================================================================
0573   EA29             ; Delay X miliseconds, with X passed on reg B
0574   EA29             ;================================================================================================
0575   EA29 C5          DELAYMS:	PUSH BC
0576   EA2A 0E C8       DECB:		LD	C,0C8H
0577   EA2C 00          DECC:		NOP
0578   EA2D 0D          			DEC	C
0579   EA2E 20 FC       			JR	NZ,DECC
0580   EA30 05          			DEC	B
0581   EA31 20 F7       			JR	NZ,DECB
0582   EA33 C1          			POP	BC
0583   EA34 C9          			RET
0584   EA35             
0585   EA35             ;================================================================================================
0586   EA35             ; Delay 5*X microseconds, with X passed on reg C
0587   EA35             ;================================================================================================
0588   EA35 C5          DELAY5US:	PUSH BC
0589   EA36 00          DEC:		NOP
0590   EA37 0D          			DEC	C
0591   EA38 20 FC       			JR	NZ,DEC
0592   EA3A C1          			POP	BC
0593   EA3B C9          			RET
0594   EA3C             
0595   EA3C             ;================================================================================================
0596   EA3C 00          LCDSTATUS	.DB	0			; After LCD has been initialized, it will hold card addr.
0597   EA3D             BUF			.DS	10H			; Buffer for Line Feed operation
0598   EA4D             ;================================================================================================
0599   EA4D             ; Disk processing entry points
0600   EA4D             ;================================================================================================
0601   EA4D             seldsk:
0602   EA4D 21 00 00    		LD	HL,$0000
0603   EA50 79          		LD	A,C
0604   EA51 FE 10       		CP	16		; 16 for 128MB disk, 8 for 64MB disk
0605   EA53 38 0D       		jr	C,chgdsk	; if invalid drive will give BDOS error
0606   EA55 3A 04 00    		LD	A,(userdrv)	; so set the drive back to a:
0607   EA58 B9          		CP	C		; If the default disk is not the same as the
0608   EA59 C0          		RET	NZ		; selected drive then return, 
0609   EA5A AF          		XOR	A		; else reset default back to a:
0610   EA5B 32 04 00    		LD	(userdrv),A	; otherwise will be stuck in a loop
0611   EA5E 32 29 FD    		LD	(sekdsk),A
0612   EA61 C9          		ret
0613   EA62             
0614   EA62 32 29 FD    chgdsk:		LD 	(sekdsk),A
0615   EA65 CB 07       		RLC	a		;*2
0616   EA67 CB 07       		RLC	a		;*4
0617   EA69 CB 07       		RLC	a		;*8
0618   EA6B CB 07       		RLC	a		;*16
0619   EA6D 21 56 E6    		LD 	HL,dpbase
0620   EA70 06 00       		LD	b,0
0621   EA72 4F          		LD	c,A	
0622   EA73 09          		ADD	HL,BC
0623   EA74             
0624   EA74 C9          		RET
0625   EA75             
0626   EA75             ;------------------------------------------------------------------------------------------------
0627   EA75             home:
0628   EA75 3A 34 FD    		ld	a,(hstwrt)	;check for pending write
0629   EA78 B7          		or	a
0630   EA79 20 03       		jr	nz,homed
0631   EA7B 32 33 FD    		ld	(hstact),a	;clear host active flag
0632   EA7E             homed:
0633   EA7E 01 00 00    		LD 	BC,0000h
0634   EA81             
0635   EA81             ;------------------------------------------------------------------------------------------------
0636   EA81 ED 43 2A FD settrk:		LD 	(sektrk),BC	; Set track passed from BDOS in register BC.
0637   EA85 C9          		RET
0638   EA86             
0639   EA86             ;------------------------------------------------------------------------------------------------
0640   EA86 ED 43 2C FD setsec:		LD 	(seksec),BC	; Set sector passed from BDOS in register BC.
0641   EA8A C9          		RET
0642   EA8B             
0643   EA8B             ;------------------------------------------------------------------------------------------------
0644   EA8B ED 43 3E FD setdma:		LD 	(dmaAddr),BC	; Set DMA ADDress given by registers BC.
0645   EA8F C9          		RET
0646   EA90             
0647   EA90             ;------------------------------------------------------------------------------------------------
0648   EA90 C5          sectran:	PUSH 	BC
0649   EA91 E1          		POP 	HL
0650   EA92 C9          		RET
0651   EA93             
0652   EA93             ;------------------------------------------------------------------------------------------------
0653   EA93             read:
0654   EA93             		;read the selected CP/M sector
0655   EA93 AF          		xor	a
0656   EA94 32 35 FD    		ld	(unacnt),a
0657   EA97 3E 01       		ld	a,1
0658   EA99 32 3C FD    		ld	(readop),a		;read operation
0659   EA9C 32 3B FD    		ld	(rsflag),a		;must read data
0660   EA9F 3E 02       		ld	a,wrual
0661   EAA1 32 3D FD    		ld	(wrtype),a		;treat as unalloc
0662   EAA4 C3 0E EB    		jp	rwoper			;to perform the read
0663   EAA7             
0664   EAA7             
0665   EAA7             ;------------------------------------------------------------------------------------------------
0666   EAA7             write:
0667   EAA7             		;write the selected CP/M sector
0668   EAA7 AF          		xor	a		;0 to accumulator
0669   EAA8 32 3C FD    		ld	(readop),a	;not a read operation
0670   EAAB 79          		ld	a,c		;write type in c
0671   EAAC 32 3D FD    		ld	(wrtype),a
0672   EAAF FE 02       		cp	wrual		;write unallocated?
0673   EAB1 20 17       		jr	nz,chkuna	;check for unalloc
0674   EAB3             ;
0675   EAB3             ;		write to unallocated, set parameters
0676   EAB3 3E 20       		ld	a,blksiz/128	;next unalloc recs
0677   EAB5 32 35 FD    		ld	(unacnt),a
0678   EAB8 3A 29 FD    		ld	a,(sekdsk)		;disk to seek
0679   EABB 32 36 FD    		ld	(unadsk),a		;unadsk = sekdsk
0680   EABE 2A 2A FD    		ld	hl,(sektrk)
0681   EAC1 22 37 FD    		ld	(unatrk),hl		;unatrk = sectrk
0682   EAC4 3A 2C FD    		ld	a,(seksec)
0683   EAC7 32 39 FD    		ld	(unasec),a		;unasec = seksec
0684   EACA             ;
0685   EACA             chkuna:
0686   EACA             ;		check for write to unallocated sector
0687   EACA 3A 35 FD    		ld	a,(unacnt)		;any unalloc remain?
0688   EACD B7          		or	a	
0689   EACE 28 36       		jr	z,alloc		;skip if not
0690   EAD0             ;
0691   EAD0             ;		more unallocated records remain
0692   EAD0 3D          		dec	a		;unacnt = unacnt-1
0693   EAD1 32 35 FD    		ld	(unacnt),a
0694   EAD4 3A 29 FD    		ld	a,(sekdsk)		;same disk?
0695   EAD7 21 36 FD    		ld	hl,unadsk
0696   EADA BE          		cp	(hl)		;sekdsk = unadsk?
0697   EADB C2 06 EB    		jp	nz,alloc		;skip if not
0698   EADE             ;
0699   EADE             ;		disks are the same
0700   EADE 21 37 FD    		ld	hl,unatrk
0701   EAE1 CD A5 EB    		call	sektrkcmp	;sektrk = unatrk?
0702   EAE4 C2 06 EB    		jp	nz,alloc		;skip if not
0703   EAE7             ;
0704   EAE7             ;		tracks are the same
0705   EAE7 3A 2C FD    		ld	a,(seksec)		;same sector?
0706   EAEA 21 39 FD    		ld	hl,unasec
0707   EAED BE          		cp	(hl)		;seksec = unasec?
0708   EAEE C2 06 EB    		jp	nz,alloc		;skip if not
0709   EAF1             ;
0710   EAF1             ;		match, move to next sector for future ref
0711   EAF1 34          		inc	(hl)		;unasec = unasec+1
0712   EAF2 7E          		ld	a,(hl)		;end of track?
0713   EAF3 FE 80       		cp	cpmspt		;count CP/M sectors
0714   EAF5 38 09       		jr	c,noovf		;skip if no overflow
0715   EAF7             ;
0716   EAF7             ;		overflow to next track
0717   EAF7 36 00       		ld	(hl),0		;unasec = 0
0718   EAF9 2A 37 FD    		ld	hl,(unatrk)
0719   EAFC 23          		inc	hl
0720   EAFD 22 37 FD    		ld	(unatrk),hl		;unatrk = unatrk+1
0721   EB00             ;
0722   EB00             noovf:
0723   EB00             		;match found, mark as unnecessary read
0724   EB00 AF          		xor	a		;0 to accumulator
0725   EB01 32 3B FD    		ld	(rsflag),a		;rsflag = 0
0726   EB04 18 08       		jr	rwoper		;to perform the write
0727   EB06             ;
0728   EB06             alloc:
0729   EB06             		;not an unallocated record, requires pre-read
0730   EB06 AF          		xor	a		;0 to accum
0731   EB07 32 35 FD    		ld	(unacnt),a		;unacnt = 0
0732   EB0A 3C          		inc	a		;1 to accum
0733   EB0B 32 3B FD    		ld	(rsflag),a		;rsflag = 1
0734   EB0E             
0735   EB0E             ;------------------------------------------------------------------------------------------------
0736   EB0E             rwoper:
0737   EB0E             		;enter here to perform the read/write
0738   EB0E AF          		xor	a		;zero to accum
0739   EB0F 32 3A FD    		ld	(erflag),a		;no errors (yet)
0740   EB12 3A 2C FD    		ld	a,(seksec)		;compute host sector
0741   EB15 B7          		or	a		;carry = 0
0742   EB16 1F          		rra			;shift right
0743   EB17 B7          		or	a		;carry = 0
0744   EB18 1F          		rra			;shift right
0745   EB19 32 32 FD    		ld	(sekhst),a		;host sector to seek
0746   EB1C             ;
0747   EB1C             ;		active host sector?
0748   EB1C 21 33 FD    		ld	hl,hstact	;host active flag
0749   EB1F 7E          		ld	a,(hl)
0750   EB20 36 01       		ld	(hl),1		;always becomes 1
0751   EB22 B7          		or	a		;was it already?
0752   EB23 28 21       		jr	z,filhst		;fill host if not
0753   EB25             ;
0754   EB25             ;		host buffer active, same as seek buffer?
0755   EB25 3A 29 FD    		ld	a,(sekdsk)
0756   EB28 21 2E FD    		ld	hl,hstdsk	;same disk?
0757   EB2B BE          		cp	(hl)		;sekdsk = hstdsk?
0758   EB2C 20 11       		jr	nz,nomatch
0759   EB2E             ;
0760   EB2E             ;		same disk, same track?
0761   EB2E 21 2F FD    		ld	hl,hsttrk
0762   EB31 CD A5 EB    		call	sektrkcmp	;sektrk = hsttrk?
0763   EB34 20 09       		jr	nz,nomatch
0764   EB36             ;
0765   EB36             ;		same disk, same track, same buffer?
0766   EB36 3A 32 FD    		ld	a,(sekhst)
0767   EB39 21 31 FD    		ld	hl,hstsec	;sekhst = hstsec?
0768   EB3C BE          		cp	(hl)
0769   EB3D 28 24       		jr	z,match		;skip if match
0770   EB3F             ;
0771   EB3F             nomatch:
0772   EB3F             		;proper disk, but not correct sector
0773   EB3F 3A 34 FD    		ld	a,(hstwrt)		;host written?
0774   EB42 B7          		or	a
0775   EB43 C4 4D EC    		call	nz,writehst	;clear host buff
0776   EB46             ;
0777   EB46             filhst:
0778   EB46             		;may have to fill the host buffer
0779   EB46 3A 29 FD    		ld	a,(sekdsk)
0780   EB49 32 2E FD    		ld	(hstdsk),a
0781   EB4C 2A 2A FD    		ld	hl,(sektrk)
0782   EB4F 22 2F FD    		ld	(hsttrk),hl
0783   EB52 3A 32 FD    		ld	a,(sekhst)
0784   EB55 32 31 FD    		ld	(hstsec),a
0785   EB58 3A 3B FD    		ld	a,(rsflag)		;need to read?
0786   EB5B B7          		or	a
0787   EB5C C4 24 EC    		call	nz,readhst		;yes, if 1
0788   EB5F AF          		xor	a		;0 to accum
0789   EB60 32 34 FD    		ld	(hstwrt),a		;no pending write
0790   EB63             ;
0791   EB63             match:
0792   EB63             		;copy data to or from buffer
0793   EB63 3A 2C FD    		ld	a,(seksec)		;mask buffer number
0794   EB66 E6 03       		and	secmsk		;least signif bits
0795   EB68 6F          		ld	l,a		;ready to shift
0796   EB69 26 00       		ld	h,0		;double count
0797   EB6B 29          		add	hl,hl
0798   EB6C 29          		add	hl,hl
0799   EB6D 29          		add	hl,hl
0800   EB6E 29          		add	hl,hl
0801   EB6F 29          		add	hl,hl
0802   EB70 29          		add	hl,hl
0803   EB71 29          		add	hl,hl
0804   EB72             ;		hl has relative host buffer address
0805   EB72 11 40 FD    		ld	de,hstbuf
0806   EB75 19          		add	hl,de		;hl = host address
0807   EB76 EB          		ex	de,hl			;now in DE
0808   EB77 2A 3E FD    		ld	hl,(dmaAddr)		;get/put CP/M data
0809   EB7A 0E 80       		ld	c,128		;length of move
0810   EB7C 3A 3C FD    		ld	a,(readop)		;which way?
0811   EB7F B7          		or	a
0812   EB80 20 06       		jr	nz,rwmove		;skip if read
0813   EB82             ;
0814   EB82             ;	write operation, mark and switch direction
0815   EB82 3E 01       		ld	a,1
0816   EB84 32 34 FD    		ld	(hstwrt),a		;hstwrt = 1
0817   EB87 EB          		ex	de,hl			;source/dest swap
0818   EB88             ;
0819   EB88             rwmove:
0820   EB88             		;C initially 128, DE is source, HL is dest
0821   EB88 1A          		ld	a,(de)		;source character
0822   EB89 13          		inc	de
0823   EB8A 77          		ld	(hl),a		;to dest
0824   EB8B 23          		inc	hl
0825   EB8C 0D          		dec	c		;loop 128 times
0826   EB8D 20 F9       		jr	nz,rwmove
0827   EB8F             ;
0828   EB8F             ;		data has been moved to/from host buffer
0829   EB8F 3A 3D FD    		ld	a,(wrtype)		;write type
0830   EB92 FE 01       		cp	wrdir		;to directory?
0831   EB94 3A 3A FD    		ld	a,(erflag)		;in case of errors
0832   EB97 C0          		ret	nz			;no further processing
0833   EB98             ;
0834   EB98             ;		clear host buffer for directory write
0835   EB98 B7          		or	a		;errors?
0836   EB99 C0          		ret	nz			;skip if so
0837   EB9A AF          		xor	a		;0 to accum
0838   EB9B 32 34 FD    		ld	(hstwrt),a		;buffer written
0839   EB9E CD 4D EC    		call	writehst
0840   EBA1 3A 3A FD    		ld	a,(erflag)
0841   EBA4 C9          		ret
0842   EBA5             
0843   EBA5             ;------------------------------------------------------------------------------------------------
0844   EBA5             ;Utility subroutine for 16-bit compare
0845   EBA5             sektrkcmp:
0846   EBA5             		;HL = .unatrk or .hsttrk, compare with sektrk
0847   EBA5 EB          		ex	de,hl
0848   EBA6 21 2A FD    		ld	hl,sektrk
0849   EBA9 1A          		ld	a,(de)		;low byte compare
0850   EBAA BE          		cp	(HL)		;same?
0851   EBAB C0          		ret	nz			;return if not
0852   EBAC             ;		low bytes equal, test high 1s
0853   EBAC 13          		inc	de
0854   EBAD 23          		inc	hl
0855   EBAE 1A          		ld	a,(de)
0856   EBAF BE          		cp	(hl)	;sets flags
0857   EBB0 C9          		ret
0858   EBB1             
0859   EBB1             ;================================================================================================
0860   EBB1             ; Convert track/head/sector into LBA for physical access to the disk
0861   EBB1             ;================================================================================================
0862   EBB1             setLBAaddr:	
0863   EBB1 2A 2F FD    		LD	HL,(hsttrk)
0864   EBB4 CB 05       		RLC	L
0865   EBB6 CB 05       		RLC	L
0866   EBB8 CB 05       		RLC	L
0867   EBBA CB 05       		RLC	L
0868   EBBC CB 05       		RLC	L
0869   EBBE 7D          		LD	A,L
0870   EBBF E6 E0       		AND	0E0H
0871   EBC1 6F          		LD	L,A
0872   EBC2 3A 31 FD    		LD	A,(hstsec)
0873   EBC5 85          		ADD	A,L
0874   EBC6 32 25 FD    		LD	(lba0),A
0875   EBC9             
0876   EBC9 2A 2F FD    		LD	HL,(hsttrk)
0877   EBCC CB 0D       		RRC	L
0878   EBCE CB 0D       		RRC	L
0879   EBD0 CB 0D       		RRC	L
0880   EBD2 7D          		LD	A,L
0881   EBD3 E6 1F       		AND	01FH
0882   EBD5 6F          		LD	L,A
0883   EBD6 CB 04       		RLC	H
0884   EBD8 CB 04       		RLC	H
0885   EBDA CB 04       		RLC	H
0886   EBDC CB 04       		RLC	H
0887   EBDE CB 04       		RLC	H
0888   EBE0 7C          		LD	A,H
0889   EBE1 E6 20       		AND	020H
0890   EBE3 67          		LD	H,A
0891   EBE4 3A 2E FD    		LD	A,(hstdsk)
0892   EBE7 CB 07       		RLC	a
0893   EBE9 CB 07       		RLC	a
0894   EBEB CB 07       		RLC	a
0895   EBED CB 07       		RLC	a
0896   EBEF CB 07       		RLC	a
0897   EBF1 CB 07       		RLC	a
0898   EBF3 E6 C0       		AND	0C0H
0899   EBF5 84          		ADD	A,H
0900   EBF6 85          		ADD	A,L
0901   EBF7 32 26 FD    		LD	(lba1),A
0902   EBFA             		
0903   EBFA             
0904   EBFA 3A 2E FD    		LD	A,(hstdsk)
0905   EBFD CB 0F       		RRC	A
0906   EBFF CB 0F       		RRC	A
0907   EC01 E6 03       		AND	03H
0908   EC03 32 27 FD    		LD	(lba2),A
0909   EC06             
0910   EC06             ; LBA Mode using drive 0 = E0
0911   EC06 3E E0       		LD	a,0E0H
0912   EC08 32 28 FD    		LD	(lba3),A
0913   EC0B             
0914   EC0B             
0915   EC0B 3A 25 FD    		LD	A,(lba0)
0916   EC0E D3 B3       		OUT 	(CF_LBA0),A
0917   EC10             
0918   EC10 3A 26 FD    		LD	A,(lba1)
0919   EC13 D3 B4       		OUT 	(CF_LBA1),A
0920   EC15             
0921   EC15 3A 27 FD    		LD	A,(lba2)
0922   EC18 D3 B5       		OUT 	(CF_LBA2),A
0923   EC1A             
0924   EC1A 3A 28 FD    		LD	A,(lba3)
0925   EC1D D3 B6       		OUT 	(CF_LBA3),A
0926   EC1F             
0927   EC1F 3E 01       		LD 	A,1
0928   EC21 D3 B2       		OUT 	(CF_SECCOUNT),A
0929   EC23             
0930   EC23 C9          		RET				
0931   EC24             
0932   EC24             ;================================================================================================
0933   EC24             ; Read physical sector from host
0934   EC24             ;================================================================================================
0935   EC24             readhst:
0936   EC24 F5          		PUSH 	AF
0937   EC25 C5          		PUSH 	BC
0938   EC26 E5          		PUSH 	HL
0939   EC27             
0940   EC27 CD 76 EC    		CALL 	cfWait
0941   EC2A             
0942   EC2A CD B1 EB    		CALL 	setLBAaddr
0943   EC2D             
0944   EC2D 3E 20       		LD 	A,CF_READ_SEC
0945   EC2F D3 B7       		OUT 	(CF_COMMAND),A
0946   EC31             
0947   EC31 CD 76 EC    		CALL 	cfWait
0948   EC34             
0949   EC34 0E 04       		LD 	c,4
0950   EC36 21 40 FD    		LD 	HL,hstbuf
0951   EC39             rd4secs:
0952   EC39 06 80       		LD 	b,128
0953   EC3B             rdByte:
0954   EC3B DB B0       		in 	A,(CF_DATA)
0955   EC3D 77          		LD 	(HL),A
0956   EC3E 23          		iNC 	HL
0957   EC3F 05          		dec 	b
0958   EC40 20 F9       		JR 	NZ, rdByte
0959   EC42 0D          		dec 	c
0960   EC43 20 F4       		JR 	NZ,rd4secs
0961   EC45             
0962   EC45 E1          		POP 	HL
0963   EC46 C1          		POP 	BC
0964   EC47 F1          		POP 	AF
0965   EC48             
0966   EC48 AF          		XOR 	a
0967   EC49 32 3A FD    		ld	(erflag),a
0968   EC4C C9          		RET
0969   EC4D             
0970   EC4D             ;================================================================================================
0971   EC4D             ; Write physical sector to host
0972   EC4D             ;================================================================================================
0973   EC4D             writehst:
0974   EC4D F5          		PUSH 	AF
0975   EC4E C5          		PUSH 	BC
0976   EC4F E5          		PUSH 	HL
0977   EC50             
0978   EC50 CD 76 EC    		CALL 	cfWait
0979   EC53             
0980   EC53 CD B1 EB    		CALL 	setLBAaddr
0981   EC56             
0982   EC56 3E 30       		LD 	A,CF_WRITE_SEC
0983   EC58 D3 B7       		OUT 	(CF_COMMAND),A
0984   EC5A             
0985   EC5A CD 76 EC    		CALL 	cfWait
0986   EC5D             
0987   EC5D 0E 04       		LD 	c,4
0988   EC5F 21 40 FD    		LD 	HL,hstbuf
0989   EC62             wr4secs:
0990   EC62 06 80       		LD 	b,128
0991   EC64 7E          wrByte:		LD 	A,(HL)
0992   EC65 D3 B0       		OUT 	(CF_DATA),A
0993   EC67 23          		iNC 	HL
0994   EC68 05          		dec 	b
0995   EC69 20 F9       		JR 	NZ, wrByte
0996   EC6B             
0997   EC6B 0D          		dec 	c
0998   EC6C 20 F4       		JR 	NZ,wr4secs
0999   EC6E             
1000   EC6E E1          		POP 	HL
1001   EC6F C1          		POP 	BC
1002   EC70 F1          		POP 	AF
1003   EC71             
1004   EC71 AF          		XOR 	a
1005   EC72 32 3A FD    		ld	(erflag),a
1006   EC75 C9          		RET
1007   EC76             
1008   EC76             ;================================================================================================
1009   EC76             ; Wait for disk to be ready (busy=0,ready=1)
1010   EC76             ;================================================================================================
1011   EC76             cfWait:
1012   EC76 F5          		PUSH 	AF
1013   EC77             cfWait1:
1014   EC77 DB B7       		in 	A,(CF_STATUS)
1015   EC79 E6 80       		AND 	080H
1016   EC7B FE 80       		cp 	080H
1017   EC7D 28 F8       		JR	Z,cfWait1
1018   EC7F F1          		POP 	AF
1019   EC80 C9          		RET
1020   EC81             
1021   EC81             ;================================================================================================
1022   EC81             ; Print (on console) a sequence of characters ending with zero
1023   EC81             ;================================================================================================
1024   EC81             PRINTSEQ:
1025   EC81 E3          		EX 	(SP),HL 		; Push HL and put RET address into HL
1026   EC82 F5          		PUSH 	AF
1027   EC83 C5          		PUSH 	BC
1028   EC84             NEXTCHAR:
1029   EC84 7E          		LD 	A,(HL)
1030   EC85 FE 00       		CP	0
1031   EC87 28 07       		JR	Z,ENDOFPRINT
1032   EC89 4F          		LD  	C,A
1033   EC8A CD 09 E9    		CALL 	CONOUT		; Print to console
1034   EC8D 23          		INC 	HL
1035   EC8E 18 F4       		JR	NEXTCHAR
1036   EC90             ENDOFPRINT:
1037   EC90 23          		INC 	HL 			; Get past "null" terminator
1038   EC91 C1          		POP 	BC
1039   EC92 F1          		POP 	AF
1040   EC93 E3          		EX 	(SP),HL 		; Push new RET address on stack and restore HL
1041   EC94 C9          		RET
1042   EC95             
1043   EC95             ;================================================================================================
1044   EC95             ; Data storage
1045   EC95             ;================================================================================================
1046   EC95             dirbuf: 	.ds 128 		;scratch directory area
1047   ED15             alv00: 		.ds 257			;allocation vector 0
1048   EE16             alv01: 		.ds 257			;allocation vector 1
1049   EF17             alv02: 		.ds 257			;allocation vector 2
1050   F018             alv03: 		.ds 257			;allocation vector 3
1051   F119             alv04: 		.ds 257			;allocation vector 4
1052   F21A             alv05: 		.ds 257			;allocation vector 5
1053   F31B             alv06: 		.ds 257			;allocation vector 6
1054   F41C             alv07: 		.ds 257			;allocation vector 7
1055   F51D             alv08: 		.ds 257			;allocation vector 8
1056   F61E             alv09: 		.ds 257			;allocation vector 9
1057   F71F             alv10: 		.ds 257			;allocation vector 10
1058   F820             alv11: 		.ds 257			;allocation vector 11
1059   F921             alv12: 		.ds 257			;allocation vector 12
1060   FA22             alv13: 		.ds 257			;allocation vector 13
1061   FB23             alv14: 		.ds 257			;allocation vector 14
1062   FC24             alv15: 		.ds 257			;allocation vector 15
1063   FD25             
1064   FD25 00          lba0		.DB	00h
1065   FD26 00          lba1		.DB	00h
1066   FD27 00          lba2		.DB	00h
1067   FD28 00          lba3		.DB	00h
1068   FD29             
1069   FD29             sekdsk:		.ds	1		;seek disk number
1070   FD2A             sektrk:		.ds	2		;seek track number
1071   FD2C             seksec:		.ds	2		;seek sector number
1072   FD2E             ;
1073   FD2E             hstdsk:		.ds	1		;host disk number
1074   FD2F             hsttrk:		.ds	2		;host track number
1075   FD31             hstsec:		.ds	1		;host sector number
1076   FD32             ;
1077   FD32             sekhst:		.ds	1		;seek shr secshf
1078   FD33             hstact:		.ds	1		;host active flag
1079   FD34             hstwrt:		.ds	1		;host written flag
1080   FD35             ;
1081   FD35             unacnt:		.ds	1		;unalloc rec cnt
1082   FD36             unadsk:		.ds	1		;last unalloc disk
1083   FD37             unatrk:		.ds	2		;last unalloc track
1084   FD39             unasec:		.ds	1		;last unalloc sector
1085   FD3A             ;
1086   FD3A             erflag:		.ds	1		;error reporting
1087   FD3B             rsflag:		.ds	1		;read sector flag
1088   FD3C             readop:		.ds	1		;1 if read operation
1089   FD3D             wrtype:		.ds	1		;write operation type
1090   FD3E             dmaAddr:	.ds	2		;last dma address
1091   FD40             hstbuf:		.ds	512		;host buffer
1092   FF40             hstBufEnd:	.EQU	$
1093   FF40             
1094   FF40             BUFINI		.EQU	$
1095   FF40             			.DS	050H
1096   FF90             BUFEND		.EQU	$
1097   FF90             WRPTR:		.DS	2			; write pointer
1098   FF92             RDPTR:		.DS	2			; read pointer
1099   FF94             
1100   FF94             			.DS	020h			; Start of BIOS stack area.
1101   FFB4             BIOSSTACK:	.EQU	$
1102   FFB4             
1103   FFB4             biosEnd:	.EQU	$
1104   FFB4             
1105   FFB4             		.END
tasm: Number of errors = 0
