0001   0000             ;================================================================================================
0002   0000             ; MONITOR 2.0  - USE WITH VT100 TERMINAL
0003   0000             ; MONITOR 2.1B - Unified command set, no more environment change.
0004   0000             ; MONITOR 2.1C - working on dread.
0005   0000             ; MONITOR 2.1D - implement ascii2com function.
0006   0000             ; MONITOR 2.1E - implement memory compare function.
0007   0000             ; MONITOR 2.1F - Improved memory compare function. Find difference before displaying content.
0008   0000             ;                Put some NOPs in DISKWRITE and DISKREAD.
0009   0000             ; MONITOR 2.1G - implement disk verification function.
0010   0000             ;================================================================================================
0011   0000             #INCLUDE	"equates.h"
0001+  0000             
0002+  0000             CCP				.EQU	0D000h			; Base of CCP (or Monitor).
0003+  0000             BIOS			.EQU	0E620h			; Base of BIOS.
0004+  0000             ROM_CCP			.EQU	CCP-0C000h		; Base of CCP in ROM
0005+  0000             ROM_BIOS		.EQU	BIOS-0C000h		; Base of BIOS in ROM
0006+  0000             
0007+  0000             ccp				.EQU	CCP
0008+  0000             bios			.EQU	BIOS
0012   0000             
0013   0000             IOBYTE		.EQU	3
0014   0000             TPA			.EQU	0100H				; Transient Programs Area
0015   0000             MONITOR		.EQU	CCP				; Monitor entry point
0016   0000             DMA			.EQU	0080H				; Buffer used by Monitor
0017   0000             DISKPAD		.EQU	0E000H				; Draft area used by disk R/W ops
0018   0000             DISKBKUP	.EQU	0E200H				; Backup area used by disk verify operation
0019   0000             
0020   0000             ;================================================================================================
0021   0000             ; BIOS functions.
0022   0000             ;================================================================================================
0023   0000             LEAP		.EQU	3					; 3 bytes for each entry (JP aaaa)
0024   0000             
0025   0000             BOOT:		.EQU	BIOS				;  0 Initialize.
0026   0000             WBOOT:		.EQU	BIOS+(LEAP*1)		;  1 Warm boot.
0027   0000             CONST:		.EQU	BIOS+(LEAP*2)		;  2 Console status.
0028   0000             CONIN:		.EQU	BIOS+(LEAP*3)		;  3 Console input.
0029   0000             CONOUT:		.EQU	BIOS+(LEAP*4)		;  4 Console OUTput.
0030   0000             LIST:		.EQU	BIOS+(LEAP*5)		;  5 List OUTput.
0031   0000             PUNCH:		.EQU	BIOS+(LEAP*6)		;  6 Punch OUTput.
0032   0000             READER:		.EQU	BIOS+(LEAP*7)		;  7 Reader input.
0033   0000             HOME:		.EQU	BIOS+(LEAP*8)		;  8 Home disk.
0034   0000             SELDSK:		.EQU	BIOS+(LEAP*9)		;  9 Select disk.
0035   0000             SETTRK:		.EQU	BIOS+(LEAP*10)		; 10 Select track.
0036   0000             SETSEC:		.EQU	BIOS+(LEAP*11)		; 11 Select sector.
0037   0000             SETDMA:		.EQU	BIOS+(LEAP*12)		; 12 Set DMA ADDress.
0038   0000             READ:		.EQU	BIOS+(LEAP*13)		; 13 Read 128 bytes.
0039   0000             WRITE:		.EQU	BIOS+(LEAP*14)		; 14 Write 128 bytes.
0040   0000             LISTST:		.EQU	BIOS+(LEAP*15)		; 15 List status.
0041   0000             SECTRAN:	.EQU	BIOS+(LEAP*16)		; 16 Sector translate.
0042   0000             PRINTSEQ:	.EQU	BIOS+(LEAP*17)		; not a BIOS function
0043   0000             
0044   0000             ;================================================================================================
0045   0000             ; ASCII characters.
0046   0000             ;================================================================================================
0047   0000             NUL			.EQU	00H
0048   0000             SOH			.EQU	01H
0049   0000             STX			.EQU	02H
0050   0000             ETX			.EQU	03H
0051   0000             EOT			.EQU	04H
0052   0000             ENQ			.EQU	05H
0053   0000             ACK			.EQU	06H
0054   0000             BEL			.EQU	07H
0055   0000             BS			.EQU	08H			; ^H
0056   0000             HT			.EQU	09H
0057   0000             LF			.EQU	0AH
0058   0000             VT			.EQU	0BH
0059   0000             FF			.EQU	0CH
0060   0000             CR			.EQU	0DH
0061   0000             SO			.EQU	0EH
0062   0000             SI			.EQU	0FH
0063   0000             DLE			.EQU	10H
0064   0000             DC1			.EQU	11H
0065   0000             DC2			.EQU	12H
0066   0000             DC3			.EQU	13H
0067   0000             DC4			.EQU	14H
0068   0000             NAK			.EQU	15H			; ^U
0069   0000             SYN			.EQU	16H
0070   0000             ETB			.EQU	17H
0071   0000             CAN			.EQU	18H			; ^X
0072   0000             EM			.EQU	19H
0073   0000             SUB			.EQU	1AH
0074   0000             ESC			.EQU	1BH
0075   0000             FS			.EQU	1CH
0076   0000             GS			.EQU	1DH
0077   0000             RS			.EQU	1EH
0078   0000             US			.EQU	1FH
0079   0000             
0080   0000             ;================================================================================================
0081   0000             ; Some constants
0082   0000             ;================================================================================================
0083   0000             MAXLBUF		.EQU	DMA+80
0084   0000             PROMPT		.EQU	'>'
0085   0000             MAXTRY		.EQU	10
0086   0000             
0087   0000             ;================================================================================================
0088   0000             ; FLASH card stuff
0089   0000             ;================================================================================================
0090   0000             FLASH_ADDR		.EQU	0B0H			; Base I/O address for compact flash card
0091   0000             CF_DATA			.EQU	(FLASH_ADDR+0)	; R/W
0092   0000             CF_FEATURES		.EQU	(FLASH_ADDR+1)	; W
0093   0000             CF_ERROR		.EQU	(FLASH_ADDR+1)	; R
0094   0000             CF_SECCOUNT		.EQU	(FLASH_ADDR+2)	; W
0095   0000             
0096   0000             CF_SECTOR		.EQU	(FLASH_ADDR+3)	; W
0097   0000             CF_CYL_LOW		.EQU	(FLASH_ADDR+4)	; W
0098   0000             CF_CYL_HI		.EQU	(FLASH_ADDR+5)	; W
0099   0000             CF_HEAD			.EQU	(FLASH_ADDR+6)	; W
0100   0000             
0101   0000             CF_LBA0			.EQU	(FLASH_ADDR+3)	; W
0102   0000             CF_LBA1			.EQU	(FLASH_ADDR+4)	; W
0103   0000             CF_LBA2			.EQU	(FLASH_ADDR+5)	; W
0104   0000             CF_LBA3			.EQU	(FLASH_ADDR+6)	; W
0105   0000             
0106   0000             CF_STATUS		.EQU	(FLASH_ADDR+7)	; R
0107   0000             CF_COMMAND		.EQU	(FLASH_ADDR+7)	; W
0108   0000             
0109   0000             ;CF Features
0110   0000             CF_8BIT			.EQU	1
0111   0000             CF_NOCACHE		.EQU	082H
0112   0000             
0113   0000             ;CF Commands
0114   0000             CF_READ_SEC		.EQU	020H
0115   0000             CF_WRITE_SEC	.EQU	030H
0116   0000             CF_SET_FEAT		.EQU 	0EFH
0117   0000             ;================================================================================================
0118   0000             ; MAIN PROGRAM STARTS HERE
0119   0000             ;================================================================================================
0120   D000             			.ORG MONITOR
0121   D000             
0122   D000 CD D7 DD    CYCLE:		CALL PRINTENV
0123   D003 CD 62 DC    			CALL LINER					; Call the line manager
0124   D006 3A 80 00    			LD	A,(DMA)
0125   D009 FE 00       			CP	0
0126   D00B 28 F3       			JR	Z,CYCLE					; User ENTERed an empty line. No need to parse.
0127   D00D 21 58 DE    			LD	HL,CMDTBL
0128   D010 CD 0B DD    			CALL PARSER					; Find command comparing buffer with Command Table.
0129   D013 3C          			INC	A
0130   D014 28 01       			JR	Z,UNK					; No match found in command table.
0131   D016 E9          			JP	(HL)					; Jump to Command Routine
0132   D017 CD 47 DC    UNK:		CALL UNKNOWN
0133   D01A 18 E4       			JR	CYCLE
0134   D01C             			
0135   D01C             ;================================================================================================
0136   D01C             ; Help for main program
0137   D01C             ;================================================================================================
0138   D01C CD BB DC    HELP:		CALL CRLF
0139   D01F CD 53 E6    			CALL PRINTSEQ
0140   D022 20 4D 4F 4E 			.DB	" MONITOR 2.1G - May/2021.",CR,LF
0140   D026 49 54 4F 52 
0140   D02A 20 32 2E 31 
0140   D02E 47 20 2D 20 
0140   D032 4D 61 79 2F 
0140   D036 32 30 32 31 
0140   D03A 2E 0D 0A 
0141   D03D 20 4F 70 74 			.DB	" Options:   READ aaaa             read from memory.",CR,LF
0141   D041 69 6F 6E 73 
0141   D045 3A 20 20 20 
0141   D049 52 45 41 44 
0141   D04D 20 61 61 61 
0141   D051 61 20 20 20 
0141   D055 20 20 20 20 
0141   D059 20 20 20 20 
0141   D05D 20 20 72 65 
0141   D061 61 64 20 66 
0141   D065 72 6F 6D 20 
0141   D069 6D 65 6D 6F 
0141   D06D 72 79 2E 0D 
0141   D071 0A 
0142   D072 20 20 20 20 			.DB "            WRITE aaaa,c1 c2 cN   write to memory.",CR,LF
0142   D076 20 20 20 20 
0142   D07A 20 20 20 20 
0142   D07E 57 52 49 54 
0142   D082 45 20 61 61 
0142   D086 61 61 2C 63 
0142   D08A 31 20 63 32 
0142   D08E 20 63 4E 20 
0142   D092 20 20 77 72 
0142   D096 69 74 65 20 
0142   D09A 74 6F 20 6D 
0142   D09E 65 6D 6F 72 
0142   D0A2 79 2E 0D 0A 
0143   D0A6 20 20 20 20 			.DB "            COPY aaaa-bbbb,cccc   copy memory block.",CR,LF
0143   D0AA 20 20 20 20 
0143   D0AE 20 20 20 20 
0143   D0B2 43 4F 50 59 
0143   D0B6 20 61 61 61 
0143   D0BA 61 2D 62 62 
0143   D0BE 62 62 2C 63 
0143   D0C2 63 63 63 20 
0143   D0C6 20 20 63 6F 
0143   D0CA 70 79 20 6D 
0143   D0CE 65 6D 6F 72 
0143   D0D2 79 20 62 6C 
0143   D0D6 6F 63 6B 2E 
0143   D0DA 0D 0A 
0144   D0DC 20 20 20 20 			.DB "            FILL aaaa-bbbb,cc     fill memory block.",CR,LF
0144   D0E0 20 20 20 20 
0144   D0E4 20 20 20 20 
0144   D0E8 46 49 4C 4C 
0144   D0EC 20 61 61 61 
0144   D0F0 61 2D 62 62 
0144   D0F4 62 62 2C 63 
0144   D0F8 63 20 20 20 
0144   D0FC 20 20 66 69 
0144   D100 6C 6C 20 6D 
0144   D104 65 6D 6F 72 
0144   D108 79 20 62 6C 
0144   D10C 6F 63 6B 2E 
0144   D110 0D 0A 
0145   D112 20 20 20 20 			.DB "            COMPARE aaaa,bbbb     compare memory areas.",CR,LF
0145   D116 20 20 20 20 
0145   D11A 20 20 20 20 
0145   D11E 43 4F 4D 50 
0145   D122 41 52 45 20 
0145   D126 61 61 61 61 
0145   D12A 2C 62 62 62 
0145   D12E 62 20 20 20 
0145   D132 20 20 63 6F 
0145   D136 6D 70 61 72 
0145   D13A 65 20 6D 65 
0145   D13E 6D 6F 72 79 
0145   D142 20 61 72 65 
0145   D146 61 73 2E 0D 
0145   D14A 0A 
0146   D14B 20 20 20 20 			.DB	"            DREAD aaaa            read from disk.",CR,LF
0146   D14F 20 20 20 20 
0146   D153 20 20 20 20 
0146   D157 44 52 45 41 
0146   D15B 44 20 61 61 
0146   D15F 61 61 20 20 
0146   D163 20 20 20 20 
0146   D167 20 20 20 20 
0146   D16B 20 20 72 65 
0146   D16F 61 64 20 66 
0146   D173 72 6F 6D 20 
0146   D177 64 69 73 6B 
0146   D17B 2E 0D 0A 
0147   D17E 20 20 20 20 			.DB "            DOWN d,ttt,ss         download one sector from disk.",CR,LF
0147   D182 20 20 20 20 
0147   D186 20 20 20 20 
0147   D18A 44 4F 57 4E 
0147   D18E 20 64 2C 74 
0147   D192 74 74 2C 73 
0147   D196 73 20 20 20 
0147   D19A 20 20 20 20 
0147   D19E 20 20 64 6F 
0147   D1A2 77 6E 6C 6F 
0147   D1A6 61 64 20 6F 
0147   D1AA 6E 65 20 73 
0147   D1AE 65 63 74 6F 
0147   D1B2 72 20 66 72 
0147   D1B6 6F 6D 20 64 
0147   D1BA 69 73 6B 2E 
0147   D1BE 0D 0A 
0148   D1C0 20 20 20 20 			.DB "            UP d,ttt,ss           upload one sector to disk.",CR,LF
0148   D1C4 20 20 20 20 
0148   D1C8 20 20 20 20 
0148   D1CC 55 50 20 64 
0148   D1D0 2C 74 74 74 
0148   D1D4 2C 73 73 20 
0148   D1D8 20 20 20 20 
0148   D1DC 20 20 20 20 
0148   D1E0 20 20 75 70 
0148   D1E4 6C 6F 61 64 
0148   D1E8 20 6F 6E 65 
0148   D1EC 20 73 65 63 
0148   D1F0 74 6F 72 20 
0148   D1F4 74 6F 20 64 
0148   D1F8 69 73 6B 2E 
0148   D1FC 0D 0A 
0149   D1FE 20 20 20 20 			.DB "            VERIFY d              verify disk.",CR,LF
0149   D202 20 20 20 20 
0149   D206 20 20 20 20 
0149   D20A 56 45 52 49 
0149   D20E 46 59 20 64 
0149   D212 20 20 20 20 
0149   D216 20 20 20 20 
0149   D21A 20 20 20 20 
0149   D21E 20 20 76 65 
0149   D222 72 69 66 79 
0149   D226 20 64 69 73 
0149   D22A 6B 2E 0D 0A 
0150   D22E 20 20 20 20 			.DB "            FORMAT d              format disk.",CR,LF
0150   D232 20 20 20 20 
0150   D236 20 20 20 20 
0150   D23A 46 4F 52 4D 
0150   D23E 41 54 20 64 
0150   D242 20 20 20 20 
0150   D246 20 20 20 20 
0150   D24A 20 20 20 20 
0150   D24E 20 20 66 6F 
0150   D252 72 6D 61 74 
0150   D256 20 64 69 73 
0150   D25A 6B 2E 0D 0A 
0151   D25E 20 20 20 20 			.DB "            XMODEM aaaa           receive file using xmodem protocol.",CR,LF
0151   D262 20 20 20 20 
0151   D266 20 20 20 20 
0151   D26A 58 4D 4F 44 
0151   D26E 45 4D 20 61 
0151   D272 61 61 61 20 
0151   D276 20 20 20 20 
0151   D27A 20 20 20 20 
0151   D27E 20 20 72 65 
0151   D282 63 65 69 76 
0151   D286 65 20 66 69 
0151   D28A 6C 65 20 75 
0151   D28E 73 69 6E 67 
0151   D292 20 78 6D 6F 
0151   D296 64 65 6D 20 
0151   D29A 70 72 6F 74 
0151   D29E 6F 63 6F 6C 
0151   D2A2 2E 0D 0A 
0152   D2A5 20 20 20 20 			.DB "            HEX2COM aaaa          convert intel hex to executable.",CR,LF
0152   D2A9 20 20 20 20 
0152   D2AD 20 20 20 20 
0152   D2B1 48 45 58 32 
0152   D2B5 43 4F 4D 20 
0152   D2B9 61 61 61 61 
0152   D2BD 20 20 20 20 
0152   D2C1 20 20 20 20 
0152   D2C5 20 20 63 6F 
0152   D2C9 6E 76 65 72 
0152   D2CD 74 20 69 6E 
0152   D2D1 74 65 6C 20 
0152   D2D5 68 65 78 20 
0152   D2D9 74 6F 20 65 
0152   D2DD 78 65 63 75 
0152   D2E1 74 61 62 6C 
0152   D2E5 65 2E 0D 0A 
0153   D2E9 20 20 20 20 			.DB "            ASCII2COM aaaa        convert ASCII to executable.",CR,LF
0153   D2ED 20 20 20 20 
0153   D2F1 20 20 20 20 
0153   D2F5 41 53 43 49 
0153   D2F9 49 32 43 4F 
0153   D2FD 4D 20 61 61 
0153   D301 61 61 20 20 
0153   D305 20 20 20 20 
0153   D309 20 20 63 6F 
0153   D30D 6E 76 65 72 
0153   D311 74 20 41 53 
0153   D315 43 49 49 20 
0153   D319 74 6F 20 65 
0153   D31D 78 65 63 75 
0153   D321 74 61 62 6C 
0153   D325 65 2E 0D 0A 
0154   D329 20 20 20 20 			.DB "            RUN aaaa              run program.",CR,LF
0154   D32D 20 20 20 20 
0154   D331 20 20 20 20 
0154   D335 52 55 4E 20 
0154   D339 61 61 61 61 
0154   D33D 20 20 20 20 
0154   D341 20 20 20 20 
0154   D345 20 20 20 20 
0154   D349 20 20 72 75 
0154   D34D 6E 20 70 72 
0154   D351 6F 67 72 61 
0154   D355 6D 2E 0D 0A 
0155   D359 20 20 20 20 			.DB "            BOOT",CR,LF,0
0155   D35D 20 20 20 20 
0155   D361 20 20 20 20 
0155   D365 42 4F 4F 54 
0155   D369 0D 0A 00 
0156   D36C C3 00 D0    			JP	CYCLE
0157   D36F             			
0158   D36F             ;================================================================================================
0159   D36F             ; Read memory operations - READ AAAA
0160   D36F             ;================================================================================================
0161   D36F 11 84 00    MREAD:		LD	DE,DMA+4
0162   D372 CD 69 DD    			CALL GETWORD		; Get aaaa
0163   D375 FE 01       			CP	1				; Is the argument OK?
0164   D377 C2 00 D0    			JP	NZ,CYCLE
0165   D37A C5          			PUSH BC
0166   D37B D1          			POP	DE				; DE will be the address holder
0167   D37C 7B          			LD	A,E
0168   D37D E6 F0       			AND	0F0H
0169   D37F 5F          			LD	E,A				; trim addr (xxx0)
0170   D380 CD 99 D3    NEWHDR:		CALL PRINTHDR		; Print the header
0171   D383 3E 10       			LD	A,16
0172   D385 32 E8 DE    			LD	(LINNUM),A
0173   D388             
0174   D388 CD 82 D4    			CALL SUBMPRN
0175   D38B             			
0176   D38B CD 29 E6    TRYAGAIN:	CALL CONIN			; Wait for user's decision
0177   D38E FE 0D       			CP	CR
0178   D390 28 EE       			JR	Z,NEWHDR
0179   D392 FE 1B       			CP	ESC
0180   D394 CA 00 D0    			JP	Z,CYCLE
0181   D397 18 F2       			JR	TRYAGAIN
0182   D399             
0183   D399 CD 53 E6    PRINTHDR:	CALL PRINTSEQ
0184   D39C 3E 41 44 44 			.DB ">ADDR: 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F  0123456789ABCDEF",CR,LF,
0184   D3A0 52 3A 20 30 
0184   D3A4 30 20 30 31 
0184   D3A8 20 30 32 20 
0184   D3AC 30 33 20 30 
0184   D3B0 34 20 30 35 
0184   D3B4 20 30 36 20 
0184   D3B8 30 37 20 30 
0184   D3BC 38 20 30 39 
0184   D3C0 20 30 41 20 
0184   D3C4 30 42 20 30 
0184   D3C8 43 20 30 44 
0184   D3CC 20 30 45 20 
0184   D3D0 30 46 20 20 
0184   D3D4 30 31 32 33 
0184   D3D8 34 35 36 37 
0184   D3DC 38 39 41 42 
0184   D3E0 43 44 45 46 
0184   D3E4 0D 0A 
0185   D3E6 3E 2D 2D 2D 			.DB ">----- -----------------------------------------------  ----------------",0
0185   D3EA 2D 2D 20 2D 
0185   D3EE 2D 2D 2D 2D 
0185   D3F2 2D 2D 2D 2D 
0185   D3F6 2D 2D 2D 2D 
0185   D3FA 2D 2D 2D 2D 
0185   D3FE 2D 2D 2D 2D 
0185   D402 2D 2D 2D 2D 
0185   D406 2D 2D 2D 2D 
0185   D40A 2D 2D 2D 2D 
0185   D40E 2D 2D 2D 2D 
0185   D412 2D 2D 2D 2D 
0185   D416 2D 2D 2D 2D 
0185   D41A 2D 2D 20 20 
0185   D41E 2D 2D 2D 2D 
0185   D422 2D 2D 2D 2D 
0185   D426 2D 2D 2D 2D 
0185   D42A 2D 2D 2D 2D 
0185   D42E 00 
0186   D42F C9          			RET
0187   D430             
0188   D430 CD BB DC    PRINTFTR:	CALL CRLF
0189   D433 CD 53 E6    			CALL PRINTSEQ
0190   D436 3E 23 3D 3D 			.DB ">#================= <ENTER> = next page, <ESC> = quit =================#",CR,LF,0
0190   D43A 3D 3D 3D 3D 
0190   D43E 3D 3D 3D 3D 
0190   D442 3D 3D 3D 3D 
0190   D446 3D 3D 3D 20 
0190   D44A 3C 45 4E 54 
0190   D44E 45 52 3E 20 
0190   D452 3D 20 6E 65 
0190   D456 78 74 20 70 
0190   D45A 61 67 65 2C 
0190   D45E 20 3C 45 53 
0190   D462 43 3E 20 3D 
0190   D466 20 71 75 69 
0190   D46A 74 20 3D 3D 
0190   D46E 3D 3D 3D 3D 
0190   D472 3D 3D 3D 3D 
0190   D476 3D 3D 3D 3D 
0190   D47A 3D 3D 3D 23 
0190   D47E 0D 0A 00 
0191   D481 C9          			RET
0192   D482             
0193   D482             SUBMPRN:
0194   D482 CD CE D4    NEWLINE:	CALL PRINTADDR
0195   D485 06 10       			LD	B,16
0196   D487 C5          NEWCOL:		PUSH BC
0197   D488 1A          			LD	A,(DE)			; Start printing the memory content
0198   D489 13          			INC	DE
0199   D48A 47          			LD	B,A
0200   D48B CD 2D DE    			CALL B2HL
0201   D48E 4C          			LD	C,H
0202   D48F CD 2C E6    			CALL CONOUT
0203   D492 4D          			LD	C,L
0204   D493 CD 2C E6    			CALL CONOUT
0205   D496 0E 20       			LD	C,' '
0206   D498 CD 2C E6    			CALL CONOUT
0207   D49B C1          			POP	BC
0208   D49C 10 E9       			DJNZ NEWCOL
0209   D49E 0E 20       			LD	C,' '
0210   D4A0 CD 2C E6    			CALL CONOUT
0211   D4A3 21 F0 FF    			LD	HL,0FFF0H		; This is -10h
0212   D4A6 19          			ADD	HL,DE			; Go back to beginning of line
0213   D4A7 E5          			PUSH HL
0214   D4A8 D1          			POP	DE
0215   D4A9 06 10       			LD	B,16
0216   D4AB C5          NEWCOL2:	PUSH BC				; Start printing the printables
0217   D4AC 0E 2E       			LD	C,'.'
0218   D4AE 1A          			LD	A,(DE)
0219   D4AF FE 20       			CP	20H
0220   D4B1 FA BA D4    			JP	M,NOTPRTBL
0221   D4B4 FE 7F       			CP	7FH
0222   D4B6 F2 BA D4    			JP	P,NOTPRTBL
0223   D4B9 4F          			LD	C,A
0224   D4BA CD 2C E6    NOTPRTBL:	CALL CONOUT
0225   D4BD 13          			INC	DE
0226   D4BE C1          			POP	BC
0227   D4BF 10 EA       			DJNZ NEWCOL2
0228   D4C1 3A E8 DE    			LD	A,(LINNUM)
0229   D4C4 3D          			DEC	A
0230   D4C5 32 E8 DE    			LD	(LINNUM),A
0231   D4C8 20 B8       			JR	NZ,NEWLINE
0232   D4CA CD 30 D4    			CALL PRINTFTR		; Print footer message
0233   D4CD C9          			RET
0234   D4CE             
0235   D4CE CD BB DC    PRINTADDR:	CALL CRLF
0236   D4D1 CD D7 DD    			CALL PRINTENV
0237   D4D4 42          			LD	B,D				; Print the address
0238   D4D5 CD 2D DE    			CALL B2HL
0239   D4D8 4C          			LD	C,H
0240   D4D9 CD 2C E6    			CALL CONOUT
0241   D4DC 4D          			LD	C,L
0242   D4DD CD 2C E6    			CALL CONOUT
0243   D4E0 43          			LD	B,E
0244   D4E1 CD 2D DE    			CALL B2HL
0245   D4E4 4C          			LD	C,H
0246   D4E5 CD 2C E6    			CALL CONOUT
0247   D4E8 4D          			LD	C,L
0248   D4E9 CD 2C E6    			CALL CONOUT
0249   D4EC 0E 3A       			LD	C,':'
0250   D4EE CD 2C E6    			CALL CONOUT
0251   D4F1 0E 20       			LD	C,' '
0252   D4F3 CD 2C E6    			CALL CONOUT
0253   D4F6 C9          			RET
0254   D4F7             			
0255   D4F7             ;================================================================================================
0256   D4F7             ; Write memory operations - WRITE AAAA,C1 C2 C3...
0257   D4F7             ;================================================================================================
0258   D4F7 11 85 00    MWRITE:		LD	DE,DMA+5
0259   D4FA CD 69 DD    			CALL GETWORD		; Get aaaa
0260   D4FD FE 01       			CP	1				; Is the argument OK?
0261   D4FF C2 00 D0    			JP	NZ,CYCLE
0262   D502 ED 43 EA DE 			LD	(AAAA),BC		; Save aaaa
0263   D506 11 8A 00    			LD	DE,DMA+10
0264   D509 13          MWNEXT:		INC	DE
0265   D50A 1A          			LD	A,(DE)
0266   D50B FE 00       			CP	0
0267   D50D CA 00 D0    			JP	Z,CYCLE			; End of char string?
0268   D510 CD 7D DD    			CALL GETBYTE		; Get cc
0269   D513 FE 01       			CP	1				; Is the argument OK?
0270   D515 C2 00 D0    			JP	NZ,CYCLE
0271   D518 2A EA DE    			LD	HL,(AAAA)
0272   D51B 70          			LD	(HL),B			; Put the byte in memory
0273   D51C 23          			INC	HL
0274   D51D 22 EA DE    			LD	(AAAA),HL
0275   D520 18 E7       			JR	MWNEXT
0276   D522             
0277   D522             ;================================================================================================
0278   D522             ; Copy memory operations - COPY AAAA-BBBB,CCCC
0279   D522             ;================================================================================================
0280   D522 11 84 00    MCOPY:		LD	DE,DMA+4
0281   D525 CD 69 DD    			CALL GETWORD		; Get aaaa
0282   D528 FE 01       			CP	1				; Is the argument OK?
0283   D52A C2 00 D0    			JP	NZ,CYCLE
0284   D52D ED 43 EA DE 			LD	(AAAA),BC		; Save aaaa
0285   D531 11 8A 00    			LD	DE,DMA+10
0286   D534 CD 69 DD    			CALL GETWORD		; Get bbbb
0287   D537 FE 01       			CP	1				; Is the argument OK?
0288   D539 C2 00 D0    			JP	NZ,CYCLE
0289   D53C ED 43 EC DE 			LD	(BBBB),BC		; Save bbbb
0290   D540 11 8F 00    			LD	DE,DMA+15
0291   D543 CD 69 DD    			CALL GETWORD		; Get cccc
0292   D546 FE 01       			CP	1				; Is the argument OK?
0293   D548 C2 00 D0    			JP	NZ,CYCLE
0294   D54B ED 43 EE DE 			LD	(CCCC),BC		; Save cccc
0295   D54F 2A EC DE    			LD	HL,(BBBB)
0296   D552 ED 5B EA DE 			LD	DE,(AAAA)
0297   D556 AF          			XOR	A				; Reset carry flag
0298   D557 ED 52       			SBC	HL,DE
0299   D559 23          			INC	HL
0300   D55A EB          			EX	DE,HL			; HL=source
0301   D55B D5          			PUSH DE
0302   D55C C1          			POP BC				; BC=counter
0303   D55D ED 5B EE DE 			LD	DE,(CCCC)		; DE=target
0304   D561 ED B0       			LDIR
0305   D563 C3 00 D0    			JP	CYCLE
0306   D566             
0307   D566             ;================================================================================================
0308   D566             ; Fill memory operations - FILL AAAA-BBBB,CC
0309   D566             ;================================================================================================
0310   D566 11 84 00    MFILL:		LD	DE,DMA+4
0311   D569 CD 69 DD    			CALL GETWORD		; Get aaaa
0312   D56C FE 01       			CP	1				; Is the argument OK?
0313   D56E C2 00 D0    			JP	NZ,CYCLE
0314   D571 ED 43 EA DE 			LD	(AAAA),BC		; Save aaaa
0315   D575 11 8A 00    			LD	DE,DMA+10
0316   D578 CD 69 DD    			CALL GETWORD		; Get bbbb
0317   D57B FE 01       			CP	1				; Is the argument OK?
0318   D57D C2 00 D0    			JP	NZ,CYCLE
0319   D580 ED 43 EC DE 			LD	(BBBB),BC		; Save bbbb
0320   D584 11 8F 00    			LD	DE,DMA+15
0321   D587 CD 7D DD    			CALL GETBYTE		; Get cc
0322   D58A FE 01       			CP	1				; Is the argument OK?
0323   D58C C2 00 D0    			JP	NZ,CYCLE
0324   D58F CD 95 D5    			CALL MFPRIM			; Call the primitiv for memory fill.
0325   D592 C3 00 D0    			JP	CYCLE
0326   D595             			
0327   D595 2A EA DE    MFPRIM:		LD	HL,(AAAA)		; This routine is also used by disk verify.
0328   D598 70          			LD	(HL),B			; Put cc in the 1st position of the area to be filled.
0329   D599 2A EC DE    			LD	HL,(BBBB)
0330   D59C ED 5B EA DE 			LD	DE,(AAAA)
0331   D5A0 AF          			XOR	A				; Reset carry flag
0332   D5A1 ED 52       			SBC	HL,DE
0333   D5A3 EB          			EX	DE,HL			; HL=source
0334   D5A4 D5          			PUSH DE
0335   D5A5 C1          			POP BC				; BC=counter
0336   D5A6 E5          			PUSH HL
0337   D5A7 D1          			POP	DE
0338   D5A8 13          			INC DE
0339   D5A9 ED B0       			LDIR
0340   D5AB C9          			RET
0341   D5AC             
0342   D5AC             ;================================================================================================
0343   D5AC             ; Compare two memory areas - COMPARE AAAA,BBBB
0344   D5AC             ;================================================================================================
0345   D5AC 11 87 00    MCOMP:		LD	DE,DMA+7
0346   D5AF CD 69 DD    			CALL GETWORD		; Get aaaa
0347   D5B2 FE 01       			CP	1				; Is the argument OK?
0348   D5B4 C2 00 D0    			JP	NZ,CYCLE
0349   D5B7 ED 43 EA DE 			LD	(AAAA),BC		; Save aaaa
0350   D5BB C5          			PUSH BC
0351   D5BC DD E1       			POP	IX
0352   D5BE 11 8D 00    			LD	DE,DMA+13
0353   D5C1 CD 69 DD    			CALL GETWORD		; Get bbbb
0354   D5C4 FE 01       			CP	1				; Is the argument OK?
0355   D5C6 C2 00 D0    			JP	NZ,CYCLE
0356   D5C9 ED 43 EC DE 			LD	(BBBB),BC		; Save bbbb
0357   D5CD C5          			PUSH BC
0358   D5CE FD E1       			POP	IY
0359   D5D0 DD 7E 00    MCNBC:		LD	A,(IX+0)
0360   D5D3 FD 46 00    			LD	B,(IY+0)
0361   D5D6 B8          			CP	B
0362   D5D7 20 06       			JR	NZ,MCDIF
0363   D5D9 DD 23       			INC	IX
0364   D5DB FD 23       			INC IY
0365   D5DD 18 F1       			JR	MCNBC
0366   D5DF DD E5       MCDIF:		PUSH IX
0367   D5E1 C1          			POP	BC
0368   D5E2 79          			LD	A,C
0369   D5E3 E6 F0       			AND	0F0H
0370   D5E5 4F          			LD	C,A
0371   D5E6 ED 43 EA DE 			LD	(AAAA),BC		; Save new aaaa
0372   D5EA FD E5       			PUSH IY
0373   D5EC C1          			POP	BC
0374   D5ED 79          			LD	A,C
0375   D5EE E6 F0       			AND	0F0H
0376   D5F0 4F          			LD	C,A
0377   D5F1 ED 43 EC DE 			LD	(BBBB),BC		; Save new bbbb
0378   D5F5 ED 5B EA DE MCNEWL:		LD	DE,(AAAA)
0379   D5F9 CD CE D4    			CALL PRINTADDR
0380   D5FC 06 10       			LD	B,16
0381   D5FE C5          MCNEWC:		PUSH BC
0382   D5FF 1A          			LD	A,(DE)			; Start printing the 1st memory area content
0383   D600 13          			INC	DE
0384   D601 47          			LD	B,A
0385   D602 CD 2D DE    			CALL B2HL
0386   D605 4C          			LD	C,H
0387   D606 CD 2C E6    			CALL CONOUT
0388   D609 4D          			LD	C,L
0389   D60A CD 2C E6    			CALL CONOUT
0390   D60D 0E 20       			LD	C,' '
0391   D60F CD 2C E6    			CALL CONOUT
0392   D612 C1          			POP	BC
0393   D613 10 E9       			DJNZ MCNEWC
0394   D615             			
0395   D615 DD 2A EA DE 			LD	IX,(AAAA)
0396   D619 ED 5B EC DE 			LD	DE,(BBBB)
0397   D61D CD CE D4    			CALL PRINTADDR
0398   D620 06 10       			LD	B,16
0399   D622 C5          MCNEWAC:	PUSH BC
0400   D623 1A          			LD	A,(DE)			; Start printing the 2nd memory area content
0401   D624 DD 46 00    			LD	B,(IX)
0402   D627 DD 23       			INC	IX
0403   D629 13          			INC	DE
0404   D62A B8          			CP	B
0405   D62B 20 0A       			JR	NZ,DIFFER		; if the content is equal, just print '='
0406   D62D 0E 3D       			LD	C,'='
0407   D62F CD 2C E6    			CALL CONOUT
0408   D632 CD 2C E6    			CALL CONOUT
0409   D635 18 0C       			JR	POSDIF
0410   D637 47          DIFFER:		LD	B,A
0411   D638 CD 2D DE    			CALL B2HL
0412   D63B 4C          			LD	C,H
0413   D63C CD 2C E6    			CALL CONOUT
0414   D63F 4D          			LD	C,L
0415   D640 CD 2C E6    			CALL CONOUT
0416   D643 0E 20       POSDIF:		LD	C,' '
0417   D645 CD 2C E6    			CALL CONOUT
0418   D648 C1          			POP	BC
0419   D649 10 D7       			DJNZ MCNEWAC
0420   D64B DD 22 EA DE 			LD	(AAAA),IX		; save memory positions
0421   D64F ED 53 EC DE 			LD	(BBBB),DE
0422   D653 CD BB DC    			CALL CRLF			; print the footer
0423   D656 CD 53 E6    			CALL PRINTSEQ
0424   D659 3E 20 20 20 			.DB ">      <ENTER> = next line, <ESC> = quit",CR,LF,0
0424   D65D 20 20 20 3C 
0424   D661 45 4E 54 45 
0424   D665 52 3E 20 3D 
0424   D669 20 6E 65 78 
0424   D66D 74 20 6C 69 
0424   D671 6E 65 2C 20 
0424   D675 3C 45 53 43 
0424   D679 3E 20 3D 20 
0424   D67D 71 75 69 74 
0424   D681 0D 0A 00 
0425   D684 CD 29 E6    MCAGAIN:	CALL CONIN			; Wait for user's decision
0426   D687 FE 0D       			CP	CR
0427   D689 CA F5 D5    			JP	Z,MCNEWL
0428   D68C FE 1B       			CP	ESC
0429   D68E CA 00 D0    			JP	Z,CYCLE
0430   D691 18 F1       			JR	MCAGAIN
0431   D693             
0432   D693             ;================================================================================================
0433   D693             ; Xmodem Command - XMODEM AAAA
0434   D693             ;================================================================================================
0435   D693 3E C0       XMODEM:		LD	A,0C0H
0436   D695 32 03 00    			LD	(IOBYTE),A			; Set LCD as LIST device.
0437   D698 0E 11       			LD	C,DC1
0438   D69A CD 2F E6    			CALL LIST
0439   D69D             			
0440   D69D             			
0441   D69D 11 86 00    			LD	DE,DMA+6
0442   D6A0 CD 69 DD    			CALL GETWORD		
0443   D6A3 FE 01       			CP	1					; Is the argument OK?
0444   D6A5 C2 00 D0    			JP	NZ,CYCLE
0445   D6A8 ED 43 EA DE 			LD	(AAAA),BC			; Save address
0446   D6AC 3E 00       			LD	A,0
0447   D6AE 32 F2 DE    			LD	(RETRY),A			; Init retry counter
0448   D6B1 3C          			INC	A
0449   D6B2 32 F3 DE    			LD	(BLOCK),A			; Init block counter
0450   D6B5             
0451   D6B5 CD 70 D7    ALIVE:		CALL SENDNAK
0452   D6B8             ;***********************************
0453   D6B8 0E 41       			LD	C,'A'
0454   D6BA CD 2F E6    			CALL LIST
0455   D6BD             ;***********************************			
0456   D6BD 06 05       GET1ST:		LD	B,5
0457   D6BF CD 7C D7    			CALL TOCONIN			; 5s timeout
0458   D6C2 38 0D       			JR	C,REPEAT			; Timed out?
0459   D6C4 FE 04       			CP	EOT
0460   D6C6 28 1A       			JR	Z,GOTEOT			; EOT?
0461   D6C8 FE 18       			CP	CAN
0462   D6CA CA 00 D0    			JP	Z,CYCLE				; CAN?
0463   D6CD FE 01       			CP	SOH
0464   D6CF 28 1F       			JR	Z,GOTSOH			; SOH?
0465   D6D1 3A F2 DE    REPEAT:		LD	A,(RETRY)
0466   D6D4 3C          			INC	A
0467   D6D5 32 F2 DE    			LD	(RETRY),A
0468   D6D8 FE 0A       			CP	MAXTRY
0469   D6DA 20 D9       			JR	NZ,ALIVE			; Try again?
0470   D6DC             OUT3:		
0471   D6DC CD 76 D7    			CALL SENDCAN
0472   D6DF C3 00 D0    			JP	CYCLE
0473   D6E2             			
0474   D6E2 CD 70 D7    GOTEOT:		CALL SENDNAK
0475   D6E5 06 01       			LD	B,1
0476   D6E7 CD 7C D7    			CALL TOCONIN
0477   D6EA CD 6A D7    			CALL SENDACK
0478   D6ED C3 00 D0    			JP	CYCLE
0479   D6F0             			
0480   D6F0 3E 00       GOTSOH:		LD	A,0
0481   D6F2 32 F0 DE    			LD	(CHKSUM),A			; Reset checksum
0482   D6F5 32 F1 DE    			LD	(BYTECNT),A			; Reset byte counter
0483   D6F8 06 01       			LD	B,1
0484   D6FA CD 7C D7    			CALL TOCONIN			; Get incoming block number
0485   D6FD 38 1F       			JR	C,OUT2				; Timed out?
0486   D6FF 4F          			LD	C,A					; Save incoming block number
0487   D700 06 01       			LD	B,1
0488   D702 CD 7C D7    			CALL TOCONIN			; Get complement of incoming block number
0489   D705 38 17       			JR	C,OUT2				; Timed out?
0490   D707 2F          			CPL
0491   D708 B9          			CP	C
0492   D709 20 13       			JR	NZ,OUT2				; block = //block?
0493   D70B 3A F3 DE    			LD	A,(BLOCK)
0494   D70E B9          			CP	C					; Is block number what we expected?
0495   D70F 28 16       			JR	Z,RECPACK
0496   D711 3D          			DEC	A
0497   D712 B9          			CP	C					; block number is the anterior? Probably sender missed our ACK.
0498   D713 20 09       			JR	NZ,OUT2
0499   D715 CD A6 D7    ANTBLK:		CALL PURGE				; Purge input buffer before sending ACK
0500   D718 CD 6A D7    			CALL SENDACK
0501   D71B C3 BD D6    			JP	GET1ST
0502   D71E CD A6 D7    OUT2:		CALL PURGE
0503   D721 CD 76 D7    			CALL SENDCAN
0504   D724 C3 00 D0    			JP	CYCLE
0505   D727 06 01       RECPACK:	LD	B,1					; Start receiving data packet (128 bytes)
0506   D729 CD 7C D7    			CALL TOCONIN
0507   D72C 38 F0       			JR	C,OUT2				; Timed out?
0508   D72E 2A EA DE    			LD	HL,(AAAA)
0509   D731 77          			LD	(HL),A				; Put byte in buffer
0510   D732 23          			INC	HL					; Inc buffer pointer
0511   D733 22 EA DE    			LD	(AAAA),HL
0512   D736 4F          			LD	C,A
0513   D737 3A F0 DE    			LD	A,(CHKSUM)
0514   D73A 81          			ADD	A,C
0515   D73B 32 F0 DE    			LD	(CHKSUM),A			; Update checksum
0516   D73E 3A F1 DE    			LD	A,(BYTECNT)			; Inc byte counter
0517   D741 3C          			INC	A
0518   D742 32 F1 DE    			LD	(BYTECNT),A
0519   D745 FE 80       			CP	128					; Check if we received a full data packet
0520   D747 20 DE       			JR	NZ,RECPACK
0521   D749 06 01       			LD	B,1
0522   D74B CD 7C D7    			CALL TOCONIN			; Get checksum
0523   D74E 38 CE       			JR	C,OUT2				; Timed out?
0524   D750 4F          			LD	C,A
0525   D751 3A F0 DE    			LD	A,(CHKSUM)
0526   D754 B9          			CP	C
0527   D755 C2 D1 D6    			JP	NZ,REPEAT			; Checksum OK?
0528   D758 3E 00       			LD	A,0
0529   D75A 32 F2 DE    			LD	(RETRY),A			; Reset retry counter
0530   D75D 3A F3 DE    			LD	A,(BLOCK)
0531   D760 3C          			INC	A
0532   D761 32 F3 DE    			LD	(BLOCK),A			; Increment block counter
0533   D764             
0534   D764 CD 6A D7    			CALL SENDACK
0535   D767 C3 BD D6    			JP	GET1ST
0536   D76A             			
0537   D76A 0E 06       SENDACK:	LD C,ACK
0538   D76C CD 2C E6    			CALL CONOUT
0539   D76F C9          			RET
0540   D770             
0541   D770 0E 15       SENDNAK:	LD C,NAK
0542   D772 CD 2C E6    			CALL CONOUT
0543   D775 C9          			RET
0544   D776             
0545   D776 0E 18       SENDCAN:	LD C,CAN
0546   D778 CD 2C E6    			CALL CONOUT
0547   D77B C9          			RET
0548   D77C             
0549   D77C             ;==================================================================================
0550   D77C             ; Timed Out Console Input - X seconds, with X passed on reg B
0551   D77C             ; Incoming byte, if any, returns in A
0552   D77C             ; Carry flag set if timed out.
0553   D77C             ;==================================================================================
0554   D77C C5          TOCONIN:	PUSH	BC
0555   D77D E5          			PUSH	HL
0556   D77E             			
0557   D77E             ;***********************************
0558   D77E 0E 54       			LD	C,'T'
0559   D780 CD 2F E6    			CALL LIST
0560   D783 06 05       			LD	B,5
0561   D785             ;***********************************
0562   D785             			
0563   D785 21 AD 02    LOOP0:		LD	HL,685				;2.5					\
0564   D788 0E 23       LOOP1:		LD	C,35				;1.75	\				|
0565   D78A CD 26 E6    LOOP2:		CALL CONST				;36.5	|t=41.5C+0.5	| 
0566   D78D 3C          			INC	A					;1		|				|
0567   D78E 28 0E       			JR	Z,BWAITING			;3/1.75	|				| t=HL(41.5C+6.5)+1.25
0568   D790 79          			LD	A,C					;1		|				|
0569   D791 0D          			DEC	C					;1		|				|
0570   D792 20 F6       			JR	NZ,LOOP2			;3/1.75	/				| with HL=685 and c=35,
0571   D794 2B          			DEC	HL					;1						|  t=0.9994sec (WOW!!!)
0572   D795 7C          			LD	A,H					;1						|
0573   D796 B5          			OR	L					;1						|
0574   D797 20 EF       			JR	NZ,LOOP1			;3/1.75					/
0575   D799 10 EA       			DJNZ	LOOP0			;3.25/2
0576   D79B 37          			SCF
0577   D79C 18 05       			JR	TOUT
0578   D79E CD 29 E6    BWAITING:	CALL CONIN
0579   D7A1 37          			SCF						; Reset carry flag
0580   D7A2 3F          			CCF
0581   D7A3 E1          TOUT:		POP	HL
0582   D7A4 C1          			POP	BC
0583   D7A5 C9          			RET
0584   D7A6             
0585   D7A6             ;==================================================================================
0586   D7A6             ; Purge console input.
0587   D7A6             ;==================================================================================
0588   D7A6 06 03       PURGE:		LD	B,3
0589   D7A8 CD 7C D7    			CALL TOCONIN
0590   D7AB 30 F9       			JR	NC,PURGE
0591   D7AD C9          			RET
0592   D7AE             
0593   D7AE             ;================================================================================================
0594   D7AE             ; Hexadecimal to Executable conversion command HEX2COM AAAA
0595   D7AE             ; Record structure:
0596   D7AE             ;	<start_code> <byte_count> <address> <record_type> <data>...<data> <checksum>
0597   D7AE             ;		':'	        1 byte     2 bytes    00h or 01h       n bytes	    1 byte
0598   D7AE             ;
0599   D7AE             ; Register usage:
0600   D7AE             ;	IX = source address 
0601   D7AE             ;	IY = target address
0602   D7AE             ;================================================================================================
0603   D7AE 11 88 00    HEX2COM:	LD	DE,DMA+8
0604   D7B1 CD 69 DD    			CALL GETWORD		
0605   D7B4 FE 01       			CP	1					; Is the argument OK?
0606   D7B6 C2 00 D0    			JP	NZ,CYCLE
0607   D7B9 C5          			PUSH BC					; IX holds the source address
0608   D7BA DD E1       			POP	IX
0609   D7BC             			
0610   D7BC DD 7E 00    FINDSC:		LD	A,(IX+0)
0611   D7BF DD 23       			INC IX
0612   D7C1 FE 3A       			CP	':'					; Do we have a start code?
0613   D7C3 20 F7       			JR	NZ,FINDSC
0614   D7C5 3E 00       			LD	A,0					; Reset checksum
0615   D7C7 32 F0 DE    			LD	(CHKSUM),A
0616   D7CA CD 57 D8    			CALL HGB				; Get byte count
0617   D7CD 78          			LD	A,B
0618   D7CE FE 00       			CP	0
0619   D7D0 CA 00 D0    			JP	Z,CYCLE				; If byte count=0, we're done.
0620   D7D3 32 F1 DE    			LD	(BYTECNT),A			; Save byte count
0621   D7D6 CD 39 D8    			CALL UPCHKSUM			; Update checksum
0622   D7D9 DD 23       			INC	IX
0623   D7DB CD 61 D8    			CALL HGW				; Get target address
0624   D7DE C5          			PUSH BC
0625   D7DF FD E1       			POP IY					; IY holds the target address
0626   D7E1 CD 39 D8    			CALL UPCHKSUM			; Update checksum
0627   D7E4 41          			LD	B,C
0628   D7E5 CD 39 D8    			CALL UPCHKSUM			; Update checksum
0629   D7E8 CD 41 D8    			CALL PRTADDR			; Print target address
0630   D7EB CD 57 D8    			CALL HGB				; Get record type (just for checksum update)
0631   D7EE CD 39 D8    			CALL UPCHKSUM			; Update checksum
0632   D7F1 DD 23       			INC	IX
0633   D7F3 3A F1 DE    			LD	A,(BYTECNT)
0634   D7F6 47          			LD	B,A
0635   D7F7 C5          GETDATA:	PUSH BC
0636   D7F8 CD 57 D8    			CALL HGB				; Get data byte
0637   D7FB FD 70 00    			LD	(IY+0),B
0638   D7FE CD 39 D8    			CALL UPCHKSUM			; Update checksum
0639   D801 FD 23       			INC	IY
0640   D803 DD 23       			INC IX
0641   D805 C1          			POP BC
0642   D806 10 EF       			DJNZ GETDATA
0643   D808 CD 57 D8    			CALL HGB				; Get checksum
0644   D80B 3A F0 DE    			LD	A,(CHKSUM)
0645   D80E ED 44       			NEG
0646   D810 B8          			CP	B
0647   D811 20 0D       			JR	NZ,CHKSUMER
0648   D813 CD 53 E6    			CALL PRINTSEQ
0649   D816 3A 20 4F 4B 			.DB	": OK.",CR,LF,0
0649   D81A 2E 0D 0A 00 
0650   D81E 18 9C       			JR	FINDSC
0651   D820 CD 53 E6    CHKSUMER:	CALL PRINTSEQ
0652   D823 3A 20 43 68 			.DB	": Checksum Error.",CR,LF,0
0652   D827 65 63 6B 73 
0652   D82B 75 6D 20 45 
0652   D82F 72 72 6F 72 
0652   D833 2E 0D 0A 00 
0653   D837 18 83       			JR	FINDSC
0654   D839             
0655   D839 3A F0 DE    UPCHKSUM:	LD	A,(CHKSUM)
0656   D83C 80          			ADD	A,B
0657   D83D 32 F0 DE    			LD	(CHKSUM),A
0658   D840 C9          			RET
0659   D841             
0660   D841 CD D7 DD    PRTADDR:	CALL PRINTENV
0661   D844 DD 2B       			DEC IX
0662   D846 DD 2B       			DEC IX
0663   D848 DD 2B       			DEC IX
0664   D84A 06 04       			LD	B,4
0665   D84C DD 4E 00    NXTA:		LD	C,(IX+0)
0666   D84F CD 2C E6    			CALL CONOUT
0667   D852 DD 23       			INC	IX
0668   D854 10 F6       			DJNZ NXTA
0669   D856 C9          			RET
0670   D857             			
0671   D857 DD E5       HGB:		PUSH IX
0672   D859 D1          			POP	DE
0673   D85A CD 7D DD    			CALL GETBYTE
0674   D85D D5          			PUSH DE
0675   D85E DD E1       			POP IX
0676   D860 C9          			RET
0677   D861             
0678   D861 DD E5       HGW:		PUSH IX
0679   D863 D1          			POP	DE
0680   D864 CD 69 DD    			CALL GETWORD
0681   D867 D5          			PUSH DE
0682   D868 DD E1       			POP IX
0683   D86A C9          			RET
0684   D86B             
0685   D86B             ;================================================================================================
0686   D86B             ; ASCII to Executable conversion command - ASCII2COM AAAA
0687   D86B             ; Each pair of characters is converted to one byte. The executable is loaded @ 0100h (TPA).
0688   D86B             ;	IX = source address 
0689   D86B             ;	IY = target address
0690   D86B             ;================================================================================================
0691   D86B 11 8A 00    ASCII2COM:	LD	DE,DMA+10
0692   D86E CD 69 DD    			CALL GETWORD		
0693   D871 FE 01       			CP	1					; Is the argument OK?
0694   D873 C2 00 D0    			JP	NZ,CYCLE
0695   D876 C5          			PUSH BC					; IX holds the source address
0696   D877 DD E1       			POP	IX
0697   D879 FD 21 00 01 			LD	IY,0100H
0698   D87D             
0699   D87D DD 7E 00    A2CNB:		LD	A,(IX+0)
0700   D880 CD DD DD    			CALL ISITHEX
0701   D883 FE 01       			CP	1
0702   D885 20 10       			JR	NZ,A2CEND
0703   D887 CD 57 D8    			CALL HGB
0704   D88A FE 01       			CP	1
0705   D88C 20 09       			JR	NZ,A2CEND
0706   D88E FD 70 00    			LD	(IY+0),B
0707   D891 FD 23       			INC	IY
0708   D893 DD 23       			INC IX
0709   D895 18 E6       			JR	A2CNB
0710   D897             			
0711   D897 CD 53 E6    A2CEND:		CALL PRINTSEQ
0712   D89A 3E 54 61 72 			.DB	">Target contains ",0
0712   D89E 67 65 74 20 
0712   D8A2 63 6F 6E 74 
0712   D8A6 61 69 6E 73 
0712   D8AA 20 00 
0713   D8AC 01 00 01    			LD	BC,0100H
0714   D8AF FD E5       			PUSH IY
0715   D8B1 E1          			POP	HL
0716   D8B2 37          			SCF
0717   D8B3 3F          			CCF
0718   D8B4 ED 42       			SBC	HL,BC
0719   D8B6 22 EA DE    			LD	(AAAA),HL			; AAAA contains total bytes written.
0720   D8B9 44          			LD	B,H
0721   D8BA CD 2D DE    			CALL B2HL				; Convert MSByte to ASCII
0722   D8BD 4C          			LD	C,H
0723   D8BE CD 2C E6    			CALL CONOUT
0724   D8C1 4D          			LD	C,L
0725   D8C2 CD 2C E6    			CALL CONOUT
0726   D8C5 2A EA DE    			LD	HL,(AAAA)
0727   D8C8 45          			LD	B,L
0728   D8C9 CD 2D DE    			CALL B2HL				; Convert LSByte to ASCII
0729   D8CC 4C          			LD	C,H
0730   D8CD CD 2C E6    			CALL CONOUT
0731   D8D0 4D          			LD	C,L
0732   D8D1 CD 2C E6    			CALL CONOUT
0733   D8D4 CD 53 E6    			CALL PRINTSEQ
0734   D8D7 68 20 62 79 			.DB	"h bytes.",CR,LF,0
0734   D8DB 74 65 73 2E 
0734   D8DF 0D 0A 00 
0735   D8E2 C9          			RET
0736   D8E3             			
0737   D8E3             ;================================================================================================
0738   D8E3             ; Read disk operation - READ D,TTT,SS
0739   D8E3             ;================================================================================================
0740   D8E3 11 86 00    DREAD:		LD	DE,DMA+6
0741   D8E6 CD E4 D9    			CALL GETDTS
0742   D8E9 FE 01       			CP	1				; Is the argument OK?
0743   D8EB C2 00 D0    			JP	NZ,CYCLE
0744   D8EE CD 49 DA    NEXTSEC:	CALL DTS2LBA
0745   D8F1 CD 0E D9    			CALL PRINTDTS
0746   D8F4 CD 99 D3    			CALL PRINTHDR
0747   D8F7 CD 86 D9    			CALL PRINTDSEC
0748   D8FA CD 29 E6    TAGAIN:		CALL CONIN			; Wait for user's decision
0749   D8FD FE 0D       			CP	CR
0750   D8FF 20 06       			JR	NZ,NOTCR
0751   D901 CD 95 D9    			CALL INCDTS
0752   D904 C3 EE D8    			JP	NEXTSEC
0753   D907 FE 1B       NOTCR:		CP	ESC
0754   D909 CA 00 D0    			JP	Z,CYCLE
0755   D90C 18 EC       			JR	TAGAIN
0756   D90E             
0757   D90E             
0758   D90E CD 53 E6    PRINTDTS:	CALL PRINTSEQ
0759   D911 3E 20 44 54 			.DB	"> DTS: ",0
0759   D915 53 3A 20 00 
0760   D919 3A F4 DE    			LD	A,(DSK)
0761   D91C C6 41       			ADD	A,41H
0762   D91E 4F          			LD	C,A
0763   D91F CD 2C E6    			CALL CONOUT
0764   D922 0E 2D       			LD	C,'-'
0765   D924 CD 2C E6    			CALL CONOUT
0766   D927 3A F6 DE    			LD	A,(TRK+1)
0767   D92A CD 79 D9    			CALL PRINTBYTE
0768   D92D 3A F5 DE    			LD	A,(TRK)
0769   D930 CD 79 D9    			CALL PRINTBYTE
0770   D933 0E 2D       			LD	C,'-'
0771   D935 CD 2C E6    			CALL CONOUT
0772   D938 3A F7 DE    			LD	A,(SEC)
0773   D93B CD 79 D9    			CALL PRINTBYTE
0774   D93E CD 53 E6    			CALL PRINTSEQ
0775   D941 20 2C 4C 42 			.DB	" ,LBA: ",0
0775   D945 41 3A 20 00 
0776   D949 3A F8 DE    			LD	A,(LBA3)
0777   D94C CD 79 D9    			CALL PRINTBYTE
0778   D94F 3A F9 DE    			LD	A,(LBA2)
0779   D952 CD 79 D9    			CALL PRINTBYTE
0780   D955 3A FA DE    			LD	A,(LBA1)
0781   D958 CD 79 D9    			CALL PRINTBYTE
0782   D95B 3A FB DE    			LD	A,(LBA0)
0783   D95E CD 79 D9    			CALL PRINTBYTE
0784   D961 CD 53 E6    			CALL PRINTSEQ
0785   D964 20 28 44 49 			.DB	" (DISKPAD = E000)",CR,LF,0
0785   D968 53 4B 50 41 
0785   D96C 44 20 3D 20 
0785   D970 45 30 30 30 
0785   D974 29 0D 0A 00 
0786   D978             
0787   D978 C9          			RET
0788   D979             
0789   D979 47          PRINTBYTE:	LD	B,A
0790   D97A CD 2D DE    			CALL B2HL
0791   D97D 4C          			LD	C,H
0792   D97E CD 2C E6    			CALL CONOUT
0793   D981 4D          			LD	C,L
0794   D982 CD 2C E6    			CALL CONOUT
0795   D985 C9          			RET
0796   D986             
0797   D986 CD C8 DA    PRINTDSEC:	CALL DISKREAD
0798   D989 11 00 E0    			LD	DE,DISKPAD
0799   D98C 3E 20       			LD	A,32
0800   D98E 32 E8 DE    			LD	(LINNUM),A
0801   D991 CD 82 D4    			CALL SUBMPRN
0802   D994 C9          			RET
0803   D995             
0804   D995 3A F7 DE    INCDTS:		LD	A,(SEC)
0805   D998 FE 1F       			CP	1FH
0806   D99A 28 05       			JR	Z,ZSEC
0807   D99C 3C          			INC	A
0808   D99D 32 F7 DE    			LD	(SEC),A
0809   D9A0 C9          			RET
0810   D9A1 AF          ZSEC:		XOR	A
0811   D9A2 32 F7 DE    			LD	(SEC),A
0812   D9A5 2A F5 DE    			LD	HL,(TRK)
0813   D9A8 01 FF 01    			LD	BC,1FFH
0814   D9AB 37          			SCF
0815   D9AC 3F          			CCF
0816   D9AD ED 42       			SBC	HL,BC
0817   D9AF 28 08       			JR	Z,ZTRK
0818   D9B1 2A F5 DE    			LD	HL,(TRK)
0819   D9B4 23          			INC	HL
0820   D9B5 22 F5 DE    			LD	(TRK),HL
0821   D9B8 C9          			RET
0822   D9B9 21 00 00    ZTRK:		LD	HL,0
0823   D9BC 22 F5 DE    			LD	(TRK),HL
0824   D9BF 3A F4 DE    			LD	A,(DSK)
0825   D9C2 FE 0F       			CP	0FH
0826   D9C4 28 05       			JR	Z,ZDSK
0827   D9C6 3C          			INC	A
0828   D9C7 32 F4 DE    			LD	(DSK),A
0829   D9CA C9          			RET
0830   D9CB AF          ZDSK:		XOR	A
0831   D9CC 32 F4 DE    			LD	(DSK),A
0832   D9CF C9          			RET
0833   D9D0             			
0834   D9D0             ;================================================================================================
0835   D9D0             ; Download 1 sector from disk to memory (@ DMIRROR)
0836   D9D0             ;================================================================================================
0837   D9D0 11 85 00    DDOWN:		LD	DE,DMA+5
0838   D9D3 CD E4 D9    			CALL GETDTS
0839   D9D6 FE 01       			CP	1				; Is the argument OK?
0840   D9D8 C2 00 D0    			JP	NZ,CYCLE
0841   D9DB CD 49 DA    			CALL DTS2LBA
0842   D9DE CD C8 DA    			CALL DISKREAD
0843   D9E1 C3 00 D0    			JP	CYCLE
0844   D9E4             
0845   D9E4             ;================================================================================================
0846   D9E4             ; Routine to get DTS from command line. DE=line_buf_ptr(should point to where DTS starts).
0847   D9E4             ; Returns A=0 if missing arg, A=1 if OK, A=2 if invalid arg. 
0848   D9E4             ;================================================================================================
0849   D9E4 CD 00 DA    GETDTS:		CALL GETDISK
0850   D9E7 FE 01       			CP	1				; Is the argument OK?
0851   D9E9 C2 00 D0    			JP	NZ,CYCLE
0852   D9EC 13          			INC DE
0853   D9ED CD 1B DA    			CALL GETTRACK
0854   D9F0 FE 01       			CP	1				; Is the argument OK?
0855   D9F2 C2 00 D0    			JP	NZ,CYCLE
0856   D9F5 13          			INC	DE
0857   D9F6 13          			INC DE
0858   D9F7 CD 36 DA    			CALL GETSECTOR
0859   D9FA FE 01       			CP	1				; Is the argument OK?
0860   D9FC C2 00 D0    			JP	NZ,CYCLE
0861   D9FF C9          			RET
0862   DA00             
0863   DA00 1A          GETDISK:	LD	A,(DE)
0864   DA01 FE 00       			CP	0
0865   DA03 C2 0A DA    			JP	NZ,GD1
0866   DA06 CD 9E DD    			CALL GBNA
0867   DA09 C9          			RET
0868   DA0A D6 41       GD1:		SUB	'A'
0869   DA0C 32 F4 DE    			LD	(DSK),A
0870   DA0F FE 10       			CP	10H
0871   DA11 FA 18 DA    			JP	M,GD2
0872   DA14 CD BC DD    			CALL GBIA
0873   DA17 C9          			RET
0874   DA18 3E 01       GD2:		LD	A,1
0875   DA1A C9          			RET
0876   DA1B             
0877   DA1B 3E 30       GETTRACK:	LD	A,'0'
0878   DA1D 12          			LD	(DE),A
0879   DA1E CD 69 DD    			CALL GETWORD
0880   DA21 FE 01       			CP	1
0881   DA23 C0          			RET	NZ
0882   DA24 ED 43 F5 DE 			LD	(TRK),BC
0883   DA28 21 FF 01    			LD	HL,1FFH
0884   DA2B 37          			SCF
0885   DA2C 3F          			CCF
0886   DA2D ED 42       			SBC	HL,BC
0887   DA2F 3E 01       			LD	A,1
0888   DA31 F0          			RET	P
0889   DA32 CD BC DD    			CALL GBIA
0890   DA35 C9          			RET
0891   DA36             
0892   DA36 CD 7D DD    GETSECTOR:	CALL GETBYTE
0893   DA39 FE 01       			CP	1
0894   DA3B C0          			RET	NZ
0895   DA3C 78          			LD	A,B
0896   DA3D 32 F7 DE    			LD	(SEC),A
0897   DA40 FE 20       			CP	20H
0898   DA42 3E 01       			LD	A,1
0899   DA44 F8          			RET	M
0900   DA45 CD BC DD    			CALL GBIA
0901   DA48 C9          			RET
0902   DA49             			
0903   DA49             ;================================================================================================
0904   DA49             ; Convert disk/track/sector to LBA0,1,2,3.
0905   DA49             ;================================================================================================
0906   DA49 2A F5 DE    DTS2LBA:	LD	HL,(TRK)
0907   DA4C CB 05       			RLC	L
0908   DA4E CB 05       			RLC	L
0909   DA50 CB 05       			RLC	L
0910   DA52 CB 05       			RLC	L
0911   DA54 CB 05       			RLC	L
0912   DA56 7D          			LD	A,L
0913   DA57 E6 E0       			AND	0E0H
0914   DA59 6F          			LD	L,A
0915   DA5A 3A F7 DE    			LD	A,(SEC)
0916   DA5D 85          			ADD	A,L
0917   DA5E 32 FB DE    			LD	(LBA0),A
0918   DA61 2A F5 DE    			LD	HL,(TRK)
0919   DA64 CB 0D       			RRC	L
0920   DA66 CB 0D       			RRC	L
0921   DA68 CB 0D       			RRC	L
0922   DA6A 7D          			LD	A,L
0923   DA6B E6 1F       			AND	01FH
0924   DA6D 6F          			LD	L,A
0925   DA6E CB 04       			RLC	H
0926   DA70 CB 04       			RLC	H
0927   DA72 CB 04       			RLC	H
0928   DA74 CB 04       			RLC	H
0929   DA76 CB 04       			RLC	H
0930   DA78 7C          			LD	A,H
0931   DA79 E6 20       			AND	020H
0932   DA7B 67          			LD	H,A
0933   DA7C 3A F4 DE    			LD	A,(DSK)
0934   DA7F CB 07       			RLC	A
0935   DA81 CB 07       			RLC	A
0936   DA83 CB 07       			RLC	A
0937   DA85 CB 07       			RLC	A
0938   DA87 CB 07       			RLC	A
0939   DA89 CB 07       			RLC	A
0940   DA8B E6 C0       			AND	0C0H
0941   DA8D 84          			ADD	A,H
0942   DA8E 85          			ADD	A,L
0943   DA8F 32 FA DE    			LD	(LBA1),A
0944   DA92 3A F4 DE    			LD	A,(DSK)
0945   DA95 CB 0F       			RRC	A
0946   DA97 CB 0F       			RRC	A
0947   DA99 E6 03       			AND	03H
0948   DA9B 32 F9 DE    			LD	(LBA2),A
0949   DA9E 3E E0       			LD	A,0E0H
0950   DAA0 32 F8 DE    			LD	(LBA3),A
0951   DAA3 C9          			RET
0952   DAA4             			
0953   DAA4             ;================================================================================================
0954   DAA4             ; Wait for disk to be ready (busy=0,ready=1)
0955   DAA4             ;================================================================================================
0956   DAA4 F5          DWAIT:		PUSH AF
0957   DAA5 DB B7       DWAIT1:		IN 	A,(CF_STATUS)
0958   DAA7 E6 80       			AND	080H
0959   DAA9 FE 80       			CP 	080H
0960   DAAB 28 F8       			JR	Z,DWAIT1
0961   DAAD F1          			POP	AF
0962   DAAE C9          			RET
0963   DAAF             
0964   DAAF             ;================================================================================================
0965   DAAF             ; Set LBA on CF
0966   DAAF             ;================================================================================================
0967   DAAF 3A FB DE    SETLBA:		LD	A,(LBA0)
0968   DAB2 D3 B3       			OUT (CF_LBA0),A
0969   DAB4 3A FA DE    			LD	A,(LBA1)
0970   DAB7 D3 B4       			OUT (CF_LBA1),A
0971   DAB9 3A F9 DE    			LD	A,(LBA2)
0972   DABC D3 B5       			OUT (CF_LBA2),A
0973   DABE 3A F8 DE    			LD	A,(LBA3)
0974   DAC1 D3 B6       			OUT (CF_LBA3),A
0975   DAC3 3E 01       			LD 	A,1
0976   DAC5 D3 B2       			OUT (CF_SECCOUNT),A
0977   DAC7 C9          			RET				
0978   DAC8             
0979   DAC8             ;================================================================================================
0980   DAC8             ; Read physical one sector from disk and write it on DISKPAD
0981   DAC8             ;================================================================================================
0982   DAC8 F5          DISKREAD:	PUSH AF
0983   DAC9 C5          			PUSH BC
0984   DACA E5          			PUSH HL
0985   DACB             
0986   DACB CD A4 DA    			CALL DWAIT
0987   DACE CD AF DA    			CALL SETLBA
0988   DAD1 3E 20       			LD 	A,CF_READ_SEC
0989   DAD3 D3 B7       			OUT (CF_COMMAND),A
0990   DAD5 CD A4 DA    			CALL DWAIT
0991   DAD8 0E 04       			LD 	C,4
0992   DADA 21 00 E0    			LD 	HL,DISKPAD
0993   DADD 06 80       rd4secs:	LD 	B,128
0994   DADF 00          rdByte:		NOP
0995   DAE0 00          			NOP
0996   DAE1 00          			NOP
0997   DAE2 DB B0       			IN 	A,(CF_DATA)
0998   DAE4 77          			LD 	(HL),A
0999   DAE5 23          			INC HL
1000   DAE6 05          			DEC B
1001   DAE7 20 F6       			JR 	NZ, rdByte
1002   DAE9 0D          			DEC C
1003   DAEA 20 F1       			JR 	NZ,rd4secs
1004   DAEC             
1005   DAEC E1          			POP HL
1006   DAED C1          			POP BC
1007   DAEE F1          			POP AF
1008   DAEF C9          			RET
1009   DAF0             
1010   DAF0             ;================================================================================================
1011   DAF0             ; Write physical sector from DISKPAD to host.
1012   DAF0             ;================================================================================================
1013   DAF0 F5          DISKWRITE:	PUSH AF
1014   DAF1 C5          			PUSH BC
1015   DAF2 E5          			PUSH HL
1016   DAF3             
1017   DAF3 CD A4 DA    			CALL DWAIT
1018   DAF6 CD AF DA    			CALL SETLBA
1019   DAF9 3E 30       			LD 	A,CF_WRITE_SEC
1020   DAFB D3 B7       			OUT (CF_COMMAND),A
1021   DAFD CD A4 DA    			CALL DWAIT
1022   DB00 0E 04       			LD 	C,4
1023   DB02 21 00 E0    			LD 	HL,DISKPAD
1024   DB05 06 80       wr4secs:	LD 	B,128
1025   DB07 00          wrByte:		NOP
1026   DB08 00          			NOP
1027   DB09 00          			NOP
1028   DB0A 7E          			LD 	A,(HL)
1029   DB0B D3 B0       			OUT (CF_DATA),A
1030   DB0D 23          			INC HL
1031   DB0E 05          			DEC B
1032   DB0F 20 F6       			JR 	NZ,wrByte
1033   DB11 0D          			DEC C
1034   DB12 20 F1       			JR 	NZ,wr4secs
1035   DB14             
1036   DB14 E1          			POP HL
1037   DB15 C1          			POP BC
1038   DB16 F1          			POP AF
1039   DB17 C9          			RET
1040   DB18             
1041   DB18             ;================================================================================================
1042   DB18             ; Upload 1 sector from memory (@ DMIRROR) to disk - UP D,TTT,SS
1043   DB18             ;================================================================================================
1044   DB18 11 83 00    DUP:		LD	DE,DMA+3
1045   DB1B CD E4 D9    			CALL GETDTS
1046   DB1E FE 01       			CP	1				; Is the argument OK?
1047   DB20 C2 00 D0    			JP	NZ,CYCLE
1048   DB23 CD 49 DA    			CALL DTS2LBA
1049   DB26 CD F0 DA    			CALL DISKWRITE
1050   DB29 C3 00 D0    			JP	CYCLE
1051   DB2C             
1052   DB2C             ;================================================================================================
1053   DB2C             ; Verify disk. Do this on on all sectors of the disk - VERIFY D
1054   DB2C             ;================================================================================================
1055   DB2C 11 87 00    DVERIFY:	LD	DE,DMA+7
1056   DB2F CD 00 DA    			CALL GETDISK
1057   DB32 FE 01       			CP	1				; Is the argument OK?
1058   DB34 C2 00 D0    			JP	NZ,CYCLE
1059   DB37 21 00 00    			LD	HL,0
1060   DB3A 22 F5 DE    			LD	(TRK),HL
1061   DB3D 21 00 E0    			LD	HL,DISKPAD
1062   DB40 22 EA DE    			LD	(AAAA),HL		; AAAA will hold beginning of DISKPAD
1063   DB43 21 FF E1    			LD	HL,DISKPAD+1FFH
1064   DB46 22 EC DE    			LD	(BBBB),HL		; BBBB will hold end of DISKPAD
1065   DB49 3E 00       NEWTRK:		LD	A,0
1066   DB4B 32 F7 DE    			LD	(SEC),A
1067   DB4E CD 53 E6    			CALL PRINTSEQ
1068   DB51 0D 0A 54 72 			.DB	CR,LF,"Track ",0
1068   DB55 61 63 6B 20 
1068   DB59 00 
1069   DB5A 2A F5 DE    			LD	HL,(TRK)
1070   DB5D 7C          			LD	A,H
1071   DB5E CD 79 D9    			CALL PRINTBYTE
1072   DB61 2A F5 DE    			LD	HL,(TRK)
1073   DB64 7D          			LD	A,L
1074   DB65 CD 79 D9    			CALL PRINTBYTE
1075   DB68 CD 49 DA    NEWSEC:		CALL DTS2LBA
1076   DB6B CD A7 DB    			CALL BKUP			; Backup content of sector before tests
1077   DB6E 3E 00       			LD	A,0				; Test R/W filling sector with 00
1078   DB70 CD C5 DB    			CALL BLKTEST
1079   DB73 3E FF       			LD	A,0FFH			; Test R/W filling sector with FF
1080   DB75 CD C5 DB    			CALL BLKTEST
1081   DB78 3E AA       			LD	A,0AAH			; Test R/W filling sector with AA
1082   DB7A CD C5 DB    			CALL BLKTEST
1083   DB7D 3E 55       			LD	A,55H			; Test R/W filling sector with 55
1084   DB7F CD C5 DB    			CALL BLKTEST
1085   DB82 CD B6 DB    			CALL RESBKUP		; restore original content to sector
1086   DB85 0E 2E       			LD	C,'.'
1087   DB87 CD 2C E6    			CALL CONOUT
1088   DB8A 3A F7 DE    			LD	A,(SEC)
1089   DB8D 3C          			INC	A
1090   DB8E 32 F7 DE    			LD	(SEC),A
1091   DB91 FE 20       			CP	20H
1092   DB93 20 D3       			JR	NZ,NEWSEC
1093   DB95 2A F5 DE    			LD	HL,(TRK)
1094   DB98 23          			INC	HL
1095   DB99 22 F5 DE    			LD (TRK),HL
1096   DB9C 7C          			LD	A,H
1097   DB9D FE 02       			CP	2
1098   DB9F 20 A8       			JR	NZ,NEWTRK
1099   DBA1 CD BB DC    			CALL CRLF
1100   DBA4 C3 00 D0    			JP	CYCLE
1101   DBA7             
1102   DBA7 CD C8 DA    BKUP:		CALL DISKREAD		; Read sector and copy DISKPAD to DISKBKUP
1103   DBAA 21 00 E0    			LD	HL,DISKPAD
1104   DBAD 11 00 E2    			LD	DE,DISKBKUP
1105   DBB0 01 00 02    			LD	BC,0200H
1106   DBB3 ED B0       			LDIR
1107   DBB5 C9          			RET
1108   DBB6             			
1109   DBB6 21 00 E2    RESBKUP:	LD	HL,DISKBKUP		; Copy DISKBKUP to DISKPAD and write sector
1110   DBB9 11 00 E0    			LD	DE,DISKPAD
1111   DBBC 01 00 02    			LD	BC,0200H
1112   DBBF ED B0       			LDIR
1113   DBC1 CD F0 DA    			CALL DISKWRITE
1114   DBC4 C9          			RET
1115   DBC5             
1116   DBC5 47          BLKTEST:	LD	B,A
1117   DBC6 32 EE DE    			LD	(CCCC),A
1118   DBC9 CD 95 D5    			CALL MFPRIM
1119   DBCC CD F0 DA    			CALL DISKWRITE
1120   DBCF CD C8 DA    			CALL DISKREAD
1121   DBD2 3A EE DE    			LD	A,(CCCC)
1122   DBD5 21 00 E0    			LD	HL,DISKPAD
1123   DBD8 06 00       			LD	B,0
1124   DBDA BE          VBT1:		CP	(HL)
1125   DBDB 20 0C       			JR	NZ,VMISMATCH
1126   DBDD 23          			INC	HL
1127   DBDE 10 FA       			DJNZ VBT1
1128   DBE0 06 00       			LD	B,0
1129   DBE2 BE          VBT2:		CP	(HL)
1130   DBE3 20 04       			JR	NZ,VMISMATCH
1131   DBE5 23          			INC	HL
1132   DBE6 10 FA       			DJNZ VBT2
1133   DBE8 C9          			RET
1134   DBE9             
1135   DBE9 CD 53 E6    VMISMATCH:	CALL PRINTSEQ
1136   DBEC 0D 0A 45 72 			.DB	CR,LF,"Error on sector ",0
1136   DBF0 72 6F 72 20 
1136   DBF4 6F 6E 20 73 
1136   DBF8 65 63 74 6F 
1136   DBFC 72 20 00 
1137   DBFF 3A F7 DE    			LD	A,(SEC)
1138   DC02 CD 79 D9    			CALL PRINTBYTE
1139   DC05 CD 53 E6    			CALL PRINTSEQ
1140   DC08 20 43 6F 6E 			.DB	" Continue test? (Y/N)",CR,LF,0
1140   DC0C 74 69 6E 75 
1140   DC10 65 20 74 65 
1140   DC14 73 74 3F 20 
1140   DC18 28 59 2F 4E 
1140   DC1C 29 0D 0A 00 
1141   DC20 CD 29 E6    			CALL CONIN
1142   DC23 FE 59       			CP	'Y'
1143   DC25 C8          			RET	Z
1144   DC26 FE 79       			CP	'y'
1145   DC28 C8          			RET	Z
1146   DC29 C3 00 D0    			JP	CYCLE
1147   DC2C             
1148   DC2C CD 2D DE    PRTB2HL:	CALL B2HL
1149   DC2F 4C          			LD	C,H
1150   DC30 CD 2C E6    			CALL CONOUT
1151   DC33 4D          			LD	C,L
1152   DC34 CD 2C E6    			CALL CONOUT
1153   DC37 C9          			RET
1154   DC38             			
1155   DC38             ;================================================================================================
1156   DC38             ; Format a disk - FORMAT D
1157   DC38             ;================================================================================================
1158   DC38 C9          DFORMAT:	RET
1159   DC39             
1160   DC39             ;================================================================================================
1161   DC39             ; Run (Execute) Command - RUN AAAA
1162   DC39             ;================================================================================================
1163   DC39 11 83 00    RUN:		LD	DE,DMA+3
1164   DC3C CD 69 DD    			CALL GETWORD		
1165   DC3F FE 01       			CP	1				; Is the argument OK?
1166   DC41 C2 00 D0    			JP	NZ,CYCLE
1167   DC44 C5          			PUSH BC
1168   DC45 E1          			POP	HL
1169   DC46 E9          			JP	(HL)			; Continue execution where user requested. His responsability!
1170   DC47             
1171   DC47             ;================================================================================================
1172   DC47             ; Unknown Command message. HL has the address of the line buffer.
1173   DC47             ;================================================================================================
1174   DC47 CD D7 DD    UNKNOWN:	CALL PRINTENV
1175   DC4A 21 80 00    			LD	HL,DMA
1176   DC4D 7E          UNEXT:		LD	A,(HL)
1177   DC4E FE 00       			CP	0
1178   DC50 28 07       			JR	Z,UEND
1179   DC52 4F          			LD	C,A
1180   DC53 CD 2C E6    			CALL CONOUT
1181   DC56 23          			INC	HL
1182   DC57 18 F4       			JR	UNEXT
1183   DC59 0E 3F       UEND:		LD	C,'?'
1184   DC5B CD 2C E6    			CALL CONOUT
1185   DC5E CD BB DC    			CALL CRLF
1186   DC61 C9          			RET
1187   DC62             
1188   DC62             ;================================================================================================
1189   DC62             ; Routine to manage line input from console. Returns A=0FFh if user typed Ctrl-Z (ETX).
1190   DC62             ;================================================================================================
1191   DC62 21 80 00    LINER:		LD	HL,DMA
1192   DC65 22 E6 DE    			LD	(LBUFPTR),HL			; Init line buffer pointer.
1193   DC68 CD 29 E6    WAITCHAR:	CALL CONIN					; Wait till user types something.
1194   DC6B FE 03       			CP	ETX						; Is it Ctrl-C?
1195   DC6D 28 42       			JR	Z,GOTETX
1196   DC6F FE 1A       			CP	SUB						; Is is Ctrl-Z?
1197   DC71 28 3E       			JR	Z,GOTSUB
1198   DC73 FE 18       			CP	CAN
1199   DC75 28 40       			JR	Z,GOTCAN				; Is it <CAN>? (= delete line).
1200   DC77 FE 0D       			CP	CR
1201   DC79 28 29       			JR	Z,GOTCR					; Is it <ENTER>?
1202   DC7B FE 08       			CP	BS
1203   DC7D 28 1E       			JR	Z,GOTBS					; Is it <BS>? (= backspace).
1204   DC7F 2A E6 DE    			LD	HL,(LBUFPTR)			; None of the above options, so let's put it in the buffer.
1205   DC82 01 D0 00    			LD	BC,MAXLBUF				; But 1st, we have to check if we still have space.
1206   DC85 37          			SCF
1207   DC86 3F          			CCF
1208   DC87 ED 42       			SBC	HL,BC
1209   DC89 28 0E       			JR	Z,LBUFFULL				; Is buffer full?
1210   DC8B 2A E6 DE    			LD	HL,(LBUFPTR)
1211   DC8E 77          			LD	(HL),A
1212   DC8F 23          			INC	HL
1213   DC90 22 E6 DE    			LD	(LBUFPTR),HL
1214   DC93 4F          			LD	C,A
1215   DC94 CD 2C E6    OUTWAIT:	CALL CONOUT
1216   DC97 18 CF       			JR	WAITCHAR
1217   DC99             
1218   DC99 0E 07       LBUFFULL:	LD	C,BEL					; Buffer is full. Just ring the bell.
1219   DC9B 18 F7       			JR	OUTWAIT
1220   DC9D             
1221   DC9D 16 01       GOTBS:		LD	D,1						; We got a backspace.
1222   DC9F CD C6 DC    AFTGOTBS:	CALL BSPROC
1223   DCA2 18 C4       			JR	WAITCHAR
1224   DCA4             
1225   DCA4 2A E6 DE    GOTCR:		LD	HL,(LBUFPTR)			; We got an ENTER, which means the the user
1226   DCA7 3E 00       			LD	A,0						; has finished typing the command line.
1227   DCA9 77          			LD	(HL),A
1228   DCAA CD BB DC    			CALL CRLF
1229   DCAD CD F4 DC    			CALL UPPER					; Convert line to uppercase before parsing.
1230   DCB0 C9          			RET
1231   DCB1             GOTETX:
1232   DCB1 CD BB DC    GOTSUB:		CALL CRLF					; User abort request (Ctrl-C or Ctrl-Z).
1233   DCB4 3E 0C       			LD	A,FF
1234   DCB6 C9          			RET
1235   DCB7             			
1236   DCB7 16 00       GOTCAN:		LD	D,0						; We got a line delete.
1237   DCB9 18 E4       			JR	AFTGOTBS
1238   DCBB             			
1239   DCBB 0E 0D       CRLF:		LD	C,CR
1240   DCBD CD 2C E6    			CALL CONOUT
1241   DCC0 0E 0A       			LD	C,LF
1242   DCC2 CD 2C E6    			CALL CONOUT					; Output <CR><LF>.
1243   DCC5 C9          			RET
1244   DCC6             
1245   DCC6             ;================================================================================================
1246   DCC6             ; Routine to do the backspace and line delete. D=1, backspace; D=0, delete line.
1247   DCC6             ;================================================================================================
1248   DCC6 2A E6 DE    BSPROC:		LD	HL,(LBUFPTR)
1249   DCC9 01 80 00    			LD	BC,DMA
1250   DCCC 37          			SCF
1251   DCCD 3F          			CCF
1252   DCCE ED 42       			SBC	HL,BC
1253   DCD0 28 1C       			JR	Z,LBUFEMPTY
1254   DCD2 2A E6 DE    			LD	HL,(LBUFPTR)
1255   DCD5 2B          			DEC	HL
1256   DCD6 22 E6 DE    			LD	(LBUFPTR),HL
1257   DCD9 0E 08       			LD	C,BS
1258   DCDB CD 2C E6    			CALL CONOUT
1259   DCDE 0E 20       			LD	C,' '
1260   DCE0 CD 2C E6    			CALL CONOUT
1261   DCE3 0E 08       			LD	C,BS
1262   DCE5 CD 2C E6    			CALL CONOUT
1263   DCE8 7A          			LD	A,D
1264   DCE9 FE 01       			CP	1
1265   DCEB C8          			RET	Z
1266   DCEC 18 D8       			JR	BSPROC
1267   DCEE             
1268   DCEE 0E 07       LBUFEMPTY:	LD	C,BEL
1269   DCF0 CD 2C E6    			CALL CONOUT
1270   DCF3 C9          			RET
1271   DCF4             			
1272   DCF4             ;================================================================================================
1273   DCF4             ; Routine to convert line buffer content to upper case
1274   DCF4             ;================================================================================================
1275   DCF4 21 7F 00    UPPER:		LD	HL,DMA-1
1276   DCF7 23          NEXT2UP:	INC	HL
1277   DCF8 7E          			LD	A,(HL)
1278   DCF9 FE 00       			CP	0
1279   DCFB C8          			RET	Z
1280   DCFC FE 61       			CP	'a'
1281   DCFE FA F7 DC    			JP	M,NEXT2UP
1282   DD01 FE 7B       			CP	'{'
1283   DD03 F2 F7 DC    			JP	P,NEXT2UP
1284   DD06 D6 20       			SUB	20H
1285   DD08 77          			LD	(HL),A
1286   DD09 18 EC       			JR	NEXT2UP
1287   DD0B             			
1288   DD0B             ;================================================================================================
1289   DD0B             ; Routine to parse command. HL=cmd_table_pointer.
1290   DD0B             ; regA=cmd_num or FFh if no match. HL=jump_address or 0000 if no match.
1291   DD0B             ;================================================================================================
1292   DD0B C5          PARSER:		PUSH BC
1293   DD0C D5          			PUSH DE
1294   DD0D 11 80 00    			LD	DE,DMA
1295   DD10 3E 00       			LD	A,0
1296   DD12 32 E5 DE    			LD	(CMDNUM),A		; Init command number.
1297   DD15 1A          NEXT2PARS:	LD	A,(DE)
1298   DD16 BE          			CP	(HL)
1299   DD17 20 04       			JR	NZ,NOTEQU
1300   DD19 23          			INC	HL
1301   DD1A 13          			INC	DE
1302   DD1B 18 F8       			JR	NEXT2PARS
1303   DD1D 7E          NOTEQU:		LD	A,(HL)
1304   DD1E FE 1E       			CP	RS
1305   DD20 28 04       			JR	Z,ISRS
1306   DD22 FE 03       			CP	ETX
1307   DD24 20 22       			JR	NZ,NEXTCMD
1308   DD26 1A          ISRS:		LD	A,(DE)
1309   DD27 FE 00       			CP	0
1310   DD29 28 04       			JR	Z,ISZERO
1311   DD2B FE 20       			CP	' '
1312   DD2D 20 19       			JR	NZ,NEXTCMD
1313   DD2F 7E          ISZERO:		LD	A,(HL)
1314   DD30 FE 03       			CP	ETX
1315   DD32 28 03       			JR	Z,CMDMATCH
1316   DD34 23          			INC	HL
1317   DD35 18 F8       			JR	ISZERO
1318   DD37 23          CMDMATCH:	INC	HL
1319   DD38 E5          			PUSH HL
1320   DD39 D1          			POP	DE				; DE=addr of jump table
1321   DD3A 26 00       			LD	H,0
1322   DD3C 3A E5 DE    			LD	A,(CMDNUM)
1323   DD3F 6F          			LD	L,A
1324   DD40 E5          			PUSH HL
1325   DD41 C1          			POP	BC
1326   DD42 09          			ADD	HL,BC			; command_number * 2
1327   DD43 09          			ADD	HL,BC			; command_number * 3
1328   DD44 19          			ADD HL,DE
1329   DD45 D1          			POP	DE
1330   DD46 C1          			POP	BC
1331   DD47 C9          			RET					; A=command_number, HL=jump_address
1332   DD48 7E          NEXTCMD:	LD	A,(HL)
1333   DD49 FE 1E       			CP	RS
1334   DD4B 28 07       			JR	Z,ISRS2
1335   DD4D FE 03       			CP	ETX
1336   DD4F 28 10       			JR	Z,NOMATCH
1337   DD51 23          			INC	HL
1338   DD52 18 F4       			JR	NEXTCMD
1339   DD54 23          ISRS2:		INC	HL
1340   DD55 3A E5 DE    			LD	A,(CMDNUM)
1341   DD58 3C          			INC	A
1342   DD59 32 E5 DE    			LD	(CMDNUM),A
1343   DD5C 11 80 00    			LD	DE,DMA
1344   DD5F 18 B4       			JR	NEXT2PARS
1345   DD61 21 00 00    NOMATCH:	LD	HL,0
1346   DD64 3E FF       			LD	A,0FFH
1347   DD66 D1          			POP	DE
1348   DD67 C1          			POP	BC
1349   DD68 C9          			RET
1350   DD69             
1351   DD69             ;================================================================================================
1352   DD69             ; Routine to get word from command line. DE=line_buf_ptr(should point to where word starts).
1353   DD69             ; If successfull, return word in BC. A=0 if missing arg, A=1 if OK, A=2 if invalid arg. 
1354   DD69             ;================================================================================================
1355   DD69 CD 7D DD    GETWORD:	CALL GETBYTE
1356   DD6C FE 01       			CP	1
1357   DD6E C0          			RET	NZ
1358   DD6F 48          			LD	C,B
1359   DD70 13          			INC	DE
1360   DD71 CD 7D DD    			CALL GETBYTE
1361   DD74 FE 01       			CP	1
1362   DD76 C0          			RET NZ
1363   DD77 78          			LD	A,B
1364   DD78 41          			LD	B,C
1365   DD79 4F          			LD	C,A
1366   DD7A 3E 01       			LD	A,1
1367   DD7C C9          			RET
1368   DD7D             			
1369   DD7D             ;================================================================================================
1370   DD7D             ; Routine to get byte from command line. DE=line_buf_ptr(should point to where byte starts).
1371   DD7D             ; If successfull, return byte in regB. A=0 if missing arg, A=1 if OK, A=2 if invalid arg. 
1372   DD7D             ;================================================================================================
1373   DD7D 1A          GETBYTE:	LD	A,(DE)
1374   DD7E FE 00       			CP	0
1375   DD80 28 1C       			JR	Z,GBNA				; End of buffer and no arg found.
1376   DD82 FE 20       			CP	' '
1377   DD84 28 33       			JR	Z,GBSPC				; Trim the space.
1378   DD86 67          			LD	H,A
1379   DD87 CD DD DD    			CALL ISITHEX
1380   DD8A FE 01       			CP	1
1381   DD8C 20 2E       			JR	NZ,GBIA				; Invalid arg.
1382   DD8E 13          			INC	DE
1383   DD8F 1A          			LD	A,(DE)
1384   DD90 6F          			LD	L,A
1385   DD91 CD DD DD    			CALL ISITHEX
1386   DD94 FE 01       			CP	1
1387   DD96 20 24       			JR	NZ,GBIA				; Invalid arg.
1388   DD98 CD F7 DD    			CALL HL2B				; Convert ASCII pair to byte
1389   DD9B 3E 01       			LD	A,1
1390   DD9D C9          			RET
1391   DD9E CD 53 E6    GBNA:		CALL PRINTSEQ
1392   DDA1 3E 4D 69 73 			.DB	">Missing argument.",CR,LF,0
1392   DDA5 73 69 6E 67 
1392   DDA9 20 61 72 67 
1392   DDAD 75 6D 65 6E 
1392   DDB1 74 2E 0D 0A 
1392   DDB5 00 
1393   DDB6 3E 00       			LD	A,0
1394   DDB8 C9          			RET
1395   DDB9 13          GBSPC:		INC	DE
1396   DDBA 18 C1       			JR	GETBYTE
1397   DDBC CD 53 E6    GBIA:		CALL PRINTSEQ
1398   DDBF 3E 49 6E 76 			.DB	">Invalid argument.",CR,LF,0
1398   DDC3 61 6C 69 64 
1398   DDC7 20 61 72 67 
1398   DDCB 75 6D 65 6E 
1398   DDCF 74 2E 0D 0A 
1398   DDD3 00 
1399   DDD4 3E 02       			LD	A,2
1400   DDD6 C9          			RET
1401   DDD7             
1402   DDD7 0E 3E       PRINTENV:	LD	C,PROMPT
1403   DDD9 CD 2C E6    			CALL CONOUT
1404   DDDC C9          			RET
1405   DDDD             
1406   DDDD FE 47       ISITHEX:	CP	'G'
1407   DDDF F2 F1 DD    			JP	P,NOTHEX
1408   DDE2 FE 41       			CP	'A'
1409   DDE4 F2 F4 DD    			JP	P,ISHEX
1410   DDE7 FE 40       			CP	040H
1411   DDE9 F2 F1 DD    			JP	P,NOTHEX
1412   DDEC FE 30       			CP	'0'
1413   DDEE F2 F4 DD    			JP	P,ISHEX
1414   DDF1 3E 00       NOTHEX:		LD	A,0
1415   DDF3 C9          			RET
1416   DDF4 3E 01       ISHEX:		LD	A,1
1417   DDF6 C9          			RET
1418   DDF7             
1419   DDF7             ;================================================================================================
1420   DDF7             ; Convert ASCII to HEX (HL --> B)
1421   DDF7             ;================================================================================================
1422   DDF7 C5          HL2B:		PUSH BC
1423   DDF8 3E 60       			LD	A,060H
1424   DDFA 94          			SUB	H
1425   DDFB 0E 57       			LD	C,057H
1426   DDFD DA 0A DE    			JP	C,DISCOUNT
1427   DE00 3E 40       			LD	A,040H
1428   DE02 94          			SUB	H
1429   DE03 0E 37       			LD	C,037H
1430   DE05 DA 0A DE    			JP	C,DISCOUNT
1431   DE08 0E 30       			LD	C,030H
1432   DE0A 7C          DISCOUNT:	LD	A,H
1433   DE0B 91          			SUB	C
1434   DE0C 47          CONVL:		LD	B,A
1435   DE0D CB 20       			SLA	B
1436   DE0F CB 20       			SLA	B
1437   DE11 CB 20       			SLA	B
1438   DE13 CB 20       			SLA	B
1439   DE15 3E 60       			LD	A,060H
1440   DE17 95          			SUB	L
1441   DE18 0E 57       			LD	C,057H
1442   DE1A DA 27 DE    			JP	C,DISCOUNT2
1443   DE1D 3E 40       			LD	A,040H
1444   DE1F 95          			SUB	L
1445   DE20 0E 37       			LD	C,037H
1446   DE22 DA 27 DE    			JP	C,DISCOUNT2
1447   DE25 0E 30       			LD	C,030H
1448   DE27 7D          DISCOUNT2:	LD	A,L
1449   DE28 91          			SUB	C
1450   DE29 B0          			OR	B
1451   DE2A C1          			POP	BC
1452   DE2B 47          			LD	B,A
1453   DE2C C9          			RET
1454   DE2D             
1455   DE2D             ;================================================================================================
1456   DE2D             ; Convert HEX to ASCII (B --> HL)
1457   DE2D             ;================================================================================================
1458   DE2D C5          B2HL:		PUSH	BC
1459   DE2E 78          			LD	A,B
1460   DE2F E6 0F       			AND	0FH
1461   DE31 6F          			LD	L,A
1462   DE32 D6 0A       			SUB	0AH
1463   DE34 0E 30       			LD	C,030H
1464   DE36 DA 3B DE    			JP	C,COMPENSE
1465   DE39 0E 37       			LD	C,037H
1466   DE3B 7D          COMPENSE:	LD	A,L
1467   DE3C 81          			ADD	A,C
1468   DE3D 6F          			LD	L,A
1469   DE3E 78          			LD	A,B
1470   DE3F E6 F0       			AND	0F0H
1471   DE41 CB 3F       			SRL	A
1472   DE43 CB 3F       			SRL	A
1473   DE45 CB 3F       			SRL	A
1474   DE47 CB 3F       			SRL	A
1475   DE49 67          			LD	H,A
1476   DE4A D6 0A       			SUB	0AH
1477   DE4C 0E 30       			LD	C,030H
1478   DE4E DA 53 DE    			JP	C,COMPENSE2
1479   DE51 0E 37       			LD	C,037H
1480   DE53 7C          COMPENSE2:	LD	A,H
1481   DE54 81          			ADD	A,C
1482   DE55 67          			LD	H,A
1483   DE56 C1          			POP	BC
1484   DE57 C9          			RET
1485   DE58             
1486   DE58             ;================================================================================================
1487   DE58 3F 1E       CMDTBL:		.DB	"?",RS
1488   DE5A 42 4F 4F 54 			.DB	"BOOT",RS
1488   DE5E 1E 
1489   DE5F 58 4D 4F 44 			.DB	"XMODEM",RS
1489   DE63 45 4D 1E 
1490   DE66 48 45 58 32 			.DB	"HEX2COM",RS
1490   DE6A 43 4F 4D 1E 
1491   DE6E 41 53 43 49 			.DB	"ASCII2COM",RS
1491   DE72 49 32 43 4F 
1491   DE76 4D 1E 
1492   DE78 43 4F 4D 50 			.DB	"COMPARE",RS
1492   DE7C 41 52 45 1E 
1493   DE80 52 55 4E 1E 			.DB	"RUN",RS
1494   DE84 52 45 41 44 			.DB	"READ",RS
1494   DE88 1E 
1495   DE89 44 52 45 41 			.DB	"DREAD",RS
1495   DE8D 44 1E 
1496   DE8F 57 52 49 54 			.DB	"WRITE",RS
1496   DE93 45 1E 
1497   DE95 43 4F 50 59 			.DB	"COPY",RS
1497   DE99 1E 
1498   DE9A 46 49 4C 4C 			.DB	"FILL",RS
1498   DE9E 1E 
1499   DE9F 44 4F 57 4E 			.DB	"DOWN",RS
1499   DEA3 1E 
1500   DEA4 55 50 1E    			.DB	"UP",RS
1501   DEA7 46 4F 52 4D 			.DB	"FORMAT",RS
1501   DEAB 41 54 1E 
1502   DEAE 56 45 52 49 			.DB	"VERIFY",ETX
1502   DEB2 46 59 03 
1503   DEB5             
1504   DEB5 C3 1C D0    JMPTBL:		JP	HELP
1505   DEB8 C3 23 E6    			JP	WBOOT
1506   DEBB C3 93 D6    			JP	XMODEM
1507   DEBE C3 AE D7    			JP	HEX2COM
1508   DEC1 C3 6B D8    			JP	ASCII2COM
1509   DEC4 C3 AC D5    			JP	MCOMP
1510   DEC7 C3 39 DC    			JP	RUN
1511   DECA C3 6F D3    			JP	MREAD
1512   DECD C3 E3 D8    			JP	DREAD
1513   DED0 C3 F7 D4    			JP	MWRITE
1514   DED3 C3 22 D5    			JP	MCOPY
1515   DED6 C3 66 D5    			JP	MFILL
1516   DED9 C3 D0 D9    			JP	DDOWN
1517   DEDC C3 18 DB    			JP	DUP
1518   DEDF C3 38 DC    			JP	DFORMAT
1519   DEE2 C3 2C DB    			JP	DVERIFY
1520   DEE5             			
1521   DEE5             ;================================================================================================
1522   DEE5 00          CMDNUM		.DB	0
1523   DEE6 00 00       LBUFPTR		.DW	0
1524   DEE8 00          LINNUM		.DB	0
1525   DEE9 00          COLNUM		.DB	0
1526   DEEA 00 00       AAAA		.DW	0
1527   DEEC 00 00       BBBB		.DW	0
1528   DEEE 00 00       CCCC		.DW	0
1529   DEF0 00          CHKSUM	 	.DB	0					; Checksum for xmodem
1530   DEF1 00          BYTECNT		.DB	0					; Byte counter for xmodem and hex2com
1531   DEF2 00          RETRY		.DB 0					; Retry counter for xmodem
1532   DEF3 00          BLOCK		.DB	0					; Block counter for xmodem
1533   DEF4 00          DSK			.DB	0					; Disk number [00,0F]
1534   DEF5 00 00       TRK			.DW	0					; Track number [0,1FF]
1535   DEF7 00          SEC			.DB	0					; Sector number [0,1F]
1536   DEF8 00          LBA3		.DB	0
1537   DEF9 00          LBA2		.DB	0
1538   DEFA 00          LBA1		.DB	0
1539   DEFB 00          LBA0		.DB	0
1540   DEFC             
1541   DEFC             			.END
tasm: Number of errors = 0
