0001   0000             ;================================================================================================
0002   0000             ; MONITOR 2.0  - USE WITH VT100 TERMINAL
0003   0000             ; MONITOR 2.1B - Unified command set, no more environment change.
0004   0000             ; MONITOR 2.1C - Working on dread.
0005   0000             ; MONITOR 2.1D - Implement ascii2com function.
0006   0000             ; MONITOR 2.1E - Implement memory compare function.
0007   0000             ; MONITOR 2.1F - Improved memory compare function. Find difference before displaying content.
0008   0000             ;                Put some NOPs in DISKWRITE and DISKREAD.
0009   0000             ; MONITOR 2.1G - Implement disk verification function.
0010   0000             ; MONITOR 2.2  - Implement FLASH function.
0011   0000             ; MONITOR 2.3  - Fix bug in COMPARE.
0012   0000             ;                Fix bug in GETDISK.
0013   0000             ;================================================================================================
0014   0000             #INCLUDE	"equates.h"
0001+  0000             
0002+  0000             CCP				.EQU	0D000h			; Base of CCP (or Monitor).
0003+  0000             BIOS			.EQU	0E620h			; Base of BIOS.
0004+  0000             ROM_CCP			.EQU	CCP-0C000h		; Base of CCP in ROM
0005+  0000             ROM_BIOS		.EQU	BIOS-0C000h		; Base of BIOS in ROM
0006+  0000             
0007+  0000             ccp				.EQU	CCP
0008+  0000             bios			.EQU	BIOS
0015   0000             
0016   0000             IOBYTE		.EQU	3
0017   0000             TPA			.EQU	0100H				; Transient Programs Area
0018   0000             MONITOR		.EQU	CCP					; Monitor entry point
0019   0000             DMA			.EQU	0080H				; Buffer used by Monitor
0020   0000             DISKPAD		.EQU	0E400H				; Draft area used by disk R/W ops
0021   0000             DISKBKUP	.EQU	0E200H				; Backup area used by disk verify operation
0022   0000             CFINIT		.EQU	0E869H
0023   0000             
0024   0000             ;================================================================================================
0025   0000             ; BIOS functions.
0026   0000             ;================================================================================================
0027   0000             LEAP		.EQU	3					; 3 bytes for each entry (JP aaaa)
0028   0000             
0029   0000             BOOT:		.EQU	BIOS				;  0 Initialize.
0030   0000             WBOOT:		.EQU	BIOS+(LEAP*1)		;  1 Warm boot.
0031   0000             CONST:		.EQU	BIOS+(LEAP*2)		;  2 Console status.
0032   0000             CONIN:		.EQU	BIOS+(LEAP*3)		;  3 Console input.
0033   0000             CONOUT:		.EQU	BIOS+(LEAP*4)		;  4 Console OUTput.
0034   0000             LIST:		.EQU	BIOS+(LEAP*5)		;  5 List OUTput.
0035   0000             PUNCH:		.EQU	BIOS+(LEAP*6)		;  6 Punch OUTput.
0036   0000             READER:		.EQU	BIOS+(LEAP*7)		;  7 Reader input.
0037   0000             HOME:		.EQU	BIOS+(LEAP*8)		;  8 Home disk.
0038   0000             SELDSK:		.EQU	BIOS+(LEAP*9)		;  9 Select disk.
0039   0000             SETTRK:		.EQU	BIOS+(LEAP*10)		; 10 Select track.
0040   0000             SETSEC:		.EQU	BIOS+(LEAP*11)		; 11 Select sector.
0041   0000             SETDMA:		.EQU	BIOS+(LEAP*12)		; 12 Set DMA ADDress.
0042   0000             READ:		.EQU	BIOS+(LEAP*13)		; 13 Read 128 bytes.
0043   0000             WRITE:		.EQU	BIOS+(LEAP*14)		; 14 Write 128 bytes.
0044   0000             LISTST:		.EQU	BIOS+(LEAP*15)		; 15 List status.
0045   0000             SECTRAN:	.EQU	BIOS+(LEAP*16)		; 16 Sector translate.
0046   0000             PRINTSEQ:	.EQU	BIOS+(LEAP*17)		; not a BIOS function
0047   0000             
0048   0000             ;================================================================================================
0049   0000             ; ASCII characters.
0050   0000             ;================================================================================================
0051   0000             NUL			.EQU	00H
0052   0000             SOH			.EQU	01H
0053   0000             STX			.EQU	02H
0054   0000             ETX			.EQU	03H
0055   0000             EOT			.EQU	04H
0056   0000             ENQ			.EQU	05H
0057   0000             ACK			.EQU	06H
0058   0000             BEL			.EQU	07H
0059   0000             BS			.EQU	08H			; ^H
0060   0000             HT			.EQU	09H
0061   0000             LF			.EQU	0AH
0062   0000             VT			.EQU	0BH
0063   0000             FF			.EQU	0CH
0064   0000             CR			.EQU	0DH
0065   0000             SO			.EQU	0EH
0066   0000             SI			.EQU	0FH
0067   0000             DLE			.EQU	10H
0068   0000             DC1			.EQU	11H
0069   0000             DC2			.EQU	12H
0070   0000             DC3			.EQU	13H
0071   0000             DC4			.EQU	14H
0072   0000             NAK			.EQU	15H			; ^U
0073   0000             SYN			.EQU	16H
0074   0000             ETB			.EQU	17H
0075   0000             CAN			.EQU	18H			; ^X
0076   0000             EM			.EQU	19H
0077   0000             SUB			.EQU	1AH
0078   0000             ESC			.EQU	1BH
0079   0000             FS			.EQU	1CH
0080   0000             GS			.EQU	1DH
0081   0000             RS			.EQU	1EH
0082   0000             US			.EQU	1FH
0083   0000             
0084   0000             ;================================================================================================
0085   0000             ; Some constants
0086   0000             ;================================================================================================
0087   0000             MAXLBUF		.EQU	DMA+80
0088   0000             PROMPT		.EQU	'>'
0089   0000             MAXTRY		.EQU	10
0090   0000             CLOCK		.EQU	10					; clock (MHz)
0091   0000             KT			.EQU	5814*CLOCK
0092   0000             
0093   0000             ;================================================================================================
0094   0000             ; FLASH card stuff
0095   0000             ;================================================================================================
0096   0000             FLASH_ADDR		.EQU	0B0H			; Base I/O address for compact flash card
0097   0000             CF_DATA			.EQU	(FLASH_ADDR+0)	; R/W
0098   0000             CF_FEATURES		.EQU	(FLASH_ADDR+1)	; W
0099   0000             CF_ERROR		.EQU	(FLASH_ADDR+1)	; R
0100   0000             CF_SECCOUNT		.EQU	(FLASH_ADDR+2)	; W
0101   0000             
0102   0000             CF_SECTOR		.EQU	(FLASH_ADDR+3)	; W
0103   0000             CF_CYL_LOW		.EQU	(FLASH_ADDR+4)	; W
0104   0000             CF_CYL_HI		.EQU	(FLASH_ADDR+5)	; W
0105   0000             CF_HEAD			.EQU	(FLASH_ADDR+6)	; W
0106   0000             
0107   0000             CF_LBA0			.EQU	(FLASH_ADDR+3)	; W
0108   0000             CF_LBA1			.EQU	(FLASH_ADDR+4)	; W
0109   0000             CF_LBA2			.EQU	(FLASH_ADDR+5)	; W
0110   0000             CF_LBA3			.EQU	(FLASH_ADDR+6)	; W
0111   0000             
0112   0000             CF_STATUS		.EQU	(FLASH_ADDR+7)	; R
0113   0000             CF_COMMAND		.EQU	(FLASH_ADDR+7)	; W
0114   0000             
0115   0000             ;CF Features
0116   0000             CF_8BIT			.EQU	1
0117   0000             CF_NOCACHE		.EQU	082H
0118   0000             
0119   0000             ;CF Commands
0120   0000             CF_READ_SEC		.EQU	020H
0121   0000             CF_WRITE_SEC	.EQU	030H
0122   0000             CF_SET_FEAT		.EQU 	0EFH
0123   0000             ;================================================================================================
0124   0000             ; MAIN PROGRAM STARTS HERE
0125   0000             ;================================================================================================
0126   D000             			.ORG MONITOR
0127   D000             
0128   D000 AF          			XOR	A
0129   D001 32 42 E1    			LD	(FCINI),A				; FLASH Card not initialized.
0130   D004 CD B7 DF    CYCLE:		CALL PRINTENV
0131   D007 CD 28 DE    			CALL LINER					; Call the line manager
0132   D00A 3A 80 00    			LD	A,(DMA)
0133   D00D FE 00       			CP	0
0134   D00F 28 F3       			JR	Z,CYCLE					; User ENTERed an empty line. No need to parse.
0135   D011 21 1E E0    			LD	HL,CMDTBL
0136   D014 CD D1 DE    			CALL PARSER					; Find command comparing buffer with Command Table.
0137   D017 3C          			INC	A
0138   D018 28 01       			JR	Z,UNK					; No match found in command table.
0139   D01A E9          			JP	(HL)					; Jump to Command Routine
0140   D01B CD 0D DE    UNK:		CALL UNKNOWN
0141   D01E 18 E4       			JR	CYCLE
0142   D020             			
0143   D020             ;================================================================================================
0144   D020             ; Help for main program
0145   D020             ;================================================================================================
0146   D020 CD 81 DE    HELP:		CALL CRLF
0147   D023 CD 53 E6    			CALL PRINTSEQ
0148   D026 20 4D 4F 4E 			.DB	" MONITOR 2.3 - Dec/2021.",CR,LF
0148   D02A 49 54 4F 52 
0148   D02E 20 32 2E 33 
0148   D032 20 2D 20 44 
0148   D036 65 63 2F 32 
0148   D03A 30 32 31 2E 
0148   D03E 0D 0A 
0149   D040 20 4F 70 74 			.DB	" Options:   READ aaaa             read from memory.",CR,LF
0149   D044 69 6F 6E 73 
0149   D048 3A 20 20 20 
0149   D04C 52 45 41 44 
0149   D050 20 61 61 61 
0149   D054 61 20 20 20 
0149   D058 20 20 20 20 
0149   D05C 20 20 20 20 
0149   D060 20 20 72 65 
0149   D064 61 64 20 66 
0149   D068 72 6F 6D 20 
0149   D06C 6D 65 6D 6F 
0149   D070 72 79 2E 0D 
0149   D074 0A 
0150   D075 20 20 20 20 			.DB "            WRITE aaaa,c1 c2 cN   write to memory.",CR,LF
0150   D079 20 20 20 20 
0150   D07D 20 20 20 20 
0150   D081 57 52 49 54 
0150   D085 45 20 61 61 
0150   D089 61 61 2C 63 
0150   D08D 31 20 63 32 
0150   D091 20 63 4E 20 
0150   D095 20 20 77 72 
0150   D099 69 74 65 20 
0150   D09D 74 6F 20 6D 
0150   D0A1 65 6D 6F 72 
0150   D0A5 79 2E 0D 0A 
0151   D0A9 20 20 20 20 			.DB "            COPY aaaa-bbbb,cccc   copy memory block.",CR,LF
0151   D0AD 20 20 20 20 
0151   D0B1 20 20 20 20 
0151   D0B5 43 4F 50 59 
0151   D0B9 20 61 61 61 
0151   D0BD 61 2D 62 62 
0151   D0C1 62 62 2C 63 
0151   D0C5 63 63 63 20 
0151   D0C9 20 20 63 6F 
0151   D0CD 70 79 20 6D 
0151   D0D1 65 6D 6F 72 
0151   D0D5 79 20 62 6C 
0151   D0D9 6F 63 6B 2E 
0151   D0DD 0D 0A 
0152   D0DF 20 20 20 20 			.DB "            FILL aaaa-bbbb,cc     fill memory block.",CR,LF
0152   D0E3 20 20 20 20 
0152   D0E7 20 20 20 20 
0152   D0EB 46 49 4C 4C 
0152   D0EF 20 61 61 61 
0152   D0F3 61 2D 62 62 
0152   D0F7 62 62 2C 63 
0152   D0FB 63 20 20 20 
0152   D0FF 20 20 66 69 
0152   D103 6C 6C 20 6D 
0152   D107 65 6D 6F 72 
0152   D10B 79 20 62 6C 
0152   D10F 6F 63 6B 2E 
0152   D113 0D 0A 
0153   D115 20 20 20 20 			.DB "            COMPARE aaaa,bbbb     compare memory areas.",CR,LF
0153   D119 20 20 20 20 
0153   D11D 20 20 20 20 
0153   D121 43 4F 4D 50 
0153   D125 41 52 45 20 
0153   D129 61 61 61 61 
0153   D12D 2C 62 62 62 
0153   D131 62 20 20 20 
0153   D135 20 20 63 6F 
0153   D139 6D 70 61 72 
0153   D13D 65 20 6D 65 
0153   D141 6D 6F 72 79 
0153   D145 20 61 72 65 
0153   D149 61 73 2E 0D 
0153   D14D 0A 
0154   D14E 20 20 20 20 			.DB "            FLASH                 initialize FLASH Card.",CR,LF
0154   D152 20 20 20 20 
0154   D156 20 20 20 20 
0154   D15A 46 4C 41 53 
0154   D15E 48 20 20 20 
0154   D162 20 20 20 20 
0154   D166 20 20 20 20 
0154   D16A 20 20 20 20 
0154   D16E 20 20 69 6E 
0154   D172 69 74 69 61 
0154   D176 6C 69 7A 65 
0154   D17A 20 46 4C 41 
0154   D17E 53 48 20 43 
0154   D182 61 72 64 2E 
0154   D186 0D 0A 
0155   D188 20 20 20 20 			.DB	"            DREAD d,ttt,ss        read from disk.",CR,LF
0155   D18C 20 20 20 20 
0155   D190 20 20 20 20 
0155   D194 44 52 45 41 
0155   D198 44 20 64 2C 
0155   D19C 74 74 74 2C 
0155   D1A0 73 73 20 20 
0155   D1A4 20 20 20 20 
0155   D1A8 20 20 72 65 
0155   D1AC 61 64 20 66 
0155   D1B0 72 6F 6D 20 
0155   D1B4 64 69 73 6B 
0155   D1B8 2E 0D 0A 
0156   D1BB 20 20 20 20 			.DB "            DOWN d,ttt,ss         download one sector from disk.",CR,LF
0156   D1BF 20 20 20 20 
0156   D1C3 20 20 20 20 
0156   D1C7 44 4F 57 4E 
0156   D1CB 20 64 2C 74 
0156   D1CF 74 74 2C 73 
0156   D1D3 73 20 20 20 
0156   D1D7 20 20 20 20 
0156   D1DB 20 20 64 6F 
0156   D1DF 77 6E 6C 6F 
0156   D1E3 61 64 20 6F 
0156   D1E7 6E 65 20 73 
0156   D1EB 65 63 74 6F 
0156   D1EF 72 20 66 72 
0156   D1F3 6F 6D 20 64 
0156   D1F7 69 73 6B 2E 
0156   D1FB 0D 0A 
0157   D1FD 20 20 20 20 			.DB "            UP d,ttt,ss           upload one sector to disk.",CR,LF
0157   D201 20 20 20 20 
0157   D205 20 20 20 20 
0157   D209 55 50 20 64 
0157   D20D 2C 74 74 74 
0157   D211 2C 73 73 20 
0157   D215 20 20 20 20 
0157   D219 20 20 20 20 
0157   D21D 20 20 75 70 
0157   D221 6C 6F 61 64 
0157   D225 20 6F 6E 65 
0157   D229 20 73 65 63 
0157   D22D 74 6F 72 20 
0157   D231 74 6F 20 64 
0157   D235 69 73 6B 2E 
0157   D239 0D 0A 
0158   D23B 20 20 20 20 			.DB "            VERIFY d              verify disk.",CR,LF
0158   D23F 20 20 20 20 
0158   D243 20 20 20 20 
0158   D247 56 45 52 49 
0158   D24B 46 59 20 64 
0158   D24F 20 20 20 20 
0158   D253 20 20 20 20 
0158   D257 20 20 20 20 
0158   D25B 20 20 76 65 
0158   D25F 72 69 66 79 
0158   D263 20 64 69 73 
0158   D267 6B 2E 0D 0A 
0159   D26B 20 20 20 20 			.DB "            FORMAT d              format disk.",CR,LF
0159   D26F 20 20 20 20 
0159   D273 20 20 20 20 
0159   D277 46 4F 52 4D 
0159   D27B 41 54 20 64 
0159   D27F 20 20 20 20 
0159   D283 20 20 20 20 
0159   D287 20 20 20 20 
0159   D28B 20 20 66 6F 
0159   D28F 72 6D 61 74 
0159   D293 20 64 69 73 
0159   D297 6B 2E 0D 0A 
0160   D29B 20 20 20 20 			.DB "            XMODEM r aaaa         receive data using xmodem protocol.",CR,LF
0160   D29F 20 20 20 20 
0160   D2A3 20 20 20 20 
0160   D2A7 58 4D 4F 44 
0160   D2AB 45 4D 20 72 
0160   D2AF 20 61 61 61 
0160   D2B3 61 20 20 20 
0160   D2B7 20 20 20 20 
0160   D2BB 20 20 72 65 
0160   D2BF 63 65 69 76 
0160   D2C3 65 20 64 61 
0160   D2C7 74 61 20 75 
0160   D2CB 73 69 6E 67 
0160   D2CF 20 78 6D 6F 
0160   D2D3 64 65 6D 20 
0160   D2D7 70 72 6F 74 
0160   D2DB 6F 63 6F 6C 
0160   D2DF 2E 0D 0A 
0161   D2E2 20 20 20 20 			.DB "            XMODEM s aaaa-bbbb    send data using xmodem protocol.",CR,LF
0161   D2E6 20 20 20 20 
0161   D2EA 20 20 20 20 
0161   D2EE 58 4D 4F 44 
0161   D2F2 45 4D 20 73 
0161   D2F6 20 61 61 61 
0161   D2FA 61 2D 62 62 
0161   D2FE 62 62 20 20 
0161   D302 20 20 73 65 
0161   D306 6E 64 20 64 
0161   D30A 61 74 61 20 
0161   D30E 75 73 69 6E 
0161   D312 67 20 78 6D 
0161   D316 6F 64 65 6D 
0161   D31A 20 70 72 6F 
0161   D31E 74 6F 63 6F 
0161   D322 6C 2E 0D 0A 
0162   D326 20 20 20 20 			.DB "            HEX2COM aaaa          convert intel hex to executable.",CR,LF
0162   D32A 20 20 20 20 
0162   D32E 20 20 20 20 
0162   D332 48 45 58 32 
0162   D336 43 4F 4D 20 
0162   D33A 61 61 61 61 
0162   D33E 20 20 20 20 
0162   D342 20 20 20 20 
0162   D346 20 20 63 6F 
0162   D34A 6E 76 65 72 
0162   D34E 74 20 69 6E 
0162   D352 74 65 6C 20 
0162   D356 68 65 78 20 
0162   D35A 74 6F 20 65 
0162   D35E 78 65 63 75 
0162   D362 74 61 62 6C 
0162   D366 65 2E 0D 0A 
0163   D36A 20 20 20 20 			.DB "            RUN aaaa              run program.",CR,LF
0163   D36E 20 20 20 20 
0163   D372 20 20 20 20 
0163   D376 52 55 4E 20 
0163   D37A 61 61 61 61 
0163   D37E 20 20 20 20 
0163   D382 20 20 20 20 
0163   D386 20 20 20 20 
0163   D38A 20 20 72 75 
0163   D38E 6E 20 70 72 
0163   D392 6F 67 72 61 
0163   D396 6D 2E 0D 0A 
0164   D39A 20 20 20 20 			.DB "            BOOT                  warm boot.",CR,LF,0
0164   D39E 20 20 20 20 
0164   D3A2 20 20 20 20 
0164   D3A6 42 4F 4F 54 
0164   D3AA 20 20 20 20 
0164   D3AE 20 20 20 20 
0164   D3B2 20 20 20 20 
0164   D3B6 20 20 20 20 
0164   D3BA 20 20 77 61 
0164   D3BE 72 6D 20 62 
0164   D3C2 6F 6F 74 2E 
0164   D3C6 0D 0A 00 
0165   D3C9 C3 04 D0    			JP	CYCLE
0166   D3CC             			
0167   D3CC             ;================================================================================================
0168   D3CC             ; Read memory operations - READ AAAA
0169   D3CC             ;================================================================================================
0170   D3CC 11 84 00    MREAD:		LD	DE,DMA+4
0171   D3CF CD 2F DF    			CALL GETWORD		; Get aaaa
0172   D3D2 FE 01       			CP	1				; Is the argument OK?
0173   D3D4 C2 04 D0    			JP	NZ,CYCLE
0174   D3D7 C5          			PUSH BC
0175   D3D8 D1          			POP	DE				; DE will be the address holder
0176   D3D9 7B          			LD	A,E
0177   D3DA E6 F0       			AND	0F0H
0178   D3DC 5F          			LD	E,A				; trim addr (xxx0)
0179   D3DD CD F6 D3    NEWHDR:		CALL PRINTHDR		; Print the header
0180   D3E0 3E 10       			LD	A,16
0181   D3E2 32 AA E0    			LD	(LINNUM),A
0182   D3E5             
0183   D3E5 CD DF D4    			CALL SUBMPRN
0184   D3E8             			
0185   D3E8 CD 29 E6    TRYAGAIN:	CALL CONIN			; Wait for user's decision
0186   D3EB FE 0D       			CP	CR
0187   D3ED 28 EE       			JR	Z,NEWHDR
0188   D3EF FE 1B       			CP	ESC
0189   D3F1 CA 04 D0    			JP	Z,CYCLE
0190   D3F4 18 F2       			JR	TRYAGAIN
0191   D3F6             
0192   D3F6 CD 53 E6    PRINTHDR:	CALL PRINTSEQ
0193   D3F9 3E 41 44 44 			.DB ">ADDR: 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F  0123456789ABCDEF",CR,LF,
0193   D3FD 52 3A 20 30 
0193   D401 30 20 30 31 
0193   D405 20 30 32 20 
0193   D409 30 33 20 30 
0193   D40D 34 20 30 35 
0193   D411 20 30 36 20 
0193   D415 30 37 20 30 
0193   D419 38 20 30 39 
0193   D41D 20 30 41 20 
0193   D421 30 42 20 30 
0193   D425 43 20 30 44 
0193   D429 20 30 45 20 
0193   D42D 30 46 20 20 
0193   D431 30 31 32 33 
0193   D435 34 35 36 37 
0193   D439 38 39 41 42 
0193   D43D 43 44 45 46 
0193   D441 0D 0A 
0194   D443 3E 2D 2D 2D 			.DB ">----- -----------------------------------------------  ----------------",0
0194   D447 2D 2D 20 2D 
0194   D44B 2D 2D 2D 2D 
0194   D44F 2D 2D 2D 2D 
0194   D453 2D 2D 2D 2D 
0194   D457 2D 2D 2D 2D 
0194   D45B 2D 2D 2D 2D 
0194   D45F 2D 2D 2D 2D 
0194   D463 2D 2D 2D 2D 
0194   D467 2D 2D 2D 2D 
0194   D46B 2D 2D 2D 2D 
0194   D46F 2D 2D 2D 2D 
0194   D473 2D 2D 2D 2D 
0194   D477 2D 2D 20 20 
0194   D47B 2D 2D 2D 2D 
0194   D47F 2D 2D 2D 2D 
0194   D483 2D 2D 2D 2D 
0194   D487 2D 2D 2D 2D 
0194   D48B 00 
0195   D48C C9          			RET
0196   D48D             
0197   D48D CD 81 DE    PRINTFTR:	CALL CRLF
0198   D490 CD 53 E6    			CALL PRINTSEQ
0199   D493 3E 23 3D 3D 			.DB ">#================= <ENTER> = next page, <ESC> = quit =================#",CR,LF,0
0199   D497 3D 3D 3D 3D 
0199   D49B 3D 3D 3D 3D 
0199   D49F 3D 3D 3D 3D 
0199   D4A3 3D 3D 3D 20 
0199   D4A7 3C 45 4E 54 
0199   D4AB 45 52 3E 20 
0199   D4AF 3D 20 6E 65 
0199   D4B3 78 74 20 70 
0199   D4B7 61 67 65 2C 
0199   D4BB 20 3C 45 53 
0199   D4BF 43 3E 20 3D 
0199   D4C3 20 71 75 69 
0199   D4C7 74 20 3D 3D 
0199   D4CB 3D 3D 3D 3D 
0199   D4CF 3D 3D 3D 3D 
0199   D4D3 3D 3D 3D 3D 
0199   D4D7 3D 3D 3D 23 
0199   D4DB 0D 0A 00 
0200   D4DE C9          			RET
0201   D4DF             
0202   D4DF             SUBMPRN:
0203   D4DF CD 2B D5    NEWLINE:	CALL PRINTADDR
0204   D4E2 06 10       			LD	B,16
0205   D4E4 C5          NEWCOL:		PUSH BC
0206   D4E5 1A          			LD	A,(DE)			; Start printing the memory content
0207   D4E6 13          			INC	DE
0208   D4E7 47          			LD	B,A
0209   D4E8 CD F3 DF    			CALL B2HL
0210   D4EB 4C          			LD	C,H
0211   D4EC CD 2C E6    			CALL CONOUT
0212   D4EF 4D          			LD	C,L
0213   D4F0 CD 2C E6    			CALL CONOUT
0214   D4F3 0E 20       			LD	C,' '
0215   D4F5 CD 2C E6    			CALL CONOUT
0216   D4F8 C1          			POP	BC
0217   D4F9 10 E9       			DJNZ NEWCOL
0218   D4FB 0E 20       			LD	C,' '
0219   D4FD CD 2C E6    			CALL CONOUT
0220   D500 21 F0 FF    			LD	HL,0FFF0H		; This is -10h
0221   D503 19          			ADD	HL,DE			; Go back to beginning of line
0222   D504 E5          			PUSH HL
0223   D505 D1          			POP	DE
0224   D506 06 10       			LD	B,16
0225   D508 C5          NEWCOL2:	PUSH BC				; Start printing the printables
0226   D509 0E 2E       			LD	C,'.'
0227   D50B 1A          			LD	A,(DE)
0228   D50C FE 20       			CP	20H
0229   D50E FA 17 D5    			JP	M,NOTPRTBL
0230   D511 FE 7F       			CP	7FH
0231   D513 F2 17 D5    			JP	P,NOTPRTBL
0232   D516 4F          			LD	C,A
0233   D517 CD 2C E6    NOTPRTBL:	CALL CONOUT
0234   D51A 13          			INC	DE
0235   D51B C1          			POP	BC
0236   D51C 10 EA       			DJNZ NEWCOL2
0237   D51E 3A AA E0    			LD	A,(LINNUM)
0238   D521 3D          			DEC	A
0239   D522 32 AA E0    			LD	(LINNUM),A
0240   D525 20 B8       			JR	NZ,NEWLINE
0241   D527 CD 8D D4    			CALL PRINTFTR		; Print footer message
0242   D52A C9          			RET
0243   D52B             
0244   D52B CD 81 DE    PRINTADDR:	CALL CRLF
0245   D52E CD B7 DF    			CALL PRINTENV
0246   D531 42          			LD	B,D				; Print the address
0247   D532 CD F3 DF    			CALL B2HL
0248   D535 4C          			LD	C,H
0249   D536 CD 2C E6    			CALL CONOUT
0250   D539 4D          			LD	C,L
0251   D53A CD 2C E6    			CALL CONOUT
0252   D53D 43          			LD	B,E
0253   D53E CD F3 DF    			CALL B2HL
0254   D541 4C          			LD	C,H
0255   D542 CD 2C E6    			CALL CONOUT
0256   D545 4D          			LD	C,L
0257   D546 CD 2C E6    			CALL CONOUT
0258   D549 0E 3A       			LD	C,':'
0259   D54B CD 2C E6    			CALL CONOUT
0260   D54E 0E 20       			LD	C,' '
0261   D550 CD 2C E6    			CALL CONOUT
0262   D553 C9          			RET
0263   D554             			
0264   D554             ;================================================================================================
0265   D554             ; Write memory operations - WRITE AAAA,C1 C2 C3...
0266   D554             ;================================================================================================
0267   D554 11 85 00    MWRITE:		LD	DE,DMA+5
0268   D557 CD 2F DF    			CALL GETWORD		; Get aaaa
0269   D55A FE 01       			CP	1				; Is the argument OK?
0270   D55C C2 04 D0    			JP	NZ,CYCLE
0271   D55F ED 43 AC E0 			LD	(AAAA),BC		; Save aaaa
0272   D563 11 8A 00    			LD	DE,DMA+10
0273   D566 13          MWNEXT:		INC	DE
0274   D567 1A          			LD	A,(DE)
0275   D568 FE 00       			CP	0
0276   D56A CA 04 D0    			JP	Z,CYCLE			; End of char string?
0277   D56D CD 43 DF    			CALL GETBYTE		; Get cc
0278   D570 FE 01       			CP	1				; Is the argument OK?
0279   D572 C2 04 D0    			JP	NZ,CYCLE
0280   D575 2A AC E0    			LD	HL,(AAAA)
0281   D578 70          			LD	(HL),B			; Put the byte in memory
0282   D579 23          			INC	HL
0283   D57A 22 AC E0    			LD	(AAAA),HL
0284   D57D 18 E7       			JR	MWNEXT
0285   D57F             
0286   D57F             ;================================================================================================
0287   D57F             ; Copy memory operations - COPY AAAA-BBBB,CCCC
0288   D57F             ;================================================================================================
0289   D57F 11 84 00    MCOPY:		LD	DE,DMA+4
0290   D582 CD 2F DF    			CALL GETWORD		; Get aaaa
0291   D585 FE 01       			CP	1				; Is the argument OK?
0292   D587 C2 04 D0    			JP	NZ,CYCLE
0293   D58A ED 43 AC E0 			LD	(AAAA),BC		; Save aaaa
0294   D58E 11 8A 00    			LD	DE,DMA+10
0295   D591 CD 2F DF    			CALL GETWORD		; Get bbbb
0296   D594 FE 01       			CP	1				; Is the argument OK?
0297   D596 C2 04 D0    			JP	NZ,CYCLE
0298   D599 ED 43 AE E0 			LD	(BBBB),BC		; Save bbbb
0299   D59D 11 8F 00    			LD	DE,DMA+15
0300   D5A0 CD 2F DF    			CALL GETWORD		; Get cccc
0301   D5A3 FE 01       			CP	1				; Is the argument OK?
0302   D5A5 C2 04 D0    			JP	NZ,CYCLE
0303   D5A8 ED 43 B0 E0 			LD	(CCCC),BC		; Save cccc
0304   D5AC 2A AE E0    			LD	HL,(BBBB)
0305   D5AF ED 5B AC E0 			LD	DE,(AAAA)
0306   D5B3 AF          			XOR	A				; Reset carry flag
0307   D5B4 ED 52       			SBC	HL,DE
0308   D5B6 23          			INC	HL
0309   D5B7 EB          			EX	DE,HL			; HL=source
0310   D5B8 D5          			PUSH DE
0311   D5B9 C1          			POP BC				; BC=counter
0312   D5BA ED 5B B0 E0 			LD	DE,(CCCC)		; DE=target
0313   D5BE ED B0       			LDIR
0314   D5C0 C3 04 D0    			JP	CYCLE
0315   D5C3             
0316   D5C3             ;================================================================================================
0317   D5C3             ; Fill memory operations - FILL AAAA-BBBB,CC
0318   D5C3             ;================================================================================================
0319   D5C3 11 84 00    MFILL:		LD	DE,DMA+4
0320   D5C6 CD 2F DF    			CALL GETWORD		; Get aaaa
0321   D5C9 FE 01       			CP	1				; Is the argument OK?
0322   D5CB C2 04 D0    			JP	NZ,CYCLE
0323   D5CE ED 43 AC E0 			LD	(AAAA),BC		; Save aaaa
0324   D5D2 11 8A 00    			LD	DE,DMA+10
0325   D5D5 CD 2F DF    			CALL GETWORD		; Get bbbb
0326   D5D8 FE 01       			CP	1				; Is the argument OK?
0327   D5DA C2 04 D0    			JP	NZ,CYCLE
0328   D5DD ED 43 AE E0 			LD	(BBBB),BC		; Save bbbb
0329   D5E1 11 8F 00    			LD	DE,DMA+15
0330   D5E4 CD 43 DF    			CALL GETBYTE		; Get cc
0331   D5E7 FE 01       			CP	1				; Is the argument OK?
0332   D5E9 C2 04 D0    			JP	NZ,CYCLE
0333   D5EC CD F2 D5    			CALL MFPRIM			; Call the primitiv for memory fill.
0334   D5EF C3 04 D0    			JP	CYCLE
0335   D5F2             			
0336   D5F2 2A AC E0    MFPRIM:		LD	HL,(AAAA)		; This routine is also used by disk verify.
0337   D5F5 70          			LD	(HL),B			; Put cc in the 1st position of the area to be filled.
0338   D5F6 2A AE E0    			LD	HL,(BBBB)
0339   D5F9 ED 5B AC E0 			LD	DE,(AAAA)
0340   D5FD AF          			XOR	A				; Reset carry flag
0341   D5FE ED 52       			SBC	HL,DE
0342   D600 EB          			EX	DE,HL			; HL=source
0343   D601 D5          			PUSH DE
0344   D602 C1          			POP BC				; BC=counter
0345   D603 E5          			PUSH HL
0346   D604 D1          			POP	DE
0347   D605 13          			INC DE
0348   D606 ED B0       			LDIR
0349   D608 C9          			RET
0350   D609             
0351   D609             ;================================================================================================
0352   D609             ; Compare two memory areas - COMPARE AAAA,BBBB
0353   D609             ;================================================================================================
0354   D609 11 88 00    MCOMP:		LD	DE,DMA+8
0355   D60C CD 2F DF    			CALL GETWORD		; Get aaaa
0356   D60F FE 01       			CP	1				; Is the argument OK?
0357   D611 C2 04 D0    			JP	NZ,CYCLE
0358   D614 ED 43 AC E0 			LD	(AAAA),BC		; Save aaaa
0359   D618 C5          			PUSH BC
0360   D619 DD E1       			POP	IX
0361   D61B 11 8D 00    			LD	DE,DMA+13
0362   D61E CD 2F DF    			CALL GETWORD		; Get bbbb
0363   D621 FE 01       			CP	1				; Is the argument OK?
0364   D623 C2 04 D0    			JP	NZ,CYCLE
0365   D626 ED 43 AE E0 			LD	(BBBB),BC		; Save bbbb
0366   D62A C5          			PUSH BC
0367   D62B FD E1       			POP	IY
0368   D62D ED 5B AC E0 MCNEWL:		LD	DE,(AAAA)
0369   D631 CD 2B D5    			CALL PRINTADDR
0370   D634 06 10       			LD	B,16
0371   D636 C5          MCNEWC:		PUSH BC
0372   D637 1A          			LD	A,(DE)			; Start printing the 1st memory area content
0373   D638 13          			INC	DE
0374   D639 47          			LD	B,A
0375   D63A CD F3 DF    			CALL B2HL
0376   D63D 4C          			LD	C,H
0377   D63E CD 2C E6    			CALL CONOUT
0378   D641 4D          			LD	C,L
0379   D642 CD 2C E6    			CALL CONOUT
0380   D645 0E 20       			LD	C,' '
0381   D647 CD 2C E6    			CALL CONOUT
0382   D64A C1          			POP	BC
0383   D64B 10 E9       			DJNZ MCNEWC
0384   D64D             			
0385   D64D DD 2A AC E0 			LD	IX,(AAAA)
0386   D651 ED 5B AE E0 			LD	DE,(BBBB)
0387   D655 CD 2B D5    			CALL PRINTADDR
0388   D658 06 10       			LD	B,16
0389   D65A C5          MCNEWAC:	PUSH BC
0390   D65B 1A          			LD	A,(DE)			; Start printing the 2nd memory area content
0391   D65C DD 46 00    			LD	B,(IX)
0392   D65F DD 23       			INC	IX
0393   D661 13          			INC	DE
0394   D662 B8          			CP	B
0395   D663 20 0A       			JR	NZ,DIFFER		; if the content is equal, just print '='
0396   D665 0E 3D       			LD	C,'='
0397   D667 CD 2C E6    			CALL CONOUT
0398   D66A CD 2C E6    			CALL CONOUT
0399   D66D 18 0C       			JR	POSDIF
0400   D66F 47          DIFFER:		LD	B,A
0401   D670 CD F3 DF    			CALL B2HL
0402   D673 4C          			LD	C,H
0403   D674 CD 2C E6    			CALL CONOUT
0404   D677 4D          			LD	C,L
0405   D678 CD 2C E6    			CALL CONOUT
0406   D67B 0E 20       POSDIF:		LD	C,' '
0407   D67D CD 2C E6    			CALL CONOUT
0408   D680 C1          			POP	BC
0409   D681 10 D7       			DJNZ MCNEWAC
0410   D683 DD 22 AC E0 			LD	(AAAA),IX		; save memory positions
0411   D687 ED 53 AE E0 			LD	(BBBB),DE
0412   D68B CD 81 DE    			CALL CRLF			; print the footer
0413   D68E CD 53 E6    			CALL PRINTSEQ
0414   D691 3E 20 20 20 			.DB ">      <ENTER> = next line, <ESC> = quit",CR,LF,0
0414   D695 20 20 20 3C 
0414   D699 45 4E 54 45 
0414   D69D 52 3E 20 3D 
0414   D6A1 20 6E 65 78 
0414   D6A5 74 20 6C 69 
0414   D6A9 6E 65 2C 20 
0414   D6AD 3C 45 53 43 
0414   D6B1 3E 20 3D 20 
0414   D6B5 71 75 69 74 
0414   D6B9 0D 0A 00 
0415   D6BC CD 29 E6    MCAGAIN:	CALL CONIN			; Wait for user's decision
0416   D6BF FE 0D       			CP	CR
0417   D6C1 CA 2D D6    			JP	Z,MCNEWL
0418   D6C4 FE 1B       			CP	ESC
0419   D6C6 CA 04 D0    			JP	Z,CYCLE
0420   D6C9 18 F1       			JR	MCAGAIN
0421   D6CB             
0422   D6CB             ;================================================================================================
0423   D6CB             ; Xmodem Command - XMODEM R AAAA or XMODEM S AAAA-BBBB
0424   D6CB             ;================================================================================================
0425   D6CB 11 87 00    XMODEM:		LD	DE,DMA+7
0426   D6CE 1A          			LD	A,(DE)
0427   D6CF FE 53       			CP	'S'				; is it send operation?
0428   D6D1 CA B6 D7    			JP	Z,SENDOP
0429   D6D4 FE 73       			CP	's'
0430   D6D6 CA B6 D7    			JP	Z,SENDOP
0431   D6D9 FE 52       			CP	'R'				; is it receive operation?
0432   D6DB CA 09 D7    			JP	Z,RECOP
0433   D6DE FE 72       			CP	'r'
0434   D6E0 CA 09 D7    			JP	Z,RECOP
0435   D6E3 CD 53 E6    			CALL PRINTSEQ
0436   D6E6 4D 69 73 73 			.DB	"Missing or invalid operation.",CR,LF,0
0436   D6EA 69 6E 67 20 
0436   D6EE 6F 72 20 69 
0436   D6F2 6E 76 61 6C 
0436   D6F6 69 64 20 6F 
0436   D6FA 70 65 72 61 
0436   D6FE 74 69 6F 6E 
0436   D702 2E 0D 0A 00 
0437   D706 C3 04 D0    			JP	CYCLE
0438   D709             
0439   D709             ;================================================================================================
0440   D709             ; XMODEM RECEIVE OPERATION
0441   D709             ;================================================================================================
0442   D709 11 89 00    RECOP:      LD	DE,DMA+9
0443   D70C CD 2F DF    			CALL GETWORD			; Get aaaa
0444   D70F FE 01       			CP	1					; Is the argument OK?
0445   D711 C2 04 D0    			JP	NZ,CYCLE
0446   D714 ED 43 AC E0 			LD	(AAAA),BC			; Save aaaa
0447   D718 AF          			XOR	A
0448   D719 32 B4 E0                LD      (RETRY),A       ; Init retry counter
0449   D71C 3C                      INC     A
0450   D71D 32 B5 E0                LD      (BLOCK),A       ; Init block counter
0451   D720 CD 9E D8    ALIVE:      CALL	SENDNAK
0452   D723 06 05       GET1ST:     LD      B,5
0453   D725 CD 7A D8                CALL 	TOCONIN         ; 5s timeout
0454   D728 38 0F                   JR      C,REPEAT        ; Timed out?
0455   D72A FE 04                   CP      EOT
0456   D72C 28 1C                   JR      Z,GOTEOT        ; EOT? WRAP IT UP
0457   D72E FE 18                   CP      CAN
0458   D730 CA 04 D0                JP      Z,CYCLE         ; CAN?
0459   D733 FE 01                   CP      SOH
0460   D735 28 34                   JR      Z,GOTSOH        ; SOH? GET NEXT BLOCK
0461   D737 18 EA                   JR      GET1ST
0462   D739             
0463   D739 3A B4 E0    REPEAT:     LD      A,(RETRY)
0464   D73C 3C                      INC     A
0465   D73D 32 B4 E0                LD      (RETRY),A
0466   D740 FE 0A                   CP      MAXTRY
0467   D742 20 DC                   JR      NZ,ALIVE        ; Try again?
0468   D744 CD AA D8                CALL 	SENDCAN
0469   D747 C3 04 D0                JP      CYCLE
0470   D74A             
0471   D74A CD 9E D8    GOTEOT:     CALL 	SENDNAK
0472   D74D 06 01                   LD      B,1
0473   D74F CD 7A D8                CALL 	TOCONIN
0474   D752 CD 98 D8                CALL 	SENDACK
0475   D755 CD 53 E6                CALL    PRINTSEQ
0476   D758 46 49 4C 45             .DB      "FILE RECEIVED",CR,LF,0
0476   D75C 20 52 45 43 
0476   D760 45 49 56 45 
0476   D764 44 0D 0A 00 
0477   D768 C3 04 D0                JP      CYCLE
0478   D76B             
0479   D76B 06 83       GOTSOH:     LD      B,131
0480   D76D 21 B6 E0                LD      HL,XBUFFER
0481   D770 C5          XGETBYTE:	PUSH    BC
0482   D771 06 01                   LD      B,1
0483   D773 CD 29 E6                CALL 	CONIN         ; Get incoming block number
0484   D776             ;           JP      C,CYCLE           Timed out?
0485   D776 77                      LD      (HL),A          ; STORE BYTE IN BUFFER
0486   D777 23                      INC     HL
0487   D778 C1                      POP     BC
0488   D779 10 F5                   DJNZ    XGETBYTE
0489   D77B 21 B6 E0                LD      HL,XBUFFER
0490   D77E 7E                      LD      A,(HL)          ; PICK RECEIVED BLOCK NUMBER
0491   D77F 47                      LD      B,A
0492   D780 3A B5 E0                LD      A,(BLOCK)
0493   D783 B8                      CP      B
0494   D784 28 06                   JR      Z,BLKNUMOK
0495   D786 CD 9E D8    BLKERR:     CALL    SENDNAK
0496   D789 C3 23 D7                JP      GET1ST
0497   D78C             
0498   D78C 47          BLKNUMOK:   LD      B,A
0499   D78D 23                      INC     HL
0500   D78E 7E                      LD      A,(HL)          ; PICK RECEIVED /BLOCK NUMBER
0501   D78F 80                      ADD     A,B
0502   D790 FE FF                   CP      0FFH
0503   D792 20 F2                   JR      NZ,BLKERR
0504   D794 AF                      XOR     A               ; DO THE CHECKSUM
0505   D795 21 B8 E0                LD      HL,XBUFFER+2
0506   D798 06 80                   LD      B,128
0507   D79A 86          SUMBYTE:    ADD     A,(HL)
0508   D79B 23                      INC     HL
0509   D79C 10 FC                   DJNZ    SUMBYTE
0510   D79E BE                      CP      (HL)
0511   D79F 20 E5                   JR      NZ,BLKERR
0512   D7A1 CD CE D8                CALL    WRITEFILE
0513   D7A4 3E 00                   LD      A,0
0514   D7A6 32 B4 E0                LD      (RETRY),A       ; Reset retry counter
0515   D7A9 3A B5 E0                LD      A,(BLOCK)
0516   D7AC 3C                      INC     A
0517   D7AD 32 B5 E0                LD      (BLOCK),A       ; Increment block counter
0518   D7B0 CD 98 D8                CALL 	SENDACK
0519   D7B3 C3 23 D7                JP      GET1ST
0520   D7B6             
0521   D7B6             ;================================================================================================
0522   D7B6             ; XMODEM SEND OPERATION
0523   D7B6             ;================================================================================================
0524   D7B6 11 89 00    SENDOP:     LD	DE,DMA+9
0525   D7B9 CD 2F DF    			CALL GETWORD			; Get aaaa
0526   D7BC FE 01       			CP	1					; Is the argument OK?
0527   D7BE C2 04 D0    			JP	NZ,CYCLE
0528   D7C1 ED 43 AC E0 			LD	(AAAA),BC			; Save aaaa
0529   D7C5 11 8E 00    			LD	DE,DMA+14
0530   D7C8 CD 2F DF    			CALL GETWORD			; Get bbbb
0531   D7CB FE 01       			CP	1					; Is the argument OK?
0532   D7CD C2 04 D0    			JP	NZ,CYCLE
0533   D7D0 ED 43 AE E0 			LD	(BBBB),BC			; Save bbbb
0534   D7D4 AF          			XOR     A
0535   D7D5 32 B5 E0                LD      (BLOCK),A       ; INIT BLOCK COUNTER
0536   D7D8 32 B4 E0    			LD	(RETRY),A	; INIT RETRY COUNTER
0537   D7DB 3E 01                   LD      A,SOH
0538   D7DD 32 B6 E0                LD      (XBUFFER),A
0539   D7E0 06 05       FOPENOK:    LD      B,5		; 5SEC TIMEOUT
0540   D7E2 CD 7A D8                CALL    TOCONIN
0541   D7E5 DA F3 D7                JP      C,REPEATS       ; REPEAT
0542   D7E8 FE 15                   CP      NAK
0543   D7EA 28 18                   JR      Z,CLR2GO        ; CLEAR TO CONTINUE
0544   D7EC FE 18                   CP      CAN
0545   D7EE CA 04 D0                JP      Z,CYCLE         ; CANCELED BY RTU
0546   D7F1 18 ED                   JR      FOPENOK			; try again
0547   D7F3             
0548   D7F3 3A B4 E0    REPEATS:    LD      A,(RETRY)
0549   D7F6 3C                      INC     A
0550   D7F7 32 B4 E0                LD      (RETRY),A
0551   D7FA FE 0A                   CP      MAXTRY
0552   D7FC 20 E2                   JR      NZ,FOPENOK		; Try again?
0553   D7FE CD AA D8                CALL 	SENDCAN
0554   D801 C3 04 D0                JP      CYCLE
0555   D804             				
0556   D804 CD B0 D8    CLR2GO:		CALL    READFILE
0557   D807 FE 01                   CP      1				; EOF?
0558   D809 28 0A                   JR      Z,GOTEOF
0559   D80B FE 00                   CP      0				; GOT NEW BLOCK?
0560   D80D 28 28                   JR      Z,GOTNEWBLK
0561   D80F CD AA D8                CALL    SENDCAN         ; ERROR READING FILE
0562   D812 C3 04 D0                JP      CYCLE
0563   D815             
0564   D815 CD A4 D8    GOTEOF:     CALL    SENDEOT
0565   D818 CD A4 D8                CALL    SENDEOT
0566   D81B CD 53 E6                CALL    PRINTSEQ
0567   D81E 46 49 4C 45             .DB      "FILE TRANSMITTED",CR,LF,0
0567   D822 20 54 52 41 
0567   D826 4E 53 4D 49 
0567   D82A 54 54 45 44 
0567   D82E 0D 0A 00 
0568   D831 CD 6F D8    			CALL	PURGE
0569   D834 C3 04 D0    			JP	CYCLE
0570   D837             
0571   D837 3A B5 E0    GOTNEWBLK:  LD      A,(BLOCK)
0572   D83A 3C                      INC     A
0573   D83B 32 B5 E0    			LD	(BLOCK),A
0574   D83E 32 B7 E0                LD      (XBUFFER+1),A    ; WRITE BLOCK
0575   D841 2F                      CPL
0576   D842 32 B8 E0                LD      (XBUFFER+2),A    ; WRITE /BLOCK
0577   D845 AF                      XOR     A               ; CALCULATE CHECKSUM
0578   D846 06 80                   LD      B,128
0579   D848 21 B9 E0                LD      HL,XBUFFER+3
0580   D84B 86          NEXTCS:     ADD     A,(HL)
0581   D84C 23                      INC     HL
0582   D84D 10 FC                   DJNZ    NEXTCS
0583   D84F 77                      LD      (HL),A          ; WRITE CHECKSUM
0584   D850 06 84       SENDBLOCK:  LD      B,132
0585   D852 21 B6 E0                LD      HL,XBUFFER
0586   D855 7E          SENDBYTE:   LD      A,(HL)          ; SEND THE BUFFER
0587   D856 4F                      LD      C,A
0588   D857 CD 2C E6                CALL    CONOUT
0589   D85A 23                      INC     HL
0590   D85B 10 F8                   DJNZ    SENDBYTE
0591   D85D 06 05       GETREPLY:   LD      B,5             ; GET RTU'S REPLY
0592   D85F CD 7A D8                CALL    TOCONIN
0593   D862 DA 04 D0                JP      C,CYCLE         ; NO ANSWER
0594   D865 FE 15                   CP      NAK
0595   D867 28 E7                   JR      Z,SENDBLOCK     ; RESEND BLOCK
0596   D869 FE 06                   CP      ACK
0597   D86B 28 97                   JR      Z,CLR2GO
0598   D86D 18 EE                   JR      GETREPLY
0599   D86F             
0600   D86F CD 26 E6    PURGE:		CALL	CONST
0601   D872 FE 00       			CP	0
0602   D874 C8          			RET	Z
0603   D875 CD 29 E6    			CALL	CONIN
0604   D878 18 F5                   JR      PURGE
0605   D87A             
0606   D87A             ;================================================================================================
0607   D87A             ; Timed Out Console Input - X seconds, with X passed on regB
0608   D87A             ; Incoming byte, if any, returns in A
0609   D87A             ; Carry flag set if timed out.
0610   D87A             ;================================================================================================
0611   D87A C5          TOCONIN:	PUSH    BC
0612   D87B E5          			PUSH    HL
0613   D87C             
0614   D87C 21 1C E3    TOLOOP1:	LD	HL,KT
0615   D87F CD 26 E6    TOLOOP2:	CALL	CONST
0616   D882 FE FF       			CP	0FFH
0617   D884 28 0A       			JR	Z,BWAITING
0618   D886 2B          			DEC	HL
0619   D887 7C          			LD	A,H
0620   D888 B5          			OR	L
0621   D889 20 F4       			JR	NZ,TOLOOP2
0622   D88B 10 EF       			DJNZ	TOLOOP1
0623   D88D 37          			SCF
0624   D88E 18 05       			JR	TOOUT
0625   D890             
0626   D890 CD 29 E6    BWAITING:	CALL 	CONIN
0627   D893 37          			SCF                     ; Reset carry flag
0628   D894 3F          			CCF
0629   D895 E1          TOOUT:		POP     HL
0630   D896 C1                      POP     BC
0631   D897 C9                      RET
0632   D898             
0633   D898             ;================================================================================================
0634   D898             ; Send control characters used by Xmodem
0635   D898             ;================================================================================================
0636   D898 0E 06       SENDACK:    LD C,ACK
0637   D89A CD 2C E6                CALL CONOUT
0638   D89D C9                      RET
0639   D89E             
0640   D89E 0E 15       SENDNAK:    LD C,NAK
0641   D8A0 CD 2C E6                CALL CONOUT
0642   D8A3 C9                      RET
0643   D8A4             
0644   D8A4 0E 04       SENDEOT:    LD C,EOT
0645   D8A6 CD 2C E6                CALL CONOUT
0646   D8A9 C9                      RET
0647   D8AA             
0648   D8AA 0E 18       SENDCAN:    LD C,CAN
0649   D8AC CD 2C E6                CALL CONOUT
0650   D8AF C9                      RET
0651   D8B0             
0652   D8B0             ;================================================================================================
0653   D8B0             ; (pseudo) read file and write file used by Xmodem
0654   D8B0             ;================================================================================================
0655   D8B0 AF          READFILE:	XOR	A					; if not EOF, copy 128 byte
0656   D8B1 2A AE E0    			LD	HL,(BBBB)
0657   D8B4 ED 5B AC E0 			LD	DE,(AAAA)
0658   D8B8 37          			SCF
0659   D8B9 3F          			CCF
0660   D8BA ED 52       			SBC	HL,DE
0661   D8BC FA CC D8    			JP	M,XEOF
0662   D8BF EB          			EX	DE,HL
0663   D8C0 11 B9 E0    			LD	DE,XBUFFER+3
0664   D8C3 01 80 00    			LD	BC,128
0665   D8C6 ED B0       			LDIR
0666   D8C8 22 AC E0    			LD	(AAAA),HL
0667   D8CB C9          			RET						; return 0 if not EOF
0668   D8CC             
0669   D8CC 3C          XEOF:		INC	A					; return 1 if EOF
0670   D8CD C9          			RET
0671   D8CE             
0672   D8CE             			
0673   D8CE             				
0674   D8CE 21 B8 E0    WRITEFILE	LD	HL,XBUFFER+2
0675   D8D1 ED 5B AC E0 			LD	DE,(AAAA)
0676   D8D5 01 80 00    			LD	BC,128
0677   D8D8 ED B0       			LDIR
0678   D8DA ED 53 AC E0 			LD	(AAAA),DE
0679   D8DE C9          			RET
0680   D8DF             				
0681   D8DF             ;================================================================================================
0682   D8DF             ; Hexadecimal to Executable conversion command HEX2COM AAAA
0683   D8DF             ; Record structure:
0684   D8DF             ;	<start_code> <byte_count> <address> <record_type> <data>...<data> <checksum>
0685   D8DF             ;		':'	        1 byte     2 bytes    00h or 01h       n bytes	    1 byte
0686   D8DF             ;
0687   D8DF             ; Register usage:
0688   D8DF             ;	IX = source address 
0689   D8DF             ;	IY = target address
0690   D8DF             ;================================================================================================
0691   D8DF 11 88 00    HEX2COM:	LD	DE,DMA+8
0692   D8E2 CD 2F DF    			CALL GETWORD		
0693   D8E5 FE 01       			CP	1					; Is the argument OK?
0694   D8E7 C2 04 D0    			JP	NZ,CYCLE
0695   D8EA C5          			PUSH BC					; IX holds the source address
0696   D8EB DD E1       			POP	IX
0697   D8ED             			
0698   D8ED DD 7E 00    FINDSC:		LD	A,(IX+0)
0699   D8F0 DD 23       			INC IX
0700   D8F2 FE 3A       			CP	':'					; Do we have a start code?
0701   D8F4 20 F7       			JR	NZ,FINDSC
0702   D8F6 3E 00       			LD	A,0					; Reset checksum
0703   D8F8 32 B2 E0    			LD	(CHKSUM),A
0704   D8FB CD 88 D9    			CALL HGB				; Get byte count
0705   D8FE 78          			LD	A,B
0706   D8FF FE 00       			CP	0
0707   D901 CA 04 D0    			JP	Z,CYCLE				; If byte count=0, we're done.
0708   D904 32 B3 E0    			LD	(BYTECNT),A			; Save byte count
0709   D907 CD 6A D9    			CALL UPCHKSUM			; Update checksum
0710   D90A DD 23       			INC	IX
0711   D90C CD 92 D9    			CALL HGW				; Get target address
0712   D90F C5          			PUSH BC
0713   D910 FD E1       			POP IY					; IY holds the target address
0714   D912 CD 6A D9    			CALL UPCHKSUM			; Update checksum
0715   D915 41          			LD	B,C
0716   D916 CD 6A D9    			CALL UPCHKSUM			; Update checksum
0717   D919 CD 72 D9    			CALL PRTADDR			; Print target address
0718   D91C CD 88 D9    			CALL HGB				; Get record type (just for checksum update)
0719   D91F CD 6A D9    			CALL UPCHKSUM			; Update checksum
0720   D922 DD 23       			INC	IX
0721   D924 3A B3 E0    			LD	A,(BYTECNT)
0722   D927 47          			LD	B,A
0723   D928 C5          GETDATA:	PUSH BC
0724   D929 CD 88 D9    			CALL HGB				; Get data byte
0725   D92C FD 70 00    			LD	(IY+0),B
0726   D92F CD 6A D9    			CALL UPCHKSUM			; Update checksum
0727   D932 FD 23       			INC	IY
0728   D934 DD 23       			INC IX
0729   D936 C1          			POP BC
0730   D937 10 EF       			DJNZ GETDATA
0731   D939 CD 88 D9    			CALL HGB				; Get checksum
0732   D93C 3A B2 E0    			LD	A,(CHKSUM)
0733   D93F ED 44       			NEG
0734   D941 B8          			CP	B
0735   D942 20 0D       			JR	NZ,CHKSUMER
0736   D944 CD 53 E6    			CALL PRINTSEQ
0737   D947 3A 20 4F 4B 			.DB	": OK.",CR,LF,0
0737   D94B 2E 0D 0A 00 
0738   D94F 18 9C       			JR	FINDSC
0739   D951 CD 53 E6    CHKSUMER:	CALL PRINTSEQ
0740   D954 3A 20 43 68 			.DB	": Checksum Error.",CR,LF,0
0740   D958 65 63 6B 73 
0740   D95C 75 6D 20 45 
0740   D960 72 72 6F 72 
0740   D964 2E 0D 0A 00 
0741   D968 18 83       			JR	FINDSC
0742   D96A             
0743   D96A 3A B2 E0    UPCHKSUM:	LD	A,(CHKSUM)
0744   D96D 80          			ADD	A,B
0745   D96E 32 B2 E0    			LD	(CHKSUM),A
0746   D971 C9          			RET
0747   D972             
0748   D972 CD B7 DF    PRTADDR:	CALL PRINTENV
0749   D975 DD 2B       			DEC IX
0750   D977 DD 2B       			DEC IX
0751   D979 DD 2B       			DEC IX
0752   D97B 06 04       			LD	B,4
0753   D97D DD 4E 00    NXTA:		LD	C,(IX+0)
0754   D980 CD 2C E6    			CALL CONOUT
0755   D983 DD 23       			INC	IX
0756   D985 10 F6       			DJNZ NXTA
0757   D987 C9          			RET
0758   D988             			
0759   D988 DD E5       HGB:		PUSH IX
0760   D98A D1          			POP	DE
0761   D98B CD 43 DF    			CALL GETBYTE
0762   D98E D5          			PUSH DE
0763   D98F DD E1       			POP IX
0764   D991 C9          			RET
0765   D992             
0766   D992 DD E5       HGW:		PUSH IX
0767   D994 D1          			POP	DE
0768   D995 CD 2F DF    			CALL GETWORD
0769   D998 D5          			PUSH DE
0770   D999 DD E1       			POP IX
0771   D99B C9          			RET
0772   D99C             
0773   D99C             ;================================================================================================
0774   D99C             ; Read disk operation - READ D,TTT,SS
0775   D99C             ;================================================================================================
0776   D99C CD 8B DA    DREAD:		CALL CHECKFC		; Check if FLASH Card is initialized.
0777   D99F 11 85 00    			LD	DE,DMA+5
0778   D9A2 CD B1 DA    			CALL GETDTS
0779   D9A5 FE 01       			CP	1				; Is the argument OK?
0780   D9A7 C2 04 D0    			JP	NZ,CYCLE
0781   D9AA CD 25 DB    NEXTSEC:	CALL DTS2LBA
0782   D9AD CD C9 D9    			CALL PRINTDTS
0783   D9B0 CD F6 D3    			CALL PRINTHDR
0784   D9B3 CD 41 DA    			CALL PRINTDSEC
0785   D9B6 CD 29 E6    TAGAIN:		CALL CONIN			; Wait for user's decision
0786   D9B9 FE 0D       			CP	CR
0787   D9BB 20 05       			JR	NZ,NOTCR
0788   D9BD CD 50 DA    			CALL INCDTS
0789   D9C0 18 E8       			JR	NEXTSEC
0790   D9C2             			
0791   D9C2 FE 1B       NOTCR:		CP	ESC
0792   D9C4 CA 04 D0    			JP	Z,CYCLE
0793   D9C7 18 ED       			JR	TAGAIN
0794   D9C9             
0795   D9C9             
0796   D9C9 CD 53 E6    PRINTDTS:	CALL PRINTSEQ
0797   D9CC 3E 20 44 54 			.DB	"> DTS: ",0
0797   D9D0 53 3A 20 00 
0798   D9D4 3A 3A E1    			LD	A,(DSK)
0799   D9D7 C6 41       			ADD	A,41H
0800   D9D9 4F          			LD	C,A
0801   D9DA CD 2C E6    			CALL CONOUT
0802   D9DD 0E 2D       			LD	C,'-'
0803   D9DF CD 2C E6    			CALL CONOUT
0804   D9E2 3A 3C E1    			LD	A,(TRK+1)
0805   D9E5 CD 34 DA    			CALL PRINTBYTE
0806   D9E8 3A 3B E1    			LD	A,(TRK)
0807   D9EB CD 34 DA    			CALL PRINTBYTE
0808   D9EE 0E 2D       			LD	C,'-'
0809   D9F0 CD 2C E6    			CALL CONOUT
0810   D9F3 3A 3D E1    			LD	A,(SEC)
0811   D9F6 CD 34 DA    			CALL PRINTBYTE
0812   D9F9 CD 53 E6    			CALL PRINTSEQ
0813   D9FC 20 2C 4C 42 			.DB	" ,LBA: ",0
0813   DA00 41 3A 20 00 
0814   DA04 3A 3E E1    			LD	A,(LBA3)
0815   DA07 CD 34 DA    			CALL PRINTBYTE
0816   DA0A 3A 3F E1    			LD	A,(LBA2)
0817   DA0D CD 34 DA    			CALL PRINTBYTE
0818   DA10 3A 40 E1    			LD	A,(LBA1)
0819   DA13 CD 34 DA    			CALL PRINTBYTE
0820   DA16 3A 41 E1    			LD	A,(LBA0)
0821   DA19 CD 34 DA    			CALL PRINTBYTE
0822   DA1C CD 53 E6    			CALL PRINTSEQ
0823   DA1F 20 28 44 49 			.DB	" (DISKPAD = E400)",CR,LF,0
0823   DA23 53 4B 50 41 
0823   DA27 44 20 3D 20 
0823   DA2B 45 34 30 30 
0823   DA2F 29 0D 0A 00 
0824   DA33 C9          			RET
0825   DA34             
0826   DA34 47          PRINTBYTE:	LD	B,A
0827   DA35 CD F3 DF    			CALL B2HL
0828   DA38 4C          			LD	C,H
0829   DA39 CD 2C E6    			CALL CONOUT
0830   DA3C 4D          			LD	C,L
0831   DA3D CD 2C E6    			CALL CONOUT
0832   DA40 C9          			RET
0833   DA41             
0834   DA41 CD A4 DB    PRINTDSEC:	CALL DISKREAD
0835   DA44 11 00 E4    			LD	DE,DISKPAD
0836   DA47 3E 20       			LD	A,32
0837   DA49 32 AA E0    			LD	(LINNUM),A
0838   DA4C CD DF D4    			CALL SUBMPRN
0839   DA4F C9          			RET
0840   DA50             
0841   DA50 3A 3D E1    INCDTS:		LD	A,(SEC)
0842   DA53 FE 1F       			CP	1FH
0843   DA55 28 05       			JR	Z,ZSEC
0844   DA57 3C          			INC	A
0845   DA58 32 3D E1    			LD	(SEC),A
0846   DA5B C9          			RET
0847   DA5C             			
0848   DA5C AF          ZSEC:		XOR	A
0849   DA5D 32 3D E1    			LD	(SEC),A
0850   DA60 2A 3B E1    			LD	HL,(TRK)
0851   DA63 01 FF 01    			LD	BC,1FFH
0852   DA66 37          			SCF
0853   DA67 3F          			CCF
0854   DA68 ED 42       			SBC	HL,BC
0855   DA6A 28 08       			JR	Z,ZTRK
0856   DA6C 2A 3B E1    			LD	HL,(TRK)
0857   DA6F 23          			INC	HL
0858   DA70 22 3B E1    			LD	(TRK),HL
0859   DA73 C9          			RET
0860   DA74             			
0861   DA74 21 00 00    ZTRK:		LD	HL,0
0862   DA77 22 3B E1    			LD	(TRK),HL
0863   DA7A 3A 3A E1    			LD	A,(DSK)
0864   DA7D FE 0F       			CP	0FH
0865   DA7F 28 05       			JR	Z,ZDSK
0866   DA81 3C          			INC	A
0867   DA82 32 3A E1    			LD	(DSK),A
0868   DA85 C9          			RET
0869   DA86             			
0870   DA86 AF          ZDSK:		XOR	A
0871   DA87 32 3A E1    			LD	(DSK),A
0872   DA8A C9          			RET
0873   DA8B             			
0874   DA8B 3A 42 E1    CHECKFC:	LD A,(FCINI)
0875   DA8E FE 01       			CP	1
0876   DA90 C8          			RET	Z
0877   DA91 CD 69 E8    			CALL CFINIT
0878   DA94 3E 01       			LD	A,1
0879   DA96 32 42 E1    			LD	(FCINI),A
0880   DA99 C9          			RET
0881   DA9A             			
0882   DA9A             ;================================================================================================
0883   DA9A             ; Download 1 sector from disk to memory (@ DMIRROR)
0884   DA9A             ;================================================================================================
0885   DA9A CD 8B DA    DDOWN:		CALL CHECKFC		; Check if FLASH Card is initialized.
0886   DA9D 11 84 00    			LD	DE,DMA+4
0887   DAA0 CD B1 DA    			CALL GETDTS
0888   DAA3 FE 01       			CP	1				; Is the argument OK?
0889   DAA5 C2 04 D0    			JP	NZ,CYCLE
0890   DAA8 CD 25 DB    			CALL DTS2LBA
0891   DAAB CD A4 DB    			CALL DISKREAD
0892   DAAE C3 04 D0    			JP	CYCLE
0893   DAB1             
0894   DAB1             ;================================================================================================
0895   DAB1             ; Routine to get DTS from command line. DE=line_buf_ptr(should point to where DTS starts).
0896   DAB1             ; Returns A=0 if missing arg, A=1 if OK, A=2 if invalid arg. 
0897   DAB1             ;================================================================================================
0898   DAB1 CD CD DA    GETDTS:		CALL GETDISK
0899   DAB4 FE 01       			CP	1				; Is the argument OK?
0900   DAB6 C2 04 D0    			JP	NZ,CYCLE
0901   DAB9 13          			INC DE
0902   DABA CD F7 DA    			CALL GETTRACK
0903   DABD FE 01       			CP	1				; Is the argument OK?
0904   DABF C2 04 D0    			JP	NZ,CYCLE
0905   DAC2 13          			INC	DE
0906   DAC3 13          			INC DE
0907   DAC4 CD 12 DB    			CALL GETSECTOR
0908   DAC7 FE 01       			CP	1				; Is the argument OK?
0909   DAC9 C2 04 D0    			JP	NZ,CYCLE
0910   DACC C9          			RET
0911   DACD             
0912   DACD 1A          GETDISK:	LD	A,(DE)
0913   DACE FE 20       			CP	' '
0914   DAD0 20 03       			JR	NZ,GCPZ
0915   DAD2 13          			INC	DE
0916   DAD3 18 F8       			JR	GETDISK
0917   DAD5 FE 00       GCPZ:		CP	0
0918   DAD7 20 04       			JR 	NZ,GD1
0919   DAD9 CD 64 DF    			CALL GBNA
0920   DADC C9          			RET
0921   DADD             
0922   DADD FE 41       GD1:		CP	'A'
0923   DADF F2 E6 DA    			JP	P,GD2
0924   DAE2 CD 82 DF    			CALL GBIA
0925   DAE5 C9          			RET
0926   DAE6             			
0927   DAE6 FE 51       GD2:		CP	'Q'
0928   DAE8 FA EF DA    			JP	M,GD3
0929   DAEB CD 82 DF    			CALL GBIA
0930   DAEE C9          			RET
0931   DAEF             			
0932   DAEF D6 41       GD3:		SUB	'A'
0933   DAF1 32 3A E1    			LD	(DSK),A
0934   DAF4 3E 01       			LD	A,1
0935   DAF6 C9          			RET
0936   DAF7             
0937   DAF7 3E 30       GETTRACK:	LD	A,'0'
0938   DAF9 12          			LD	(DE),A
0939   DAFA CD 2F DF    			CALL GETWORD
0940   DAFD FE 01       			CP	1
0941   DAFF C0          			RET	NZ
0942   DB00 ED 43 3B E1 			LD	(TRK),BC
0943   DB04 21 FF 01    			LD	HL,1FFH
0944   DB07 37          			SCF
0945   DB08 3F          			CCF
0946   DB09 ED 42       			SBC	HL,BC
0947   DB0B 3E 01       			LD	A,1
0948   DB0D F0          			RET	P
0949   DB0E CD 82 DF    			CALL GBIA
0950   DB11 C9          			RET
0951   DB12             
0952   DB12 CD 43 DF    GETSECTOR:	CALL GETBYTE
0953   DB15 FE 01       			CP	1
0954   DB17 C0          			RET	NZ
0955   DB18 78          			LD	A,B
0956   DB19 32 3D E1    			LD	(SEC),A
0957   DB1C FE 20       			CP	20H
0958   DB1E 3E 01       			LD	A,1
0959   DB20 F8          			RET	M
0960   DB21 CD 82 DF    			CALL GBIA
0961   DB24 C9          			RET
0962   DB25             			
0963   DB25             ;================================================================================================
0964   DB25             ; Convert disk/track/sector to LBA0,1,2,3.
0965   DB25             ;================================================================================================
0966   DB25 2A 3B E1    DTS2LBA:	LD	HL,(TRK)
0967   DB28 CB 05       			RLC	L
0968   DB2A CB 05       			RLC	L
0969   DB2C CB 05       			RLC	L
0970   DB2E CB 05       			RLC	L
0971   DB30 CB 05       			RLC	L
0972   DB32 7D          			LD	A,L
0973   DB33 E6 E0       			AND	0E0H
0974   DB35 6F          			LD	L,A
0975   DB36 3A 3D E1    			LD	A,(SEC)
0976   DB39 85          			ADD	A,L
0977   DB3A 32 41 E1    			LD	(LBA0),A
0978   DB3D 2A 3B E1    			LD	HL,(TRK)
0979   DB40 CB 0D       			RRC	L
0980   DB42 CB 0D       			RRC	L
0981   DB44 CB 0D       			RRC	L
0982   DB46 7D          			LD	A,L
0983   DB47 E6 1F       			AND	01FH
0984   DB49 6F          			LD	L,A
0985   DB4A CB 04       			RLC	H
0986   DB4C CB 04       			RLC	H
0987   DB4E CB 04       			RLC	H
0988   DB50 CB 04       			RLC	H
0989   DB52 CB 04       			RLC	H
0990   DB54 7C          			LD	A,H
0991   DB55 E6 20       			AND	020H
0992   DB57 67          			LD	H,A
0993   DB58 3A 3A E1    			LD	A,(DSK)
0994   DB5B CB 07       			RLC	A
0995   DB5D CB 07       			RLC	A
0996   DB5F CB 07       			RLC	A
0997   DB61 CB 07       			RLC	A
0998   DB63 CB 07       			RLC	A
0999   DB65 CB 07       			RLC	A
1000   DB67 E6 C0       			AND	0C0H
1001   DB69 84          			ADD	A,H
1002   DB6A 85          			ADD	A,L
1003   DB6B 32 40 E1    			LD	(LBA1),A
1004   DB6E 3A 3A E1    			LD	A,(DSK)
1005   DB71 CB 0F       			RRC	A
1006   DB73 CB 0F       			RRC	A
1007   DB75 E6 03       			AND	03H
1008   DB77 32 3F E1    			LD	(LBA2),A
1009   DB7A 3E E0       			LD	A,0E0H
1010   DB7C 32 3E E1    			LD	(LBA3),A
1011   DB7F C9          			RET
1012   DB80             			
1013   DB80             ;================================================================================================
1014   DB80             ; Wait for disk to be ready (busy=0,ready=1)
1015   DB80             ;================================================================================================
1016   DB80 F5          DWAIT:		PUSH AF
1017   DB81 DB B7       DWAIT1:		IN 	A,(CF_STATUS)
1018   DB83 E6 80       			AND	080H
1019   DB85 FE 80       			CP 	080H
1020   DB87 28 F8       			JR	Z,DWAIT1
1021   DB89 F1          			POP	AF
1022   DB8A C9          			RET
1023   DB8B             
1024   DB8B             ;================================================================================================
1025   DB8B             ; Set LBA on CF
1026   DB8B             ;================================================================================================
1027   DB8B 3A 41 E1    SETLBA:		LD	A,(LBA0)
1028   DB8E D3 B3       			OUT (CF_LBA0),A
1029   DB90 3A 40 E1    			LD	A,(LBA1)
1030   DB93 D3 B4       			OUT (CF_LBA1),A
1031   DB95 3A 3F E1    			LD	A,(LBA2)
1032   DB98 D3 B5       			OUT (CF_LBA2),A
1033   DB9A 3A 3E E1    			LD	A,(LBA3)
1034   DB9D D3 B6       			OUT (CF_LBA3),A
1035   DB9F 3E 01       			LD 	A,1
1036   DBA1 D3 B2       			OUT (CF_SECCOUNT),A
1037   DBA3 C9          			RET				
1038   DBA4             
1039   DBA4             ;================================================================================================
1040   DBA4             ; Read physical one sector from disk and write it on DISKPAD
1041   DBA4             ;================================================================================================
1042   DBA4 F5          DISKREAD:	PUSH AF
1043   DBA5 C5          			PUSH BC
1044   DBA6 E5          			PUSH HL
1045   DBA7             
1046   DBA7 CD 80 DB    			CALL DWAIT
1047   DBAA CD 8B DB    			CALL SETLBA
1048   DBAD 3E 20       			LD 	A,CF_READ_SEC
1049   DBAF D3 B7       			OUT (CF_COMMAND),A
1050   DBB1 CD 80 DB    			CALL DWAIT
1051   DBB4 0E 04       			LD 	C,4
1052   DBB6 21 00 E4    			LD 	HL,DISKPAD
1053   DBB9 06 80       rd4secs:	LD 	B,128
1054   DBBB 00          rdByte:		NOP
1055   DBBC 00          			NOP
1056   DBBD 00          			NOP
1057   DBBE DB B0       			IN 	A,(CF_DATA)
1058   DBC0 77          			LD 	(HL),A
1059   DBC1 23          			INC HL
1060   DBC2 05          			DEC B
1061   DBC3 20 F6       			JR 	NZ, rdByte
1062   DBC5 0D          			DEC C
1063   DBC6 20 F1       			JR 	NZ,rd4secs
1064   DBC8             
1065   DBC8 E1          			POP HL
1066   DBC9 C1          			POP BC
1067   DBCA F1          			POP AF
1068   DBCB C9          			RET
1069   DBCC             
1070   DBCC             ;================================================================================================
1071   DBCC             ; Write physical sector from DISKPAD to host.
1072   DBCC             ;================================================================================================
1073   DBCC F5          DISKWRITE:	PUSH AF
1074   DBCD C5          			PUSH BC
1075   DBCE E5          			PUSH HL
1076   DBCF             
1077   DBCF CD 80 DB    			CALL DWAIT
1078   DBD2 CD 8B DB    			CALL SETLBA
1079   DBD5 3E 30       			LD 	A,CF_WRITE_SEC
1080   DBD7 D3 B7       			OUT (CF_COMMAND),A
1081   DBD9 CD 80 DB    			CALL DWAIT
1082   DBDC 0E 04       			LD 	C,4
1083   DBDE 21 00 E4    			LD 	HL,DISKPAD
1084   DBE1 06 80       wr4secs:	LD 	B,128
1085   DBE3 00          wrByte:		NOP
1086   DBE4 00          			NOP
1087   DBE5 00          			NOP
1088   DBE6 7E          			LD 	A,(HL)
1089   DBE7 D3 B0       			OUT (CF_DATA),A
1090   DBE9 23          			INC HL
1091   DBEA 05          			DEC B
1092   DBEB 20 F6       			JR 	NZ,wrByte
1093   DBED 0D          			DEC C
1094   DBEE 20 F1       			JR 	NZ,wr4secs
1095   DBF0             
1096   DBF0 E1          			POP HL
1097   DBF1 C1          			POP BC
1098   DBF2 F1          			POP AF
1099   DBF3 C9          			RET
1100   DBF4             
1101   DBF4             ;================================================================================================
1102   DBF4             ; Upload 1 sector from memory (@ DMIRROR) to disk - UP D,TTT,SS
1103   DBF4             ;================================================================================================
1104   DBF4 CD 8B DA    DUP:		CALL CHECKFC		; Check if FLASH Card is initialized.
1105   DBF7 11 82 00    			LD	DE,DMA+2
1106   DBFA CD B1 DA    			CALL GETDTS
1107   DBFD FE 01       			CP	1				; Is the argument OK?
1108   DBFF C2 04 D0    			JP	NZ,CYCLE
1109   DC02 CD 25 DB    			CALL DTS2LBA
1110   DC05 CD CC DB    			CALL DISKWRITE
1111   DC08 C3 04 D0    			JP	CYCLE
1112   DC0B             
1113   DC0B             ;================================================================================================
1114   DC0B             ; Verify disk. Do this on on all sectors of the disk - VERIFY D
1115   DC0B             ;================================================================================================
1116   DC0B CD 8B DA    DVERIFY:	CALL CHECKFC		; Check if FLASH Card is initialized.
1117   DC0E 11 86 00    			LD	DE,DMA+6
1118   DC11 CD CD DA    			CALL GETDISK
1119   DC14 FE 01       			CP	1				; Is the argument OK?
1120   DC16 C2 04 D0    			JP	NZ,CYCLE
1121   DC19 21 00 00    			LD	HL,0
1122   DC1C 22 3B E1    			LD	(TRK),HL
1123   DC1F 21 00 E4    			LD	HL,DISKPAD
1124   DC22 22 AC E0    			LD	(AAAA),HL		; AAAA will hold beginning of DISKPAD
1125   DC25 21 FF E5    			LD	HL,DISKPAD+1FFH
1126   DC28 22 AE E0    			LD	(BBBB),HL		; BBBB will hold end of DISKPAD
1127   DC2B 3E 00       NEWTRK:		LD	A,0
1128   DC2D 32 3D E1    			LD	(SEC),A
1129   DC30 CD 53 E6    			CALL PRINTSEQ
1130   DC33 0D 0A 54 72 			.DB	CR,LF,"Track ",0
1130   DC37 61 63 6B 20 
1130   DC3B 00 
1131   DC3C 2A 3B E1    			LD	HL,(TRK)
1132   DC3F 7C          			LD	A,H
1133   DC40 CD 34 DA    			CALL PRINTBYTE
1134   DC43 2A 3B E1    			LD	HL,(TRK)
1135   DC46 7D          			LD	A,L
1136   DC47 CD 34 DA    			CALL PRINTBYTE
1137   DC4A CD 26 E6    NEWSEC:		CALL CONST
1138   DC4D FE 00       			CP	0
1139   DC4F 28 18       			JR	Z,DVCONT
1140   DC51 CD 29 E6    			CALL CONIN
1141   DC54 FE 1B       			CP	ESC
1142   DC56 20 11       			JR	NZ,DVCONT
1143   DC58 CD 53 E6    			CALL PRINTSEQ
1144   DC5B 20 41 42 4F 			.DB	" ABORTED",CR,LF,0
1144   DC5F 52 54 45 44 
1144   DC63 0D 0A 00 
1145   DC66 C3 04 D0    			JP	CYCLE
1146   DC69             			
1147   DC69 CD 25 DB    DVCONT:		CALL DTS2LBA
1148   DC6C CD A8 DC    			CALL BKUP			; Backup content of sector before tests
1149   DC6F 3E 00       			LD	A,0				; Test R/W filling sector with 00
1150   DC71 CD C6 DC    			CALL BLKTEST
1151   DC74 3E FF       			LD	A,0FFH			; Test R/W filling sector with FF
1152   DC76 CD C6 DC    			CALL BLKTEST
1153   DC79 3E AA       			LD	A,0AAH			; Test R/W filling sector with AA
1154   DC7B CD C6 DC    			CALL BLKTEST
1155   DC7E 3E 55       			LD	A,55H			; Test R/W filling sector with 55
1156   DC80 CD C6 DC    			CALL BLKTEST
1157   DC83 CD B7 DC    			CALL RESBKUP		; restore original content to sector
1158   DC86 0E 2E       			LD	C,'.'
1159   DC88 CD 2C E6    			CALL CONOUT
1160   DC8B 3A 3D E1    			LD	A,(SEC)
1161   DC8E 3C          			INC	A
1162   DC8F 32 3D E1    			LD	(SEC),A
1163   DC92 FE 20       			CP	20H
1164   DC94 20 B4       			JR	NZ,NEWSEC
1165   DC96 2A 3B E1    			LD	HL,(TRK)
1166   DC99 23          			INC	HL
1167   DC9A 22 3B E1    			LD (TRK),HL
1168   DC9D 7C          			LD	A,H
1169   DC9E FE 02       			CP	2
1170   DCA0 20 89       			JR	NZ,NEWTRK
1171   DCA2 CD 81 DE    			CALL CRLF
1172   DCA5 C3 04 D0    			JP	CYCLE
1173   DCA8             
1174   DCA8 CD A4 DB    BKUP:		CALL DISKREAD		; Read sector and copy DISKPAD to DISKBKUP
1175   DCAB 21 00 E4    			LD	HL,DISKPAD
1176   DCAE 11 00 E2    			LD	DE,DISKBKUP
1177   DCB1 01 00 02    			LD	BC,0200H
1178   DCB4 ED B0       			LDIR
1179   DCB6 C9          			RET
1180   DCB7             			
1181   DCB7 21 00 E2    RESBKUP:	LD	HL,DISKBKUP		; Copy DISKBKUP to DISKPAD and write sector
1182   DCBA 11 00 E4    			LD	DE,DISKPAD
1183   DCBD 01 00 02    			LD	BC,0200H
1184   DCC0 ED B0       			LDIR
1185   DCC2 CD CC DB    			CALL DISKWRITE
1186   DCC5 C9          			RET
1187   DCC6             
1188   DCC6 47          BLKTEST:	LD	B,A
1189   DCC7 32 B0 E0    			LD	(CCCC),A
1190   DCCA CD F2 D5    			CALL MFPRIM
1191   DCCD CD CC DB    			CALL DISKWRITE
1192   DCD0 CD A4 DB    			CALL DISKREAD
1193   DCD3 3A B0 E0    			LD	A,(CCCC)
1194   DCD6 21 00 E4    			LD	HL,DISKPAD
1195   DCD9 06 00       			LD	B,0
1196   DCDB BE          VBT1:		CP	(HL)
1197   DCDC 20 0C       			JR	NZ,VMISMATCH
1198   DCDE 23          			INC	HL
1199   DCDF 10 FA       			DJNZ VBT1
1200   DCE1 06 00       			LD	B,0
1201   DCE3 BE          VBT2:		CP	(HL)
1202   DCE4 20 04       			JR	NZ,VMISMATCH
1203   DCE6 23          			INC	HL
1204   DCE7 10 FA       			DJNZ VBT2
1205   DCE9 C9          			RET
1206   DCEA             
1207   DCEA CD 53 E6    VMISMATCH:	CALL PRINTSEQ
1208   DCED 0D 0A 45 72 			.DB	CR,LF,"Error on sector ",0
1208   DCF1 72 6F 72 20 
1208   DCF5 6F 6E 20 73 
1208   DCF9 65 63 74 6F 
1208   DCFD 72 20 00 
1209   DD00 3A 3D E1    			LD	A,(SEC)
1210   DD03 CD 34 DA    			CALL PRINTBYTE
1211   DD06 CD 53 E6    			CALL PRINTSEQ
1212   DD09 20 43 6F 6E 			.DB	" Continue test? (Y/N)",CR,LF,0
1212   DD0D 74 69 6E 75 
1212   DD11 65 20 74 65 
1212   DD15 73 74 3F 20 
1212   DD19 28 59 2F 4E 
1212   DD1D 29 0D 0A 00 
1213   DD21 CD 29 E6    			CALL CONIN
1214   DD24 FE 59       			CP	'Y'
1215   DD26 C8          			RET	Z
1216   DD27 FE 79       			CP	'y'
1217   DD29 C8          			RET	Z
1218   DD2A C3 04 D0    			JP	CYCLE
1219   DD2D             
1220   DD2D CD F3 DF    PRTB2HL:	CALL B2HL
1221   DD30 4C          			LD	C,H
1222   DD31 CD 2C E6    			CALL CONOUT
1223   DD34 4D          			LD	C,L
1224   DD35 CD 2C E6    			CALL CONOUT
1225   DD38 C9          			RET
1226   DD39             			
1227   DD39             ;================================================================================================
1228   DD39             ; Format a disk - FORMAT D
1229   DD39             ;================================================================================================
1230   DD39 CD 8B DA    DFORMAT:	CALL CHECKFC		; Check if FLASH Card is initialized.
1231   DD3C 11 86 00    			LD	DE,DMA+6
1232   DD3F CD CD DA    			CALL GETDISK
1233   DD42 FE 01       			CP	1				; Is the argument OK?
1234   DD44 C2 04 D0    			JP	NZ,CYCLE
1235   DD47 21 00 E4    			LD	HL,DISKPAD		; Fill diskpad with empty FAT content
1236   DD4A 36 E5       			LD	(HL),0E5H
1237   DD4C 23          			INC	HL
1238   DD4D 06 0B       			LD	B,11
1239   DD4F 36 20       DF1:		LD	(HL),020H
1240   DD51 23          			INC	HL
1241   DD52 10 FB       			DJNZ DF1
1242   DD54 06 14       			LD	B,20
1243   DD56 36 00       DF2:		LD	(HL),0
1244   DD58 23          			INC	HL
1245   DD59 10 FB       			DJNZ DF2
1246   DD5B 21 00 E4    			LD	HL,DISKPAD
1247   DD5E 11 20 E4    			LD	DE,DISKPAD+020H
1248   DD61 01 E0 01    			LD	BC,480
1249   DD64 ED B0       			LDIR
1250   DD66 CD 53 E6    			CALL PRINTSEQ
1251   DD69 46 6F 72 6D 			.DB	"Format disk ",0
1251   DD6D 61 74 20 64 
1251   DD71 69 73 6B 20 
1251   DD75 00 
1252   DD76 3A 3A E1    			LD	A,(DSK)
1253   DD79 C6 41       			ADD	A,'A'
1254   DD7B 4F          			LD	C,A
1255   DD7C CD 2C E6    			CALL CONOUT
1256   DD7F CD 53 E6    			CALL PRINTSEQ
1257   DD82 20 28 79 2F 			.DB " (y/n)? ",0
1257   DD86 6E 29 3F 20 
1257   DD8A 00 
1258   DD8B CD 29 E6    			CALL CONIN
1259   DD8E 47          			LD	B,A
1260   DD8F 4F          			LD	C,A
1261   DD90 CD 2C E6    			CALL CONOUT
1262   DD93 CD 81 DE    			CALL CRLF
1263   DD96 78          			LD	A,B
1264   DD97 FE 59       			CP	'Y'
1265   DD99 28 05       			JR	Z,DFCONT
1266   DD9B FE 79       			CP	'y'
1267   DD9D C2 04 D0    			JP	NZ,CYCLE
1268   DDA0             			
1269   DDA0 21 00 00    DFCONT:		LD	HL,0
1270   DDA3 3A 3A E1    			LD	A,(DSK)
1271   DDA6 FE 00       			CP	0
1272   DDA8 20 01       			JR	NZ,DFNOTA
1273   DDAA 23          			INC	HL
1274   DDAB 22 3B E1    DFNOTA:		LD	(TRK),HL
1275   DDAE AF          			XOR	A
1276   DDAF 32 3D E1    			LD	(SEC),A
1277   DDB2 06 20       			LD	B,32
1278   DDB4 CD 25 DB    DFNSEC:		CALL DTS2LBA
1279   DDB7 CD CC DB    			CALL DISKWRITE
1280   DDBA 3A 3D E1    			LD	A,(SEC)
1281   DDBD 3C          			INC	A
1282   DDBE 32 3D E1    			LD	(SEC),A
1283   DDC1 10 F1       			DJNZ DFNSEC
1284   DDC3 CD 53 E6    			CALL PRINTSEQ
1285   DDC6 46 6F 72 6D 			.DB	"Format complete.",CR,LF,0
1285   DDCA 61 74 20 63 
1285   DDCE 6F 6D 70 6C 
1285   DDD2 65 74 65 2E 
1285   DDD6 0D 0A 00 
1286   DDD9 C3 04 D0    			JP	CYCLE
1287   DDDC             
1288   DDDC             ;================================================================================================
1289   DDDC             ; Initialize FLASH Card for use with disk operations.
1290   DDDC             ;================================================================================================
1291   DDDC CD 8B DA    FLASH:		CALL CHECKFC
1292   DDDF CD 53 E6    			CALL PRINTSEQ
1293   DDE2 46 4C 41 53 			.DB	"FLASH Card initialized.",CR,LF,0
1293   DDE6 48 20 43 61 
1293   DDEA 72 64 20 69 
1293   DDEE 6E 69 74 69 
1293   DDF2 61 6C 69 7A 
1293   DDF6 65 64 2E 0D 
1293   DDFA 0A 00 
1294   DDFC C3 04 D0    			JP	CYCLE
1295   DDFF             
1296   DDFF             ;================================================================================================
1297   DDFF             ; Run (Execute) Command - RUN AAAA
1298   DDFF             ;================================================================================================
1299   DDFF 11 83 00    RUN:		LD	DE,DMA+3
1300   DE02 CD 2F DF    			CALL GETWORD		
1301   DE05 FE 01       			CP	1				; Is the argument OK?
1302   DE07 C2 04 D0    			JP	NZ,CYCLE
1303   DE0A C5          			PUSH BC
1304   DE0B E1          			POP	HL
1305   DE0C E9          			JP	(HL)			; Continue execution where user requested. His responsability!
1306   DE0D             
1307   DE0D             ;================================================================================================
1308   DE0D             ; Unknown Command message. HL has the address of the line buffer.
1309   DE0D             ;================================================================================================
1310   DE0D CD B7 DF    UNKNOWN:	CALL PRINTENV
1311   DE10 21 80 00    			LD	HL,DMA
1312   DE13 7E          UNEXT:		LD	A,(HL)
1313   DE14 FE 00       			CP	0
1314   DE16 28 07       			JR	Z,UEND
1315   DE18 4F          			LD	C,A
1316   DE19 CD 2C E6    			CALL CONOUT
1317   DE1C 23          			INC	HL
1318   DE1D 18 F4       			JR	UNEXT
1319   DE1F 0E 3F       UEND:		LD	C,'?'
1320   DE21 CD 2C E6    			CALL CONOUT
1321   DE24 CD 81 DE    			CALL CRLF
1322   DE27 C9          			RET
1323   DE28             
1324   DE28             ;================================================================================================
1325   DE28             ; Routine to manage line input from console. Returns A=0FFh if user typed Ctrl-Z (ETX).
1326   DE28             ;================================================================================================
1327   DE28 21 80 00    LINER:		LD	HL,DMA
1328   DE2B 22 A8 E0    			LD	(LBUFPTR),HL			; Init line buffer pointer.
1329   DE2E CD 29 E6    WAITCHAR:	CALL CONIN					; Wait till user types something.
1330   DE31 FE 03       			CP	ETX						; Is it Ctrl-C?
1331   DE33 28 42       			JR	Z,GOTETX
1332   DE35 FE 1A       			CP	SUB						; Is is Ctrl-Z?
1333   DE37 28 3E       			JR	Z,GOTSUB
1334   DE39 FE 18       			CP	CAN
1335   DE3B 28 40       			JR	Z,GOTCAN				; Is it <CAN>? (= delete line).
1336   DE3D FE 0D       			CP	CR
1337   DE3F 28 29       			JR	Z,GOTCR					; Is it <ENTER>?
1338   DE41 FE 08       			CP	BS
1339   DE43 28 1E       			JR	Z,GOTBS					; Is it <BS>? (= backspace).
1340   DE45 2A A8 E0    			LD	HL,(LBUFPTR)			; None of the above options, so let's put it in the buffer.
1341   DE48 01 D0 00    			LD	BC,MAXLBUF				; But 1st, we have to check if we still have space.
1342   DE4B 37          			SCF
1343   DE4C 3F          			CCF
1344   DE4D ED 42       			SBC	HL,BC
1345   DE4F 28 0E       			JR	Z,LBUFFULL				; Is buffer full?
1346   DE51 2A A8 E0    			LD	HL,(LBUFPTR)
1347   DE54 77          			LD	(HL),A
1348   DE55 23          			INC	HL
1349   DE56 22 A8 E0    			LD	(LBUFPTR),HL
1350   DE59 4F          			LD	C,A
1351   DE5A CD 2C E6    OUTWAIT:	CALL CONOUT
1352   DE5D 18 CF       			JR	WAITCHAR
1353   DE5F             
1354   DE5F 0E 07       LBUFFULL:	LD	C,BEL					; Buffer is full. Just ring the bell.
1355   DE61 18 F7       			JR	OUTWAIT
1356   DE63             
1357   DE63 16 01       GOTBS:		LD	D,1						; We got a backspace.
1358   DE65 CD 8C DE    AFTGOTBS:	CALL BSPROC
1359   DE68 18 C4       			JR	WAITCHAR
1360   DE6A             
1361   DE6A 2A A8 E0    GOTCR:		LD	HL,(LBUFPTR)			; We got an ENTER, which means the the user
1362   DE6D 3E 00       			LD	A,0						; has finished typing the command line.
1363   DE6F 77          			LD	(HL),A
1364   DE70 CD 81 DE    			CALL CRLF
1365   DE73 CD BA DE    			CALL UPPER					; Convert line to uppercase before parsing.
1366   DE76 C9          			RET
1367   DE77             GOTETX:
1368   DE77 CD 81 DE    GOTSUB:		CALL CRLF					; User abort request (Ctrl-C or Ctrl-Z).
1369   DE7A 3E 0C       			LD	A,FF
1370   DE7C C9          			RET
1371   DE7D             			
1372   DE7D 16 00       GOTCAN:		LD	D,0						; We got a line delete.
1373   DE7F 18 E4       			JR	AFTGOTBS
1374   DE81             			
1375   DE81 0E 0D       CRLF:		LD	C,CR
1376   DE83 CD 2C E6    			CALL CONOUT
1377   DE86 0E 0A       			LD	C,LF
1378   DE88 CD 2C E6    			CALL CONOUT					; Output <CR><LF>.
1379   DE8B C9          			RET
1380   DE8C             
1381   DE8C             ;================================================================================================
1382   DE8C             ; Routine to do the backspace and line delete. D=1, backspace; D=0, delete line.
1383   DE8C             ;================================================================================================
1384   DE8C 2A A8 E0    BSPROC:		LD	HL,(LBUFPTR)
1385   DE8F 01 80 00    			LD	BC,DMA
1386   DE92 37          			SCF
1387   DE93 3F          			CCF
1388   DE94 ED 42       			SBC	HL,BC
1389   DE96 28 1C       			JR	Z,LBUFEMPTY
1390   DE98 2A A8 E0    			LD	HL,(LBUFPTR)
1391   DE9B 2B          			DEC	HL
1392   DE9C 22 A8 E0    			LD	(LBUFPTR),HL
1393   DE9F 0E 08       			LD	C,BS
1394   DEA1 CD 2C E6    			CALL CONOUT
1395   DEA4 0E 20       			LD	C,' '
1396   DEA6 CD 2C E6    			CALL CONOUT
1397   DEA9 0E 08       			LD	C,BS
1398   DEAB CD 2C E6    			CALL CONOUT
1399   DEAE 7A          			LD	A,D
1400   DEAF FE 01       			CP	1
1401   DEB1 C8          			RET	Z
1402   DEB2 18 D8       			JR	BSPROC
1403   DEB4             
1404   DEB4 0E 07       LBUFEMPTY:	LD	C,BEL
1405   DEB6 CD 2C E6    			CALL CONOUT
1406   DEB9 C9          			RET
1407   DEBA             			
1408   DEBA             ;================================================================================================
1409   DEBA             ; Routine to convert line buffer content to upper case
1410   DEBA             ;================================================================================================
1411   DEBA 21 7F 00    UPPER:		LD	HL,DMA-1
1412   DEBD 23          NEXT2UP:	INC	HL
1413   DEBE 7E          			LD	A,(HL)
1414   DEBF FE 00       			CP	0
1415   DEC1 C8          			RET	Z
1416   DEC2 FE 61       			CP	'a'
1417   DEC4 FA BD DE    			JP	M,NEXT2UP
1418   DEC7 FE 7B       			CP	'{'
1419   DEC9 F2 BD DE    			JP	P,NEXT2UP
1420   DECC D6 20       			SUB	20H
1421   DECE 77          			LD	(HL),A
1422   DECF 18 EC       			JR	NEXT2UP
1423   DED1             			
1424   DED1             ;================================================================================================
1425   DED1             ; Routine to parse command. HL=cmd_table_pointer.
1426   DED1             ; regA=cmd_num or FFh if no match. HL=jump_address or 0000 if no match.
1427   DED1             ;================================================================================================
1428   DED1 C5          PARSER:		PUSH BC
1429   DED2 D5          			PUSH DE
1430   DED3 11 80 00    			LD	DE,DMA
1431   DED6 3E 00       			LD	A,0
1432   DED8 32 A7 E0    			LD	(CMDNUM),A		; Init command number.
1433   DEDB 1A          NEXT2PARS:	LD	A,(DE)
1434   DEDC BE          			CP	(HL)
1435   DEDD 20 04       			JR	NZ,NOTEQU
1436   DEDF 23          			INC	HL
1437   DEE0 13          			INC	DE
1438   DEE1 18 F8       			JR	NEXT2PARS
1439   DEE3 7E          NOTEQU:		LD	A,(HL)
1440   DEE4 FE 1E       			CP	RS
1441   DEE6 28 04       			JR	Z,ISRS
1442   DEE8 FE 03       			CP	ETX
1443   DEEA 20 22       			JR	NZ,NEXTCMD
1444   DEEC 1A          ISRS:		LD	A,(DE)
1445   DEED FE 00       			CP	0
1446   DEEF 28 04       			JR	Z,ISZERO
1447   DEF1 FE 20       			CP	' '
1448   DEF3 20 19       			JR	NZ,NEXTCMD
1449   DEF5 7E          ISZERO:		LD	A,(HL)
1450   DEF6 FE 03       			CP	ETX
1451   DEF8 28 03       			JR	Z,CMDMATCH
1452   DEFA 23          			INC	HL
1453   DEFB 18 F8       			JR	ISZERO
1454   DEFD 23          CMDMATCH:	INC	HL
1455   DEFE E5          			PUSH HL
1456   DEFF D1          			POP	DE				; DE=addr of jump table
1457   DF00 26 00       			LD	H,0
1458   DF02 3A A7 E0    			LD	A,(CMDNUM)
1459   DF05 6F          			LD	L,A
1460   DF06 E5          			PUSH HL
1461   DF07 C1          			POP	BC
1462   DF08 09          			ADD	HL,BC			; command_number * 2
1463   DF09 09          			ADD	HL,BC			; command_number * 3
1464   DF0A 19          			ADD HL,DE
1465   DF0B D1          			POP	DE
1466   DF0C C1          			POP	BC
1467   DF0D C9          			RET					; A=command_number, HL=jump_address
1468   DF0E 7E          NEXTCMD:	LD	A,(HL)
1469   DF0F FE 1E       			CP	RS
1470   DF11 28 07       			JR	Z,ISRS2
1471   DF13 FE 03       			CP	ETX
1472   DF15 28 10       			JR	Z,NOMATCH
1473   DF17 23          			INC	HL
1474   DF18 18 F4       			JR	NEXTCMD
1475   DF1A 23          ISRS2:		INC	HL
1476   DF1B 3A A7 E0    			LD	A,(CMDNUM)
1477   DF1E 3C          			INC	A
1478   DF1F 32 A7 E0    			LD	(CMDNUM),A
1479   DF22 11 80 00    			LD	DE,DMA
1480   DF25 18 B4       			JR	NEXT2PARS
1481   DF27 21 00 00    NOMATCH:	LD	HL,0
1482   DF2A 3E FF       			LD	A,0FFH
1483   DF2C D1          			POP	DE
1484   DF2D C1          			POP	BC
1485   DF2E C9          			RET
1486   DF2F             
1487   DF2F             ;================================================================================================
1488   DF2F             ; Routine to get word from command line. DE=line_buf_ptr(should point to where word starts).
1489   DF2F             ; If successfull, return word in BC. A=0 if missing arg, A=1 if OK, A=2 if invalid arg. 
1490   DF2F             ;================================================================================================
1491   DF2F CD 43 DF    GETWORD:	CALL GETBYTE
1492   DF32 FE 01       			CP	1
1493   DF34 C0          			RET	NZ
1494   DF35 48          			LD	C,B
1495   DF36 13          			INC	DE
1496   DF37 CD 43 DF    			CALL GETBYTE
1497   DF3A FE 01       			CP	1
1498   DF3C C0          			RET NZ
1499   DF3D 78          			LD	A,B
1500   DF3E 41          			LD	B,C
1501   DF3F 4F          			LD	C,A
1502   DF40 3E 01       			LD	A,1
1503   DF42 C9          			RET
1504   DF43             			
1505   DF43             ;================================================================================================
1506   DF43             ; Routine to get byte from command line. DE=line_buf_ptr(should point to where byte starts).
1507   DF43             ; If successfull, returns byte in regB. A=0 if missing arg, A=1 if OK, A=2 if invalid arg. 
1508   DF43             ;================================================================================================
1509   DF43 1A          GETBYTE:	LD	A,(DE)
1510   DF44 FE 00       			CP	0
1511   DF46 28 1C       			JR	Z,GBNA				; End of buffer and no arg found.
1512   DF48 FE 20       			CP	' '
1513   DF4A 28 33       			JR	Z,GBSPC				; Trim the space.
1514   DF4C 67          			LD	H,A
1515   DF4D CD 9D DF    			CALL ISITHEX
1516   DF50 FE 01       			CP	1
1517   DF52 20 2E       			JR	NZ,GBIA				; Invalid arg.
1518   DF54 13          			INC	DE
1519   DF55 1A          			LD	A,(DE)
1520   DF56 6F          			LD	L,A
1521   DF57 CD 9D DF    			CALL ISITHEX
1522   DF5A FE 01       			CP	1
1523   DF5C 20 24       			JR	NZ,GBIA				; Invalid arg.
1524   DF5E CD BD DF    			CALL HL2B				; Convert ASCII pair to byte
1525   DF61 3E 01       			LD	A,1
1526   DF63 C9          			RET
1527   DF64             			
1528   DF64 CD 53 E6    GBNA:		CALL PRINTSEQ
1529   DF67 3E 4D 69 73 			.DB	">Missing argument.",CR,LF,0
1529   DF6B 73 69 6E 67 
1529   DF6F 20 61 72 67 
1529   DF73 75 6D 65 6E 
1529   DF77 74 2E 0D 0A 
1529   DF7B 00 
1530   DF7C 3E 00       			LD	A,0
1531   DF7E C9          			RET
1532   DF7F             			
1533   DF7F 13          GBSPC:		INC	DE
1534   DF80 18 C1       			JR	GETBYTE
1535   DF82 CD 53 E6    GBIA:		CALL PRINTSEQ
1536   DF85 3E 49 6E 76 			.DB	">Invalid argument.",CR,LF,0
1536   DF89 61 6C 69 64 
1536   DF8D 20 61 72 67 
1536   DF91 75 6D 65 6E 
1536   DF95 74 2E 0D 0A 
1536   DF99 00 
1537   DF9A 3E 02       			LD	A,2
1538   DF9C C9          			RET
1539   DF9D             
1540   DF9D FE 47       ISITHEX:	CP	'G'
1541   DF9F F2 B1 DF    			JP	P,NOTHEX
1542   DFA2 FE 41       			CP	'A'
1543   DFA4 F2 B4 DF    			JP	P,ISHEX
1544   DFA7 FE 40       			CP	'@'
1545   DFA9 F2 B1 DF    			JP	P,NOTHEX
1546   DFAC FE 30       			CP	'0'
1547   DFAE F2 B4 DF    			JP	P,ISHEX
1548   DFB1 3E 00       NOTHEX:		LD	A,0
1549   DFB3 C9          			RET
1550   DFB4 3E 01       ISHEX:		LD	A,1
1551   DFB6 C9          			RET
1552   DFB7             
1553   DFB7 0E 3E       PRINTENV:	LD	C,PROMPT
1554   DFB9 CD 2C E6    			CALL CONOUT
1555   DFBC C9          			RET
1556   DFBD             
1557   DFBD             ;================================================================================================
1558   DFBD             ; Convert ASCII to HEX (HL --> B)
1559   DFBD             ;================================================================================================
1560   DFBD C5          HL2B:		PUSH BC
1561   DFBE 3E 60       			LD	A,060H
1562   DFC0 94          			SUB	H
1563   DFC1 0E 57       			LD	C,057H
1564   DFC3 DA D0 DF    			JP	C,DISCOUNT
1565   DFC6 3E 40       			LD	A,040H
1566   DFC8 94          			SUB	H
1567   DFC9 0E 37       			LD	C,037H
1568   DFCB DA D0 DF    			JP	C,DISCOUNT
1569   DFCE 0E 30       			LD	C,030H
1570   DFD0 7C          DISCOUNT:	LD	A,H
1571   DFD1 91          			SUB	C
1572   DFD2 47          CONVL:		LD	B,A
1573   DFD3 CB 20       			SLA	B
1574   DFD5 CB 20       			SLA	B
1575   DFD7 CB 20       			SLA	B
1576   DFD9 CB 20       			SLA	B
1577   DFDB 3E 60       			LD	A,060H
1578   DFDD 95          			SUB	L
1579   DFDE 0E 57       			LD	C,057H
1580   DFE0 DA ED DF    			JP	C,DISCOUNT2
1581   DFE3 3E 40       			LD	A,040H
1582   DFE5 95          			SUB	L
1583   DFE6 0E 37       			LD	C,037H
1584   DFE8 DA ED DF    			JP	C,DISCOUNT2
1585   DFEB 0E 30       			LD	C,030H
1586   DFED 7D          DISCOUNT2:	LD	A,L
1587   DFEE 91          			SUB	C
1588   DFEF B0          			OR	B
1589   DFF0 C1          			POP	BC
1590   DFF1 47          			LD	B,A
1591   DFF2 C9          			RET
1592   DFF3             
1593   DFF3             ;================================================================================================
1594   DFF3             ; Convert HEX to ASCII (B --> HL)
1595   DFF3             ;================================================================================================
1596   DFF3 C5          B2HL:		PUSH	BC
1597   DFF4 78          			LD	A,B
1598   DFF5 E6 0F       			AND	0FH
1599   DFF7 6F          			LD	L,A
1600   DFF8 D6 0A       			SUB	0AH
1601   DFFA 0E 30       			LD	C,030H
1602   DFFC DA 01 E0    			JP	C,COMPENSE
1603   DFFF 0E 37       			LD	C,037H
1604   E001 7D          COMPENSE:	LD	A,L
1605   E002 81          			ADD	A,C
1606   E003 6F          			LD	L,A
1607   E004 78          			LD	A,B
1608   E005 E6 F0       			AND	0F0H
1609   E007 CB 3F       			SRL	A
1610   E009 CB 3F       			SRL	A
1611   E00B CB 3F       			SRL	A
1612   E00D CB 3F       			SRL	A
1613   E00F 67          			LD	H,A
1614   E010 D6 0A       			SUB	0AH
1615   E012 0E 30       			LD	C,030H
1616   E014 DA 19 E0    			JP	C,COMPENSE2
1617   E017 0E 37       			LD	C,037H
1618   E019 7C          COMPENSE2:	LD	A,H
1619   E01A 81          			ADD	A,C
1620   E01B 67          			LD	H,A
1621   E01C C1          			POP	BC
1622   E01D C9          			RET
1623   E01E             
1624   E01E             ;================================================================================================
1625   E01E 3F 1E       CMDTBL:		.DB	"?",RS
1626   E020 42 4F 4F 54 			.DB	"BOOT",RS
1626   E024 1E 
1627   E025 58 4D 4F 44 			.DB	"XMODEM",RS
1627   E029 45 4D 1E 
1628   E02C 48 45 58 32 			.DB	"HEX2COM",RS
1628   E030 43 4F 4D 1E 
1629   E034 43 4F 4D 50 			.DB	"COMPARE",RS
1629   E038 41 52 45 1E 
1630   E03C 52 55 4E 1E 			.DB	"RUN",RS
1631   E040 52 45 41 44 			.DB	"READ",RS
1631   E044 1E 
1632   E045 44 52 45 41 			.DB	"DREAD",RS
1632   E049 44 1E 
1633   E04B 57 52 49 54 			.DB	"WRITE",RS
1633   E04F 45 1E 
1634   E051 43 4F 50 59 			.DB	"COPY",RS
1634   E055 1E 
1635   E056 46 49 4C 4C 			.DB	"FILL",RS
1635   E05A 1E 
1636   E05B 44 4F 57 4E 			.DB	"DOWN",RS
1636   E05F 1E 
1637   E060 55 50 1E    			.DB	"UP",RS
1638   E063 46 4F 52 4D 			.DB	"FORMAT",RS
1638   E067 41 54 1E 
1639   E06A 46 4C 41 53 			.DB	"FLASH",RS
1639   E06E 48 1E 
1640   E070 56 45 52 49 			.DB	"VERIFY",ETX
1640   E074 46 59 03 
1641   E077             
1642   E077 C3 20 D0    JMPTBL:		JP	HELP
1643   E07A C3 23 E6    			JP	WBOOT
1644   E07D C3 CB D6    			JP	XMODEM
1645   E080 C3 DF D8    			JP	HEX2COM
1646   E083 C3 09 D6    			JP	MCOMP
1647   E086 C3 FF DD    			JP	RUN
1648   E089 C3 CC D3    			JP	MREAD
1649   E08C C3 9C D9    			JP	DREAD
1650   E08F C3 54 D5    			JP	MWRITE
1651   E092 C3 7F D5    			JP	MCOPY
1652   E095 C3 C3 D5    			JP	MFILL
1653   E098 C3 9A DA    			JP	DDOWN
1654   E09B C3 F4 DB    			JP	DUP
1655   E09E C3 39 DD    			JP	DFORMAT
1656   E0A1 C3 DC DD    			JP	FLASH
1657   E0A4 C3 0B DC    			JP	DVERIFY
1658   E0A7             			
1659   E0A7             ;================================================================================================
1660   E0A7 00          CMDNUM		.DB	0
1661   E0A8 00 00       LBUFPTR		.DW	0
1662   E0AA 00          LINNUM		.DB	0
1663   E0AB 00          COLNUM		.DB	0
1664   E0AC 00 00       AAAA		.DW	0
1665   E0AE 00 00       BBBB		.DW	0
1666   E0B0 00 00       CCCC		.DW	0
1667   E0B2 00          CHKSUM	 	.DB	0					; Checksum for xmodem
1668   E0B3 00          BYTECNT		.DB	0					; Byte counter for xmodem and hex2com
1669   E0B4 00          RETRY		.DB 0					; Retry counter for xmodem
1670   E0B5 00          BLOCK		.DB	0					; Block counter for xmodem
1671   E0B6             XBUFFER		.DS 132					; Buffer used by xmodem to store a block
1672   E13A             									; 	<BLK> </BLK> 128 X <BYTE> <CHKSUM>
1673   E13A 00          DSK			.DB	0					; Disk number [00,0F]
1674   E13B 00 00       TRK			.DW	0					; Track number [0,1FF]
1675   E13D 00          SEC			.DB	0					; Sector number [0,1F]
1676   E13E 00          LBA3		.DB	0
1677   E13F 00          LBA2		.DB	0
1678   E140 00          LBA1		.DB	0
1679   E141 00          LBA0		.DB	0
1680   E142 00          FCINI		.DB	0					; FLASH Card initialized (1=yes, 0=no)
1681   E143             
1682   E143             			.END
tasm: Number of errors = 0
