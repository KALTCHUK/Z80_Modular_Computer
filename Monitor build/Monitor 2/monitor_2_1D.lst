0001   0000             ;================================================================================================
0002   0000             ; MONITOR 2.1D - implement ascii2com function.
0003   0000             ;
0004   0000             ;================================================================================================
0005   0000             IOBYTE		.EQU	3
0006   0000             TPA			.EQU	0100H		; Transient Programs Area
0007   0000             MONITOR		.EQU	0D000H		; Monitor entry point
0008   0000             BIOS		.EQU	0E600H		; BIOS entry point
0009   0000             DMA			.EQU	0080H		; Buffer used by Monitor
0010   0000             DISKPAD		.EQU	0E000H		; Draft area used by disk R/W ops
0011   0000             								; (512 bytes between Monitor and BIOS)
0012   0000             
0013   0000             ;================================================================================================
0014   0000             ; BIOS functions.
0015   0000             ;================================================================================================
0016   0000             LEAP		.EQU	3					; 3 bytes for each entry (JP aaaa)
0017   0000             
0018   0000             BOOT:		.EQU	BIOS				;  0 Initialize.
0019   0000             WBOOT:		.EQU	BIOS+(LEAP*1)		;  1 Warm boot.
0020   0000             CONST:		.EQU	BIOS+(LEAP*2)		;  2 Console status.
0021   0000             CONIN:		.EQU	BIOS+(LEAP*3)		;  3 Console input.
0022   0000             CONOUT:		.EQU	BIOS+(LEAP*4)		;  4 Console OUTput.
0023   0000             LIST:		.EQU	BIOS+(LEAP*5)		;  5 List OUTput.
0024   0000             PUNCH:		.EQU	BIOS+(LEAP*6)		;  6 Punch OUTput.
0025   0000             READER:		.EQU	BIOS+(LEAP*7)		;  7 Reader input.
0026   0000             HOME:		.EQU	BIOS+(LEAP*8)		;  8 Home disk.
0027   0000             SELDSK:		.EQU	BIOS+(LEAP*9)		;  9 Select disk.
0028   0000             SETTRK:		.EQU	BIOS+(LEAP*10)		; 10 Select track.
0029   0000             SETSEC:		.EQU	BIOS+(LEAP*11)		; 11 Select sector.
0030   0000             SETDMA:		.EQU	BIOS+(LEAP*12)		; 12 Set DMA ADDress.
0031   0000             READ:		.EQU	BIOS+(LEAP*13)		; 13 Read 128 bytes.
0032   0000             WRITE:		.EQU	BIOS+(LEAP*14)		; 14 Write 128 bytes.
0033   0000             LISTST:		.EQU	BIOS+(LEAP*15)		; 15 List status.
0034   0000             SECTRAN:	.EQU	BIOS+(LEAP*16)		; 16 Sector translate.
0035   0000             PRINTSEQ:	.EQU	BIOS+(LEAP*17)		; not a BIOS function
0036   0000             
0037   0000             ;================================================================================================
0038   0000             ; ASCII characters.
0039   0000             ;================================================================================================
0040   0000             NUL			.EQU	00H
0041   0000             SOH			.EQU	01H
0042   0000             STX			.EQU	02H
0043   0000             ETX			.EQU	03H
0044   0000             EOT			.EQU	04H
0045   0000             ENQ			.EQU	05H
0046   0000             ACK			.EQU	06H
0047   0000             BEL			.EQU	07H
0048   0000             BS			.EQU	08H			; ^H
0049   0000             HT			.EQU	09H
0050   0000             LF			.EQU	0AH
0051   0000             VT			.EQU	0BH
0052   0000             FF			.EQU	0CH
0053   0000             CR			.EQU	0DH
0054   0000             SO			.EQU	0EH
0055   0000             SI			.EQU	0FH
0056   0000             DLE			.EQU	10H
0057   0000             DC1			.EQU	11H
0058   0000             DC2			.EQU	12H
0059   0000             DC3			.EQU	13H
0060   0000             DC4			.EQU	14H
0061   0000             NAK			.EQU	15H			; ^U
0062   0000             SYN			.EQU	16H
0063   0000             ETB			.EQU	17H
0064   0000             CAN			.EQU	18H			; ^X
0065   0000             EM			.EQU	19H
0066   0000             SUB			.EQU	1AH
0067   0000             ESC			.EQU	1BH
0068   0000             FS			.EQU	1CH
0069   0000             GS			.EQU	1DH
0070   0000             RS			.EQU	1EH
0071   0000             US			.EQU	1FH
0072   0000             
0073   0000             ;================================================================================================
0074   0000             ; Some constants
0075   0000             ;================================================================================================
0076   0000             MAXLBUF		.EQU	DMA+80
0077   0000             PROMPT		.EQU	'>'
0078   0000             MAXTRY		.EQU	10
0079   0000             
0080   0000             ;================================================================================================
0081   0000             ; FLASH card stuff
0082   0000             ;================================================================================================
0083   0000             FLASH_ADDR		.EQU	0B0H			; Base I/O address for compact flash card
0084   0000             CF_DATA			.EQU	(FLASH_ADDR+0)	; R/W
0085   0000             CF_FEATURES		.EQU	(FLASH_ADDR+1)	; W
0086   0000             CF_ERROR		.EQU	(FLASH_ADDR+1)	; R
0087   0000             CF_SECCOUNT		.EQU	(FLASH_ADDR+2)	; W
0088   0000             
0089   0000             CF_SECTOR		.EQU	(FLASH_ADDR+3)	; W
0090   0000             CF_CYL_LOW		.EQU	(FLASH_ADDR+4)	; W
0091   0000             CF_CYL_HI		.EQU	(FLASH_ADDR+5)	; W
0092   0000             CF_HEAD			.EQU	(FLASH_ADDR+6)	; W
0093   0000             
0094   0000             CF_LBA0			.EQU	(FLASH_ADDR+3)	; W
0095   0000             CF_LBA1			.EQU	(FLASH_ADDR+4)	; W
0096   0000             CF_LBA2			.EQU	(FLASH_ADDR+5)	; W
0097   0000             CF_LBA3			.EQU	(FLASH_ADDR+6)	; W
0098   0000             
0099   0000             CF_STATUS		.EQU	(FLASH_ADDR+7)	; R
0100   0000             CF_COMMAND		.EQU	(FLASH_ADDR+7)	; W
0101   0000             
0102   0000             ;CF Features
0103   0000             CF_8BIT			.EQU	1
0104   0000             CF_NOCACHE		.EQU	082H
0105   0000             
0106   0000             ;CF Commands
0107   0000             CF_READ_SEC		.EQU	020H
0108   0000             CF_WRITE_SEC	.EQU	030H
0109   0000             CF_SET_FEAT		.EQU 	0EFH
0110   0000             ;================================================================================================
0111   0000             ; MAIN PROGRAM STARTS HERE
0112   0000             ;================================================================================================
0113   D000             			.ORG MONITOR
0114   D000             
0115   D000 CD 79 DB    CYCLE:		CALL PRINTENV
0116   D003 CD 04 DA    			CALL LINER					; Call the line manager
0117   D006 3A 80 00    			LD	A,(DMA)
0118   D009 FE 00       			CP	0
0119   D00B 28 F3       			JR	Z,CYCLE					; User ENTERed an empty line. No need to parse.
0120   D00D 21 FA DB    			LD	HL,CMDTBL
0121   D010 CD AD DA    			CALL PARSER					; Find command comparing buffer with Command Table.
0122   D013 3C          			INC	A
0123   D014 28 01       			JR	Z,UNK					; No match found in command table.
0124   D016 E9          			JP	(HL)					; Jump to Command Routine
0125   D017 CD E9 D9    UNK:		CALL UNKNOWN
0126   D01A 18 E4       			JR	CYCLE
0127   D01C             			
0128   D01C             ;================================================================================================
0129   D01C             ; Help for main program
0130   D01C             ;================================================================================================
0131   D01C CD 5D DA    HELP:		CALL CRLF
0132   D01F CD 33 E6    			CALL PRINTSEQ
0133   D022 20 4F 70 74 			.DB	" Options:   READ aaaa             read from memory.",CR,LF
0133   D026 69 6F 6E 73 
0133   D02A 3A 20 20 20 
0133   D02E 52 45 41 44 
0133   D032 20 61 61 61 
0133   D036 61 20 20 20 
0133   D03A 20 20 20 20 
0133   D03E 20 20 20 20 
0133   D042 20 20 72 65 
0133   D046 61 64 20 66 
0133   D04A 72 6F 6D 20 
0133   D04E 6D 65 6D 6F 
0133   D052 72 79 2E 0D 
0133   D056 0A 
0134   D057 20 20 20 20 			.DB "            WRITE aaaa,c1 c2 cN   write to memory.",CR,LF
0134   D05B 20 20 20 20 
0134   D05F 20 20 20 20 
0134   D063 57 52 49 54 
0134   D067 45 20 61 61 
0134   D06B 61 61 2C 63 
0134   D06F 31 20 63 32 
0134   D073 20 63 4E 20 
0134   D077 20 20 77 72 
0134   D07B 69 74 65 20 
0134   D07F 74 6F 20 6D 
0134   D083 65 6D 6F 72 
0134   D087 79 2E 0D 0A 
0135   D08B 20 20 20 20 			.DB "            COPY aaaa-bbbb,cccc   copy memory block.",CR,LF
0135   D08F 20 20 20 20 
0135   D093 20 20 20 20 
0135   D097 43 4F 50 59 
0135   D09B 20 61 61 61 
0135   D09F 61 2D 62 62 
0135   D0A3 62 62 2C 63 
0135   D0A7 63 63 63 20 
0135   D0AB 20 20 63 6F 
0135   D0AF 70 79 20 6D 
0135   D0B3 65 6D 6F 72 
0135   D0B7 79 20 62 6C 
0135   D0BB 6F 63 6B 2E 
0135   D0BF 0D 0A 
0136   D0C1 20 20 20 20 			.DB "            FILL aaaa-bbbb,cc     fill memory block.",CR,LF
0136   D0C5 20 20 20 20 
0136   D0C9 20 20 20 20 
0136   D0CD 46 49 4C 4C 
0136   D0D1 20 61 61 61 
0136   D0D5 61 2D 62 62 
0136   D0D9 62 62 2C 63 
0136   D0DD 63 20 20 20 
0136   D0E1 20 20 66 69 
0136   D0E5 6C 6C 20 6D 
0136   D0E9 65 6D 6F 72 
0136   D0ED 79 20 62 6C 
0136   D0F1 6F 63 6B 2E 
0136   D0F5 0D 0A 
0137   D0F7 20 20 20 20 			.DB	"            DREAD aaaa            read from disk.",CR,LF
0137   D0FB 20 20 20 20 
0137   D0FF 20 20 20 20 
0137   D103 44 52 45 41 
0137   D107 44 20 61 61 
0137   D10B 61 61 20 20 
0137   D10F 20 20 20 20 
0137   D113 20 20 20 20 
0137   D117 20 20 72 65 
0137   D11B 61 64 20 66 
0137   D11F 72 6F 6D 20 
0137   D123 64 69 73 6B 
0137   D127 2E 0D 0A 
0138   D12A 20 20 20 20 			.DB "            DOWN d,ttt,ss         download one sector from disk.",CR,LF
0138   D12E 20 20 20 20 
0138   D132 20 20 20 20 
0138   D136 44 4F 57 4E 
0138   D13A 20 64 2C 74 
0138   D13E 74 74 2C 73 
0138   D142 73 20 20 20 
0138   D146 20 20 20 20 
0138   D14A 20 20 64 6F 
0138   D14E 77 6E 6C 6F 
0138   D152 61 64 20 6F 
0138   D156 6E 65 20 73 
0138   D15A 65 63 74 6F 
0138   D15E 72 20 66 72 
0138   D162 6F 6D 20 64 
0138   D166 69 73 6B 2E 
0138   D16A 0D 0A 
0139   D16C 20 20 20 20 			.DB "            UP d,ttt,ss           upload one sector to disk.",CR,LF
0139   D170 20 20 20 20 
0139   D174 20 20 20 20 
0139   D178 55 50 20 64 
0139   D17C 2C 74 74 74 
0139   D180 2C 73 73 20 
0139   D184 20 20 20 20 
0139   D188 20 20 20 20 
0139   D18C 20 20 75 70 
0139   D190 6C 6F 61 64 
0139   D194 20 6F 6E 65 
0139   D198 20 73 65 63 
0139   D19C 74 6F 72 20 
0139   D1A0 74 6F 20 64 
0139   D1A4 69 73 6B 2E 
0139   D1A8 0D 0A 
0140   D1AA 20 20 20 20 			.DB "            VERIFY d              verify disk.",CR,LF
0140   D1AE 20 20 20 20 
0140   D1B2 20 20 20 20 
0140   D1B6 56 45 52 49 
0140   D1BA 46 59 20 64 
0140   D1BE 20 20 20 20 
0140   D1C2 20 20 20 20 
0140   D1C6 20 20 20 20 
0140   D1CA 20 20 76 65 
0140   D1CE 72 69 66 79 
0140   D1D2 20 64 69 73 
0140   D1D6 6B 2E 0D 0A 
0141   D1DA 20 20 20 20 			.DB "            FORMAT d              format disk.",CR,LF
0141   D1DE 20 20 20 20 
0141   D1E2 20 20 20 20 
0141   D1E6 46 4F 52 4D 
0141   D1EA 41 54 20 64 
0141   D1EE 20 20 20 20 
0141   D1F2 20 20 20 20 
0141   D1F6 20 20 20 20 
0141   D1FA 20 20 66 6F 
0141   D1FE 72 6D 61 74 
0141   D202 20 64 69 73 
0141   D206 6B 2E 0D 0A 
0142   D20A 20 20 20 20 			.DB "            XMODEM aaaa           receive file using xmodem protocol.",CR,LF
0142   D20E 20 20 20 20 
0142   D212 20 20 20 20 
0142   D216 58 4D 4F 44 
0142   D21A 45 4D 20 61 
0142   D21E 61 61 61 20 
0142   D222 20 20 20 20 
0142   D226 20 20 20 20 
0142   D22A 20 20 72 65 
0142   D22E 63 65 69 76 
0142   D232 65 20 66 69 
0142   D236 6C 65 20 75 
0142   D23A 73 69 6E 67 
0142   D23E 20 78 6D 6F 
0142   D242 64 65 6D 20 
0142   D246 70 72 6F 74 
0142   D24A 6F 63 6F 6C 
0142   D24E 2E 0D 0A 
0143   D251 20 20 20 20 			.DB "            HEX2COM aaaa          convert intel hex to executable.",CR,LF
0143   D255 20 20 20 20 
0143   D259 20 20 20 20 
0143   D25D 48 45 58 32 
0143   D261 43 4F 4D 20 
0143   D265 61 61 61 61 
0143   D269 20 20 20 20 
0143   D26D 20 20 20 20 
0143   D271 20 20 63 6F 
0143   D275 6E 76 65 72 
0143   D279 74 20 69 6E 
0143   D27D 74 65 6C 20 
0143   D281 68 65 78 20 
0143   D285 74 6F 20 65 
0143   D289 78 65 63 75 
0143   D28D 74 61 62 6C 
0143   D291 65 2E 0D 0A 
0144   D295 20 20 20 20 			.DB "            ASCII2COM aaaa        convert ASCII to executable.",CR,LF
0144   D299 20 20 20 20 
0144   D29D 20 20 20 20 
0144   D2A1 41 53 43 49 
0144   D2A5 49 32 43 4F 
0144   D2A9 4D 20 61 61 
0144   D2AD 61 61 20 20 
0144   D2B1 20 20 20 20 
0144   D2B5 20 20 63 6F 
0144   D2B9 6E 76 65 72 
0144   D2BD 74 20 41 53 
0144   D2C1 43 49 49 20 
0144   D2C5 74 6F 20 65 
0144   D2C9 78 65 63 75 
0144   D2CD 74 61 62 6C 
0144   D2D1 65 2E 0D 0A 
0145   D2D5 20 20 20 20 			.DB "            RUN aaaa              run program.",CR,LF
0145   D2D9 20 20 20 20 
0145   D2DD 20 20 20 20 
0145   D2E1 52 55 4E 20 
0145   D2E5 61 61 61 61 
0145   D2E9 20 20 20 20 
0145   D2ED 20 20 20 20 
0145   D2F1 20 20 20 20 
0145   D2F5 20 20 72 75 
0145   D2F9 6E 20 70 72 
0145   D2FD 6F 67 72 61 
0145   D301 6D 2E 0D 0A 
0146   D305 20 20 20 20 			.DB "            BOOT",CR,LF,0
0146   D309 20 20 20 20 
0146   D30D 20 20 20 20 
0146   D311 42 4F 4F 54 
0146   D315 0D 0A 00 
0147   D318 C3 00 D0    			JP	CYCLE
0148   D31B             			
0149   D31B             ;================================================================================================
0150   D31B             ; Read memory operations
0151   D31B             ;================================================================================================
0152   D31B 11 84 00    MREAD:		LD	DE,DMA+4
0153   D31E CD 0B DB    			CALL GETWORD		; Get aaaa
0154   D321 FE 01       			CP	1				; Is the argument OK?
0155   D323 C2 00 D0    			JP	NZ,CYCLE
0156   D326 C5          			PUSH BC
0157   D327 D1          			POP	DE				; DE will be the address holder
0158   D328 7B          			LD	A,E
0159   D329 E6 F0       			AND	0F0H
0160   D32B 5F          			LD	E,A				; trim addr (xxx0)
0161   D32C CD 45 D3    NEWHDR:		CALL PRINTHDR		; Print the header
0162   D32F 3E 10       			LD	A,16
0163   D331 32 7F DC    			LD	(LINNUM),A
0164   D334             
0165   D334 CD 2E D4    			CALL SUBMPRN
0166   D337             			
0167   D337 CD 09 E6    TRYAGAIN:	CALL CONIN			; Wait for user's decision
0168   D33A FE 0D       			CP	CR
0169   D33C 28 EE       			JR	Z,NEWHDR
0170   D33E FE 1B       			CP	ESC
0171   D340 CA 00 D0    			JP	Z,CYCLE
0172   D343 18 F2       			JR	TRYAGAIN
0173   D345             
0174   D345 CD 33 E6    PRINTHDR:	CALL PRINTSEQ
0175   D348 3E 41 44 44 			.DB ">ADDR: 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F  0123456789ABCDEF",CR,LF,
0175   D34C 52 3A 20 30 
0175   D350 30 20 30 31 
0175   D354 20 30 32 20 
0175   D358 30 33 20 30 
0175   D35C 34 20 30 35 
0175   D360 20 30 36 20 
0175   D364 30 37 20 30 
0175   D368 38 20 30 39 
0175   D36C 20 30 41 20 
0175   D370 30 42 20 30 
0175   D374 43 20 30 44 
0175   D378 20 30 45 20 
0175   D37C 30 46 20 20 
0175   D380 30 31 32 33 
0175   D384 34 35 36 37 
0175   D388 38 39 41 42 
0175   D38C 43 44 45 46 
0175   D390 0D 0A 
0176   D392 3E 2D 2D 2D 			.DB ">----- -----------------------------------------------  ----------------",0
0176   D396 2D 2D 20 2D 
0176   D39A 2D 2D 2D 2D 
0176   D39E 2D 2D 2D 2D 
0176   D3A2 2D 2D 2D 2D 
0176   D3A6 2D 2D 2D 2D 
0176   D3AA 2D 2D 2D 2D 
0176   D3AE 2D 2D 2D 2D 
0176   D3B2 2D 2D 2D 2D 
0176   D3B6 2D 2D 2D 2D 
0176   D3BA 2D 2D 2D 2D 
0176   D3BE 2D 2D 2D 2D 
0176   D3C2 2D 2D 2D 2D 
0176   D3C6 2D 2D 20 20 
0176   D3CA 2D 2D 2D 2D 
0176   D3CE 2D 2D 2D 2D 
0176   D3D2 2D 2D 2D 2D 
0176   D3D6 2D 2D 2D 2D 
0176   D3DA 00 
0177   D3DB C9          			RET
0178   D3DC             
0179   D3DC CD 5D DA    PRINTFTR:	CALL CRLF
0180   D3DF CD 33 E6    			CALL PRINTSEQ
0181   D3E2 3E 23 3D 3D 			.DB ">#================= <ENTER> = next page, <ESC> = quit =================#",CR,LF,0
0181   D3E6 3D 3D 3D 3D 
0181   D3EA 3D 3D 3D 3D 
0181   D3EE 3D 3D 3D 3D 
0181   D3F2 3D 3D 3D 20 
0181   D3F6 3C 45 4E 54 
0181   D3FA 45 52 3E 20 
0181   D3FE 3D 20 6E 65 
0181   D402 78 74 20 70 
0181   D406 61 67 65 2C 
0181   D40A 20 3C 45 53 
0181   D40E 43 3E 20 3D 
0181   D412 20 71 75 69 
0181   D416 74 20 3D 3D 
0181   D41A 3D 3D 3D 3D 
0181   D41E 3D 3D 3D 3D 
0181   D422 3D 3D 3D 3D 
0181   D426 3D 3D 3D 23 
0181   D42A 0D 0A 00 
0182   D42D C9          			RET
0183   D42E             
0184   D42E             SUBMPRN:
0185   D42E CD 5D DA    NEWLINE:	CALL CRLF
0186   D431 CD 79 DB    			CALL PRINTENV
0187   D434 42          			LD	B,D				; Print the address
0188   D435 CD CF DB    			CALL B2HL
0189   D438 4C          			LD	C,H
0190   D439 CD 0C E6    			CALL CONOUT
0191   D43C 4D          			LD	C,L
0192   D43D CD 0C E6    			CALL CONOUT
0193   D440 43          			LD	B,E
0194   D441 CD CF DB    			CALL B2HL
0195   D444 4C          			LD	C,H
0196   D445 CD 0C E6    			CALL CONOUT
0197   D448 4D          			LD	C,L
0198   D449 CD 0C E6    			CALL CONOUT
0199   D44C 0E 3A       			LD	C,':'
0200   D44E CD 0C E6    			CALL CONOUT
0201   D451 0E 20       			LD	C,' '
0202   D453 CD 0C E6    			CALL CONOUT
0203   D456 06 10       			LD	B,16
0204   D458 C5          NEWCOL:		PUSH BC
0205   D459 1A          			LD	A,(DE)			; Start printing the memory content
0206   D45A 13          			INC	DE
0207   D45B 47          			LD	B,A
0208   D45C CD CF DB    			CALL B2HL
0209   D45F 4C          			LD	C,H
0210   D460 CD 0C E6    			CALL CONOUT
0211   D463 4D          			LD	C,L
0212   D464 CD 0C E6    			CALL CONOUT
0213   D467 0E 20       			LD	C,' '
0214   D469 CD 0C E6    			CALL CONOUT
0215   D46C C1          			POP	BC
0216   D46D 10 E9       			DJNZ NEWCOL
0217   D46F 0E 20       			LD	C,' '
0218   D471 CD 0C E6    			CALL CONOUT
0219   D474 21 F0 FF    			LD	HL,0FFF0H		; This is -10h
0220   D477 19          			ADD	HL,DE			; Go back to beginning of line
0221   D478 E5          			PUSH HL
0222   D479 D1          			POP	DE
0223   D47A 06 10       			LD	B,16
0224   D47C C5          NEWCOL2:	PUSH BC				; Start printing the printables
0225   D47D 0E 2E       			LD	C,'.'
0226   D47F 1A          			LD	A,(DE)
0227   D480 FE 20       			CP	20H
0228   D482 FA 8B D4    			JP	M,NOTPRTBL
0229   D485 FE 7F       			CP	7FH
0230   D487 F2 8B D4    			JP	P,NOTPRTBL
0231   D48A 4F          			LD	C,A
0232   D48B CD 0C E6    NOTPRTBL:	CALL CONOUT
0233   D48E 13          			INC	DE
0234   D48F C1          			POP	BC
0235   D490 10 EA       			DJNZ NEWCOL2
0236   D492 3A 7F DC    			LD	A,(LINNUM)
0237   D495 3D          			DEC	A
0238   D496 32 7F DC    			LD	(LINNUM),A
0239   D499 20 93       			JR	NZ,NEWLINE
0240   D49B CD DC D3    			CALL PRINTFTR		; Print footer message
0241   D49E C9          			RET
0242   D49F             			
0243   D49F             ;================================================================================================
0244   D49F             ; Write memory operations
0245   D49F             ;================================================================================================
0246   D49F 11 85 00    MWRITE:		LD	DE,DMA+5
0247   D4A2 CD 0B DB    			CALL GETWORD		; Get aaaa
0248   D4A5 FE 01       			CP	1				; Is the argument OK?
0249   D4A7 C2 00 D0    			JP	NZ,CYCLE
0250   D4AA ED 43 81 DC 			LD	(AAAA),BC		; Save aaaa
0251   D4AE 11 8A 00    			LD	DE,DMA+10
0252   D4B1 13          MWNEXT:		INC	DE
0253   D4B2 1A          			LD	A,(DE)
0254   D4B3 FE 00       			CP	0
0255   D4B5 CA 00 D0    			JP	Z,CYCLE			; End of char string?
0256   D4B8 CD 1F DB    			CALL GETBYTE		; Get cc
0257   D4BB FE 01       			CP	1				; Is the argument OK?
0258   D4BD C2 00 D0    			JP	NZ,CYCLE
0259   D4C0 2A 81 DC    			LD	HL,(AAAA)
0260   D4C3 70          			LD	(HL),B			; Put the byte in memory
0261   D4C4 23          			INC	HL
0262   D4C5 22 81 DC    			LD	(AAAA),HL
0263   D4C8 18 E7       			JR	MWNEXT
0264   D4CA             
0265   D4CA             ;================================================================================================
0266   D4CA             ; Copy memory operations
0267   D4CA             ;================================================================================================
0268   D4CA 11 84 00    MCOPY:		LD	DE,DMA+4
0269   D4CD CD 0B DB    			CALL GETWORD		; Get aaaa
0270   D4D0 FE 01       			CP	1				; Is the argument OK?
0271   D4D2 C2 00 D0    			JP	NZ,CYCLE
0272   D4D5 ED 43 81 DC 			LD	(AAAA),BC		; Save aaaa
0273   D4D9 11 8A 00    			LD	DE,DMA+10
0274   D4DC CD 0B DB    			CALL GETWORD		; Get bbbb
0275   D4DF FE 01       			CP	1				; Is the argument OK?
0276   D4E1 C2 00 D0    			JP	NZ,CYCLE
0277   D4E4 ED 43 83 DC 			LD	(BBBB),BC		; Save bbbb
0278   D4E8 11 8F 00    			LD	DE,DMA+15
0279   D4EB CD 0B DB    			CALL GETWORD		; Get cccc
0280   D4EE FE 01       			CP	1				; Is the argument OK?
0281   D4F0 C2 00 D0    			JP	NZ,CYCLE
0282   D4F3 ED 43 85 DC 			LD	(CCCC),BC		; Save cccc
0283   D4F7 2A 83 DC    			LD	HL,(BBBB)
0284   D4FA ED 5B 81 DC 			LD	DE,(AAAA)
0285   D4FE AF          			XOR	A				; Reset carry flag
0286   D4FF ED 52       			SBC	HL,DE
0287   D501 23          			INC	HL
0288   D502 EB          			EX	DE,HL			; HL=source
0289   D503 D5          			PUSH DE
0290   D504 C1          			POP BC				; BC=counter
0291   D505 ED 5B 85 DC 			LD	DE,(CCCC)		; DE=target
0292   D509 ED B0       			LDIR
0293   D50B C3 00 D0    			JP	CYCLE
0294   D50E             
0295   D50E             ;================================================================================================
0296   D50E             ; Fill memory operations
0297   D50E             ;================================================================================================
0298   D50E 11 84 00    MFILL:		LD	DE,DMA+4
0299   D511 CD 0B DB    			CALL GETWORD		; Get aaaa
0300   D514 FE 01       			CP	1				; Is the argument OK?
0301   D516 C2 00 D0    			JP	NZ,CYCLE
0302   D519 ED 43 81 DC 			LD	(AAAA),BC		; Save aaaa
0303   D51D 11 8A 00    			LD	DE,DMA+10
0304   D520 CD 0B DB    			CALL GETWORD		; Get bbbb
0305   D523 FE 01       			CP	1				; Is the argument OK?
0306   D525 C2 00 D0    			JP	NZ,CYCLE
0307   D528 ED 43 83 DC 			LD	(BBBB),BC		; Save bbbb
0308   D52C 11 8F 00    			LD	DE,DMA+15
0309   D52F CD 1F DB    			CALL GETBYTE		; Get cc
0310   D532 FE 01       			CP	1				; Is the argument OK?
0311   D534 C2 00 D0    			JP	NZ,CYCLE
0312   D537 2A 81 DC    			LD	HL,(AAAA)
0313   D53A 70          			LD	(HL),B			; Put cc in the 1st position of the area to be filled.
0314   D53B 2A 83 DC    			LD	HL,(BBBB)
0315   D53E ED 5B 81 DC 			LD	DE,(AAAA)
0316   D542 AF          			XOR	A				; Reset carry flag
0317   D543 ED 52       			SBC	HL,DE
0318   D545 EB          			EX	DE,HL			; HL=source
0319   D546 D5          			PUSH DE
0320   D547 C1          			POP BC				; BC=counter
0321   D548 E5          			PUSH HL
0322   D549 D1          			POP	DE
0323   D54A 13          			INC DE
0324   D54B ED B0       			LDIR
0325   D54D C3 00 D0    			JP	CYCLE
0326   D550             
0327   D550             ;================================================================================================
0328   D550             ; Xmodem Command
0329   D550             ;================================================================================================
0330   D550 3E C0       XMODEM:		LD	A,0C0H
0331   D552 32 03 00    			LD	(IOBYTE),A
0332   D555 0E 11       			LD	C,DC1
0333   D557 CD 0F E6    			CALL LIST
0334   D55A             			
0335   D55A             			
0336   D55A 11 86 00    			LD	DE,DMA+6
0337   D55D CD 0B DB    			CALL GETWORD		
0338   D560 FE 01       			CP	1					; Is the argument OK?
0339   D562 C2 00 D0    			JP	NZ,CYCLE
0340   D565 ED 43 81 DC 			LD	(AAAA),BC			; Save address
0341   D569 3E 00       			LD	A,0
0342   D56B 32 89 DC    			LD	(RETRY),A			; Init retry counter
0343   D56E 3C          			INC	A
0344   D56F 32 8A DC    			LD	(BLOCK),A			; Init block counter
0345   D572             
0346   D572 CD 2D D6    ALIVE:		CALL SENDNAK
0347   D575             ;***********************************
0348   D575 0E 41       			LD	C,'A'
0349   D577 CD 0F E6    			CALL LIST
0350   D57A             ;***********************************			
0351   D57A 06 05       GET1ST:		LD	B,5
0352   D57C CD 39 D6    			CALL TOCONIN			; 5s timeout
0353   D57F 38 0D       			JR	C,REPEAT			; Timed out?
0354   D581 FE 04       			CP	EOT
0355   D583 28 1A       			JR	Z,GOTEOT			; EOT?
0356   D585 FE 18       			CP	CAN
0357   D587 CA 00 D0    			JP	Z,CYCLE				; CAN?
0358   D58A FE 01       			CP	SOH
0359   D58C 28 1F       			JR	Z,GOTSOH			; SOH?
0360   D58E 3A 89 DC    REPEAT:		LD	A,(RETRY)
0361   D591 3C          			INC	A
0362   D592 32 89 DC    			LD	(RETRY),A
0363   D595 FE 0A       			CP	MAXTRY
0364   D597 20 D9       			JR	NZ,ALIVE			; Try again?
0365   D599             OUT3:		
0366   D599 CD 33 D6    			CALL SENDCAN
0367   D59C C3 00 D0    			JP	CYCLE
0368   D59F             			
0369   D59F CD 2D D6    GOTEOT:		CALL SENDNAK
0370   D5A2 06 01       			LD	B,1
0371   D5A4 CD 39 D6    			CALL TOCONIN
0372   D5A7 CD 27 D6    			CALL SENDACK
0373   D5AA C3 00 D0    			JP	CYCLE
0374   D5AD             			
0375   D5AD 3E 00       GOTSOH:		LD	A,0
0376   D5AF 32 87 DC    			LD	(CHKSUM),A			; Reset checksum
0377   D5B2 32 88 DC    			LD	(BYTECNT),A			; Reset byte counter
0378   D5B5 06 01       			LD	B,1
0379   D5B7 CD 39 D6    			CALL TOCONIN			; Get incoming block number
0380   D5BA 38 1F       			JR	C,OUT2				; Timed out?
0381   D5BC 4F          			LD	C,A					; Save incoming block number
0382   D5BD 06 01       			LD	B,1
0383   D5BF CD 39 D6    			CALL TOCONIN			; Get complement of incoming block number
0384   D5C2 38 17       			JR	C,OUT2				; Timed out?
0385   D5C4 2F          			CPL
0386   D5C5 B9          			CP	C
0387   D5C6 20 13       			JR	NZ,OUT2				; block = //block?
0388   D5C8 3A 8A DC    			LD	A,(BLOCK)
0389   D5CB B9          			CP	C					; Is block number what we expected?
0390   D5CC 28 16       			JR	Z,RECPACK
0391   D5CE 3D          			DEC	A
0392   D5CF B9          			CP	C					; block number is the anterior? Probably sender missed our ACK.
0393   D5D0 20 09       			JR	NZ,OUT2
0394   D5D2 CD 63 D6    ANTBLK:		CALL PURGE				; Purge input buffer before sending ACK
0395   D5D5 CD 27 D6    			CALL SENDACK
0396   D5D8 C3 7A D5    			JP	GET1ST
0397   D5DB CD 63 D6    OUT2:		CALL PURGE
0398   D5DE CD 33 D6    			CALL SENDCAN
0399   D5E1 C3 00 D0    			JP	CYCLE
0400   D5E4 06 01       RECPACK:	LD	B,1					; Start receiving data packet (128 bytes)
0401   D5E6 CD 39 D6    			CALL TOCONIN
0402   D5E9 38 F0       			JR	C,OUT2				; Timed out?
0403   D5EB 2A 81 DC    			LD	HL,(AAAA)
0404   D5EE 77          			LD	(HL),A				; Put byte in buffer
0405   D5EF 23          			INC	HL					; Inc buffer pointer
0406   D5F0 22 81 DC    			LD	(AAAA),HL
0407   D5F3 4F          			LD	C,A
0408   D5F4 3A 87 DC    			LD	A,(CHKSUM)
0409   D5F7 81          			ADD	A,C
0410   D5F8 32 87 DC    			LD	(CHKSUM),A			; Update checksum
0411   D5FB 3A 88 DC    			LD	A,(BYTECNT)			; Inc byte counter
0412   D5FE 3C          			INC	A
0413   D5FF 32 88 DC    			LD	(BYTECNT),A
0414   D602 FE 80       			CP	128					; Check if we received a full data packet
0415   D604 20 DE       			JR	NZ,RECPACK
0416   D606 06 01       			LD	B,1
0417   D608 CD 39 D6    			CALL TOCONIN			; Get checksum
0418   D60B 38 CE       			JR	C,OUT2				; Timed out?
0419   D60D 4F          			LD	C,A
0420   D60E 3A 87 DC    			LD	A,(CHKSUM)
0421   D611 B9          			CP	C
0422   D612 C2 8E D5    			JP	NZ,REPEAT			; Checksum OK?
0423   D615 3E 00       			LD	A,0
0424   D617 32 89 DC    			LD	(RETRY),A			; Reset retry counter
0425   D61A 3A 8A DC    			LD	A,(BLOCK)
0426   D61D 3C          			INC	A
0427   D61E 32 8A DC    			LD	(BLOCK),A			; Increment block counter
0428   D621             
0429   D621 CD 27 D6    			CALL SENDACK
0430   D624 C3 7A D5    			JP	GET1ST
0431   D627             			
0432   D627 0E 06       SENDACK:	LD C,ACK
0433   D629 CD 0C E6    			CALL CONOUT
0434   D62C C9          			RET
0435   D62D             
0436   D62D 0E 15       SENDNAK:	LD C,NAK
0437   D62F CD 0C E6    			CALL CONOUT
0438   D632 C9          			RET
0439   D633             
0440   D633 0E 18       SENDCAN:	LD C,CAN
0441   D635 CD 0C E6    			CALL CONOUT
0442   D638 C9          			RET
0443   D639             
0444   D639             ;==================================================================================
0445   D639             ; Timed Out Console Input - X seconds, with X passed on reg B
0446   D639             ; Incoming byte, if any, returns in A
0447   D639             ; Carry flag set if timed out.
0448   D639             ;==================================================================================
0449   D639 C5          TOCONIN:	PUSH	BC
0450   D63A E5          			PUSH	HL
0451   D63B             			
0452   D63B             ;***********************************
0453   D63B 0E 54       			LD	C,'T'
0454   D63D CD 0F E6    			CALL LIST
0455   D640 06 05       			LD	B,5
0456   D642             ;***********************************
0457   D642             			
0458   D642 21 AD 02    LOOP0:		LD	HL,685				;2.5					\
0459   D645 0E 23       LOOP1:		LD	C,35				;1.75	\				|
0460   D647 CD 06 E6    LOOP2:		CALL CONST				;36.5	|t=41.5C+0.5	| 
0461   D64A 3C          			INC	A					;1		|				|
0462   D64B 28 0E       			JR	Z,BWAITING			;3/1.75	|				| t=HL(41.5C+6.5)+1.25
0463   D64D 79          			LD	A,C					;1		|				|
0464   D64E 0D          			DEC	C					;1		|				|
0465   D64F 20 F6       			JR	NZ,LOOP2			;3/1.75	/				| with HL=685 and c=35,
0466   D651 2B          			DEC	HL					;1						|  t=0.9994sec (WOW!!!)
0467   D652 7C          			LD	A,H					;1						|
0468   D653 B5          			OR	L					;1						|
0469   D654 20 EF       			JR	NZ,LOOP1			;3/1.75					/
0470   D656 10 EA       			DJNZ	LOOP0			;3.25/2
0471   D658 37          			SCF
0472   D659 18 05       			JR	TOUT
0473   D65B CD 09 E6    BWAITING:	CALL CONIN
0474   D65E 37          			SCF						; Reset carry flag
0475   D65F 3F          			CCF
0476   D660 E1          TOUT:		POP	HL
0477   D661 C1          			POP	BC
0478   D662 C9          			RET
0479   D663             
0480   D663             ;==================================================================================
0481   D663             ; Purge console input.
0482   D663             ;==================================================================================
0483   D663 06 03       PURGE:		LD	B,3
0484   D665 CD 39 D6    			CALL TOCONIN
0485   D668 30 F9       			JR	NC,PURGE
0486   D66A C9          			RET
0487   D66B             
0488   D66B             ;================================================================================================
0489   D66B             ; Hexadecimal to Executable conversion command.
0490   D66B             ; Record structure:
0491   D66B             ;	<start_code> <byte_count> <address> <record_type> <data>...<data> <checksum>
0492   D66B             ;		':'	        1 byte     2 bytes    00h or 01h       n bytes	    1 byte
0493   D66B             ;
0494   D66B             ; Register usage:
0495   D66B             ;	IX = source address 
0496   D66B             ;	IY = target address
0497   D66B             ;================================================================================================
0498   D66B 11 88 00    HEX2COM:	LD	DE,DMA+8
0499   D66E CD 0B DB    			CALL GETWORD		
0500   D671 FE 01       			CP	1					; Is the argument OK?
0501   D673 C2 00 D0    			JP	NZ,CYCLE
0502   D676 C5          			PUSH BC					; IX holds the source address
0503   D677 DD E1       			POP	IX
0504   D679             			
0505   D679 DD 7E 00    FINDSC:		LD	A,(IX+0)
0506   D67C DD 23       			INC IX
0507   D67E FE 3A       			CP	':'					; Do we have a start code?
0508   D680 20 F7       			JR	NZ,FINDSC
0509   D682 3E 00       			LD	A,0					; Reset checksum
0510   D684 32 87 DC    			LD	(CHKSUM),A
0511   D687 CD 14 D7    			CALL HGB				; Get byte count
0512   D68A 78          			LD	A,B
0513   D68B FE 00       			CP	0
0514   D68D CA 00 D0    			JP	Z,CYCLE				; If byte count=0, we're done.
0515   D690 32 88 DC    			LD	(BYTECNT),A			; Save byte count
0516   D693 CD F6 D6    			CALL UPCHKSUM			; Update checksum
0517   D696 DD 23       			INC	IX
0518   D698 CD 1E D7    			CALL HGW				; Get target address
0519   D69B C5          			PUSH BC
0520   D69C FD E1       			POP IY					; IY holds the target address
0521   D69E CD F6 D6    			CALL UPCHKSUM			; Update checksum
0522   D6A1 41          			LD	B,C
0523   D6A2 CD F6 D6    			CALL UPCHKSUM			; Update checksum
0524   D6A5 CD FE D6    			CALL PRTADDR			; Print target address
0525   D6A8 CD 14 D7    			CALL HGB				; Get record type (just for checksum update)
0526   D6AB CD F6 D6    			CALL UPCHKSUM			; Update checksum
0527   D6AE DD 23       			INC	IX
0528   D6B0 3A 88 DC    			LD	A,(BYTECNT)
0529   D6B3 47          			LD	B,A
0530   D6B4 C5          GETDATA:	PUSH BC
0531   D6B5 CD 14 D7    			CALL HGB				; Get data byte
0532   D6B8 FD 70 00    			LD	(IY+0),B
0533   D6BB CD F6 D6    			CALL UPCHKSUM			; Update checksum
0534   D6BE FD 23       			INC	IY
0535   D6C0 DD 23       			INC IX
0536   D6C2 C1          			POP BC
0537   D6C3 10 EF       			DJNZ GETDATA
0538   D6C5 CD 14 D7    			CALL HGB				; Get checksum
0539   D6C8 3A 87 DC    			LD	A,(CHKSUM)
0540   D6CB ED 44       			NEG
0541   D6CD B8          			CP	B
0542   D6CE 20 0D       			JR	NZ,CHKSUMER
0543   D6D0 CD 33 E6    			CALL PRINTSEQ
0544   D6D3 3A 20 4F 4B 			.DB	": OK.",CR,LF,0
0544   D6D7 2E 0D 0A 00 
0545   D6DB 18 9C       			JR	FINDSC
0546   D6DD CD 33 E6    CHKSUMER:	CALL PRINTSEQ
0547   D6E0 3A 20 43 68 			.DB	": Checksum Error.",CR,LF,0
0547   D6E4 65 63 6B 73 
0547   D6E8 75 6D 20 45 
0547   D6EC 72 72 6F 72 
0547   D6F0 2E 0D 0A 00 
0548   D6F4 18 83       			JR	FINDSC
0549   D6F6             
0550   D6F6 3A 87 DC    UPCHKSUM:	LD	A,(CHKSUM)
0551   D6F9 80          			ADD	A,B
0552   D6FA 32 87 DC    			LD	(CHKSUM),A
0553   D6FD C9          			RET
0554   D6FE             
0555   D6FE CD 79 DB    PRTADDR:	CALL PRINTENV
0556   D701 DD 2B       			DEC IX
0557   D703 DD 2B       			DEC IX
0558   D705 DD 2B       			DEC IX
0559   D707 06 04       			LD	B,4
0560   D709 DD 4E 00    NXTA:		LD	C,(IX+0)
0561   D70C CD 0C E6    			CALL CONOUT
0562   D70F DD 23       			INC	IX
0563   D711 10 F6       			DJNZ NXTA
0564   D713 C9          			RET
0565   D714             			
0566   D714 DD E5       HGB:		PUSH IX
0567   D716 D1          			POP	DE
0568   D717 CD 1F DB    			CALL GETBYTE
0569   D71A D5          			PUSH DE
0570   D71B DD E1       			POP IX
0571   D71D C9          			RET
0572   D71E             
0573   D71E DD E5       HGW:		PUSH IX
0574   D720 D1          			POP	DE
0575   D721 CD 0B DB    			CALL GETWORD
0576   D724 D5          			PUSH DE
0577   D725 DD E1       			POP IX
0578   D727 C9          			RET
0579   D728             
0580   D728             ;================================================================================================
0581   D728             ; ASCII to Executable conversion command.
0582   D728             ; Each pair of characters is converted to one byte. The executable is loaded @ 0100h (TPA).
0583   D728             ;	IX = source address 
0584   D728             ;	IY = target address
0585   D728             ;================================================================================================
0586   D728 11 8A 00    ASCII2COM:	LD	DE,DMA+10
0587   D72B CD 0B DB    			CALL GETWORD		
0588   D72E FE 01       			CP	1					; Is the argument OK?
0589   D730 C2 00 D0    			JP	NZ,CYCLE
0590   D733 C5          			PUSH BC					; IX holds the source address
0591   D734 DD E1       			POP	IX
0592   D736 FD 21 00 01 			LD	IY,0100H
0593   D73A             
0594   D73A CD 14 D7    A2CNB:		CALL HGB
0595   D73D FE 01       			CP	1
0596   D73F 20 09       			JR	NZ,A2CEND
0597   D741 FD 70 00    			LD	(IY+0),B
0598   D744 FD 23       			INC	IY
0599   D746 DD 23       			INC IX
0600   D748 18 F0       			JR	A2CNB
0601   D74A             			
0602   D74A CD 33 E6    A2CEND:		CALL PRINTSEQ
0603   D74D 3E 53 6F 75 			.DB	">Source contains ",0
0603   D751 72 63 65 20 
0603   D755 63 6F 6E 74 
0603   D759 61 69 6E 73 
0603   D75D 20 00 
0604   D75F 01 00 01    			LD	BC,0100H
0605   D762 FD E5       			PUSH IY
0606   D764 E1          			POP	HL
0607   D765 37          			SCF
0608   D766 3F          			CCF
0609   D767 ED 42       			SBC	HL,BC
0610   D769 22 81 DC    			LD	(AAAA),HL			; AAAA contains total bytes written.
0611   D76C 44          			LD	B,H
0612   D76D CD CF DB    			CALL B2HL				; Convert MSByte to ASCII
0613   D770 4C          			LD	C,H
0614   D771 CD 0C E6    			CALL CONOUT
0615   D774 4D          			LD	C,L
0616   D775 CD 0C E6    			CALL CONOUT
0617   D778 2A 81 DC    			LD	HL,(AAAA)
0618   D77B 45          			LD	B,L
0619   D77C CD CF DB    			CALL B2HL				; Convert LSByte to ASCII
0620   D77F 4C          			LD	C,H
0621   D780 CD 0C E6    			CALL CONOUT
0622   D783 4D          			LD	C,L
0623   D784 CD 0C E6    			CALL CONOUT
0624   D787 CD 33 E6    			CALL PRINTSEQ
0625   D78A 68 20 62 79 			.DB	"h bytes.",CR,LF,0
0625   D78E 74 65 73 2E 
0625   D792 0D 0A 00 
0626   D795 C9          			RET
0627   D796             			
0628   D796             ;================================================================================================
0629   D796             ; Read disk operation (READ D,TTT,SS)
0630   D796             ;================================================================================================
0631   D796 11 86 00    DREAD:		LD	DE,DMA+6
0632   D799 CD 97 D8    			CALL GETDTS
0633   D79C FE 01       			CP	1				; Is the argument OK?
0634   D79E C2 00 D0    			JP	NZ,CYCLE
0635   D7A1 CD FC D8    NEXTSEC:	CALL DTS2LBA
0636   D7A4 CD C1 D7    			CALL PRINTDTS
0637   D7A7 CD 45 D3    			CALL PRINTHDR
0638   D7AA CD 39 D8    			CALL PRINTDSEC
0639   D7AD CD 09 E6    TAGAIN:		CALL CONIN			; Wait for user's decision
0640   D7B0 FE 0D       			CP	CR
0641   D7B2 20 06       			JR	NZ,NOTCR
0642   D7B4 CD 48 D8    			CALL INCDTS
0643   D7B7 C3 A1 D7    			JP	NEXTSEC
0644   D7BA FE 1B       NOTCR:		CP	ESC
0645   D7BC CA 00 D0    			JP	Z,CYCLE
0646   D7BF 18 EC       			JR	TAGAIN
0647   D7C1             
0648   D7C1             
0649   D7C1 CD 33 E6    PRINTDTS:	CALL PRINTSEQ
0650   D7C4 3E 20 44 54 			.DB	"> DTS: ",0
0650   D7C8 53 3A 20 00 
0651   D7CC 3A 8B DC    			LD	A,(DSK)
0652   D7CF C6 41       			ADD	A,41H
0653   D7D1 4F          			LD	C,A
0654   D7D2 CD 0C E6    			CALL CONOUT
0655   D7D5 0E 2D       			LD	C,'-'
0656   D7D7 CD 0C E6    			CALL CONOUT
0657   D7DA 3A 8D DC    			LD	A,(TRK+1)
0658   D7DD CD 2C D8    			CALL PRINTBYTE
0659   D7E0 3A 8C DC    			LD	A,(TRK)
0660   D7E3 CD 2C D8    			CALL PRINTBYTE
0661   D7E6 0E 2D       			LD	C,'-'
0662   D7E8 CD 0C E6    			CALL CONOUT
0663   D7EB 3A 8E DC    			LD	A,(SEC)
0664   D7EE CD 2C D8    			CALL PRINTBYTE
0665   D7F1 CD 33 E6    			CALL PRINTSEQ
0666   D7F4 20 2C 4C 42 			.DB	" ,LBA: ",0
0666   D7F8 41 3A 20 00 
0667   D7FC 3A 8F DC    			LD	A,(LBA3)
0668   D7FF CD 2C D8    			CALL PRINTBYTE
0669   D802 3A 90 DC    			LD	A,(LBA2)
0670   D805 CD 2C D8    			CALL PRINTBYTE
0671   D808 3A 91 DC    			LD	A,(LBA1)
0672   D80B CD 2C D8    			CALL PRINTBYTE
0673   D80E 3A 92 DC    			LD	A,(LBA0)
0674   D811 CD 2C D8    			CALL PRINTBYTE
0675   D814 CD 33 E6    			CALL PRINTSEQ
0676   D817 20 28 44 49 			.DB	" (DISKPAD = E000)",CR,LF,0
0676   D81B 53 4B 50 41 
0676   D81F 44 20 3D 20 
0676   D823 45 30 30 30 
0676   D827 29 0D 0A 00 
0677   D82B             
0678   D82B C9          			RET
0679   D82C             
0680   D82C 47          PRINTBYTE:	LD	B,A
0681   D82D CD CF DB    			CALL B2HL
0682   D830 4C          			LD	C,H
0683   D831 CD 0C E6    			CALL CONOUT
0684   D834 4D          			LD	C,L
0685   D835 CD 0C E6    			CALL CONOUT
0686   D838 C9          			RET
0687   D839             
0688   D839 CD 7B D9    PRINTDSEC:	CALL DISKREAD
0689   D83C 11 00 E0    			LD	DE,DISKPAD
0690   D83F 3E 20       			LD	A,32
0691   D841 32 7F DC    			LD	(LINNUM),A
0692   D844 CD 2E D4    			CALL SUBMPRN
0693   D847 C9          			RET
0694   D848             
0695   D848 3A 8E DC    INCDTS:		LD	A,(SEC)
0696   D84B FE 1F       			CP	1FH
0697   D84D 28 05       			JR	Z,ZSEC
0698   D84F 3C          			INC	A
0699   D850 32 8E DC    			LD	(SEC),A
0700   D853 C9          			RET
0701   D854 AF          ZSEC:		XOR	A
0702   D855 32 8E DC    			LD	(SEC),A
0703   D858 2A 8C DC    			LD	HL,(TRK)
0704   D85B 01 FF 01    			LD	BC,1FFH
0705   D85E 37          			SCF
0706   D85F 3F          			CCF
0707   D860 ED 42       			SBC	HL,BC
0708   D862 28 08       			JR	Z,ZTRK
0709   D864 2A 8C DC    			LD	HL,(TRK)
0710   D867 23          			INC	HL
0711   D868 22 8C DC    			LD	(TRK),HL
0712   D86B C9          			RET
0713   D86C 21 00 00    ZTRK:		LD	HL,0
0714   D86F 22 8C DC    			LD	(TRK),HL
0715   D872 3A 8B DC    			LD	A,(DSK)
0716   D875 FE 0F       			CP	0FH
0717   D877 28 05       			JR	Z,ZDSK
0718   D879 3C          			INC	A
0719   D87A 32 8B DC    			LD	(DSK),A
0720   D87D C9          			RET
0721   D87E AF          ZDSK:		XOR	A
0722   D87F 32 8B DC    			LD	(DSK),A
0723   D882 C9          			RET
0724   D883             			
0725   D883             ;================================================================================================
0726   D883             ; Download 1 sector from disk to memory (@ DMIRROR)
0727   D883             ;================================================================================================
0728   D883 11 85 00    DDOWN:		LD	DE,DMA+5
0729   D886 CD 97 D8    			CALL GETDTS
0730   D889 FE 01       			CP	1				; Is the argument OK?
0731   D88B C2 00 D0    			JP	NZ,CYCLE
0732   D88E CD FC D8    			CALL DTS2LBA
0733   D891 CD 7B D9    			CALL DISKREAD
0734   D894 C3 00 D0    			JP	CYCLE
0735   D897             
0736   D897             ;================================================================================================
0737   D897             ; Routine to get DTS from command line. DE=line_buf_ptr(should point to where DTS starts).
0738   D897             ; Returns A=0 if missing arg, A=1 if OK, A=2 if invalid arg. 
0739   D897             ;================================================================================================
0740   D897 CD B3 D8    GETDTS:		CALL GETDISK
0741   D89A FE 01       			CP	1				; Is the argument OK?
0742   D89C C2 00 D0    			JP	NZ,CYCLE
0743   D89F 13          			INC DE
0744   D8A0 CD CE D8    			CALL GETTRACK
0745   D8A3 FE 01       			CP	1				; Is the argument OK?
0746   D8A5 C2 00 D0    			JP	NZ,CYCLE
0747   D8A8 13          			INC	DE
0748   D8A9 13          			INC DE
0749   D8AA CD E9 D8    			CALL GETSECTOR
0750   D8AD FE 01       			CP	1				; Is the argument OK?
0751   D8AF C2 00 D0    			JP	NZ,CYCLE
0752   D8B2 C9          			RET
0753   D8B3             
0754   D8B3 1A          GETDISK:	LD	A,(DE)
0755   D8B4 FE 00       			CP	0
0756   D8B6 C2 BD D8    			JP	NZ,GD1
0757   D8B9 CD 40 DB    			CALL GBNA
0758   D8BC C9          			RET
0759   D8BD D6 41       GD1:		SUB	'A'
0760   D8BF 32 8B DC    			LD	(DSK),A
0761   D8C2 FE 10       			CP	10H
0762   D8C4 FA CB D8    			JP	M,GD2
0763   D8C7 CD 5E DB    			CALL GBIA
0764   D8CA C9          			RET
0765   D8CB 3E 01       GD2:		LD	A,1
0766   D8CD C9          			RET
0767   D8CE             
0768   D8CE 3E 30       GETTRACK:	LD	A,'0'
0769   D8D0 12          			LD	(DE),A
0770   D8D1 CD 0B DB    			CALL GETWORD
0771   D8D4 FE 01       			CP	1
0772   D8D6 C0          			RET	NZ
0773   D8D7 ED 43 8C DC 			LD	(TRK),BC
0774   D8DB 21 FF 01    			LD	HL,1FFH
0775   D8DE 37          			SCF
0776   D8DF 3F          			CCF
0777   D8E0 ED 42       			SBC	HL,BC
0778   D8E2 3E 01       			LD	A,1
0779   D8E4 F0          			RET	P
0780   D8E5 CD 5E DB    			CALL GBIA
0781   D8E8 C9          			RET
0782   D8E9             
0783   D8E9 CD 1F DB    GETSECTOR:	CALL GETBYTE
0784   D8EC FE 01       			CP	1
0785   D8EE C0          			RET	NZ
0786   D8EF 78          			LD	A,B
0787   D8F0 32 8E DC    			LD	(SEC),A
0788   D8F3 FE 20       			CP	20H
0789   D8F5 3E 01       			LD	A,1
0790   D8F7 F8          			RET	M
0791   D8F8 CD 5E DB    			CALL GBIA
0792   D8FB C9          			RET
0793   D8FC             			
0794   D8FC             ;================================================================================================
0795   D8FC             ; Convert disk/track/sector to LBA0,1,2,3.
0796   D8FC             ;================================================================================================
0797   D8FC 2A 8C DC    DTS2LBA:	LD	HL,(TRK)
0798   D8FF CB 05       			RLC	L
0799   D901 CB 05       			RLC	L
0800   D903 CB 05       			RLC	L
0801   D905 CB 05       			RLC	L
0802   D907 CB 05       			RLC	L
0803   D909 7D          			LD	A,L
0804   D90A E6 E0       			AND	0E0H
0805   D90C 6F          			LD	L,A
0806   D90D 3A 8E DC    			LD	A,(SEC)
0807   D910 85          			ADD	A,L
0808   D911 32 92 DC    			LD	(LBA0),A
0809   D914 2A 8C DC    			LD	HL,(TRK)
0810   D917 CB 0D       			RRC	L
0811   D919 CB 0D       			RRC	L
0812   D91B CB 0D       			RRC	L
0813   D91D 7D          			LD	A,L
0814   D91E E6 1F       			AND	01FH
0815   D920 6F          			LD	L,A
0816   D921 CB 04       			RLC	H
0817   D923 CB 04       			RLC	H
0818   D925 CB 04       			RLC	H
0819   D927 CB 04       			RLC	H
0820   D929 CB 04       			RLC	H
0821   D92B 7C          			LD	A,H
0822   D92C E6 20       			AND	020H
0823   D92E 67          			LD	H,A
0824   D92F 3A 8B DC    			LD	A,(DSK)
0825   D932 CB 07       			RLC	A
0826   D934 CB 07       			RLC	A
0827   D936 CB 07       			RLC	A
0828   D938 CB 07       			RLC	A
0829   D93A CB 07       			RLC	A
0830   D93C CB 07       			RLC	A
0831   D93E E6 C0       			AND	0C0H
0832   D940 84          			ADD	A,H
0833   D941 85          			ADD	A,L
0834   D942 32 91 DC    			LD	(LBA1),A
0835   D945 3A 8B DC    			LD	A,(DSK)
0836   D948 CB 0F       			RRC	A
0837   D94A CB 0F       			RRC	A
0838   D94C E6 03       			AND	03H
0839   D94E 32 90 DC    			LD	(LBA2),A
0840   D951 3E E0       			LD	A,0E0H
0841   D953 32 8F DC    			LD	(LBA3),A
0842   D956 C9          			RET
0843   D957             			
0844   D957             ;================================================================================================
0845   D957             ; Wait for disk to be ready (busy=0,ready=1)
0846   D957             ;================================================================================================
0847   D957 F5          DWAIT:		PUSH AF
0848   D958 DB B7       DWAIT1:		IN 	A,(CF_STATUS)
0849   D95A E6 80       			AND	080H
0850   D95C FE 80       			CP 	080H
0851   D95E 28 F8       			JR	Z,DWAIT1
0852   D960 F1          			POP	AF
0853   D961 C9          			RET
0854   D962             
0855   D962             ;================================================================================================
0856   D962             ; Set LBA on CF
0857   D962             ;================================================================================================
0858   D962 3A 92 DC    SETLBA:		LD	A,(LBA0)
0859   D965 D3 B3       			OUT (CF_LBA0),A
0860   D967 3A 91 DC    			LD	A,(LBA1)
0861   D96A D3 B4       			OUT (CF_LBA1),A
0862   D96C 3A 90 DC    			LD	A,(LBA2)
0863   D96F D3 B5       			OUT (CF_LBA2),A
0864   D971 3A 8F DC    			LD	A,(LBA3)
0865   D974 D3 B6       			OUT (CF_LBA3),A
0866   D976 3E 01       			LD 	A,1
0867   D978 D3 B2       			OUT (CF_SECCOUNT),A
0868   D97A C9          			RET				
0869   D97B             
0870   D97B             ;================================================================================================
0871   D97B             ; Read physical one sector from disk and write it on DISKPAD
0872   D97B             ;================================================================================================
0873   D97B F5          DISKREAD:	PUSH AF
0874   D97C C5          			PUSH BC
0875   D97D E5          			PUSH HL
0876   D97E             
0877   D97E CD 57 D9    			CALL DWAIT
0878   D981 CD 62 D9    			CALL SETLBA
0879   D984 3E 20       			LD 	A,CF_READ_SEC
0880   D986 D3 B7       			OUT (CF_COMMAND),A
0881   D988 CD 57 D9    			CALL DWAIT
0882   D98B 0E 04       			LD 	C,4
0883   D98D 21 00 E0    			LD 	HL,DISKPAD
0884   D990 06 80       rd4secs:	LD 	B,128
0885   D992 DB B0       rdByte:		IN 	A,(CF_DATA)
0886   D994 77          			LD 	(HL),A
0887   D995 23          			INC HL
0888   D996 05          			DEC B
0889   D997 20 F9       			JR 	NZ, rdByte
0890   D999 0D          			DEC C
0891   D99A 20 F4       			JR 	NZ,rd4secs
0892   D99C             
0893   D99C E1          			POP HL
0894   D99D C1          			POP BC
0895   D99E F1          			POP AF
0896   D99F C9          			RET
0897   D9A0             
0898   D9A0             ;================================================================================================
0899   D9A0             ; Write physical sector from DISKPAD to host
0900   D9A0             ;================================================================================================
0901   D9A0 F5          DISKWRITE:	PUSH AF
0902   D9A1 C5          			PUSH BC
0903   D9A2 E5          			PUSH HL
0904   D9A3             
0905   D9A3 CD 57 D9    			CALL DWAIT
0906   D9A6 CD 62 D9    			CALL SETLBA
0907   D9A9 3E 30       			LD 	A,CF_WRITE_SEC
0908   D9AB D3 B7       			OUT (CF_COMMAND),A
0909   D9AD CD 57 D9    			CALL DWAIT
0910   D9B0 0E 04       			LD 	C,4
0911   D9B2 21 00 E0    			LD 	HL,DISKPAD
0912   D9B5 06 80       wr4secs:	LD 	B,128
0913   D9B7 7E          wrByte:		LD 	A,(HL)
0914   D9B8 D3 B0       			OUT (CF_DATA),A
0915   D9BA 23          			INC HL
0916   D9BB 05          			DEC B
0917   D9BC 20 F9       			JR 	NZ,wrByte
0918   D9BE 0D          			DEC C
0919   D9BF 20 F4       			JR 	NZ,wr4secs
0920   D9C1             
0921   D9C1 E1          			POP HL
0922   D9C2 C1          			POP BC
0923   D9C3 F1          			POP AF
0924   D9C4 C9          			RET
0925   D9C5             
0926   D9C5             ;================================================================================================
0927   D9C5             ; Upload 1 sector from memory (@ DMIRROR) to disk
0928   D9C5             ;================================================================================================
0929   D9C5 11 83 00    DUP:		LD	DE,DMA+3
0930   D9C8 CD 97 D8    			CALL GETDTS
0931   D9CB FE 01       			CP	1				; Is the argument OK?
0932   D9CD C2 00 D0    			JP	NZ,CYCLE
0933   D9D0 CD FC D8    			CALL DTS2LBA
0934   D9D3 CD A0 D9    			CALL DISKWRITE
0935   D9D6 C3 00 D0    			JP	CYCLE
0936   D9D9             
0937   D9D9             ;================================================================================================
0938   D9D9             ; Verify disk. Do this on on all sectors of the disk:
0939   D9D9             ;
0940   D9D9             ;	1. copy sector to DISKPAD
0941   D9D9             ;	2. fill sector with 00
0942   D9D9             ;	3. verify if all bytes are 00
0943   D9D9             ;	4. fill sector with 0FFh
0944   D9D9             ;	5. verify if all bytes are 0FFh
0945   D9D9             ;	6. copy DISKPAD back to sector
0946   D9D9             ;
0947   D9D9             ; If during the verification a byte doesn't match, print error message and continue.
0948   D9D9             ;================================================================================================
0949   D9D9 C9          DVERIFY:	RET
0950   D9DA             
0951   D9DA             ;================================================================================================
0952   D9DA             ; Format a disk.
0953   D9DA             ;================================================================================================
0954   D9DA C9          DFORMAT:	RET
0955   D9DB             
0956   D9DB             ;================================================================================================
0957   D9DB             ; Run (Execute) Command
0958   D9DB             ;================================================================================================
0959   D9DB 11 83 00    RUN:		LD	DE,DMA+3
0960   D9DE CD 0B DB    			CALL GETWORD		
0961   D9E1 FE 01       			CP	1				; Is the argument OK?
0962   D9E3 C2 00 D0    			JP	NZ,CYCLE
0963   D9E6 C5          			PUSH BC
0964   D9E7 E1          			POP	HL
0965   D9E8 E9          			JP	(HL)			; Continue execution where user requested. His responsability!
0966   D9E9             
0967   D9E9             ;================================================================================================
0968   D9E9             ; Unknown Command message. HL has the address of the line buffer.
0969   D9E9             ;================================================================================================
0970   D9E9 CD 79 DB    UNKNOWN:	CALL PRINTENV
0971   D9EC 21 80 00    			LD	HL,DMA
0972   D9EF 7E          UNEXT:		LD	A,(HL)
0973   D9F0 FE 00       			CP	0
0974   D9F2 28 07       			JR	Z,UEND
0975   D9F4 4F          			LD	C,A
0976   D9F5 CD 0C E6    			CALL CONOUT
0977   D9F8 23          			INC	HL
0978   D9F9 18 F4       			JR	UNEXT
0979   D9FB 0E 3F       UEND:		LD	C,'?'
0980   D9FD CD 0C E6    			CALL CONOUT
0981   DA00 CD 5D DA    			CALL CRLF
0982   DA03 C9          			RET
0983   DA04             
0984   DA04             ;================================================================================================
0985   DA04             ; Routine to manage line input from console. Returns A=0FFh if user typed Ctrl-Z (ETX).
0986   DA04             ;================================================================================================
0987   DA04 21 80 00    LINER:		LD	HL,DMA
0988   DA07 22 7D DC    			LD	(LBUFPTR),HL			; Init line buffer pointer.
0989   DA0A CD 09 E6    WAITCHAR:	CALL CONIN					; Wait till user types something.
0990   DA0D FE 03       			CP	ETX						; Is it Ctrl-C?
0991   DA0F 28 42       			JR	Z,GOTETX
0992   DA11 FE 1A       			CP	SUB						; Is is Ctrl-Z?
0993   DA13 28 3E       			JR	Z,GOTSUB
0994   DA15 FE 18       			CP	CAN
0995   DA17 28 40       			JR	Z,GOTCAN				; Is it <CAN>? (= delete line).
0996   DA19 FE 0D       			CP	CR
0997   DA1B 28 29       			JR	Z,GOTCR					; Is it <ENTER>?
0998   DA1D FE 08       			CP	BS
0999   DA1F 28 1E       			JR	Z,GOTBS					; Is it <BS>? (= backspace).
1000   DA21 2A 7D DC    			LD	HL,(LBUFPTR)			; None of the above options, so let's put it in the buffer.
1001   DA24 01 D0 00    			LD	BC,MAXLBUF				; But 1st, we have to check if we still have space.
1002   DA27 37          			SCF
1003   DA28 3F          			CCF
1004   DA29 ED 42       			SBC	HL,BC
1005   DA2B 28 0E       			JR	Z,LBUFFULL				; Is buffer full?
1006   DA2D 2A 7D DC    			LD	HL,(LBUFPTR)
1007   DA30 77          			LD	(HL),A
1008   DA31 23          			INC	HL
1009   DA32 22 7D DC    			LD	(LBUFPTR),HL
1010   DA35 4F          			LD	C,A
1011   DA36 CD 0C E6    OUTWAIT:	CALL CONOUT
1012   DA39 18 CF       			JR	WAITCHAR
1013   DA3B             
1014   DA3B 0E 07       LBUFFULL:	LD	C,BEL					; Buffer is full. Just ring the bell.
1015   DA3D 18 F7       			JR	OUTWAIT
1016   DA3F             
1017   DA3F 16 01       GOTBS:		LD	D,1						; We got a backspace.
1018   DA41 CD 68 DA    AFTGOTBS:	CALL BSPROC
1019   DA44 18 C4       			JR	WAITCHAR
1020   DA46             
1021   DA46 2A 7D DC    GOTCR:		LD	HL,(LBUFPTR)			; We got an ENTER, which means the the user
1022   DA49 3E 00       			LD	A,0						; has finished typing the command line.
1023   DA4B 77          			LD	(HL),A
1024   DA4C CD 5D DA    			CALL CRLF
1025   DA4F CD 96 DA    			CALL UPPER					; Convert line to uppercase before parsing.
1026   DA52 C9          			RET
1027   DA53             GOTETX:
1028   DA53 CD 5D DA    GOTSUB:		CALL CRLF					; User abort request (Ctrl-C or Ctrl-Z).
1029   DA56 3E 0C       			LD	A,FF
1030   DA58 C9          			RET
1031   DA59             			
1032   DA59 16 00       GOTCAN:		LD	D,0						; We got a line delete.
1033   DA5B 18 E4       			JR	AFTGOTBS
1034   DA5D             			
1035   DA5D 0E 0D       CRLF:		LD	C,CR
1036   DA5F CD 0C E6    			CALL CONOUT
1037   DA62 0E 0A       			LD	C,LF
1038   DA64 CD 0C E6    			CALL CONOUT					; Output <CR><LF>.
1039   DA67 C9          			RET
1040   DA68             
1041   DA68             ;================================================================================================
1042   DA68             ; Routine to do the backspace and line delete. D=1, backspace; D=0, delete line.
1043   DA68             ;================================================================================================
1044   DA68 2A 7D DC    BSPROC:		LD	HL,(LBUFPTR)
1045   DA6B 01 80 00    			LD	BC,DMA
1046   DA6E 37          			SCF
1047   DA6F 3F          			CCF
1048   DA70 ED 42       			SBC	HL,BC
1049   DA72 28 1C       			JR	Z,LBUFEMPTY
1050   DA74 2A 7D DC    			LD	HL,(LBUFPTR)
1051   DA77 2B          			DEC	HL
1052   DA78 22 7D DC    			LD	(LBUFPTR),HL
1053   DA7B 0E 08       			LD	C,BS
1054   DA7D CD 0C E6    			CALL CONOUT
1055   DA80 0E 20       			LD	C,' '
1056   DA82 CD 0C E6    			CALL CONOUT
1057   DA85 0E 08       			LD	C,BS
1058   DA87 CD 0C E6    			CALL CONOUT
1059   DA8A 7A          			LD	A,D
1060   DA8B FE 01       			CP	1
1061   DA8D C8          			RET	Z
1062   DA8E 18 D8       			JR	BSPROC
1063   DA90             
1064   DA90 0E 07       LBUFEMPTY:	LD	C,BEL
1065   DA92 CD 0C E6    			CALL CONOUT
1066   DA95 C9          			RET
1067   DA96             			
1068   DA96             ;================================================================================================
1069   DA96             ; Routine to convert line buffer content to upper case
1070   DA96             ;================================================================================================
1071   DA96 21 7F 00    UPPER:		LD	HL,DMA-1
1072   DA99 23          NEXT2UP:	INC	HL
1073   DA9A 7E          			LD	A,(HL)
1074   DA9B FE 00       			CP	0
1075   DA9D C8          			RET	Z
1076   DA9E FE 61       			CP	'a'
1077   DAA0 FA 99 DA    			JP	M,NEXT2UP
1078   DAA3 FE 7B       			CP	'{'
1079   DAA5 F2 99 DA    			JP	P,NEXT2UP
1080   DAA8 D6 20       			SUB	20H
1081   DAAA 77          			LD	(HL),A
1082   DAAB 18 EC       			JR	NEXT2UP
1083   DAAD             			
1084   DAAD             ;================================================================================================
1085   DAAD             ; Routine to parse command. HL=cmd_table_pointer.
1086   DAAD             ; regA=cmd_num or FFh if no match. HL=jump_address or 0000 if no match.
1087   DAAD             ;================================================================================================
1088   DAAD C5          PARSER:		PUSH BC
1089   DAAE D5          			PUSH DE
1090   DAAF 11 80 00    			LD	DE,DMA
1091   DAB2 3E 00       			LD	A,0
1092   DAB4 32 7C DC    			LD	(CMDNUM),A		; Init command number.
1093   DAB7 1A          NEXT2PARS:	LD	A,(DE)
1094   DAB8 BE          			CP	(HL)
1095   DAB9 20 04       			JR	NZ,NOTEQU
1096   DABB 23          			INC	HL
1097   DABC 13          			INC	DE
1098   DABD 18 F8       			JR	NEXT2PARS
1099   DABF 7E          NOTEQU:		LD	A,(HL)
1100   DAC0 FE 1E       			CP	RS
1101   DAC2 28 04       			JR	Z,ISRS
1102   DAC4 FE 03       			CP	ETX
1103   DAC6 20 22       			JR	NZ,NEXTCMD
1104   DAC8 1A          ISRS:		LD	A,(DE)
1105   DAC9 FE 00       			CP	0
1106   DACB 28 04       			JR	Z,ISZERO
1107   DACD FE 20       			CP	' '
1108   DACF 20 19       			JR	NZ,NEXTCMD
1109   DAD1 7E          ISZERO:		LD	A,(HL)
1110   DAD2 FE 03       			CP	ETX
1111   DAD4 28 03       			JR	Z,CMDMATCH
1112   DAD6 23          			INC	HL
1113   DAD7 18 F8       			JR	ISZERO
1114   DAD9 23          CMDMATCH:	INC	HL
1115   DADA E5          			PUSH HL
1116   DADB D1          			POP	DE				; DE=addr of jump table
1117   DADC 26 00       			LD	H,0
1118   DADE 3A 7C DC    			LD	A,(CMDNUM)
1119   DAE1 6F          			LD	L,A
1120   DAE2 E5          			PUSH HL
1121   DAE3 C1          			POP	BC
1122   DAE4 09          			ADD	HL,BC			; command_number * 2
1123   DAE5 09          			ADD	HL,BC			; command_number * 3
1124   DAE6 19          			ADD HL,DE
1125   DAE7 D1          			POP	DE
1126   DAE8 C1          			POP	BC
1127   DAE9 C9          			RET					; A=command_number, HL=jump_address
1128   DAEA 7E          NEXTCMD:	LD	A,(HL)
1129   DAEB FE 1E       			CP	RS
1130   DAED 28 07       			JR	Z,ISRS2
1131   DAEF FE 03       			CP	ETX
1132   DAF1 28 10       			JR	Z,NOMATCH
1133   DAF3 23          			INC	HL
1134   DAF4 18 F4       			JR	NEXTCMD
1135   DAF6 23          ISRS2:		INC	HL
1136   DAF7 3A 7C DC    			LD	A,(CMDNUM)
1137   DAFA 3C          			INC	A
1138   DAFB 32 7C DC    			LD	(CMDNUM),A
1139   DAFE 11 80 00    			LD	DE,DMA
1140   DB01 18 B4       			JR	NEXT2PARS
1141   DB03 21 00 00    NOMATCH:	LD	HL,0
1142   DB06 3E FF       			LD	A,0FFH
1143   DB08 D1          			POP	DE
1144   DB09 C1          			POP	BC
1145   DB0A C9          			RET
1146   DB0B             
1147   DB0B             ;================================================================================================
1148   DB0B             ; Routine to get word from command line. DE=line_buf_ptr(should point to where word starts).
1149   DB0B             ; If successfull, return word in BC. A=0 if missing arg, A=1 if OK, A=2 if invalid arg. 
1150   DB0B             ;================================================================================================
1151   DB0B CD 1F DB    GETWORD:	CALL GETBYTE
1152   DB0E FE 01       			CP	1
1153   DB10 C0          			RET	NZ
1154   DB11 48          			LD	C,B
1155   DB12 13          			INC	DE
1156   DB13 CD 1F DB    			CALL GETBYTE
1157   DB16 FE 01       			CP	1
1158   DB18 C0          			RET NZ
1159   DB19 78          			LD	A,B
1160   DB1A 41          			LD	B,C
1161   DB1B 4F          			LD	C,A
1162   DB1C 3E 01       			LD	A,1
1163   DB1E C9          			RET
1164   DB1F             			
1165   DB1F             ;================================================================================================
1166   DB1F             ; Routine to get byte from command line. DE=line_buf_ptr(should point to where byte starts).
1167   DB1F             ; If successfull, return byte in regB. A=0 if missing arg, A=1 if OK, A=2 if invalid arg. 
1168   DB1F             ;================================================================================================
1169   DB1F 1A          GETBYTE:	LD	A,(DE)
1170   DB20 FE 00       			CP	0
1171   DB22 28 1C       			JR	Z,GBNA				; End of buffer and no arg found.
1172   DB24 FE 20       			CP	' '
1173   DB26 28 33       			JR	Z,GBSPC				; Trim the space.
1174   DB28 67          			LD	H,A
1175   DB29 CD 7F DB    			CALL ISITHEX
1176   DB2C FE 01       			CP	1
1177   DB2E 20 2E       			JR	NZ,GBIA				; Invalid arg.
1178   DB30 13          			INC	DE
1179   DB31 1A          			LD	A,(DE)
1180   DB32 6F          			LD	L,A
1181   DB33 CD 7F DB    			CALL ISITHEX
1182   DB36 FE 01       			CP	1
1183   DB38 20 24       			JR	NZ,GBIA				; Invalid arg.
1184   DB3A CD 99 DB    			CALL HL2B				; Convert ASCII pair to byte
1185   DB3D 3E 01       			LD	A,1
1186   DB3F C9          			RET
1187   DB40 CD 33 E6    GBNA:		CALL PRINTSEQ
1188   DB43 3E 4D 69 73 			.DB	">Missing argument.",CR,LF,0
1188   DB47 73 69 6E 67 
1188   DB4B 20 61 72 67 
1188   DB4F 75 6D 65 6E 
1188   DB53 74 2E 0D 0A 
1188   DB57 00 
1189   DB58 3E 00       			LD	A,0
1190   DB5A C9          			RET
1191   DB5B 13          GBSPC:		INC	DE
1192   DB5C 18 C1       			JR	GETBYTE
1193   DB5E CD 33 E6    GBIA:		CALL PRINTSEQ
1194   DB61 3E 49 6E 76 			.DB	">Invalid argument.",CR,LF,0
1194   DB65 61 6C 69 64 
1194   DB69 20 61 72 67 
1194   DB6D 75 6D 65 6E 
1194   DB71 74 2E 0D 0A 
1194   DB75 00 
1195   DB76 3E 02       			LD	A,2
1196   DB78 C9          			RET
1197   DB79             
1198   DB79 0E 3E       PRINTENV:	LD	C,PROMPT
1199   DB7B CD 0C E6    			CALL CONOUT
1200   DB7E C9          			RET
1201   DB7F             
1202   DB7F FE 47       ISITHEX:	CP	'G'
1203   DB81 F2 93 DB    			JP	P,NOTHEX
1204   DB84 FE 41       			CP	'A'
1205   DB86 F2 96 DB    			JP	P,ISHEX
1206   DB89 FE 40       			CP	040H
1207   DB8B F2 93 DB    			JP	P,NOTHEX
1208   DB8E FE 30       			CP	'0'
1209   DB90 F2 96 DB    			JP	P,ISHEX
1210   DB93 3E 00       NOTHEX:		LD	A,0
1211   DB95 C9          			RET
1212   DB96 3E 01       ISHEX:		LD	A,1
1213   DB98 C9          			RET
1214   DB99             
1215   DB99             ;================================================================================================
1216   DB99             ; Convert ASCII to HEX (HL --> B)
1217   DB99             ;================================================================================================
1218   DB99 C5          HL2B:		PUSH BC
1219   DB9A 3E 60       			LD	A,060H
1220   DB9C 94          			SUB	H
1221   DB9D 0E 57       			LD	C,057H
1222   DB9F DA AC DB    			JP	C,DISCOUNT
1223   DBA2 3E 40       			LD	A,040H
1224   DBA4 94          			SUB	H
1225   DBA5 0E 37       			LD	C,037H
1226   DBA7 DA AC DB    			JP	C,DISCOUNT
1227   DBAA 0E 30       			LD	C,030H
1228   DBAC 7C          DISCOUNT:	LD	A,H
1229   DBAD 91          			SUB	C
1230   DBAE 47          CONVL:		LD	B,A
1231   DBAF CB 20       			SLA	B
1232   DBB1 CB 20       			SLA	B
1233   DBB3 CB 20       			SLA	B
1234   DBB5 CB 20       			SLA	B
1235   DBB7 3E 60       			LD	A,060H
1236   DBB9 95          			SUB	L
1237   DBBA 0E 57       			LD	C,057H
1238   DBBC DA C9 DB    			JP	C,DISCOUNT2
1239   DBBF 3E 40       			LD	A,040H
1240   DBC1 95          			SUB	L
1241   DBC2 0E 37       			LD	C,037H
1242   DBC4 DA C9 DB    			JP	C,DISCOUNT2
1243   DBC7 0E 30       			LD	C,030H
1244   DBC9 7D          DISCOUNT2:	LD	A,L
1245   DBCA 91          			SUB	C
1246   DBCB B0          			OR	B
1247   DBCC C1          			POP	BC
1248   DBCD 47          			LD	B,A
1249   DBCE C9          			RET
1250   DBCF             
1251   DBCF             ;================================================================================================
1252   DBCF             ; Convert HEX to ASCII (B --> HL)
1253   DBCF             ;================================================================================================
1254   DBCF C5          B2HL:		PUSH	BC
1255   DBD0 78          			LD	A,B
1256   DBD1 E6 0F       			AND	0FH
1257   DBD3 6F          			LD	L,A
1258   DBD4 D6 0A       			SUB	0AH
1259   DBD6 0E 30       			LD	C,030H
1260   DBD8 DA DD DB    			JP	C,COMPENSE
1261   DBDB 0E 37       			LD	C,037H
1262   DBDD 7D          COMPENSE:	LD	A,L
1263   DBDE 81          			ADD	A,C
1264   DBDF 6F          			LD	L,A
1265   DBE0 78          			LD	A,B
1266   DBE1 E6 F0       			AND	0F0H
1267   DBE3 CB 3F       			SRL	A
1268   DBE5 CB 3F       			SRL	A
1269   DBE7 CB 3F       			SRL	A
1270   DBE9 CB 3F       			SRL	A
1271   DBEB 67          			LD	H,A
1272   DBEC D6 0A       			SUB	0AH
1273   DBEE 0E 30       			LD	C,030H
1274   DBF0 DA F5 DB    			JP	C,COMPENSE2
1275   DBF3 0E 37       			LD	C,037H
1276   DBF5 7C          COMPENSE2:	LD	A,H
1277   DBF6 81          			ADD	A,C
1278   DBF7 67          			LD	H,A
1279   DBF8 C1          			POP	BC
1280   DBF9 C9          			RET
1281   DBFA             
1282   DBFA             ;================================================================================================
1283   DBFA 3F 1E       CMDTBL:		.DB	"?",RS
1284   DBFC 42 4F 4F 54 			.DB	"BOOT",RS
1284   DC00 1E 
1285   DC01 58 4D 4F 44 			.DB	"XMODEM",RS
1285   DC05 45 4D 1E 
1286   DC08 48 45 58 32 			.DB	"HEX2COM",RS
1286   DC0C 43 4F 4D 1E 
1287   DC10 41 53 43 49 			.DB	"ASCII2COM",RS
1287   DC14 49 32 43 4F 
1287   DC18 4D 1E 
1288   DC1A 52 55 4E 1E 			.DB	"RUN",RS
1289   DC1E 52 45 41 44 			.DB	"READ",RS
1289   DC22 1E 
1290   DC23 44 52 45 41 			.DB	"DREAD",RS
1290   DC27 44 1E 
1291   DC29 57 52 49 54 			.DB	"WRITE",RS
1291   DC2D 45 1E 
1292   DC2F 43 4F 50 59 			.DB	"COPY",RS
1292   DC33 1E 
1293   DC34 46 49 4C 4C 			.DB	"FILL",RS
1293   DC38 1E 
1294   DC39 44 4F 57 4E 			.DB	"DOWN",RS
1294   DC3D 1E 
1295   DC3E 55 50 1E    			.DB	"UP",RS
1296   DC41 46 4F 52 4D 			.DB	"FORMAT",RS
1296   DC45 41 54 1E 
1297   DC48 56 45 52 49 			.DB	"VERIFY",ETX
1297   DC4C 46 59 03 
1298   DC4F             
1299   DC4F C3 1C D0    JMPTBL:		JP	HELP
1300   DC52 C3 03 E6    			JP	WBOOT
1301   DC55 C3 50 D5    			JP	XMODEM
1302   DC58 C3 6B D6    			JP	HEX2COM
1303   DC5B C3 28 D7    			JP	ASCII2COM
1304   DC5E C3 DB D9    			JP	RUN
1305   DC61 C3 1B D3    			JP	MREAD
1306   DC64 C3 96 D7    			JP	DREAD
1307   DC67 C3 9F D4    			JP	MWRITE
1308   DC6A C3 CA D4    			JP	MCOPY
1309   DC6D C3 0E D5    			JP	MFILL
1310   DC70 C3 83 D8    			JP	DDOWN
1311   DC73 C3 C5 D9    			JP	DUP
1312   DC76 C3 DA D9    			JP	DFORMAT
1313   DC79 C3 D9 D9    			JP	DVERIFY
1314   DC7C             			
1315   DC7C             ;================================================================================================
1316   DC7C 00          CMDNUM		.DB	0
1317   DC7D 00 00       LBUFPTR		.DW	0
1318   DC7F 00          LINNUM		.DB	0
1319   DC80 00          COLNUM		.DB	0
1320   DC81 00 00       AAAA		.DW	0
1321   DC83 00 00       BBBB		.DW	0
1322   DC85 00 00       CCCC		.DW	0
1323   DC87 00          CHKSUM	 	.DB	0					; Checksum for xmodem
1324   DC88 00          BYTECNT		.DB	0					; Byte counter for xmodem and hex2com
1325   DC89 00          RETRY		.DB 0					; Retry counter for xmodem
1326   DC8A 00          BLOCK		.DB	0					; Block counter for xmodem
1327   DC8B 00          DSK			.DB	0					; Disk number [00,0F]
1328   DC8C 00 00       TRK			.DW	0					; Track number [0,1FF]
1329   DC8E 00          SEC			.DB	0					; Sector number [0,1F]
1330   DC8F 00          LBA3		.DB	0
1331   DC90 00          LBA2		.DB	0
1332   DC91 00          LBA1		.DB	0
1333   DC92 00          LBA0		.DB	0
1334   DC93             
1335   DC93             			.END
tasm: Number of errors = 0
