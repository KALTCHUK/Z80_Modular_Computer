
preTTY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  0000038c  00000420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000038c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000208  00800124  00800124  00000444  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000474  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008b6  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e3  00000000  00000000  00000dba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c2  00000000  00000000  0000149d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00001860  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000416  00000000  00000000  00001974  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002d5  00000000  00000000  00001d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000205f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 bb 00 	jmp	0x176	; 0x176 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e8       	ldi	r30, 0x8C	; 140
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 32       	cpi	r26, 0x24	; 36
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	a4 e2       	ldi	r26, 0x24	; 36
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 32       	cpi	r26, 0x2C	; 44
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <main>
  9e:	0c 94 c4 01 	jmp	0x388	; 0x388 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setDataBus>:
char	uBuffTX[MAXBUFF]; 					// Buffer for chars to be sent through serial port.
int		uBuffTX_inPtr=0, uBuffTX_outPtr=0;

void setDataBus(int modus)
{
	if (modus == asInput)	// Write zeros to PORTs
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	39 f4       	brne	.+14     	; 0xb8 <setDataBus+0x12>
	{
		DDRB &= ~0x07;
  aa:	84 b1       	in	r24, 0x04	; 4
  ac:	88 7f       	andi	r24, 0xF8	; 248
  ae:	84 b9       	out	0x04, r24	; 4
		DDRD &= ~0xf8;
  b0:	8a b1       	in	r24, 0x0a	; 10
  b2:	87 70       	andi	r24, 0x07	; 7
  b4:	8a b9       	out	0x0a, r24	; 10
  b6:	08 95       	ret
	}
	else					// Write ones to PORTs
	{
		DDRB |= 0x07;
  b8:	84 b1       	in	r24, 0x04	; 4
  ba:	87 60       	ori	r24, 0x07	; 7
  bc:	84 b9       	out	0x04, r24	; 4
		DDRD |= 0xf8;
  be:	8a b1       	in	r24, 0x0a	; 10
  c0:	88 6f       	ori	r24, 0xF8	; 248
  c2:	8a b9       	out	0x0a, r24	; 10
  c4:	08 95       	ret

000000c6 <reply>:
	}
}

void reply(char toPost)
{
  c6:	cf 93       	push	r28
  c8:	c8 2f       	mov	r28, r24
	setDataBus(asOutput);
  ca:	82 e0       	ldi	r24, 0x02	; 2
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 53 00 	call	0xa6	; 0xa6 <setDataBus>
	PORTB = (PINB&~0x7)|(toPost&0x7);
  d2:	83 b1       	in	r24, 0x03	; 3
  d4:	88 7f       	andi	r24, 0xF8	; 248
  d6:	9c 2f       	mov	r25, r28
  d8:	97 70       	andi	r25, 0x07	; 7
  da:	89 2b       	or	r24, r25
  dc:	85 b9       	out	0x05, r24	; 5
	PORTD = (PIND&~0xf8)|(toPost&0xf8);
  de:	89 b1       	in	r24, 0x09	; 9
  e0:	87 70       	andi	r24, 0x07	; 7
  e2:	c8 7f       	andi	r28, 0xF8	; 248
  e4:	c8 2b       	or	r28, r24
  e6:	cb b9       	out	0x0b, r28	; 11

	RSM_LO;							// Release wait line
  e8:	88 b1       	in	r24, 0x08	; 8
  ea:	87 7f       	andi	r24, 0xF7	; 247
  ec:	88 b9       	out	0x08, r24	; 8
	RSM_HI;
  ee:	88 b1       	in	r24, 0x08	; 8
  f0:	88 60       	ori	r24, 0x08	; 8
  f2:	88 b9       	out	0x08, r24	; 8

//	while (CS == 0)					// Wait till CS is high
//	{
//	}

	setDataBus(asInput);
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 53 00 	call	0xa6	; 0xa6 <setDataBus>
}
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <USART_Init>:

void USART_Init( unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 100:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 104:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	/* Enable receiver, transmitter and also RX_complete_interrupt */
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 108:	88 e9       	ldi	r24, 0x98	; 152
 10a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	/* Set frame format: 8N1 */
	UCSR0C = (3<<UCSZ00);
 10e:	86 e0       	ldi	r24, 0x06	; 6
 110:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 114:	08 95       	ret

00000116 <__vector_18>:
}

ISR(USART_RX_vect)
{
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	2f 93       	push	r18
 122:	3f 93       	push	r19
 124:	4f 93       	push	r20
 126:	8f 93       	push	r24
 128:	9f 93       	push	r25
 12a:	ef 93       	push	r30
 12c:	ff 93       	push	r31
	uBuffRX[uBuffRX_inPtr++] = UDR0;
 12e:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <uBuffRX_inPtr>
 132:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <uBuffRX_inPtr+0x1>
 136:	9c 01       	movw	r18, r24
 138:	2f 5f       	subi	r18, 0xFF	; 255
 13a:	3f 4f       	sbci	r19, 0xFF	; 255
 13c:	30 93 2b 01 	sts	0x012B, r19	; 0x80012b <uBuffRX_inPtr+0x1>
 140:	20 93 2a 01 	sts	0x012A, r18	; 0x80012a <uBuffRX_inPtr>
 144:	40 91 c6 00 	lds	r20, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 148:	fc 01       	movw	r30, r24
 14a:	e4 5d       	subi	r30, 0xD4	; 212
 14c:	fe 4f       	sbci	r31, 0xFE	; 254
 14e:	40 83       	st	Z, r20
	if (uBuffRX_inPtr == MAXBUFF)
 150:	21 15       	cp	r18, r1
 152:	31 40       	sbci	r19, 0x01	; 1
 154:	21 f4       	brne	.+8      	; 0x15e <__vector_18+0x48>
		uBuffRX_inPtr = 0;
 156:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <uBuffRX_inPtr+0x1>
 15a:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <uBuffRX_inPtr>
}
 15e:	ff 91       	pop	r31
 160:	ef 91       	pop	r30
 162:	9f 91       	pop	r25
 164:	8f 91       	pop	r24
 166:	4f 91       	pop	r20
 168:	3f 91       	pop	r19
 16a:	2f 91       	pop	r18
 16c:	0f 90       	pop	r0
 16e:	0f be       	out	0x3f, r0	; 63
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti

00000176 <__vector_1>:

ISR(INT0_vect)								// We got a chip_select (CPU wants something)
{
 176:	1f 92       	push	r1
 178:	0f 92       	push	r0
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	0f 92       	push	r0
 17e:	11 24       	eor	r1, r1
 180:	2f 93       	push	r18
 182:	3f 93       	push	r19
 184:	4f 93       	push	r20
 186:	5f 93       	push	r21
 188:	6f 93       	push	r22
 18a:	7f 93       	push	r23
 18c:	8f 93       	push	r24
 18e:	9f 93       	push	r25
 190:	af 93       	push	r26
 192:	bf 93       	push	r27
 194:	ef 93       	push	r30
 196:	ff 93       	push	r31
	char	operation, dataByte;
	
	operation = PINC & 0x7;					// Snapshots from I/O pins
 198:	86 b1       	in	r24, 0x06	; 6
 19a:	87 70       	andi	r24, 0x07	; 7
	dataByte = (PIND & 0xf8)|(PINB & 0x07);
 19c:	29 b1       	in	r18, 0x09	; 9
 19e:	93 b1       	in	r25, 0x03	; 3
 1a0:	28 7f       	andi	r18, 0xF8	; 248
 1a2:	97 70       	andi	r25, 0x07	; 7
 1a4:	92 2b       	or	r25, r18
	
	switch (operation)
 1a6:	83 30       	cpi	r24, 0x03	; 3
 1a8:	09 f4       	brne	.+2      	; 0x1ac <__vector_1+0x36>
 1aa:	7c c0       	rjmp	.+248    	; 0x2a4 <__vector_1+0x12e>
 1ac:	20 f4       	brcc	.+8      	; 0x1b6 <__vector_1+0x40>
 1ae:	82 30       	cpi	r24, 0x02	; 2
 1b0:	09 f4       	brne	.+2      	; 0x1b4 <__vector_1+0x3e>
 1b2:	5b c0       	rjmp	.+182    	; 0x26a <__vector_1+0xf4>
 1b4:	7d c0       	rjmp	.+250    	; 0x2b0 <__vector_1+0x13a>
 1b6:	84 30       	cpi	r24, 0x04	; 4
 1b8:	19 f0       	breq	.+6      	; 0x1c0 <__vector_1+0x4a>
 1ba:	85 30       	cpi	r24, 0x05	; 5
 1bc:	69 f1       	breq	.+90     	; 0x218 <__vector_1+0xa2>
 1be:	78 c0       	rjmp	.+240    	; 0x2b0 <__vector_1+0x13a>
	{
		case RD_DATA:								// Read data request
		if (uBuffRX_inPtr != uBuffRX_outPtr)
 1c0:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <uBuffRX_inPtr>
 1c4:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <uBuffRX_inPtr+0x1>
 1c8:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <uBuffRX_outPtr>
 1cc:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <uBuffRX_outPtr+0x1>
 1d0:	28 17       	cp	r18, r24
 1d2:	39 07       	cpc	r19, r25
 1d4:	d1 f0       	breq	.+52     	; 0x20a <__vector_1+0x94>
		{
			reply(uBuffRX[uBuffRX_outPtr++]);
 1d6:	9c 01       	movw	r18, r24
 1d8:	2f 5f       	subi	r18, 0xFF	; 255
 1da:	3f 4f       	sbci	r19, 0xFF	; 255
 1dc:	30 93 29 01 	sts	0x0129, r19	; 0x800129 <uBuffRX_outPtr+0x1>
 1e0:	20 93 28 01 	sts	0x0128, r18	; 0x800128 <uBuffRX_outPtr>
 1e4:	fc 01       	movw	r30, r24
 1e6:	e4 5d       	subi	r30, 0xD4	; 212
 1e8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ea:	80 81       	ld	r24, Z
 1ec:	0e 94 63 00 	call	0xc6	; 0xc6 <reply>
			if (uBuffRX_outPtr == MAXBUFF)
 1f0:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <uBuffRX_outPtr>
 1f4:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <uBuffRX_outPtr+0x1>
 1f8:	81 15       	cp	r24, r1
 1fa:	91 40       	sbci	r25, 0x01	; 1
 1fc:	09 f0       	breq	.+2      	; 0x200 <__vector_1+0x8a>
 1fe:	58 c0       	rjmp	.+176    	; 0x2b0 <__vector_1+0x13a>
				uBuffRX_outPtr = 0;
 200:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <uBuffRX_outPtr+0x1>
 204:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <uBuffRX_outPtr>
 208:	53 c0       	rjmp	.+166    	; 0x2b0 <__vector_1+0x13a>
		}
		else
		{
			RSM_LO;							// Release wait line
 20a:	88 b1       	in	r24, 0x08	; 8
 20c:	87 7f       	andi	r24, 0xF7	; 247
 20e:	88 b9       	out	0x08, r24	; 8
			RSM_HI;
 210:	88 b1       	in	r24, 0x08	; 8
 212:	88 60       	ori	r24, 0x08	; 8
 214:	88 b9       	out	0x08, r24	; 8
 216:	4c c0       	rjmp	.+152    	; 0x2b0 <__vector_1+0x13a>
		}
		break;
		//------------------//
		case RD_STATUS:						// Read status request
		setDataBus(asOutput);
 218:	82 e0       	ldi	r24, 0x02	; 2
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 53 00 	call	0xa6	; 0xa6 <setDataBus>
		if (uBuffRX_inPtr != uBuffRX_outPtr)	// Put 0xff on data bus
 220:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <uBuffRX_inPtr>
 224:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <uBuffRX_inPtr+0x1>
 228:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <uBuffRX_outPtr>
 22c:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <uBuffRX_outPtr+0x1>
 230:	28 17       	cp	r18, r24
 232:	39 07       	cpc	r19, r25
 234:	39 f0       	breq	.+14     	; 0x244 <__vector_1+0xce>
		{
			PORTB |= 0x07;
 236:	85 b1       	in	r24, 0x05	; 5
 238:	87 60       	ori	r24, 0x07	; 7
 23a:	85 b9       	out	0x05, r24	; 5
			PORTD |= 0xf8;
 23c:	8b b1       	in	r24, 0x0b	; 11
 23e:	88 6f       	ori	r24, 0xF8	; 248
 240:	8b b9       	out	0x0b, r24	; 11
 242:	06 c0       	rjmp	.+12     	; 0x250 <__vector_1+0xda>
		}
		else							// Put 00 on data bus
		{
			PORTB &= ~0x07;
 244:	85 b1       	in	r24, 0x05	; 5
 246:	88 7f       	andi	r24, 0xF8	; 248
 248:	85 b9       	out	0x05, r24	; 5
			PORTD &= ~0xf8;
 24a:	8b b1       	in	r24, 0x0b	; 11
 24c:	87 70       	andi	r24, 0x07	; 7
 24e:	8b b9       	out	0x0b, r24	; 11
		}
		RSM_LO;							// Release wait line
 250:	88 b1       	in	r24, 0x08	; 8
 252:	87 7f       	andi	r24, 0xF7	; 247
 254:	88 b9       	out	0x08, r24	; 8
		RSM_HI;
 256:	88 b1       	in	r24, 0x08	; 8
 258:	88 60       	ori	r24, 0x08	; 8
 25a:	88 b9       	out	0x08, r24	; 8
		
		while (CS == 0)					// Wait till CS is high
 25c:	48 9b       	sbis	0x09, 0	; 9
 25e:	fe cf       	rjmp	.-4      	; 0x25c <__vector_1+0xe6>
		{
		}

		setDataBus(asInput);
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 53 00 	call	0xa6	; 0xa6 <setDataBus>
		break;
 268:	23 c0       	rjmp	.+70     	; 0x2b0 <__vector_1+0x13a>
		//------------------//
		case WR_DATA:		// write data request
		uBuffTX[uBuffTX_inPtr++] = dataByte;
 26a:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <uBuffTX_inPtr>
 26e:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <uBuffTX_inPtr+0x1>
 272:	a9 01       	movw	r20, r18
 274:	4f 5f       	subi	r20, 0xFF	; 255
 276:	5f 4f       	sbci	r21, 0xFF	; 255
 278:	50 93 27 01 	sts	0x0127, r21	; 0x800127 <uBuffTX_inPtr+0x1>
 27c:	40 93 26 01 	sts	0x0126, r20	; 0x800126 <uBuffTX_inPtr>
 280:	f9 01       	movw	r30, r18
 282:	e4 5d       	subi	r30, 0xD4	; 212
 284:	fd 4f       	sbci	r31, 0xFD	; 253
 286:	90 83       	st	Z, r25
		if (uBuffTX_inPtr == MAXBUFF)
 288:	41 15       	cp	r20, r1
 28a:	51 40       	sbci	r21, 0x01	; 1
 28c:	21 f4       	brne	.+8      	; 0x296 <__vector_1+0x120>
		uBuffTX_inPtr = 0;
 28e:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <uBuffTX_inPtr+0x1>
 292:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <uBuffTX_inPtr>
		RSM_LO;							// Release wait line
 296:	88 b1       	in	r24, 0x08	; 8
 298:	87 7f       	andi	r24, 0xF7	; 247
 29a:	88 b9       	out	0x08, r24	; 8
		RSM_HI;
 29c:	88 b1       	in	r24, 0x08	; 8
 29e:	88 60       	ori	r24, 0x08	; 8
 2a0:	88 b9       	out	0x08, r24	; 8
		break;
 2a2:	06 c0       	rjmp	.+12     	; 0x2b0 <__vector_1+0x13a>
		//------------------//
		case WR_COMMAND:		// write command request
		RSM_LO;							// Release wait line
 2a4:	88 b1       	in	r24, 0x08	; 8
 2a6:	87 7f       	andi	r24, 0xF7	; 247
 2a8:	88 b9       	out	0x08, r24	; 8
		RSM_HI;
 2aa:	88 b1       	in	r24, 0x08	; 8
 2ac:	88 60       	ori	r24, 0x08	; 8
 2ae:	88 b9       	out	0x08, r24	; 8
		break;
	}
}
 2b0:	ff 91       	pop	r31
 2b2:	ef 91       	pop	r30
 2b4:	bf 91       	pop	r27
 2b6:	af 91       	pop	r26
 2b8:	9f 91       	pop	r25
 2ba:	8f 91       	pop	r24
 2bc:	7f 91       	pop	r23
 2be:	6f 91       	pop	r22
 2c0:	5f 91       	pop	r21
 2c2:	4f 91       	pop	r20
 2c4:	3f 91       	pop	r19
 2c6:	2f 91       	pop	r18
 2c8:	0f 90       	pop	r0
 2ca:	0f be       	out	0x3f, r0	; 63
 2cc:	0f 90       	pop	r0
 2ce:	1f 90       	pop	r1
 2d0:	18 95       	reti

000002d2 <xmit>:

void xmit(char toSend)
{
	while ( !( UCSR0A & (1<<UDRE0)) )
 2d2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2d6:	95 ff       	sbrs	r25, 5
 2d8:	fc cf       	rjmp	.-8      	; 0x2d2 <xmit>
	{}
	UDR0 = toSend;
 2da:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2de:	08 95       	ret

000002e0 <main>:
}

int main(void)
{
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	cd b7       	in	r28, 0x3d	; 61
 2e6:	de b7       	in	r29, 0x3e	; 62
 2e8:	a3 97       	sbiw	r28, 0x23	; 35
 2ea:	0f b6       	in	r0, 0x3f	; 63
 2ec:	f8 94       	cli
 2ee:	de bf       	out	0x3e, r29	; 62
 2f0:	0f be       	out	0x3f, r0	; 63
 2f2:	cd bf       	out	0x3d, r28	; 61
	char	iniMsg[] = "\r\n>preTTY card\r\n>38400bps 8N1\r\n\r\n\0";
 2f4:	83 e2       	ldi	r24, 0x23	; 35
 2f6:	e0 e0       	ldi	r30, 0x00	; 0
 2f8:	f1 e0       	ldi	r31, 0x01	; 1
 2fa:	de 01       	movw	r26, r28
 2fc:	11 96       	adiw	r26, 0x01	; 1
 2fe:	01 90       	ld	r0, Z+
 300:	0d 92       	st	X+, r0
 302:	8a 95       	dec	r24
 304:	e1 f7       	brne	.-8      	; 0x2fe <main+0x1e>
	int		i=0;
	
	USART_Init(MYUBRR);		// Initialize USART
 306:	8f e1       	ldi	r24, 0x1F	; 31
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	0e 94 80 00 	call	0x100	; 0x100 <USART_Init>
}

int main(void)
{
	char	iniMsg[] = "\r\n>preTTY card\r\n>38400bps 8N1\r\n\r\n\0";
	int		i=0;
 30e:	00 e0       	ldi	r16, 0x00	; 0
 310:	10 e0       	ldi	r17, 0x00	; 0
	
	USART_Init(MYUBRR);		// Initialize USART
	while ( iniMsg[i] != 0)	
 312:	04 c0       	rjmp	.+8      	; 0x31c <main+0x3c>
	{
		xmit(iniMsg[i++]);
 314:	0f 5f       	subi	r16, 0xFF	; 255
 316:	1f 4f       	sbci	r17, 0xFF	; 255
 318:	0e 94 69 01 	call	0x2d2	; 0x2d2 <xmit>
{
	char	iniMsg[] = "\r\n>preTTY card\r\n>38400bps 8N1\r\n\r\n\0";
	int		i=0;
	
	USART_Init(MYUBRR);		// Initialize USART
	while ( iniMsg[i] != 0)	
 31c:	e1 e0       	ldi	r30, 0x01	; 1
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	ec 0f       	add	r30, r28
 322:	fd 1f       	adc	r31, r29
 324:	e0 0f       	add	r30, r16
 326:	f1 1f       	adc	r31, r17
 328:	80 81       	ld	r24, Z
 32a:	81 11       	cpse	r24, r1
 32c:	f3 cf       	rjmp	.-26     	; 0x314 <main+0x34>
	{
		xmit(iniMsg[i++]);
	}
	DDRC |= (1<<RSM);		// Configure RSM pin as output
 32e:	87 b1       	in	r24, 0x07	; 7
 330:	88 60       	ori	r24, 0x08	; 8
 332:	87 b9       	out	0x07, r24	; 7
	RSM_HI;					// Turn off RSM (active low)
 334:	88 b1       	in	r24, 0x08	; 8
 336:	88 60       	ori	r24, 0x08	; 8
 338:	88 b9       	out	0x08, r24	; 8
	EIMSK = (1<<INT0);		// Enable INT0 (chip select)
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	8d bb       	out	0x1d, r24	; 29
	
	sei();
 33e:	78 94       	sei
	while (1) 				// If we're not busy attending a service request
	{						// from CPU, let's empty the TX buffer.
		if (uBuffTX_inPtr != uBuffTX_outPtr)
 340:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <uBuffTX_inPtr>
 344:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <uBuffTX_inPtr+0x1>
 348:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 34c:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <__data_end+0x1>
 350:	28 17       	cp	r18, r24
 352:	39 07       	cpc	r19, r25
 354:	a9 f3       	breq	.-22     	; 0x340 <main+0x60>
		{
			xmit(uBuffTX[uBuffTX_outPtr++]);
 356:	9c 01       	movw	r18, r24
 358:	2f 5f       	subi	r18, 0xFF	; 255
 35a:	3f 4f       	sbci	r19, 0xFF	; 255
 35c:	30 93 25 01 	sts	0x0125, r19	; 0x800125 <__data_end+0x1>
 360:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <__data_end>
 364:	fc 01       	movw	r30, r24
 366:	e4 5d       	subi	r30, 0xD4	; 212
 368:	fd 4f       	sbci	r31, 0xFD	; 253
 36a:	80 81       	ld	r24, Z
 36c:	0e 94 69 01 	call	0x2d2	; 0x2d2 <xmit>
			if (uBuffTX_outPtr == MAXBUFF)
 370:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 374:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <__data_end+0x1>
 378:	81 15       	cp	r24, r1
 37a:	91 40       	sbci	r25, 0x01	; 1
 37c:	09 f7       	brne	.-62     	; 0x340 <main+0x60>
				uBuffTX_outPtr = 0;
 37e:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__data_end+0x1>
 382:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__data_end>
 386:	dc cf       	rjmp	.-72     	; 0x340 <main+0x60>

00000388 <_exit>:
 388:	f8 94       	cli

0000038a <__stop_program>:
 38a:	ff cf       	rjmp	.-2      	; 0x38a <__stop_program>
