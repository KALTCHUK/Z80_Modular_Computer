
preTTY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000090  00800100  00000372  00000406  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000372  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000104  00800190  00800190  00000496  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000496  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008b5  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e3  00000000  00000000  00000e0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000381  00000000  00000000  000014f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00001874  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003fe  00000000  00000000  00001988  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000030a  00000000  00000000  00001d86  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002090  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 97 00 	jmp	0x12e	; 0x12e <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e7       	ldi	r30, 0x72	; 114
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 39       	cpi	r26, 0x90	; 144
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a0 e9       	ldi	r26, 0x90	; 144
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 39       	cpi	r26, 0x94	; 148
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 63 01 	call	0x2c6	; 0x2c6 <main>
  9e:	0c 94 b7 01 	jmp	0x36e	; 0x36e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setDataBus>:

unsigned int long	baud[] = {1200, 2400, 4800, 9600, 14400, 19200, 28800, 38400, 57600, 125000, 250000};

void setDataBus(int modus)
{
	if (modus == asInput)	// Write zeros to PORTs
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	39 f4       	brne	.+14     	; 0xb8 <setDataBus+0x12>
	{
		DDRB &= ~0x07;
  aa:	84 b1       	in	r24, 0x04	; 4
  ac:	88 7f       	andi	r24, 0xF8	; 248
  ae:	84 b9       	out	0x04, r24	; 4
		DDRD &= ~0xf8;
  b0:	8a b1       	in	r24, 0x0a	; 10
  b2:	87 70       	andi	r24, 0x07	; 7
  b4:	8a b9       	out	0x0a, r24	; 10
  b6:	08 95       	ret
	}
	else					// Write ones to PORTs
	{
		DDRB |= 0x07;
  b8:	84 b1       	in	r24, 0x04	; 4
  ba:	87 60       	ori	r24, 0x07	; 7
  bc:	84 b9       	out	0x04, r24	; 4
		DDRD |= 0xf8;
  be:	8a b1       	in	r24, 0x0a	; 10
  c0:	88 6f       	ori	r24, 0xF8	; 248
  c2:	8a b9       	out	0x0a, r24	; 10
  c4:	08 95       	ret

000000c6 <xmit>:
	}
}

void xmit(char toSend)
{
	while ( !( UCSR0A & (1<<UDRE0)) )
  c6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  ca:	95 ff       	sbrs	r25, 5
  cc:	fc cf       	rjmp	.-8      	; 0xc6 <xmit>
	{}
	UDR0 = toSend;
  ce:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  d2:	08 95       	ret

000000d4 <reply>:
}

void reply(char toPost)
{
  d4:	cf 93       	push	r28
  d6:	c8 2f       	mov	r28, r24
	setDataBus(asOutput);
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 53 00 	call	0xa6	; 0xa6 <setDataBus>
	PORTB = (PINB&~0x7)|(toPost&0x7);
  e0:	83 b1       	in	r24, 0x03	; 3
  e2:	88 7f       	andi	r24, 0xF8	; 248
  e4:	9c 2f       	mov	r25, r28
  e6:	97 70       	andi	r25, 0x07	; 7
  e8:	89 2b       	or	r24, r25
  ea:	85 b9       	out	0x05, r24	; 5
	PORTD = (PIND&~0xf8)|(toPost&0xf8);
  ec:	89 b1       	in	r24, 0x09	; 9
  ee:	87 70       	andi	r24, 0x07	; 7
  f0:	c8 7f       	andi	r28, 0xF8	; 248
  f2:	c8 2b       	or	r28, r24
  f4:	cb b9       	out	0x0b, r28	; 11

	RSM_LO;							// Release wait line
  f6:	88 b1       	in	r24, 0x08	; 8
  f8:	87 7f       	andi	r24, 0xF7	; 247
  fa:	88 b9       	out	0x08, r24	; 8
	RSM_HI;
  fc:	88 b1       	in	r24, 0x08	; 8
  fe:	88 60       	ori	r24, 0x08	; 8
 100:	88 b9       	out	0x08, r24	; 8

	setDataBus(asInput);
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 53 00 	call	0xa6	; 0xa6 <setDataBus>
}
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <USART_Init>:

void USART_Init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 10e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 112:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	/* Enable double speed */
	UCSR0A |= (1<<U2X0);
 116:	e0 ec       	ldi	r30, 0xC0	; 192
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	82 60       	ori	r24, 0x02	; 2
 11e:	80 83       	st	Z, r24

	/* Enable receiver, transmitter and also RX_complete_interrupt */
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 120:	88 e9       	ldi	r24, 0x98	; 152
 122:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	/* Set frame format: 8N1 */
	UCSR0C = (3<<UCSZ00);
 126:	86 e0       	ldi	r24, 0x06	; 6
 128:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 12c:	08 95       	ret

0000012e <__vector_18>:
}

ISR(USART_RX_vect)
{
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1
 138:	2f 93       	push	r18
 13a:	3f 93       	push	r19
 13c:	4f 93       	push	r20
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	ef 93       	push	r30
 144:	ff 93       	push	r31
	uBuffRX[uBuffRX_inPtr++] = UDR0;
 146:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <uBuffRX_inPtr>
 14a:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <uBuffRX_inPtr+0x1>
 14e:	9c 01       	movw	r18, r24
 150:	2f 5f       	subi	r18, 0xFF	; 255
 152:	3f 4f       	sbci	r19, 0xFF	; 255
 154:	30 93 93 01 	sts	0x0193, r19	; 0x800193 <uBuffRX_inPtr+0x1>
 158:	20 93 92 01 	sts	0x0192, r18	; 0x800192 <uBuffRX_inPtr>
 15c:	40 91 c6 00 	lds	r20, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 160:	fc 01       	movw	r30, r24
 162:	ec 56       	subi	r30, 0x6C	; 108
 164:	fe 4f       	sbci	r31, 0xFE	; 254
 166:	40 83       	st	Z, r20
	if (uBuffRX_inPtr == MAXBUFF)
 168:	21 15       	cp	r18, r1
 16a:	31 40       	sbci	r19, 0x01	; 1
 16c:	21 f4       	brne	.+8      	; 0x176 <__vector_18+0x48>
		uBuffRX_inPtr = 0;
 16e:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <uBuffRX_inPtr+0x1>
 172:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <uBuffRX_inPtr>
}
 176:	ff 91       	pop	r31
 178:	ef 91       	pop	r30
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	4f 91       	pop	r20
 180:	3f 91       	pop	r19
 182:	2f 91       	pop	r18
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <__vector_1>:

ISR(INT0_vect)									// We got a chip_select (CPU wants something)
{
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	2f 93       	push	r18
 19a:	3f 93       	push	r19
 19c:	4f 93       	push	r20
 19e:	5f 93       	push	r21
 1a0:	6f 93       	push	r22
 1a2:	7f 93       	push	r23
 1a4:	8f 93       	push	r24
 1a6:	9f 93       	push	r25
 1a8:	af 93       	push	r26
 1aa:	bf 93       	push	r27
 1ac:	ef 93       	push	r30
 1ae:	ff 93       	push	r31
	char				operation;
	char				dataByte;
	unsigned long int	newBaud;
	
	operation = PINC & 0x7;						// Snapshots from I/O pins
 1b0:	96 b1       	in	r25, 0x06	; 6
 1b2:	97 70       	andi	r25, 0x07	; 7
	dataByte = (PIND & 0xf8)|(PINB & 0x07);
 1b4:	e9 b1       	in	r30, 0x09	; 9
 1b6:	83 b1       	in	r24, 0x03	; 3
 1b8:	e8 7f       	andi	r30, 0xF8	; 248
 1ba:	87 70       	andi	r24, 0x07	; 7
 1bc:	8e 2b       	or	r24, r30

	switch (operation)
 1be:	93 30       	cpi	r25, 0x03	; 3
 1c0:	09 f4       	brne	.+2      	; 0x1c4 <__vector_1+0x36>
 1c2:	52 c0       	rjmp	.+164    	; 0x268 <__vector_1+0xda>
 1c4:	20 f4       	brcc	.+8      	; 0x1ce <__vector_1+0x40>
 1c6:	92 30       	cpi	r25, 0x02	; 2
 1c8:	09 f4       	brne	.+2      	; 0x1cc <__vector_1+0x3e>
 1ca:	45 c0       	rjmp	.+138    	; 0x256 <__vector_1+0xc8>
 1cc:	6b c0       	rjmp	.+214    	; 0x2a4 <__vector_1+0x116>
 1ce:	94 30       	cpi	r25, 0x04	; 4
 1d0:	19 f0       	breq	.+6      	; 0x1d8 <__vector_1+0x4a>
 1d2:	95 30       	cpi	r25, 0x05	; 5
 1d4:	69 f1       	breq	.+90     	; 0x230 <__vector_1+0xa2>
 1d6:	66 c0       	rjmp	.+204    	; 0x2a4 <__vector_1+0x116>
	{
		case RD_DATA:							// Read data request
			if (uBuffRX_inPtr != uBuffRX_outPtr)
 1d8:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <uBuffRX_inPtr>
 1dc:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <uBuffRX_inPtr+0x1>
 1e0:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <__data_end>
 1e4:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <__data_end+0x1>
 1e8:	28 17       	cp	r18, r24
 1ea:	39 07       	cpc	r19, r25
 1ec:	d1 f0       	breq	.+52     	; 0x222 <__vector_1+0x94>
			{
				reply(uBuffRX[uBuffRX_outPtr++]);
 1ee:	9c 01       	movw	r18, r24
 1f0:	2f 5f       	subi	r18, 0xFF	; 255
 1f2:	3f 4f       	sbci	r19, 0xFF	; 255
 1f4:	30 93 91 01 	sts	0x0191, r19	; 0x800191 <__data_end+0x1>
 1f8:	20 93 90 01 	sts	0x0190, r18	; 0x800190 <__data_end>
 1fc:	fc 01       	movw	r30, r24
 1fe:	ec 56       	subi	r30, 0x6C	; 108
 200:	fe 4f       	sbci	r31, 0xFE	; 254
 202:	80 81       	ld	r24, Z
 204:	0e 94 6a 00 	call	0xd4	; 0xd4 <reply>
				if (uBuffRX_outPtr == MAXBUFF)
 208:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <__data_end>
 20c:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <__data_end+0x1>
 210:	81 15       	cp	r24, r1
 212:	91 40       	sbci	r25, 0x01	; 1
 214:	09 f0       	breq	.+2      	; 0x218 <__vector_1+0x8a>
 216:	46 c0       	rjmp	.+140    	; 0x2a4 <__vector_1+0x116>
					uBuffRX_outPtr = 0;
 218:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <__data_end+0x1>
 21c:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <__data_end>
 220:	41 c0       	rjmp	.+130    	; 0x2a4 <__vector_1+0x116>
			}
			else
			{
				RSM_LO;							// Release wait line
 222:	88 b1       	in	r24, 0x08	; 8
 224:	87 7f       	andi	r24, 0xF7	; 247
 226:	88 b9       	out	0x08, r24	; 8
				RSM_HI;
 228:	88 b1       	in	r24, 0x08	; 8
 22a:	88 60       	ori	r24, 0x08	; 8
 22c:	88 b9       	out	0x08, r24	; 8
 22e:	3a c0       	rjmp	.+116    	; 0x2a4 <__vector_1+0x116>
			}
		break;
		
		case RD_STATUS:							// Read status request
			if (uBuffRX_inPtr != uBuffRX_outPtr)	// Put 0xff on data bus
 230:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <uBuffRX_inPtr>
 234:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <uBuffRX_inPtr+0x1>
 238:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <__data_end>
 23c:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <__data_end+0x1>
 240:	28 17       	cp	r18, r24
 242:	39 07       	cpc	r19, r25
 244:	21 f0       	breq	.+8      	; 0x24e <__vector_1+0xc0>
				reply(0xff);
 246:	8f ef       	ldi	r24, 0xFF	; 255
 248:	0e 94 6a 00 	call	0xd4	; 0xd4 <reply>
 24c:	2b c0       	rjmp	.+86     	; 0x2a4 <__vector_1+0x116>
			else								// Put 00 on data bus
				reply(0);
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	0e 94 6a 00 	call	0xd4	; 0xd4 <reply>
 254:	27 c0       	rjmp	.+78     	; 0x2a4 <__vector_1+0x116>
		break;
		
		case WR_DATA:							// write data request
			xmit(dataByte);
 256:	0e 94 63 00 	call	0xc6	; 0xc6 <xmit>
			RSM_LO;								// Release wait line
 25a:	88 b1       	in	r24, 0x08	; 8
 25c:	87 7f       	andi	r24, 0xF7	; 247
 25e:	88 b9       	out	0x08, r24	; 8
			RSM_HI;
 260:	88 b1       	in	r24, 0x08	; 8
 262:	88 60       	ori	r24, 0x08	; 8
 264:	88 b9       	out	0x08, r24	; 8
		break;
 266:	1e c0       	rjmp	.+60     	; 0x2a4 <__vector_1+0x116>
		
		case WR_COMMAND:						// write command request
			if (dataByte < 11)
 268:	8b 30       	cpi	r24, 0x0B	; 11
 26a:	b0 f4       	brcc	.+44     	; 0x298 <__vector_1+0x10a>
			{
				newBaud = baud[(int) dataByte];
 26c:	e8 2f       	mov	r30, r24
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	ee 0f       	add	r30, r30
 272:	ff 1f       	adc	r31, r31
 274:	ee 0f       	add	r30, r30
 276:	ff 1f       	adc	r31, r31
 278:	e0 50       	subi	r30, 0x00	; 0
 27a:	ff 4f       	sbci	r31, 0xFF	; 255
 27c:	20 81       	ld	r18, Z
 27e:	31 81       	ldd	r19, Z+1	; 0x01
 280:	42 81       	ldd	r20, Z+2	; 0x02
 282:	53 81       	ldd	r21, Z+3	; 0x03
				USART_Init((F_CPU/8/newBaud)-1);
 284:	60 ea       	ldi	r22, 0xA0	; 160
 286:	75 e2       	ldi	r23, 0x25	; 37
 288:	86 e2       	ldi	r24, 0x26	; 38
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 95 01 	call	0x32a	; 0x32a <__udivmodsi4>
 290:	c9 01       	movw	r24, r18
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	0e 94 87 00 	call	0x10e	; 0x10e <USART_Init>
			}
			RSM_LO;								// Release wait line
 298:	88 b1       	in	r24, 0x08	; 8
 29a:	87 7f       	andi	r24, 0xF7	; 247
 29c:	88 b9       	out	0x08, r24	; 8
			RSM_HI;
 29e:	88 b1       	in	r24, 0x08	; 8
 2a0:	88 60       	ori	r24, 0x08	; 8
 2a2:	88 b9       	out	0x08, r24	; 8
		break;
	}
}
 2a4:	ff 91       	pop	r31
 2a6:	ef 91       	pop	r30
 2a8:	bf 91       	pop	r27
 2aa:	af 91       	pop	r26
 2ac:	9f 91       	pop	r25
 2ae:	8f 91       	pop	r24
 2b0:	7f 91       	pop	r23
 2b2:	6f 91       	pop	r22
 2b4:	5f 91       	pop	r21
 2b6:	4f 91       	pop	r20
 2b8:	3f 91       	pop	r19
 2ba:	2f 91       	pop	r18
 2bc:	0f 90       	pop	r0
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	0f 90       	pop	r0
 2c2:	1f 90       	pop	r1
 2c4:	18 95       	reti

000002c6 <main>:

int main(void)
{
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	cd b7       	in	r28, 0x3d	; 61
 2cc:	de b7       	in	r29, 0x3e	; 62
 2ce:	c4 56       	subi	r28, 0x64	; 100
 2d0:	d1 09       	sbc	r29, r1
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	f8 94       	cli
 2d6:	de bf       	out	0x3e, r29	; 62
 2d8:	0f be       	out	0x3f, r0	; 63
 2da:	cd bf       	out	0x3d, r28	; 61
	char	iniMsg[] = "\r\n*** TTY Card - firmware v1.0. ***\r\
 2dc:	84 e6       	ldi	r24, 0x64	; 100
 2de:	ec e2       	ldi	r30, 0x2C	; 44
 2e0:	f1 e0       	ldi	r31, 0x01	; 1
 2e2:	de 01       	movw	r26, r28
 2e4:	11 96       	adiw	r26, 0x01	; 1
 2e6:	01 90       	ld	r0, Z+
 2e8:	0d 92       	st	X+, r0
 2ea:	8a 95       	dec	r24
 2ec:	e1 f7       	brne	.-8      	; 0x2e6 <main+0x20>
	                       n*** by Kaltchuk, sep/2021.    ***\r\n\r\n\0";
	int		i=0;
	
	USART_Init(MYUBRR);		// Initialize USART
 2ee:	89 e0       	ldi	r24, 0x09	; 9
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 87 00 	call	0x10e	; 0x10e <USART_Init>

int main(void)
{
	char	iniMsg[] = "\r\n*** TTY Card - firmware v1.0. ***\r\
	                       n*** by Kaltchuk, sep/2021.    ***\r\n\r\n\0";
	int		i=0;
 2f6:	00 e0       	ldi	r16, 0x00	; 0
 2f8:	10 e0       	ldi	r17, 0x00	; 0
	
	USART_Init(MYUBRR);		// Initialize USART
	while ( iniMsg[i] != 0)	
 2fa:	04 c0       	rjmp	.+8      	; 0x304 <main+0x3e>
	{
		xmit(iniMsg[i++]);
 2fc:	0f 5f       	subi	r16, 0xFF	; 255
 2fe:	1f 4f       	sbci	r17, 0xFF	; 255
 300:	0e 94 63 00 	call	0xc6	; 0xc6 <xmit>
	char	iniMsg[] = "\r\n*** TTY Card - firmware v1.0. ***\r\
	                       n*** by Kaltchuk, sep/2021.    ***\r\n\r\n\0";
	int		i=0;
	
	USART_Init(MYUBRR);		// Initialize USART
	while ( iniMsg[i] != 0)	
 304:	e1 e0       	ldi	r30, 0x01	; 1
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	ec 0f       	add	r30, r28
 30a:	fd 1f       	adc	r31, r29
 30c:	e0 0f       	add	r30, r16
 30e:	f1 1f       	adc	r31, r17
 310:	80 81       	ld	r24, Z
 312:	81 11       	cpse	r24, r1
 314:	f3 cf       	rjmp	.-26     	; 0x2fc <main+0x36>
	{
		xmit(iniMsg[i++]);
	}
	DDRC |= (1<<RSM);		// Configure RSM pin as output
 316:	87 b1       	in	r24, 0x07	; 7
 318:	88 60       	ori	r24, 0x08	; 8
 31a:	87 b9       	out	0x07, r24	; 7
	RSM_HI;					// Turn off RSM (active low)
 31c:	88 b1       	in	r24, 0x08	; 8
 31e:	88 60       	ori	r24, 0x08	; 8
 320:	88 b9       	out	0x08, r24	; 8
	EIMSK = (1<<INT0);		// Enable INT0 (chip select)
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	8d bb       	out	0x1d, r24	; 29
	
	sei();
 326:	78 94       	sei
 328:	ff cf       	rjmp	.-2      	; 0x328 <main+0x62>

0000032a <__udivmodsi4>:
 32a:	a1 e2       	ldi	r26, 0x21	; 33
 32c:	1a 2e       	mov	r1, r26
 32e:	aa 1b       	sub	r26, r26
 330:	bb 1b       	sub	r27, r27
 332:	fd 01       	movw	r30, r26
 334:	0d c0       	rjmp	.+26     	; 0x350 <__udivmodsi4_ep>

00000336 <__udivmodsi4_loop>:
 336:	aa 1f       	adc	r26, r26
 338:	bb 1f       	adc	r27, r27
 33a:	ee 1f       	adc	r30, r30
 33c:	ff 1f       	adc	r31, r31
 33e:	a2 17       	cp	r26, r18
 340:	b3 07       	cpc	r27, r19
 342:	e4 07       	cpc	r30, r20
 344:	f5 07       	cpc	r31, r21
 346:	20 f0       	brcs	.+8      	; 0x350 <__udivmodsi4_ep>
 348:	a2 1b       	sub	r26, r18
 34a:	b3 0b       	sbc	r27, r19
 34c:	e4 0b       	sbc	r30, r20
 34e:	f5 0b       	sbc	r31, r21

00000350 <__udivmodsi4_ep>:
 350:	66 1f       	adc	r22, r22
 352:	77 1f       	adc	r23, r23
 354:	88 1f       	adc	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	1a 94       	dec	r1
 35a:	69 f7       	brne	.-38     	; 0x336 <__udivmodsi4_loop>
 35c:	60 95       	com	r22
 35e:	70 95       	com	r23
 360:	80 95       	com	r24
 362:	90 95       	com	r25
 364:	9b 01       	movw	r18, r22
 366:	ac 01       	movw	r20, r24
 368:	bd 01       	movw	r22, r26
 36a:	cf 01       	movw	r24, r30
 36c:	08 95       	ret

0000036e <_exit>:
 36e:	f8 94       	cli

00000370 <__stop_program>:
 370:	ff cf       	rjmp	.-2      	; 0x370 <__stop_program>
