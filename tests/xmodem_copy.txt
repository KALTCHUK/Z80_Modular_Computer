A>c:
C>type xmodem.c
/* XMODEM 1.0 - by Kaltchuk, 2021 */

#include <stdio.h>

#define CONST   2
#define CONIN   3
#define CONOUT  4

#define IOBYTE  3
#define SEND    0
#define REC     1
#define OFF     0
#define ON      1
#define TIMEOUT -1
#define OK      1
#define NOTOK   0
#define MAXTRY  10

/* ASCII keys */
#define SOH     1
#define EOT     4
#define ACK     6
#define DC1     17
#define NAK     0x15
#define CAN     0x18
#define ESC     0x1B

char    receivedByte;
int     blockCount, lcd, fd;

/* ******************************* */
/* ********** FUNCTIONS ********** */
/* ******************************* */

int Recv(time)
int     time; {
        int     i;

        i = 0;
        time = time * 4000;

        do {
                if (bios(CONST) != 0) {
                        receivedByte = bios(CONIN);
                        return (i);
                }
        } while (i++ < time);
        receivedByte = 0;
        return (-1);
}

Send(letter)
char    letter; {
        bios(CONOUT, letter);
}

char ReceiveBlock() {

        lprintf("\nREC BLOCK       ");
        return (ACK);
}

ParmErr() {
        printf("\XMODEM 1.0 - by Kaltchuk, 2021.\n\n");
        printf("Use: XMODEM file_name -options\n");
        printf("options:  r receive file\n");
        printf("          s send file\n");
        printf("          l use LCD for status output\n");
        exit();
}

WriteErr() {
        Send(CAN);
        if (lcd == ON)  lprintf("\nFWRITE ERROR    ");
        printf("File write error.\n");
        exit();
}

SyncErr() {
        if (lcd == ON)  lprintf("\nSYNC ERROR      ");
        printf("Unable to sync with RTU.\n");
        exit();
}

TimeErr() {
        if (lcd == ON)  lprintf("\nRTU TIMEOUT     ");
        printf("RTU Timeout.");
        exit();
}

BlockErr() {
        Send(CAN);
        if (lcd == ON)  lprintf("\nBLOCK ERROR     ");
        Purge();
        printf("Block count error.\n");
        exit();
}

Purge() {
        do {
        } while (Recv(3) != TIMEOUT);
}

LCDinit() {
        char    io;

        poke(IOBYTE, 0xC0);
        lprintf("%cXMODEM 1.0", DC1);
}

WrapUp() {
        Send(NAK);
        Recv(1);
        Send(ACK);
        if (close(fd) == -1) {
                if (lcd == ON) lprintf("\nFCLOSE ERROR    ");
        } else {
                fprintf("Transmission completed. %d blocks received.\n", blockCount);
                if (lcd == ON)  lprintf("\nEND            ");
        }
        exit();
}

/* ******************************* */
/* ********* MAIN PROGRAM ******** */
/* ******************************* */
main(argc, argv)
int     argc;
char    *argv[]; {
        int     i, fd;
        char    op, lcd, init;
        int     retryCount, blockCount, byteCount;
        char    checksum, something;
        char    file_name[15];

        if (argc != 3) {
                ParmErr();
        }
        strcpy(file_name, argv[1]);

        op = REC;               /* Set op to Receive */
        lcd = OFF;              /* LCD off */

        if (index(argv[2], "S") != -1)   op = SEND;
        if (index(argv[2], "L") != -1)   lcd = ON;

        if (op == 0)    printf("Send ");
        else            printf("Receive ");

        printf("%s", file_name);

        if (lcd == ON) {
                printf(", send status to LCD");
                LCDinit();
        }

        retryCount = 0;
        blockCount = 0;

        if (op == REC) {        /* Receive operation starts here */
                fd = creat(file_name);
                if (fd == -1) {
                        if (lcd == ON) lprintf("\nFCREATE ERR");
                        exit();
                }
                something = NAK;
                do {
                        Send(something);
                        if(Recv(5) == TIMEOUT) {
                                retryCount++;
                                if (retryCount > MAXTRY) SyncErr();
                        } else {
                                switch(receivedByte) {
                                        case EOT:
                                                lprintf("\nEOT             ");
                                                WrapUp();
                                                break;
                                        case SOH:
                                                lprintf("\nSOH             ");
                                                retryCount = 0;
                                                something = ReceiveBlock();
                                                break;
                                        case CAN:
                                                if (lcd == ON)
                                                        lprintf("\nRTU CANCEL      ");
                                                exit();
                                        default:
                                                lprintf("\nELSE            ");
                                                retryCout++;
                                                if (retryCount > MAXTRY) SyncErr();
                                }
                        }
                } while (1);
        }
        else {                  /* Send operation starts here */


        }
        exit();
}

/* ======================= */

/*      char    block, blockNeg;
        int     byteCount;
        char    checkSum;
        char    buffer[129];*/

C>
