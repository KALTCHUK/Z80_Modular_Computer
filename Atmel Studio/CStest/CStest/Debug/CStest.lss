
CStest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008b4  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f0  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000365  00000000  00000000  00001248  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  000015b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fa  00000000  00000000  00001668  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000027c  00000000  00000000  00001a62  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001cde  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_1>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 c1 00 	call	0x182	; 0x182 <main>
  78:	0c 94 ce 00 	jmp	0x19c	; 0x19c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <xmit>:
#define CR		0x0d
#define LF		0x0a

void xmit(char send_this)
{
	while ( !( UCSR0A & (1<<UDRE0)) )
  80:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  84:	95 ff       	sbrs	r25, 5
  86:	fc cf       	rjmp	.-8      	; 0x80 <xmit>
	{}
	UDR0 = send_this;
  88:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  8c:	08 95       	ret

0000008e <xmitHex>:
}

void xmitHex(char bite)
{
  8e:	cf 93       	push	r28
  90:	c8 2f       	mov	r28, r24
	char	finale=0;
	char	bite2;
	
	bite2 = (bite>>4);
  92:	82 95       	swap	r24
  94:	8f 70       	andi	r24, 0x0F	; 15
	if (bite2 > 9)
  96:	8a 30       	cpi	r24, 0x0A	; 10
  98:	10 f0       	brcs	.+4      	; 0x9e <xmitHex+0x10>
		finale = bite2 + 0x37;
  9a:	89 5c       	subi	r24, 0xC9	; 201
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <xmitHex+0x12>
	else
		finale = bite2 + 0x30;
  9e:	80 5d       	subi	r24, 0xD0	; 208
	xmit(finale);
  a0:	0e 94 40 00 	call	0x80	; 0x80 <xmit>
	
	bite2 = (bite&0xf);
  a4:	cf 70       	andi	r28, 0x0F	; 15
	if (bite2 > 9)
  a6:	ca 30       	cpi	r28, 0x0A	; 10
  a8:	18 f0       	brcs	.+6      	; 0xb0 <xmitHex+0x22>
		finale = bite2 + 0x37;
  aa:	87 e3       	ldi	r24, 0x37	; 55
  ac:	8c 0f       	add	r24, r28
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <xmitHex+0x26>
	else
		finale = bite2 + 0x30;
  b0:	80 e3       	ldi	r24, 0x30	; 48
  b2:	8c 0f       	add	r24, r28
	xmit(finale);
  b4:	0e 94 40 00 	call	0x80	; 0x80 <xmit>
}
  b8:	cf 91       	pop	r28
  ba:	08 95       	ret

000000bc <USART_Init>:

void USART_Init( unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
  bc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
  c0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	/* Enable receiver, transmitter and RX_complete interrupt */
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
  c4:	88 e9       	ldi	r24, 0x98	; 152
  c6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	/* Set frame format: 8N1 */
	UCSR0C = (3<<UCSZ00);
  ca:	86 e0       	ldi	r24, 0x06	; 6
  cc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	xmit('T');
  d0:	84 e5       	ldi	r24, 0x54	; 84
  d2:	0e 94 40 00 	call	0x80	; 0x80 <xmit>
	xmit('T');
  d6:	84 e5       	ldi	r24, 0x54	; 84
  d8:	0e 94 40 00 	call	0x80	; 0x80 <xmit>
	xmit('Y');
  dc:	89 e5       	ldi	r24, 0x59	; 89
  de:	0e 94 40 00 	call	0x80	; 0x80 <xmit>
	xmit(CR);
  e2:	8d e0       	ldi	r24, 0x0D	; 13
  e4:	0e 94 40 00 	call	0x80	; 0x80 <xmit>
	xmit(LF);
  e8:	8a e0       	ldi	r24, 0x0A	; 10
  ea:	0e 94 40 00 	call	0x80	; 0x80 <xmit>
  ee:	08 95       	ret

000000f0 <__vector_1>:

}

ISR(INT0_vect)			// Houston, we got a chip_select... CPU wants something
{
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	2f 93       	push	r18
  fc:	3f 93       	push	r19
  fe:	4f 93       	push	r20
 100:	5f 93       	push	r21
 102:	6f 93       	push	r22
 104:	7f 93       	push	r23
 106:	8f 93       	push	r24
 108:	9f 93       	push	r25
 10a:	af 93       	push	r26
 10c:	bf 93       	push	r27
 10e:	cf 93       	push	r28
 110:	ef 93       	push	r30
 112:	ff 93       	push	r31
	char	operation;		//snapshots from I/O pins
	char	dataByte;
		
	operation = PINC & 0x7;
 114:	86 b1       	in	r24, 0x06	; 6
	dataByte  = (PINB&0x7)|(PIND&0xf8);
 116:	c3 b1       	in	r28, 0x03	; 3
 118:	99 b1       	in	r25, 0x09	; 9
 11a:	c7 70       	andi	r28, 0x07	; 7
 11c:	98 7f       	andi	r25, 0xF8	; 248
 11e:	c9 2b       	or	r28, r25

	xmitHex(operation);
 120:	87 70       	andi	r24, 0x07	; 7
 122:	0e 94 47 00 	call	0x8e	; 0x8e <xmitHex>
	xmit('-');
 126:	8d e2       	ldi	r24, 0x2D	; 45
 128:	0e 94 40 00 	call	0x80	; 0x80 <xmit>
	xmitHex(dataByte);
 12c:	8c 2f       	mov	r24, r28
 12e:	0e 94 47 00 	call	0x8e	; 0x8e <xmitHex>
	xmit('.');
 132:	8e e2       	ldi	r24, 0x2E	; 46
 134:	0e 94 40 00 	call	0x80	; 0x80 <xmit>
	xmit(' ');
 138:	80 e2       	ldi	r24, 0x20	; 32
 13a:	0e 94 40 00 	call	0x80	; 0x80 <xmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13e:	2a e2       	ldi	r18, 0x2A	; 42
 140:	30 e5       	ldi	r19, 0x50	; 80
 142:	8e ef       	ldi	r24, 0xFE	; 254
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	21 50       	subi	r18, 0x01	; 1
 148:	30 40       	sbci	r19, 0x00	; 0
 14a:	80 40       	sbci	r24, 0x00	; 0
 14c:	90 40       	sbci	r25, 0x00	; 0
 14e:	d9 f7       	brne	.-10     	; 0x146 <__vector_1+0x56>
 150:	00 00       	nop
	
	_delay_ms(5000);
	
	RSM_LO;
 152:	88 b1       	in	r24, 0x08	; 8
 154:	87 7f       	andi	r24, 0xF7	; 247
 156:	88 b9       	out	0x08, r24	; 8
	RSM_HI;
 158:	88 b1       	in	r24, 0x08	; 8
 15a:	88 60       	ori	r24, 0x08	; 8
 15c:	88 b9       	out	0x08, r24	; 8
}
 15e:	ff 91       	pop	r31
 160:	ef 91       	pop	r30
 162:	cf 91       	pop	r28
 164:	bf 91       	pop	r27
 166:	af 91       	pop	r26
 168:	9f 91       	pop	r25
 16a:	8f 91       	pop	r24
 16c:	7f 91       	pop	r23
 16e:	6f 91       	pop	r22
 170:	5f 91       	pop	r21
 172:	4f 91       	pop	r20
 174:	3f 91       	pop	r19
 176:	2f 91       	pop	r18
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <main>:

int main(void)
{
	USART_Init(MYUBRR);
 182:	8f e1       	ldi	r24, 0x1F	; 31
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Init>
	
//	DDRC |= (1<<RSM);
	DDRC = 8;
 18a:	88 e0       	ldi	r24, 0x08	; 8
 18c:	87 b9       	out	0x07, r24	; 7
	RSM_HI;
 18e:	88 b1       	in	r24, 0x08	; 8
 190:	88 60       	ori	r24, 0x08	; 8
 192:	88 b9       	out	0x08, r24	; 8
	EIMSK = (1<<INT0);		// enable INT0 (CS)
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	8d bb       	out	0x1d, r24	; 29
	
	sei();
 198:	78 94       	sei
 19a:	ff cf       	rjmp	.-2      	; 0x19a <main+0x18>

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>
