0001   0000             ;==================================================================================
0002   0000             ; Contents of this file are copyright Grant Searle
0003   0000             ; Blocking/unblocking routines are the published version by Digital Research
0004   0000             ; (bugfixed, as found on the web)
0005   0000             ;
0006   0000             ; You have permission to use this for NON COMMERCIAL USE ONLY
0007   0000             ; If you wish to use it elsewhere, please include an acknowledgement to myself.
0008   0000             ;
0009   0000             ; http://searle.hostei.com/grant/index.html
0010   0000             ;
0011   0000             ; eMail: home.micros01@btinternet.com
0012   0000             ;
0013   0000             ; If the above don't work, please perform an Internet search to see if I have
0014   0000             ; updated the web page hosting service.
0015   0000             ;
0016   0000             ; Customized by Kaltchuk for use with Z80 Modular Computer, december/2020.
0017   0000             ;
0018   0000             ;==================================================================================
0019   0000             
0020   0000             ccp				.EQU	0D000h			; Base of CCP.
0021   0000             bdos			.EQU	ccp + 0806h		; Base of BDOS.
0022   0000             bios			.EQU	ccp + 1600h		; Base of BIOS.
0023   0000             
0024   0000             ; Set CP/M low memory data, vector and buffer addresses.
0025   0000             
0026   0000             iobyte			.EQU	03h				; Intel standard I/O definition byte.
0027   0000             userdrv			.EQU	04h				; Current user number and drive.
0028   0000             tpabuf			.EQU	80h				; Default I/O buffer and command line storage.
0029   0000             
0030   0000             blksiz			.equ	4096			;CP/M allocation size
0031   0000             hstsiz			.equ	512				;host disk sector size
0032   0000             hstspt			.equ	32				;host disk sectors/trk
0033   0000             hstblk			.equ	hstsiz/128		;CP/M sects/host buff
0034   0000             cpmspt			.equ	hstblk * hstspt	;CP/M sectors/track
0035   0000             secmsk			.equ	hstblk-1		;sector mask
0036   0000             										;compute sector mask
0037   0000             ;secshf			.equ	2				;log2(hstblk)
0038   0000             	
0039   0000             wrall			.equ	0				;write to allocated
0040   0000             wrdir			.equ	1				;write to directory
0041   0000             wrual			.equ	2				;write to unallocated
0042   0000             
0043   0000             ; MEM card stuff
0044   0000             ROM_RAM0		.EQU	0F0H			; ROM + RAM bank 0
0045   0000             NOROM_RAM0		.EQU	0F1H			; no ROM + RAM bank 0 (full RAM)
0046   0000             ROM_RAM1		.EQU	0F2H			; ROM + RAM bank 1
0047   0000             NOROM_RAM1		.EQU	0F3H			; no ROM + RAM bank 1 (full RAM)
0048   0000             
0049   0000             ; USART card stuff
0050   0000             USART_DAT		.EQU	0D0H			; USART data addr
0051   0000             USART_CMD		.EQU	0D1H			; USART command addr
0052   0000             USART_STA		.EQU	0D1H			; USART status addr
0053   0000             UMODE			.EQU	06FH			; 8N1 (8 bit, no parity, 1 stop), baud=clock/64
0054   0000             UCMD0			.EQU	015H			; initial command: Rx enable, Tx enable, reset error flags
0055   0000             
0056   0000             ; FLASH card stuff
0057   0000             FLASH_ADDR		.EQU	0B0H			; Base I/O address for compact flash card
0058   0000             ; CF registers
0059   0000             CF_DATA			.EQU	(FLASH_ADDR+0)	; R/W
0060   0000             CF_FEATURES		.EQU	(FLASH_ADDR+1)	; W
0061   0000             CF_ERROR		.EQU	(FLASH_ADDR+1)	; R
0062   0000             CF_SECCOUNT		.EQU	(FLASH_ADDR+2)	; W
0063   0000             
0064   0000             CF_SECTOR		.EQU	(FLASH_ADDR+3)	; W
0065   0000             CF_CYL_LOW		.EQU	(FLASH_ADDR+4)	; W
0066   0000             CF_CYL_HI		.EQU	(FLASH_ADDR+5)	; W
0067   0000             CF_HEAD			.EQU	(FLASH_ADDR+6)	; W
0068   0000             
0069   0000             CF_LBA0			.EQU	(FLASH_ADDR+3)	; W
0070   0000             CF_LBA1			.EQU	(FLASH_ADDR+4)	; W
0071   0000             CF_LBA2			.EQU	(FLASH_ADDR+5)	; W
0072   0000             CF_LBA3			.EQU	(FLASH_ADDR+6)	; W
0073   0000             
0074   0000             CF_STATUS		.EQU	(FLASH_ADDR+7)	; R
0075   0000             CF_COMMAND		.EQU	(FLASH_ADDR+7)	; W
0076   0000             
0077   0000             ;CF Features
0078   0000             CF_8BIT			.EQU	1
0079   0000             CF_NOCACHE		.EQU	082H
0080   0000             
0081   0000             ;CF Commands
0082   0000             CF_READ_SEC		.EQU	020H
0083   0000             CF_WRITE_SEC	.EQU	030H
0084   0000             CF_SET_FEAT		.EQU 	0EFH
0085   0000             
0086   0000             LF				.EQU	0AH				;line feed
0087   0000             FF				.EQU	0CH				;form feed
0088   0000             CR				.EQU	0DH				;carriage RETurn
0089   0000             
0090   0000             ;================================================================================================
0091   0000             
0092   E600             		.ORG	bios					; BIOS origin.
0093   E600             
0094   E600             ;================================================================================================
0095   E600             ; BIOS jump table.
0096   E600             ;================================================================================================
0097   E600 C3 63 E7    		JP	boot						;  0 Initialize.
0098   E603 C3 FD E7    wboote:	JP	wboot						;  1 Warm boot.
0099   E606 C3 B2 E8    		JP	CONST						;  2 Console status.
0100   E609 C3 C5 E8    		JP	CONIN						;  3 Console input.
0101   E60C C3 E7 E8    		JP	CONOUT						;  4 Console OUTput.
0102   E60F C3 F4 E8    		JP	LIST						;  5 List OUTput.
0103   E612 C3 F7 E8    		JP	PUNCH						;  6 punch OUTput.
0104   E615 C3 F1 E8    		JP	READER						;  7 Reader input.
0105   E618 C3 2B E9    		JP	home						;  8 Home disk.
0106   E61B C3 03 E9    		JP	seldsk						;  9 Select disk.
0107   E61E C3 37 E9    		JP	settrk						; 10 Select track.
0108   E621 C3 3C E9    		JP	setsec						; 11 Select sector.
0109   E624 C3 41 E9    		JP	setdma						; 12 Set DMA ADDress.
0110   E627 C3 49 E9    		JP	read						; 13 Read 128 bytes.
0111   E62A C3 5D E9    		JP	write						; 14 Write 128 bytes.
0112   E62D C3 FA E8    		JP	LISTST						; 15 List status.
0113   E630 C3 46 E9    		JP	sectran						; 16 Sector translate.
0114   E633 C3 37 EB    		JP	PRINTSEQ					; not a BIOS function
0115   E636             
0116   E636             ;================================================================================================
0117   E636             ; Disk parameter headers for disk 0 to 15
0118   E636             ;================================================================================================
0119   E636             dpbase:
0120   E636 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb0,0000h,alv00
0120   E63A 00 00 00 00 
0120   E63E 4B EB 36 E7 
0120   E642 00 00 CB EB 
0121   E646 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv01
0121   E64A 00 00 00 00 
0121   E64E 4B EB 45 E7 
0121   E652 00 00 CC EC 
0122   E656 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv02
0122   E65A 00 00 00 00 
0122   E65E 4B EB 45 E7 
0122   E662 00 00 CD ED 
0123   E666 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv03
0123   E66A 00 00 00 00 
0123   E66E 4B EB 45 E7 
0123   E672 00 00 CE EE 
0124   E676 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv04
0124   E67A 00 00 00 00 
0124   E67E 4B EB 45 E7 
0124   E682 00 00 CF EF 
0125   E686 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv05
0125   E68A 00 00 00 00 
0125   E68E 4B EB 45 E7 
0125   E692 00 00 D0 F0 
0126   E696 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv06
0126   E69A 00 00 00 00 
0126   E69E 4B EB 45 E7 
0126   E6A2 00 00 D1 F1 
0127   E6A6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv07
0127   E6AA 00 00 00 00 
0127   E6AE 4B EB 45 E7 
0127   E6B2 00 00 D2 F2 
0128   E6B6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv08
0128   E6BA 00 00 00 00 
0128   E6BE 4B EB 45 E7 
0128   E6C2 00 00 D3 F3 
0129   E6C6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv09
0129   E6CA 00 00 00 00 
0129   E6CE 4B EB 45 E7 
0129   E6D2 00 00 D4 F4 
0130   E6D6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv10
0130   E6DA 00 00 00 00 
0130   E6DE 4B EB 45 E7 
0130   E6E2 00 00 D5 F5 
0131   E6E6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv11
0131   E6EA 00 00 00 00 
0131   E6EE 4B EB 45 E7 
0131   E6F2 00 00 D6 F6 
0132   E6F6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv12
0132   E6FA 00 00 00 00 
0132   E6FE 4B EB 45 E7 
0132   E702 00 00 D7 F7 
0133   E706 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv13
0133   E70A 00 00 00 00 
0133   E70E 4B EB 45 E7 
0133   E712 00 00 D8 F8 
0134   E716 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv14
0134   E71A 00 00 00 00 
0134   E71E 4B EB 45 E7 
0134   E722 00 00 D9 F9 
0135   E726 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpbLast,0000h,alv15
0135   E72A 00 00 00 00 
0135   E72E 4B EB 54 E7 
0135   E732 00 00 DA FA 
0136   E736             
0137   E736             ; First drive has a reserved track for CP/M
0138   E736             dpb0:
0139   E736 80 00       		.DW 128 ;SPT - sectors per track
0140   E738 05          		.DB 5   ;BSH - block shift factor
0141   E739 1F          		.DB 31  ;BLM - block mask
0142   E73A 01          		.DB 1   ;EXM - Extent mask
0143   E73B FB 07       		.DW 2043 ; (2047-4) DSM - Storage size (blocks - 1)
0144   E73D FF 01       		.DW 511 ;DRM - Number of directory entries - 1
0145   E73F F0          		.DB 240 ;AL0 - 1 bit set per directory block
0146   E740 00          		.DB 0   ;AL1 -            "
0147   E741 00 00       		.DW 0   ;CKS - DIR check vector size (DRM+1)/4 (0=fixed disk)
0148   E743 01 00       		.DW 1   ;ON  - Reserved tracks
0149   E745             
0150   E745             dpb:
0151   E745 80 00       		.DW 128 ;SPT - sectors per track
0152   E747 05          		.DB 5   ;BSH - block shift factor
0153   E748 1F          		.DB 31  ;BLM - block mask
0154   E749 01          		.DB 1   ;EXM - Extent mask
0155   E74A FF 07       		.DW 2047 ;DSM - Storage size (blocks - 1)
0156   E74C FF 01       		.DW 511 ;DRM - Number of directory entries - 1
0157   E74E F0          		.DB 240 ;AL0 - 1 bit set per directory block
0158   E74F 00          		.DB 0   ;AL1 -            "
0159   E750 00 00       		.DW 0   ;CKS - DIR check vector size (DRM+1)/4 (0=fixed disk)
0160   E752 00 00       		.DW 0   ;OFF - Reserved tracks
0161   E754             
0162   E754             ; Last drive is smaller because CF is never full 64MB or 128MB
0163   E754             dpbLast:
0164   E754 80 00       		.DW 128 ;SPT - sectors per track
0165   E756 05          		.DB 5   ;BSH - block shift factor
0166   E757 1F          		.DB 31  ;BLM - block mask
0167   E758 01          		.DB 1   ;EXM - Extent mask
0168   E759 FF 01       		.DW 511 ;DSM - Storage size (blocks - 1)  ; 511 = 2MB (for 128MB card), 1279 = 5MB (for 64MB card)
0169   E75B FF 01       		.DW 511 ;DRM - Number of directory entries - 1
0170   E75D F0          		.DB 240 ;AL0 - 1 bit set per directory block
0171   E75E 00          		.DB 0   ;AL1 -            "
0172   E75F 00 00       		.DW 0   ;CKS - DIR check vector size (DRM+1)/4 (0=fixed disk)
0173   E761 00 00       		.DW 0   ;OFF - Reserved tracks
0174   E763             
0175   E763             ;================================================================================================
0176   E763             ; Cold boot
0177   E763             ;================================================================================================
0178   E763             
0179   E763             boot:
0180   E763 F3          		DI						; Disable interrupts.
0181   E764 31 6A FE    		LD	SP,BIOSSTACK		; Set default stack.
0182   E767             
0183   E767 D3 F1       		OUT (NOROM_RAM0),A		; Turn off ROM. Doesn't matter what we output
0184   E769             
0185   E769 CD 9B E8    		CALL USARTINIT			; Initialize USART
0186   E76C             
0187   E76C 01 F6 FD    		LD	BC,BUFINI			; Initialize pointers for USART buffer
0188   E76F ED 43 46 FE 		LD	(WRPTR),BC
0189   E773 ED 43 48 FE 		LD	(RDPTR),BC
0190   E777             
0191   E777 CD 2C EB    		CALL	cfWait			; Initialize FLASH
0192   E77A 3E 01       		LD 	A,CF_8BIT			; Set IDE to be 8bit
0193   E77C D3 B1       		OUT	(CF_FEATURES),A
0194   E77E 3E EF       		LD	A,CF_SET_FEAT
0195   E780 D3 B7       		OUT	(CF_COMMAND),A
0196   E782             
0197   E782 CD 2C EB    		CALL	cfWait
0198   E785 3E 82       		LD 	A,CF_NOCACHE		; No write cache
0199   E787 D3 B1       		OUT	(CF_FEATURES),A
0200   E789 3E EF       		LD	A,CF_SET_FEAT
0201   E78B D3 B7       		OUT	(CF_COMMAND),A
0202   E78D             
0203   E78D AF          		XOR	A					; set drive byte to A:
0204   E78E 32 04 00    		LD	(userdrv),A
0205   E791             
0206   E791 CD 37 EB    		CALL	PRINTSEQ
0207   E794 5A 38 30 20 		.TEXT "Z80 Modular Computer BIOS 1.0 by Kaltchuk 2020"
0207   E798 4D 6F 64 75 
0207   E79C 6C 61 72 20 
0207   E7A0 43 6F 6D 70 
0207   E7A4 75 74 65 72 
0207   E7A8 20 42 49 4F 
0207   E7AC 53 20 31 2E 
0207   E7B0 30 20 62 79 
0207   E7B4 20 4B 61 6C 
0207   E7B8 74 63 68 75 
0207   E7BC 6B 20 32 30 
0207   E7C0 32 30 
0208   E7C2 0D 0A 0D 0A 		.DB CR,LF,CR,LF
0209   E7C6 43 50 2F 4D 		.TEXT "CP/M 2.2 Copyright 1979 (c) by Digital Research"
0209   E7CA 20 32 2E 32 
0209   E7CE 20 43 6F 70 
0209   E7D2 79 72 69 67 
0209   E7D6 68 74 20 31 
0209   E7DA 39 37 39 20 
0209   E7DE 28 63 29 20 
0209   E7E2 62 79 20 44 
0209   E7E6 69 67 69 74 
0209   E7EA 61 6C 20 52 
0209   E7EE 65 73 65 61 
0209   E7F2 72 63 68 
0210   E7F5 0D 0A 0D 0A 		.DB CR,LF,CR,LF,0
0210   E7F9 00 
0211   E7FA             
0212   E7FA C3 44 E8    		JP	gocpm
0213   E7FD             
0214   E7FD             ;================================================================================================
0215   E7FD             ; Warm boot
0216   E7FD             ;================================================================================================
0217   E7FD             
0218   E7FD             wboot:
0219   E7FD F3          		DI						; Disable interrupts.
0220   E7FE 31 6A FE    		LD	SP,BIOSSTACK		; Set default stack.
0221   E801             
0222   E801 06 0B       		LD	B,11 				; Number of sectors to reload
0223   E803             
0224   E803 3E 00       		LD	A,0
0225   E805 32 E7 FB    		LD	(hstsec),A
0226   E808 21 00 D0    		LD	HL,ccp
0227   E80B             rdSectors:
0228   E80B             
0229   E80B CD 2C EB    		CALL	cfWait
0230   E80E 3A E7 FB    		LD	A,(hstsec)
0231   E811 D3 B3       		OUT 	(CF_LBA0),A
0232   E813 3E 00       		LD	A,0
0233   E815 D3 B4       		OUT 	(CF_LBA1),A
0234   E817 D3 B5       		OUT 	(CF_LBA2),A
0235   E819 3E E0       		LD	A,0E0H
0236   E81B D3 B6       		OUT 	(CF_LBA3),A
0237   E81D 3E 01       		LD 	A,1
0238   E81F D3 B2       		OUT 	(CF_SECCOUNT),A
0239   E821 C5          		PUSH 	BC
0240   E822 CD 2C EB    		CALL 	cfWait
0241   E825 3E 20       		LD 	A,CF_READ_SEC
0242   E827 D3 B7       		OUT 	(CF_COMMAND),A
0243   E829 CD 2C EB    		CALL 	cfWait
0244   E82C 0E 04       		LD 	C,4
0245   E82E             rd4secs512:
0246   E82E 06 80       		LD 	B,128
0247   E830             rdByte512:
0248   E830 DB B0       		IN 	A,(CF_DATA)
0249   E832 77          		LD 	(HL),A
0250   E833 23          		INC 	HL
0251   E834 05          		DEC 	B
0252   E835 20 F9       		JR 	NZ, rdByte512
0253   E837 0D          		DEC 	C
0254   E838 20 F4       		JR 	NZ,rd4secs512
0255   E83A C1          		POP 	BC
0256   E83B 3A E7 FB    		LD	A,(hstsec)
0257   E83E 3C          		INC	A
0258   E83F 32 E7 FB    		LD	(hstsec),A
0259   E842 10 C7       		DJNZ	rdSectors
0260   E844             
0261   E844             
0262   E844             ;================================================================================================
0263   E844             ; Common code for cold and warm boot
0264   E844             ;================================================================================================
0265   E844             
0266   E844             gocpm:
0267   E844 AF          		XOR	A					; 0 to accumulator
0268   E845 32 E9 FB    		LD	(hstact),A			; host buffer inactive
0269   E848 32 EB FB    		LD	(unacnt),A			;clear unalloc count
0270   E84B             
0271   E84B 21 80 00    		LD	HL,tpabuf			; ADDress of BIOS DMA buffer.
0272   E84E 22 F4 FB    		LD	(dmaAddr),HL
0273   E851             		
0274   E851 3E C3       		LD	A,0C3h				; Opcode for 'JP'.
0275   E853 32 00 00    		LD	(00h),A				; Load at start of RAM.
0276   E856 21 03 E6    		LD	HL,wboote			; ADDress of jump for a warm boot.
0277   E859 22 01 00    		LD	(01h),HL
0278   E85C 32 05 00    		LD	(05h),A				; Opcode for 'JP'.
0279   E85F 21 06 D8    		LD	HL,bdos				; ADDress of jump for the BDOS.
0280   E862 22 06 00    		LD	(06h),HL
0281   E865 32 38 00    		LD	(038H),A			; at 038h write "JP UINT"
0282   E868 21 78 E8    		LD	HL,UINT			; which is the interrupt routine to catch incoming
0283   E86B 22 39 00    		LD	(039H),HL			; character on the USART
0284   E86E 3A 04 00    		LD	A,(userdrv)			; Save new drive number (0).
0285   E871 4F          		LD	C,A					; Pass drive number in C.
0286   E872             
0287   E872 ED 56       		IM	1
0288   E874 FB          		EI
0289   E875             	
0290   E875 C3 00 D0    		JP	ccp					; Start CP/M by jumping to the CCP.
0291   E878             
0292   E878             ;================================================================================================
0293   E878             ; Interrupt routine for USART
0294   E878             ;================================================================================================
0295   E878             UINT:
0296   E878 C5          		PUSH	BC
0297   E879 E5          		PUSH	HL
0298   E87A             
0299   E87A DB D0       		IN	A,(USART_DAT)		; read incoming byte
0300   E87C D3 D0       		OUT	(USART_DAT),A		; send character
0301   E87E ED 4B 46 FE 		LD	BC,(WRPTR)
0302   E882 02          		LD	(BC),A
0303   E883 03          		INC	BC
0304   E884 21 46 FE    		LD	HL,BUFEND
0305   E887 37          		SCF
0306   E888 3F          		CCF
0307   E889 ED 42       		SBC	HL,BC
0308   E88B 20 03       		JR	NZ,EOINT
0309   E88D 01 F6 FD    		LD	BC,BUFINI
0310   E890 ED 43 46 FE EOINT:	LD	(WRPTR),BC
0311   E894             
0312   E894 E1          		POP	HL
0313   E895 C1          		POP	BC
0314   E896 ED 56       		IM	1
0315   E898 FB          		EI
0316   E899 ED 4D       		RETI
0317   E89B             
0318   E89B             ;================================================================================================
0319   E89B             ; Initialize USART
0320   E89B             ;================================================================================================
0321   E89B             USARTINIT:
0322   E89B 3E 00       		LD 	A,0					; Worst case init: put in SYNC mode, 
0323   E89D D3 D1       		OUT	(USART_CMD),A		; send 2 dummy 00 sync chars and reset
0324   E89F 00          		NOP
0325   E8A0 D3 D1       		OUT	(USART_CMD),A
0326   E8A2 00          		NOP
0327   E8A3 D3 D1       		OUT	(USART_CMD),A
0328   E8A5 3E 40       		LD 	A,040H				; Reset USART
0329   E8A7 D3 D1       		OUT	(USART_CMD),A
0330   E8A9 3E 6F       		LD 	A,UMODE				; Set USART mode
0331   E8AB D3 D1       		OUT	(USART_CMD),A
0332   E8AD 3E 15       		LD 	A,UCMD0				; Set USART initial command
0333   E8AF D3 D1       		OUT	(USART_CMD),A
0334   E8B1 C9          		RET
0335   E8B2             
0336   E8B2             ;================================================================================================
0337   E8B2             ; Console I/O routines
0338   E8B2             ;================================================================================================
0339   E8B2             ;================================================================================================
0340   E8B2             ; Console Status (Return A=0FFh if character waiting. Otherwise, A=0)
0341   E8B2             ;================================================================================================
0342   E8B2             CONST:
0343   E8B2 C5          		PUSH	BC
0344   E8B3 E5          		PUSH	HL
0345   E8B4 ED 4B 46 FE 		LD	BC,(WRPTR)
0346   E8B8 2A 48 FE    		LD	HL,(RDPTR)
0347   E8BB AF          		XOR	A
0348   E8BC ED 42       		SBC	HL,BC
0349   E8BE 28 02       		JR	Z,CONVOID
0350   E8C0 3E FF       		LD	A,0FFH
0351   E8C2             CONVOID:
0352   E8C2 E1          		POP	HL
0353   E8C3 C1          		POP	BC
0354   E8C4 C9          	  	RET
0355   E8C5             
0356   E8C5             ;================================================================================================
0357   E8C5             ; Console Input (Wait for input and return character in A)
0358   E8C5             ;================================================================================================
0359   E8C5             CONIN:
0360   E8C5 C5          		PUSH	BC	
0361   E8C6 E5          		PUSH	HL	
0362   E8C7 CD B2 E8    AGAIN:	CALL	CONST
0363   E8CA FE 00       		CP	0
0364   E8CC 28 F9       		JR	Z,AGAIN			; Keep trying till we receive something
0365   E8CE ED 4B 48 FE 		LD	BC,(RDPTR)
0366   E8D2 0A          		LD	A,(BC)
0367   E8D3 03          		INC	BC
0368   E8D4 21 46 FE    		LD	HL,BUFEND
0369   E8D7 37          		SCF
0370   E8D8 3F          		CCF
0371   E8D9 ED 42       		SBC	HL,BC
0372   E8DB 20 03       		JR	NZ,EOCONIN
0373   E8DD 01 F6 FD    		LD	BC,BUFINI
0374   E8E0 ED 43 48 FE EOCONIN:	LD	(RDPTR),BC
0375   E8E4 E1          		POP	HL
0376   E8E5 C1          		POP	BC
0377   E8E6 C9          		RET					; Char read returns in A
0378   E8E7             
0379   E8E7             ;================================================================================================
0380   E8E7             ; Console Output (Send character in reg C)
0381   E8E7             ;================================================================================================
0382   E8E7             CONOUT:
0383   E8E7 DB D1       		IN	A,(USART_STA)		; read USART status byte
0384   E8E9 E6 04       		AND	04H				; get only the TxEMPTY bit
0385   E8EB 28 FA       		JR	Z,CONOUT
0386   E8ED 79          		LD	A,C
0387   E8EE D3 D0       		OUT	(USART_DAT),A		; send character
0388   E8F0 C9          		RET
0389   E8F1             
0390   E8F1             ;================================================================================================
0391   E8F1             ; Reader Input
0392   E8F1             ;================================================================================================
0393   E8F1 C3 C5 E8    READER:	JP CONIN	
0394   E8F4             
0395   E8F4             ;================================================================================================
0396   E8F4             ; List Output
0397   E8F4             ;================================================================================================
0398   E8F4 C3 E7 E8    LIST:		JP CONOUT
0399   E8F7             
0400   E8F7             ;================================================================================================
0401   E8F7             ; Punch Output
0402   E8F7             ;================================================================================================
0403   E8F7 C3 E7 E8    PUNCH:	JP CONOUT	
0404   E8FA             
0405   E8FA             ;================================================================================================
0406   E8FA             ; List Status (List = Console)
0407   E8FA             ;================================================================================================
0408   E8FA DB D1       LISTST:	IN	A,(USART_CMD)
0409   E8FC E6 01       		AND	00000001b			; Get the TxReady bit
0410   E8FE 28 02       		JR	Z,listvoid
0411   E900 3E FF       		LD	A,0FFh
0412   E902 C9          listvoid:	RET
0413   E903             
0414   E903             ;================================================================================================
0415   E903             ; Disk processing entry points
0416   E903             ;================================================================================================
0417   E903             seldsk:
0418   E903 21 00 00    		LD	HL,$0000
0419   E906 79          		LD	A,C
0420   E907 FE 10       		CP	16		; 16 for 128MB disk, 8 for 64MB disk
0421   E909 38 0D       		jr	C,chgdsk	; if invalid drive will give BDOS error
0422   E90B 3A 04 00    		LD	A,(userdrv)	; so set the drive back to a:
0423   E90E B9          		CP	C		; If the default disk is not the same as the
0424   E90F C0          		RET	NZ		; selected drive then return, 
0425   E910 AF          		XOR	A		; else reset default back to a:
0426   E911 32 04 00    		LD	(userdrv),A	; otherwise will be stuck in a loop
0427   E914 32 DF FB    		LD	(sekdsk),A
0428   E917 C9          		ret
0429   E918             
0430   E918 32 DF FB    chgdsk:		LD 	(sekdsk),A
0431   E91B CB 07       		RLC	a		;*2
0432   E91D CB 07       		RLC	a		;*4
0433   E91F CB 07       		RLC	a		;*8
0434   E921 CB 07       		RLC	a		;*16
0435   E923 21 36 E6    		LD 	HL,dpbase
0436   E926 06 00       		LD	b,0
0437   E928 4F          		LD	c,A	
0438   E929 09          		ADD	HL,BC
0439   E92A             
0440   E92A C9          		RET
0441   E92B             
0442   E92B             ;------------------------------------------------------------------------------------------------
0443   E92B             home:
0444   E92B 3A EA FB    		ld	a,(hstwrt)	;check for pending write
0445   E92E B7          		or	a
0446   E92F 20 03       		jr	nz,homed
0447   E931 32 E9 FB    		ld	(hstact),a	;clear host active flag
0448   E934             homed:
0449   E934 01 00 00    		LD 	BC,0000h
0450   E937             
0451   E937             ;------------------------------------------------------------------------------------------------
0452   E937 ED 43 E0 FB settrk:		LD 	(sektrk),BC	; Set track passed from BDOS in register BC.
0453   E93B C9          		RET
0454   E93C             
0455   E93C             ;------------------------------------------------------------------------------------------------
0456   E93C ED 43 E2 FB setsec:		LD 	(seksec),BC	; Set sector passed from BDOS in register BC.
0457   E940 C9          		RET
0458   E941             
0459   E941             ;------------------------------------------------------------------------------------------------
0460   E941 ED 43 F4 FB setdma:		LD 	(dmaAddr),BC	; Set DMA ADDress given by registers BC.
0461   E945 C9          		RET
0462   E946             
0463   E946             ;------------------------------------------------------------------------------------------------
0464   E946 C5          sectran:	PUSH 	BC
0465   E947 E1          		POP 	HL
0466   E948 C9          		RET
0467   E949             
0468   E949             ;------------------------------------------------------------------------------------------------
0469   E949             read:
0470   E949             		;read the selected CP/M sector
0471   E949 AF          		xor	a
0472   E94A 32 EB FB    		ld	(unacnt),a
0473   E94D 3E 01       		ld	a,1
0474   E94F 32 F2 FB    		ld	(readop),a		;read operation
0475   E952 32 F1 FB    		ld	(rsflag),a		;must read data
0476   E955 3E 02       		ld	a,wrual
0477   E957 32 F3 FB    		ld	(wrtype),a		;treat as unalloc
0478   E95A C3 C4 E9    		jp	rwoper			;to perform the read
0479   E95D             
0480   E95D             
0481   E95D             ;------------------------------------------------------------------------------------------------
0482   E95D             write:
0483   E95D             		;write the selected CP/M sector
0484   E95D AF          		xor	a		;0 to accumulator
0485   E95E 32 F2 FB    		ld	(readop),a	;not a read operation
0486   E961 79          		ld	a,c		;write type in c
0487   E962 32 F3 FB    		ld	(wrtype),a
0488   E965 FE 02       		cp	wrual		;write unallocated?
0489   E967 20 17       		jr	nz,chkuna	;check for unalloc
0490   E969             ;
0491   E969             ;		write to unallocated, set parameters
0492   E969 3E 20       		ld	a,blksiz/128	;next unalloc recs
0493   E96B 32 EB FB    		ld	(unacnt),a
0494   E96E 3A DF FB    		ld	a,(sekdsk)		;disk to seek
0495   E971 32 EC FB    		ld	(unadsk),a		;unadsk = sekdsk
0496   E974 2A E0 FB    		ld	hl,(sektrk)
0497   E977 22 ED FB    		ld	(unatrk),hl		;unatrk = sectrk
0498   E97A 3A E2 FB    		ld	a,(seksec)
0499   E97D 32 EF FB    		ld	(unasec),a		;unasec = seksec
0500   E980             ;
0501   E980             chkuna:
0502   E980             ;		check for write to unallocated sector
0503   E980 3A EB FB    		ld	a,(unacnt)		;any unalloc remain?
0504   E983 B7          		or	a	
0505   E984 28 36       		jr	z,alloc		;skip if not
0506   E986             ;
0507   E986             ;		more unallocated records remain
0508   E986 3D          		dec	a		;unacnt = unacnt-1
0509   E987 32 EB FB    		ld	(unacnt),a
0510   E98A 3A DF FB    		ld	a,(sekdsk)		;same disk?
0511   E98D 21 EC FB    		ld	hl,unadsk
0512   E990 BE          		cp	(hl)		;sekdsk = unadsk?
0513   E991 C2 BC E9    		jp	nz,alloc		;skip if not
0514   E994             ;
0515   E994             ;		disks are the same
0516   E994 21 ED FB    		ld	hl,unatrk
0517   E997 CD 5B EA    		call	sektrkcmp	;sektrk = unatrk?
0518   E99A C2 BC E9    		jp	nz,alloc		;skip if not
0519   E99D             ;
0520   E99D             ;		tracks are the same
0521   E99D 3A E2 FB    		ld	a,(seksec)		;same sector?
0522   E9A0 21 EF FB    		ld	hl,unasec
0523   E9A3 BE          		cp	(hl)		;seksec = unasec?
0524   E9A4 C2 BC E9    		jp	nz,alloc		;skip if not
0525   E9A7             ;
0526   E9A7             ;		match, move to next sector for future ref
0527   E9A7 34          		inc	(hl)		;unasec = unasec+1
0528   E9A8 7E          		ld	a,(hl)		;end of track?
0529   E9A9 FE 80       		cp	cpmspt		;count CP/M sectors
0530   E9AB 38 09       		jr	c,noovf		;skip if no overflow
0531   E9AD             ;
0532   E9AD             ;		overflow to next track
0533   E9AD 36 00       		ld	(hl),0		;unasec = 0
0534   E9AF 2A ED FB    		ld	hl,(unatrk)
0535   E9B2 23          		inc	hl
0536   E9B3 22 ED FB    		ld	(unatrk),hl		;unatrk = unatrk+1
0537   E9B6             ;
0538   E9B6             noovf:
0539   E9B6             		;match found, mark as unnecessary read
0540   E9B6 AF          		xor	a		;0 to accumulator
0541   E9B7 32 F1 FB    		ld	(rsflag),a		;rsflag = 0
0542   E9BA 18 08       		jr	rwoper		;to perform the write
0543   E9BC             ;
0544   E9BC             alloc:
0545   E9BC             		;not an unallocated record, requires pre-read
0546   E9BC AF          		xor	a		;0 to accum
0547   E9BD 32 EB FB    		ld	(unacnt),a		;unacnt = 0
0548   E9C0 3C          		inc	a		;1 to accum
0549   E9C1 32 F1 FB    		ld	(rsflag),a		;rsflag = 1
0550   E9C4             
0551   E9C4             ;------------------------------------------------------------------------------------------------
0552   E9C4             rwoper:
0553   E9C4             		;enter here to perform the read/write
0554   E9C4 AF          		xor	a		;zero to accum
0555   E9C5 32 F0 FB    		ld	(erflag),a		;no errors (yet)
0556   E9C8 3A E2 FB    		ld	a,(seksec)		;compute host sector
0557   E9CB B7          		or	a		;carry = 0
0558   E9CC 1F          		rra			;shift right
0559   E9CD B7          		or	a		;carry = 0
0560   E9CE 1F          		rra			;shift right
0561   E9CF 32 E8 FB    		ld	(sekhst),a		;host sector to seek
0562   E9D2             ;
0563   E9D2             ;		active host sector?
0564   E9D2 21 E9 FB    		ld	hl,hstact	;host active flag
0565   E9D5 7E          		ld	a,(hl)
0566   E9D6 36 01       		ld	(hl),1		;always becomes 1
0567   E9D8 B7          		or	a		;was it already?
0568   E9D9 28 21       		jr	z,filhst		;fill host if not
0569   E9DB             ;
0570   E9DB             ;		host buffer active, same as seek buffer?
0571   E9DB 3A DF FB    		ld	a,(sekdsk)
0572   E9DE 21 E4 FB    		ld	hl,hstdsk	;same disk?
0573   E9E1 BE          		cp	(hl)		;sekdsk = hstdsk?
0574   E9E2 20 11       		jr	nz,nomatch
0575   E9E4             ;
0576   E9E4             ;		same disk, same track?
0577   E9E4 21 E5 FB    		ld	hl,hsttrk
0578   E9E7 CD 5B EA    		call	sektrkcmp	;sektrk = hsttrk?
0579   E9EA 20 09       		jr	nz,nomatch
0580   E9EC             ;
0581   E9EC             ;		same disk, same track, same buffer?
0582   E9EC 3A E8 FB    		ld	a,(sekhst)
0583   E9EF 21 E7 FB    		ld	hl,hstsec	;sekhst = hstsec?
0584   E9F2 BE          		cp	(hl)
0585   E9F3 28 24       		jr	z,match		;skip if match
0586   E9F5             ;
0587   E9F5             nomatch:
0588   E9F5             		;proper disk, but not correct sector
0589   E9F5 3A EA FB    		ld	a,(hstwrt)		;host written?
0590   E9F8 B7          		or	a
0591   E9F9 C4 03 EB    		call	nz,writehst	;clear host buff
0592   E9FC             ;
0593   E9FC             filhst:
0594   E9FC             		;may have to fill the host buffer
0595   E9FC 3A DF FB    		ld	a,(sekdsk)
0596   E9FF 32 E4 FB    		ld	(hstdsk),a
0597   EA02 2A E0 FB    		ld	hl,(sektrk)
0598   EA05 22 E5 FB    		ld	(hsttrk),hl
0599   EA08 3A E8 FB    		ld	a,(sekhst)
0600   EA0B 32 E7 FB    		ld	(hstsec),a
0601   EA0E 3A F1 FB    		ld	a,(rsflag)		;need to read?
0602   EA11 B7          		or	a
0603   EA12 C4 DA EA    		call	nz,readhst		;yes, if 1
0604   EA15 AF          		xor	a		;0 to accum
0605   EA16 32 EA FB    		ld	(hstwrt),a		;no pending write
0606   EA19             ;
0607   EA19             match:
0608   EA19             		;copy data to or from buffer
0609   EA19 3A E2 FB    		ld	a,(seksec)		;mask buffer number
0610   EA1C E6 03       		and	secmsk		;least signif bits
0611   EA1E 6F          		ld	l,a		;ready to shift
0612   EA1F 26 00       		ld	h,0		;double count
0613   EA21 29          		add	hl,hl
0614   EA22 29          		add	hl,hl
0615   EA23 29          		add	hl,hl
0616   EA24 29          		add	hl,hl
0617   EA25 29          		add	hl,hl
0618   EA26 29          		add	hl,hl
0619   EA27 29          		add	hl,hl
0620   EA28             ;		hl has relative host buffer address
0621   EA28 11 F6 FB    		ld	de,hstbuf
0622   EA2B 19          		add	hl,de		;hl = host address
0623   EA2C EB          		ex	de,hl			;now in DE
0624   EA2D 2A F4 FB    		ld	hl,(dmaAddr)		;get/put CP/M data
0625   EA30 0E 80       		ld	c,128		;length of move
0626   EA32 3A F2 FB    		ld	a,(readop)		;which way?
0627   EA35 B7          		or	a
0628   EA36 20 06       		jr	nz,rwmove		;skip if read
0629   EA38             ;
0630   EA38             ;	write operation, mark and switch direction
0631   EA38 3E 01       		ld	a,1
0632   EA3A 32 EA FB    		ld	(hstwrt),a		;hstwrt = 1
0633   EA3D EB          		ex	de,hl			;source/dest swap
0634   EA3E             ;
0635   EA3E             rwmove:
0636   EA3E             		;C initially 128, DE is source, HL is dest
0637   EA3E 1A          		ld	a,(de)		;source character
0638   EA3F 13          		inc	de
0639   EA40 77          		ld	(hl),a		;to dest
0640   EA41 23          		inc	hl
0641   EA42 0D          		dec	c		;loop 128 times
0642   EA43 20 F9       		jr	nz,rwmove
0643   EA45             ;
0644   EA45             ;		data has been moved to/from host buffer
0645   EA45 3A F3 FB    		ld	a,(wrtype)		;write type
0646   EA48 FE 01       		cp	wrdir		;to directory?
0647   EA4A 3A F0 FB    		ld	a,(erflag)		;in case of errors
0648   EA4D C0          		ret	nz			;no further processing
0649   EA4E             ;
0650   EA4E             ;		clear host buffer for directory write
0651   EA4E B7          		or	a		;errors?
0652   EA4F C0          		ret	nz			;skip if so
0653   EA50 AF          		xor	a		;0 to accum
0654   EA51 32 EA FB    		ld	(hstwrt),a		;buffer written
0655   EA54 CD 03 EB    		call	writehst
0656   EA57 3A F0 FB    		ld	a,(erflag)
0657   EA5A C9          		ret
0658   EA5B             
0659   EA5B             ;------------------------------------------------------------------------------------------------
0660   EA5B             ;Utility subroutine for 16-bit compare
0661   EA5B             sektrkcmp:
0662   EA5B             		;HL = .unatrk or .hsttrk, compare with sektrk
0663   EA5B EB          		ex	de,hl
0664   EA5C 21 E0 FB    		ld	hl,sektrk
0665   EA5F 1A          		ld	a,(de)		;low byte compare
0666   EA60 BE          		cp	(HL)		;same?
0667   EA61 C0          		ret	nz			;return if not
0668   EA62             ;		low bytes equal, test high 1s
0669   EA62 13          		inc	de
0670   EA63 23          		inc	hl
0671   EA64 1A          		ld	a,(de)
0672   EA65 BE          		cp	(hl)	;sets flags
0673   EA66 C9          		ret
0674   EA67             
0675   EA67             ;================================================================================================
0676   EA67             ; Convert track/head/sector into LBA for physical access to the disk
0677   EA67             ;================================================================================================
0678   EA67             setLBAaddr:	
0679   EA67 2A E5 FB    		LD	HL,(hsttrk)
0680   EA6A CB 05       		RLC	L
0681   EA6C CB 05       		RLC	L
0682   EA6E CB 05       		RLC	L
0683   EA70 CB 05       		RLC	L
0684   EA72 CB 05       		RLC	L
0685   EA74 7D          		LD	A,L
0686   EA75 E6 E0       		AND	0E0H
0687   EA77 6F          		LD	L,A
0688   EA78 3A E7 FB    		LD	A,(hstsec)
0689   EA7B 85          		ADD	A,L
0690   EA7C 32 DB FB    		LD	(lba0),A
0691   EA7F             
0692   EA7F 2A E5 FB    		LD	HL,(hsttrk)
0693   EA82 CB 0D       		RRC	L
0694   EA84 CB 0D       		RRC	L
0695   EA86 CB 0D       		RRC	L
0696   EA88 7D          		LD	A,L
0697   EA89 E6 1F       		AND	01FH
0698   EA8B 6F          		LD	L,A
0699   EA8C CB 04       		RLC	H
0700   EA8E CB 04       		RLC	H
0701   EA90 CB 04       		RLC	H
0702   EA92 CB 04       		RLC	H
0703   EA94 CB 04       		RLC	H
0704   EA96 7C          		LD	A,H
0705   EA97 E6 20       		AND	020H
0706   EA99 67          		LD	H,A
0707   EA9A 3A E4 FB    		LD	A,(hstdsk)
0708   EA9D CB 07       		RLC	a
0709   EA9F CB 07       		RLC	a
0710   EAA1 CB 07       		RLC	a
0711   EAA3 CB 07       		RLC	a
0712   EAA5 CB 07       		RLC	a
0713   EAA7 CB 07       		RLC	a
0714   EAA9 E6 C0       		AND	0C0H
0715   EAAB 84          		ADD	A,H
0716   EAAC 85          		ADD	A,L
0717   EAAD 32 DC FB    		LD	(lba1),A
0718   EAB0             		
0719   EAB0             
0720   EAB0 3A E4 FB    		LD	A,(hstdsk)
0721   EAB3 CB 0F       		RRC	A
0722   EAB5 CB 0F       		RRC	A
0723   EAB7 E6 03       		AND	03H
0724   EAB9 32 DD FB    		LD	(lba2),A
0725   EABC             
0726   EABC             ; LBA Mode using drive 0 = E0
0727   EABC 3E E0       		LD	a,0E0H
0728   EABE 32 DE FB    		LD	(lba3),A
0729   EAC1             
0730   EAC1             
0731   EAC1 3A DB FB    		LD	A,(lba0)
0732   EAC4 D3 B3       		OUT 	(CF_LBA0),A
0733   EAC6             
0734   EAC6 3A DC FB    		LD	A,(lba1)
0735   EAC9 D3 B4       		OUT 	(CF_LBA1),A
0736   EACB             
0737   EACB 3A DD FB    		LD	A,(lba2)
0738   EACE D3 B5       		OUT 	(CF_LBA2),A
0739   EAD0             
0740   EAD0 3A DE FB    		LD	A,(lba3)
0741   EAD3 D3 B6       		OUT 	(CF_LBA3),A
0742   EAD5             
0743   EAD5 3E 01       		LD 	A,1
0744   EAD7 D3 B2       		OUT 	(CF_SECCOUNT),A
0745   EAD9             
0746   EAD9 C9          		RET				
0747   EADA             
0748   EADA             ;================================================================================================
0749   EADA             ; Read physical sector from host
0750   EADA             ;================================================================================================
0751   EADA             readhst:
0752   EADA F5          		PUSH 	AF
0753   EADB C5          		PUSH 	BC
0754   EADC E5          		PUSH 	HL
0755   EADD             
0756   EADD CD 2C EB    		CALL 	cfWait
0757   EAE0             
0758   EAE0 CD 67 EA    		CALL 	setLBAaddr
0759   EAE3             
0760   EAE3 3E 20       		LD 	A,CF_READ_SEC
0761   EAE5 D3 B7       		OUT 	(CF_COMMAND),A
0762   EAE7             
0763   EAE7 CD 2C EB    		CALL 	cfWait
0764   EAEA             
0765   EAEA 0E 04       		LD 	c,4
0766   EAEC 21 F6 FB    		LD 	HL,hstbuf
0767   EAEF             rd4secs:
0768   EAEF 06 80       		LD 	b,128
0769   EAF1             rdByte:
0770   EAF1 DB B0       		in 	A,(CF_DATA)
0771   EAF3 77          		LD 	(HL),A
0772   EAF4 23          		iNC 	HL
0773   EAF5 05          		dec 	b
0774   EAF6 20 F9       		JR 	NZ, rdByte
0775   EAF8 0D          		dec 	c
0776   EAF9 20 F4       		JR 	NZ,rd4secs
0777   EAFB             
0778   EAFB E1          		POP 	HL
0779   EAFC C1          		POP 	BC
0780   EAFD F1          		POP 	AF
0781   EAFE             
0782   EAFE AF          		XOR 	a
0783   EAFF 32 F0 FB    		ld	(erflag),a
0784   EB02 C9          		RET
0785   EB03             
0786   EB03             ;================================================================================================
0787   EB03             ; Write physical sector to host
0788   EB03             ;================================================================================================
0789   EB03             writehst:
0790   EB03 F5          		PUSH 	AF
0791   EB04 C5          		PUSH 	BC
0792   EB05 E5          		PUSH 	HL
0793   EB06             
0794   EB06 CD 2C EB    		CALL 	cfWait
0795   EB09             
0796   EB09 CD 67 EA    		CALL 	setLBAaddr
0797   EB0C             
0798   EB0C 3E 30       		LD 	A,CF_WRITE_SEC
0799   EB0E D3 B7       		OUT 	(CF_COMMAND),A
0800   EB10             
0801   EB10 CD 2C EB    		CALL 	cfWait
0802   EB13             
0803   EB13 0E 04       		LD 	c,4
0804   EB15 21 F6 FB    		LD 	HL,hstbuf
0805   EB18             wr4secs:
0806   EB18 06 80       		LD 	b,128
0807   EB1A 7E          wrByte:		LD 	A,(HL)
0808   EB1B D3 B0       		OUT 	(CF_DATA),A
0809   EB1D 23          		iNC 	HL
0810   EB1E 05          		dec 	b
0811   EB1F 20 F9       		JR 	NZ, wrByte
0812   EB21             
0813   EB21 0D          		dec 	c
0814   EB22 20 F4       		JR 	NZ,wr4secs
0815   EB24             
0816   EB24 E1          		POP 	HL
0817   EB25 C1          		POP 	BC
0818   EB26 F1          		POP 	AF
0819   EB27             
0820   EB27 AF          		XOR 	a
0821   EB28 32 F0 FB    		ld	(erflag),a
0822   EB2B C9          		RET
0823   EB2C             
0824   EB2C             ;================================================================================================
0825   EB2C             ; Wait for disk to be ready (busy=0,ready=1)
0826   EB2C             ;================================================================================================
0827   EB2C             cfWait:
0828   EB2C F5          		PUSH 	AF
0829   EB2D             cfWait1:
0830   EB2D DB B7       		in 	A,(CF_STATUS)
0831   EB2F E6 80       		AND 	080H
0832   EB31 FE 80       		cp 	080H
0833   EB33 28 F8       		JR	Z,cfWait1
0834   EB35 F1          		POP 	AF
0835   EB36 C9          		RET
0836   EB37             
0837   EB37             ;================================================================================================
0838   EB37             ; Print (on console) a sequence of characters ending with zero
0839   EB37             ;================================================================================================
0840   EB37             PRINTSEQ:
0841   EB37 E3          		EX 	(SP),HL 		; Push HL and put RET address into HL
0842   EB38 F5          		PUSH 	AF
0843   EB39 C5          		PUSH 	BC
0844   EB3A             NEXTCHAR:
0845   EB3A 7E          		LD 	A,(HL)
0846   EB3B FE 00       		CP	0
0847   EB3D 28 07       		JR	Z,ENDOFPRINT
0848   EB3F 4F          		LD  	C,A
0849   EB40 CD E7 E8    		CALL 	CONOUT		; Print to console
0850   EB43 23          		INC 	HL
0851   EB44 18 F4       		JR	NEXTCHAR
0852   EB46             ENDOFPRINT:
0853   EB46 23          		INC 	HL 			; Get past "null" terminator
0854   EB47 C1          		POP 	BC
0855   EB48 F1          		POP 	AF
0856   EB49 E3          		EX 	(SP),HL 		; Push new RET address on stack and restore HL
0857   EB4A C9          		RET
0858   EB4B             
0859   EB4B             ;================================================================================================
0860   EB4B             ; Data storage
0861   EB4B             ;================================================================================================
0862   EB4B             dirbuf: 	.ds 128 		;scratch directory area
0863   EBCB             alv00: 		.ds 257			;allocation vector 0
0864   ECCC             alv01: 		.ds 257			;allocation vector 1
0865   EDCD             alv02: 		.ds 257			;allocation vector 2
0866   EECE             alv03: 		.ds 257			;allocation vector 3
0867   EFCF             alv04: 		.ds 257			;allocation vector 4
0868   F0D0             alv05: 		.ds 257			;allocation vector 5
0869   F1D1             alv06: 		.ds 257			;allocation vector 6
0870   F2D2             alv07: 		.ds 257			;allocation vector 7
0871   F3D3             alv08: 		.ds 257			;allocation vector 8
0872   F4D4             alv09: 		.ds 257			;allocation vector 9
0873   F5D5             alv10: 		.ds 257			;allocation vector 10
0874   F6D6             alv11: 		.ds 257			;allocation vector 11
0875   F7D7             alv12: 		.ds 257			;allocation vector 12
0876   F8D8             alv13: 		.ds 257			;allocation vector 13
0877   F9D9             alv14: 		.ds 257			;allocation vector 14
0878   FADA             alv15: 		.ds 257			;allocation vector 15
0879   FBDB             
0880   FBDB 00          lba0		.DB	00h
0881   FBDC 00          lba1		.DB	00h
0882   FBDD 00          lba2		.DB	00h
0883   FBDE 00          lba3		.DB	00h
0884   FBDF             
0885   FBDF             sekdsk:		.ds	1		;seek disk number
0886   FBE0             sektrk:		.ds	2		;seek track number
0887   FBE2             seksec:		.ds	2		;seek sector number
0888   FBE4             ;
0889   FBE4             hstdsk:		.ds	1		;host disk number
0890   FBE5             hsttrk:		.ds	2		;host track number
0891   FBE7             hstsec:		.ds	1		;host sector number
0892   FBE8             ;
0893   FBE8             sekhst:		.ds	1		;seek shr secshf
0894   FBE9             hstact:		.ds	1		;host active flag
0895   FBEA             hstwrt:		.ds	1		;host written flag
0896   FBEB             ;
0897   FBEB             unacnt:		.ds	1		;unalloc rec cnt
0898   FBEC             unadsk:		.ds	1		;last unalloc disk
0899   FBED             unatrk:		.ds	2		;last unalloc track
0900   FBEF             unasec:		.ds	1		;last unalloc sector
0901   FBF0             ;
0902   FBF0             erflag:		.ds	1		;error reporting
0903   FBF1             rsflag:		.ds	1		;read sector flag
0904   FBF2             readop:		.ds	1		;1 if read operation
0905   FBF3             wrtype:		.ds	1		;write operation type
0906   FBF4             dmaAddr:	.ds	2		;last dma address
0907   FBF6             hstbuf:		.ds	512		;host buffer
0908   FDF6             hstBufEnd:	.EQU	$
0909   FDF6             
0910   FDF6             BUFINI		.EQU	$
0911   FDF6             			.DS	050H
0912   FE46             BUFEND		.EQU	$
0913   FE46             WRPTR:		.DS	2			; write pointer
0914   FE48             RDPTR:		.DS	2			; read pointer
0915   FE4A             
0916   FE4A             			.DS	020h			; Start of BIOS stack area.
0917   FE6A             BIOSSTACK:	.EQU	$
0918   FE6A             
0919   FE6A             biosEnd:	.EQU	$
0920   FE6A             
0921   FE6A             		.END
tasm: Number of errors = 0
