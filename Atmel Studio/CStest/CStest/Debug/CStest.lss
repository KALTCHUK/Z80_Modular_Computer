
CStest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001aa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000085c  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000690  00000000  00000000  00000b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d6  00000000  00000000  00001194  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  0000146c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038e  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000125  00000000  00000000  00001896  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000019bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_1>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ea       	ldi	r30, 0xAA	; 170
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 c5 00 	call	0x18a	; 0x18a <main>
  8e:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <mySend>:

char	i=1;

void mySend(char send_this)
{
	while ( !( UCSR0A & (1<<UDRE0)) )
  96:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  9a:	95 ff       	sbrs	r25, 5
  9c:	fc cf       	rjmp	.-8      	; 0x96 <mySend>
	{}
	UDR0 = send_this;
  9e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  a2:	08 95       	ret

000000a4 <USART_Init>:
}

void USART_Init( unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
  a4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
  a8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	/* Enable receiver, transmitter and RX_complete interrupt */
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
  ac:	88 e9       	ldi	r24, 0x98	; 152
  ae:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	/* Set frame format: 8N1 */
	UCSR0C = (3<<UCSZ00);
  b2:	86 e0       	ldi	r24, 0x06	; 6
  b4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  b8:	08 95       	ret

000000ba <__vector_1>:
}

ISR(INT0_vect)			// Houston, we got a chip_select... CPU wants something
{
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	2f 93       	push	r18
  c6:	3f 93       	push	r19
  c8:	4f 93       	push	r20
  ca:	5f 93       	push	r21
  cc:	6f 93       	push	r22
  ce:	7f 93       	push	r23
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
  d4:	af 93       	push	r26
  d6:	bf 93       	push	r27
  d8:	ef 93       	push	r30
  da:	ff 93       	push	r31
	char	operation;		//snapshots from I/O pins
	
	operation = PINC & 0x7;
  dc:	86 b1       	in	r24, 0x06	; 6
  de:	87 70       	andi	r24, 0x07	; 7
	
	RSM_LO;
  e0:	98 b1       	in	r25, 0x08	; 8
  e2:	97 7f       	andi	r25, 0xF7	; 247
  e4:	98 b9       	out	0x08, r25	; 8
	RSM_HI;
  e6:	98 b1       	in	r25, 0x08	; 8
  e8:	98 60       	ori	r25, 0x08	; 8
  ea:	98 b9       	out	0x08, r25	; 8
	switch (operation)
  ec:	83 30       	cpi	r24, 0x03	; 3
  ee:	81 f1       	breq	.+96     	; 0x150 <__vector_1+0x96>
  f0:	18 f4       	brcc	.+6      	; 0xf8 <__vector_1+0x3e>
  f2:	82 30       	cpi	r24, 0x02	; 2
  f4:	01 f1       	breq	.+64     	; 0x136 <__vector_1+0x7c>
  f6:	38 c0       	rjmp	.+112    	; 0x168 <__vector_1+0xae>
  f8:	84 30       	cpi	r24, 0x04	; 4
  fa:	19 f0       	breq	.+6      	; 0x102 <__vector_1+0x48>
  fc:	85 30       	cpi	r24, 0x05	; 5
  fe:	71 f0       	breq	.+28     	; 0x11c <__vector_1+0x62>
 100:	33 c0       	rjmp	.+102    	; 0x168 <__vector_1+0xae>
	{
		case 4:		// read data
			mySend('r');
 102:	82 e7       	ldi	r24, 0x72	; 114
 104:	0e 94 4b 00 	call	0x96	; 0x96 <mySend>
			mySend('d');
 108:	84 e6       	ldi	r24, 0x64	; 100
 10a:	0e 94 4b 00 	call	0x96	; 0x96 <mySend>
			mySend(CR);
 10e:	8d e0       	ldi	r24, 0x0D	; 13
 110:	0e 94 4b 00 	call	0x96	; 0x96 <mySend>
			mySend(LF);
 114:	8a e0       	ldi	r24, 0x0A	; 10
 116:	0e 94 4b 00 	call	0x96	; 0x96 <mySend>
			break;
 11a:	26 c0       	rjmp	.+76     	; 0x168 <__vector_1+0xae>
		case 5:		// read status
			mySend('r');
 11c:	82 e7       	ldi	r24, 0x72	; 114
 11e:	0e 94 4b 00 	call	0x96	; 0x96 <mySend>
			mySend('s');
 122:	83 e7       	ldi	r24, 0x73	; 115
 124:	0e 94 4b 00 	call	0x96	; 0x96 <mySend>
			mySend(CR);
 128:	8d e0       	ldi	r24, 0x0D	; 13
 12a:	0e 94 4b 00 	call	0x96	; 0x96 <mySend>
			mySend(LF);
 12e:	8a e0       	ldi	r24, 0x0A	; 10
 130:	0e 94 4b 00 	call	0x96	; 0x96 <mySend>
			break;
 134:	19 c0       	rjmp	.+50     	; 0x168 <__vector_1+0xae>
		case 2:		// write data
			mySend('w');
 136:	87 e7       	ldi	r24, 0x77	; 119
 138:	0e 94 4b 00 	call	0x96	; 0x96 <mySend>
			mySend('d');
 13c:	84 e6       	ldi	r24, 0x64	; 100
 13e:	0e 94 4b 00 	call	0x96	; 0x96 <mySend>
			mySend(CR);
 142:	8d e0       	ldi	r24, 0x0D	; 13
 144:	0e 94 4b 00 	call	0x96	; 0x96 <mySend>
			mySend(LF);
 148:	8a e0       	ldi	r24, 0x0A	; 10
 14a:	0e 94 4b 00 	call	0x96	; 0x96 <mySend>
			break;
 14e:	0c c0       	rjmp	.+24     	; 0x168 <__vector_1+0xae>
		case 3:		// write command
			mySend('w');
 150:	87 e7       	ldi	r24, 0x77	; 119
 152:	0e 94 4b 00 	call	0x96	; 0x96 <mySend>
			mySend('c');
 156:	83 e6       	ldi	r24, 0x63	; 99
 158:	0e 94 4b 00 	call	0x96	; 0x96 <mySend>
			mySend(CR);
 15c:	8d e0       	ldi	r24, 0x0D	; 13
 15e:	0e 94 4b 00 	call	0x96	; 0x96 <mySend>
			mySend(LF);
 162:	8a e0       	ldi	r24, 0x0A	; 10
 164:	0e 94 4b 00 	call	0x96	; 0x96 <mySend>
			break;
	}
}
 168:	ff 91       	pop	r31
 16a:	ef 91       	pop	r30
 16c:	bf 91       	pop	r27
 16e:	af 91       	pop	r26
 170:	9f 91       	pop	r25
 172:	8f 91       	pop	r24
 174:	7f 91       	pop	r23
 176:	6f 91       	pop	r22
 178:	5f 91       	pop	r21
 17a:	4f 91       	pop	r20
 17c:	3f 91       	pop	r19
 17e:	2f 91       	pop	r18
 180:	0f 90       	pop	r0
 182:	0f be       	out	0x3f, r0	; 63
 184:	0f 90       	pop	r0
 186:	1f 90       	pop	r1
 188:	18 95       	reti

0000018a <main>:

int main(void)
{
	USART_Init(MYUBRR);
 18a:	8f e1       	ldi	r24, 0x1F	; 31
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 52 00 	call	0xa4	; 0xa4 <USART_Init>
	DDRC |= (1<<RSM);
 192:	87 b1       	in	r24, 0x07	; 7
 194:	88 60       	ori	r24, 0x08	; 8
 196:	87 b9       	out	0x07, r24	; 7
	RSM_HI;
 198:	88 b1       	in	r24, 0x08	; 8
 19a:	88 60       	ori	r24, 0x08	; 8
 19c:	88 b9       	out	0x08, r24	; 8
	EIMSK = (1<<INT0);		// enable INT0 (CS)
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	8d bb       	out	0x1d, r24	; 29
	
	sei();
 1a2:	78 94       	sei
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <main+0x1a>

000001a6 <_exit>:
 1a6:	f8 94       	cli

000001a8 <__stop_program>:
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <__stop_program>
