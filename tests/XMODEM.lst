0001   0000             ;================================================================================================
0002   0000             ; XMODEM [drive:]filename r/s - Receive or send file using xmodem protocol.
0003   0000             ;================================================================================================
0004   0000             BOOT		.EQU	0
0005   0000             BIOS		.EQU	0E600H				; BIOS entry point
0006   0000             LEAP		.EQU	3					; 3 bytes for each entry (JP aaaa)
0007   0000             BDOS		.EQU	5
0008   0000             
0009   0000             FCB			.EQU	05CH
0010   0000             FCB2		.EQU	06CH
0011   0000             DMA			.EQU	080H
0012   0000             TPA			.EQU	100H
0013   0000             
0014   0000             MAXTRY		.EQU	10
0015   0000             
0016   0000             ;================================================================================================
0017   0000             ; BIOS FUNCTIONS
0018   0000             ;================================================================================================
0019   0000             CONST:		.EQU	BIOS+(LEAP*2)		; 2 Console status (regA).
0020   0000             CONIN:		.EQU	BIOS+(LEAP*3)		; 3 Console input (regA).
0021   0000             CONOUT:		.EQU	BIOS+(LEAP*4)		; 4 Console output (regC).
0022   0000             LIST:		.EQU	BIOS+(LEAP*5)		; 3 List output (regC).
0023   0000             LISTST:		.EQU	BIOS+(LEAP*15)		; 2 List status (regA).
0024   0000             PRINTSEQ:	.EQU	BIOS+(LEAP*17)		; 4 Print sequence of chars ending with zero.
0025   0000             
0026   0000             ;================================================================================================
0027   0000             ; BDOS FUNCTIONS
0028   0000             ;================================================================================================
0029   0000             GET_IOB		.EQU	7
0030   0000             SET_IOB		.EQU	8
0031   0000             F_OPEN		.EQU	15
0032   0000             F_CLOSE		.EQU	16
0033   0000             F_DELETE	.EQU	19
0034   0000             F_READ		.EQU	20
0035   0000             F_WRITE		.EQU	21
0036   0000             F_MAKE		.EQU	22
0037   0000             F_DMA		.EQU	26
0038   0000             
0039   0000             ;================================================================================================
0040   0000             ; ASCII characters.
0041   0000             ;================================================================================================
0042   0000             NUL			.EQU	00H
0043   0000             SOH			.EQU	01H
0044   0000             STX			.EQU	02H
0045   0000             ETX			.EQU	03H
0046   0000             EOT			.EQU	04H
0047   0000             ENQ			.EQU	05H
0048   0000             ACK			.EQU	06H
0049   0000             BEL			.EQU	07H
0050   0000             BS			.EQU	08H	
0051   0000             HT			.EQU	09H
0052   0000             LF			.EQU	0AH
0053   0000             VT			.EQU	0BH
0054   0000             FF			.EQU	0CH
0055   0000             CR			.EQU	0DH
0056   0000             SO			.EQU	0EH
0057   0000             SI			.EQU	0FH
0058   0000             DLE			.EQU	10H
0059   0000             DC1			.EQU	11H
0060   0000             DC2			.EQU	12H
0061   0000             DC3			.EQU	13H
0062   0000             DC4			.EQU	14H
0063   0000             NAK			.EQU	15H
0064   0000             SYN			.EQU	16H
0065   0000             ETB			.EQU	17H
0066   0000             CAN			.EQU	18H
0067   0000             EM			.EQU	19H
0068   0000             SUB			.EQU	1AH
0069   0000             ESC			.EQU	1BH
0070   0000             FS			.EQU	1CH
0071   0000             GS			.EQU	1DH
0072   0000             RS			.EQU	1EH
0073   0000             US			.EQU	1FH
0074   0000             
0075   0000             ;================================================================================================
0076   0000             ; PROGRAM STARTS HERE
0077   0000             ;================================================================================================
0078   0100             			.ORG	TPA
0079   0100             
0080   0100 3A 5D 00    START:		LD	A,(FCB+1)			; Check if we have filename.
0081   0103 FE 20       			CP	' '
0082   0105 20 1C       			JR	NZ,FNAMEOK
0083   0107 CD 33 E6    			CALL PRINTSEQ
0084   010A 0D 0A 4D 69 			.DB	CR,LF,"Missing filename.",CR,LF,0
0084   010E 73 73 69 6E 
0084   0112 67 20 66 69 
0084   0116 6C 65 6E 61 
0084   011A 6D 65 2E 0D 
0084   011E 0A 00 
0085   0120 C3 00 00    			JP	BOOT
0086   0123             
0087   0123 0E 07       FNAMEOK:	LD	C,GET_IOB
0088   0125 CD 05 00    			CALL BDOS
0089   0128 F6 C0       			OR	0C0H
0090   012A 5F          			LD	E,A					; Set LCD as LIST device.
0091   012B 0E 08       			LD	C,SET_IOB
0092   012D CD 05 00    			CALL BDOS
0093   0130 0E 11       			LD	C,DC1
0094   0132 CD 0F E6    			CALL LIST				; Init LCD
0095   0135 3E 00       			LD	A,0
0096   0137 32 6B 03    			LD	(RETRY),A			; Reset retry counter.
0097   013A 3A 6C 00    			LD	A,(FCB2)			; Check if it's a send or receive operation.		
0098   013D FE 53       			CP	'S'
0099   013F CA 3A 02    			JP	Z,SENDOP
0100   0142 FE 73       			CP	's'
0101   0144 CA 3A 02    			JP	Z,SENDOP
0102   0147             						
0103   0147             ;================================================================================================
0104   0147             ; RECEIVE FILE OPERATION
0105   0147             ;================================================================================================
0106   0147 0E 13       RECOP:		LD	C,F_DELETE			; Delete file.
0107   0149 11 5C 00    			LD	DE,FCB
0108   014C CD 05 00    			CALL BDOS
0109   014F 0E 16       			LD	C,F_MAKE			; Create file.
0110   0151 11 5C 00    			LD	DE,FCB
0111   0154 CD 05 00    			CALL BDOS
0112   0157 FE 00       			CP	0					; Got error?
0113   0159 20 06       			JR	NZ,ALIVE
0114   015B 11 28 03    			LD	DE,MSGME
0115   015E C3 2F 02    			JP	LEXIT
0116   0161             			
0117   0161 CD 6E 02    ALIVE:		CALL SENDNAK
0118   0164 06 05       GET1ST:		LD	B,5
0119   0166 CD D2 02    			CALL TOCONIN			; 5s timeout
0120   0169 38 0D       			JR	C,REPEAT			; Timed out?
0121   016B FE 04       			CP	EOT
0122   016D 28 1A       			JR	Z,GOTEOT			; EOT?
0123   016F FE 18       			CP	CAN
0124   0171 CA 00 00    			JP	Z,BOOT				; CAN?
0125   0174 FE 01       			CP	SOH
0126   0176 28 32       			JR	Z,GOTSOH			; SOH?
0127   0178 3A 6B 03    REPEAT:		LD	A,(RETRY)
0128   017B 3C          			INC	A
0129   017C 32 6B 03    			LD	(RETRY),A
0130   017F FE 0A       			CP	(MAXTRY)
0131   0181 20 DE       			JR	NZ,ALIVE			; Try again?
0132   0183 CD 74 02    OUT3:		CALL SENDCAN
0133   0186 C3 00 00    			JP	BOOT
0134   0189             			
0135   0189 CD 6E 02    GOTEOT:		CALL SENDNAK
0136   018C 06 01       			LD	B,1
0137   018E CD D2 02    			CALL TOCONIN
0138   0191 CD 68 02    			CALL SENDACK
0139   0194 0E 10       			LD	C,F_CLOSE			; Create file.
0140   0196 11 5C 00    			LD	DE,FCB
0141   0199 CD 05 00    			CALL BDOS
0142   019C FE FF       			CP	0FFH				; Did we get an error while closing the file?
0143   019E C2 00 00    			JP	NZ,BOOT
0144   01A1 11 35 03    			LD	DE,MSGCE
0145   01A4 CD C7 02    			CALL LISTSEQ
0146   01A7 C3 00 00    			JP	BOOT
0147   01AA             
0148   01AA 3E 00       GOTSOH:		LD	A,0
0149   01AC 32 6C 03    			LD	(CHKSUM),A			; Reset checksum
0150   01AF 21 80 00    			LD	HL,DMA				; Reset byte counter
0151   01B2 06 01       			LD	B,1
0152   01B4 CD D2 02    			CALL TOCONIN			; Get incoming block number
0153   01B7 38 1F       			JR	C,OUT2				; Timed out?
0154   01B9 4F          			LD	C,A					; Save incoming block number
0155   01BA 06 01       			LD	B,1
0156   01BC CD D2 02    			CALL TOCONIN			; Get complement of incoming block number
0157   01BF 38 17       			JR	C,OUT2				; Timed out?
0158   01C1 2F          			CPL
0159   01C2 B9          			CP	C
0160   01C3 20 13       			JR	NZ,OUT2				; block = //block?
0161   01C5 3A 6D 03    			LD	A,(BLOCK)
0162   01C8 B9          			CP	C					; Is block number what we expected?
0163   01C9 28 16       			JR	Z,RECPACK
0164   01CB 3D          			DEC	A
0165   01CC B9          			CP	C					; block number is the anterior? Probably sender missed our ACK.
0166   01CD 20 09       			JR	NZ,OUT2
0167   01CF CD F5 02    ANTBLK:		CALL PURGE				; Purge input buffer before sending ACK
0168   01D2 CD 68 02    			CALL SENDACK
0169   01D5 C3 64 01    			JP	GET1ST
0170   01D8             
0171   01D8 CD F5 02    OUT2:		CALL PURGE
0172   01DB CD 74 02    			CALL SENDCAN
0173   01DE C3 00 00    			JP	BOOT
0174   01E1             
0175   01E1 06 01       RECPACK:	LD	B,1					; Start receiving data packet (128 bytes)
0176   01E3 CD D2 02    			CALL TOCONIN
0177   01E6 38 F0       			JR	C,OUT2				; Timed out?
0178   01E8 77          			LD	(HL),A				; Put byte in buffer
0179   01E9 23          			INC	HL					; Inc buffer pointer
0180   01EA 4F          			LD	C,A
0181   01EB 3A 6C 03    			LD	A,(CHKSUM)
0182   01EE 81          			ADD	A,C
0183   01EF 32 6C 03    			LD	(CHKSUM),A			; Update checksum
0184   01F2 01 00 01    			LD	BC,DMA+128
0185   01F5 37          			SCF
0186   01F6 3F          			CCF
0187   01F7 E5          			PUSH HL					; Save pointer/couter before checkpoint
0188   01F8 ED 42       			SBC	HL,BC				; do the math
0189   01FA E1          			POP	HL					; Recover pointer/counter
0190   01FB 20 E4       			JR	NZ,RECPACK
0191   01FD 06 01       			LD	B,1
0192   01FF CD D2 02    			CALL TOCONIN			; Get checksum
0193   0202 38 D4       			JR	C,OUT2				; Timed out?
0194   0204 4F          			LD	C,A
0195   0205 3A 6C 03    			LD	A,(CHKSUM)
0196   0208 B9          			CP	C
0197   0209 C2 78 01    			JP	NZ,REPEAT			; Checksum OK?
0198   020C 3E 00       			LD	A,0
0199   020E 32 6B 03    			LD	(RETRY),A			; Reset retry counter
0200   0211 3A 6D 03    			LD	A,(BLOCK)
0201   0214 3C          			INC	A
0202   0215 32 6D 03    			LD	(BLOCK),A			; Increment block counter
0203   0218 CD 7A 02    			CALL SAVEBLK			; Save block
0204   021B FE 00       			CP	0
0205   021D 20 0D       			JR	NZ,BWERR			; Oops, we got a block write error
0206   021F CD A1 02    			CALL VERBLK				; Verify block
0207   0222 FE 00       			CP	0
0208   0224 20 0F       			JR	NZ,BVERR			; Oops, we got a block verify error
0209   0226 CD 68 02    			CALL SENDACK
0210   0229 C3 64 01    			JP	GET1ST
0211   022C             
0212   022C 11 43 03    BWERR:		LD	DE,MSGWE
0213   022F CD C7 02    LEXIT:		CALL LISTSEQ
0214   0232 C3 83 01    			JP	OUT3
0215   0235             
0216   0235 11 51 03    BVERR:		LD	DE,MSGVE
0217   0238 18 F5       			JR	LEXIT
0218   023A             
0219   023A             ;================================================================================================
0220   023A             ; SEND FILE OPERATION
0221   023A             ;================================================================================================
0222   023A CD 33 E6    SENDOP:		CALL PRINTSEQ
0223   023D 0D 0A 53 65 			.DB	CR,LF,"Send operation not implemented yet.",CR,LF,0
0223   0241 6E 64 20 6F 
0223   0245 70 65 72 61 
0223   0249 74 69 6F 6E 
0223   024D 20 6E 6F 74 
0223   0251 20 69 6D 70 
0223   0255 6C 65 6D 65 
0223   0259 6E 74 65 64 
0223   025D 20 79 65 74 
0223   0261 2E 0D 0A 00 
0224   0265 C3 00 00    			JP	BOOT
0225   0268             
0226   0268             ;================================================================================================
0227   0268             ; SEND ACK TO CONSOLE
0228   0268             ;================================================================================================
0229   0268 0E 06       SENDACK:	LD C,ACK
0230   026A CD 0C E6    			CALL CONOUT
0231   026D C9          			RET
0232   026E             
0233   026E             ;================================================================================================
0234   026E             ; SEND NAK TO CONSOLE
0235   026E             ;================================================================================================
0236   026E 0E 15       SENDNAK:	LD C,NAK
0237   0270 CD 0C E6    			CALL CONOUT
0238   0273 C9          			RET
0239   0274             
0240   0274             ;================================================================================================
0241   0274             ; SEND CAN TO CONSOLE
0242   0274             ;================================================================================================
0243   0274 0E 18       SENDCAN:	LD C,CAN
0244   0276 CD 0C E6    			CALL CONOUT
0245   0279 C9          			RET
0246   027A             
0247   027A             ;================================================================================================
0248   027A             ; SAVE BLOCK ON DISK (WRITE TO FILE)
0249   027A             ;================================================================================================
0250   027A 3A 6D 03    SAVEBLK:	LD	A,(BLOCK)
0251   027D 3D          			DEC	A
0252   027E 47          			LD	B,A
0253   027F CD FD 02    			CALL B2HL				; Convert block number to ASCII
0254   0282 7C          			LD	A,H
0255   0283 32 68 03    			LD	(MSGBNUM),A
0256   0286 7D          			LD	A,L
0257   0287 32 69 03    			LD	(MSGBNUM+1),A
0258   028A 11 60 03    			LD	DE,MSGBLK
0259   028D CD C7 02    			CALL LISTSEQ			; Send block number to LIST (LCD).
0260   0290 0E 1A       			LD	C,F_DMA
0261   0292 11 80 00    			LD	DE,DMA
0262   0295 CD 05 00    			CALL BDOS				; Set DMA before file write.
0263   0298 0E 15       			LD	C,F_WRITE
0264   029A 11 5C 00    			LD	DE,FCB
0265   029D CD 05 00    			CALL BDOS				; Write block to file.
0266   02A0 C9          			RET
0267   02A1             			
0268   02A1             ;================================================================================================
0269   02A1             ; VERIFY BLOCK ON DISK (COMPARE WRITTEN BLOCK TO SOURCE ON RAM)
0270   02A1             ;================================================================================================
0271   02A1 0E 1A       VERBLK:		LD	C,F_DMA
0272   02A3 11 6E 03    			LD	DE,DMA4VER
0273   02A6 CD 05 00    			CALL BDOS				; Set DMA before file read.
0274   02A9 0E 14       			LD	C,F_READ
0275   02AB 11 5C 00    			LD	DE,FCB
0276   02AE CD 05 00    			CALL BDOS				; Read block from file.
0277   02B1 06 00       			LD	B,0
0278   02B3 21 80 00    			LD	HL,DMA
0279   02B6 11 6E 03    			LD	DE,DMA4VER
0280   02B9 1A          VERNEXT:	LD	A,(DE)
0281   02BA BE          			CP	(HL)				; Compare blocks.
0282   02BB 20 07       			JR	NZ,VERR
0283   02BD 13          			INC	DE
0284   02BE 23          			INC HL
0285   02BF 10 F8       			DJNZ VERNEXT
0286   02C1 3E 00       			LD	A,0
0287   02C3 C9          			RET
0288   02C4 3E FF       VERR:		LD  A,0FFH
0289   02C6 C9          			RET
0290   02C7             
0291   02C7             ;==================================================================================
0292   02C7             ; List a string pointed by DE and ending with zero.
0293   02C7             ;==================================================================================
0294   02C7 1A          LISTSEQ:	LD	A,(DE)
0295   02C8 FE 00       			CP	0
0296   02CA C8          			RET	Z
0297   02CB 4F          			LD	C,A
0298   02CC CD 0F E6    			CALL LIST
0299   02CF 13          			INC DE
0300   02D0 18 F5       			JR	LISTSEQ
0301   02D2             			
0302   02D2             ;==================================================================================
0303   02D2             ; Timed Out Console Input - X seconds, with X passed on reg B
0304   02D2             ; Incoming byte, if any, returns in A
0305   02D2             ; Carry flag set if timed out.
0306   02D2             ;==================================================================================
0307   02D2 C5          TOCONIN:	PUSH	BC
0308   02D3 E5          			PUSH	HL
0309   02D4             			
0310   02D4 21 AD 02    LOOP0:		LD	HL,685				;2.5					\
0311   02D7 0E 23       LOOP1:		LD	C,35				;1.75	\				|
0312   02D9 CD 06 E6    LOOP2:		CALL CONST				;36.5	|t=41.5C+0.5	| 
0313   02DC 3C          			INC	A					;1		|				|
0314   02DD 28 0E       			JR	Z,BWAITING			;3/1.75	|				| t=HL(41.5C+6.5)+1.25
0315   02DF 79          			LD	A,C					;1		|				|
0316   02E0 0D          			DEC	C					;1		|				|
0317   02E1 20 F6       			JR	NZ,LOOP2			;3/1.75	/				| with HL=685 and c=35,
0318   02E3 2B          			DEC	HL					;1						|  t=0.9994sec (WOW!!!)
0319   02E4 7C          			LD	A,H					;1						|
0320   02E5 B5          			OR	L					;1						|
0321   02E6 20 EF       			JR	NZ,LOOP1			;3/1.75					/
0322   02E8 10 EA       			DJNZ	LOOP0			;3.25/2
0323   02EA 37          			SCF
0324   02EB 18 05       			JR	TOUT
0325   02ED CD 09 E6    BWAITING:	CALL CONIN
0326   02F0 37          			SCF						; Reset carry flag
0327   02F1 3F          			CCF
0328   02F2 E1          TOUT:		POP	HL
0329   02F3 C1          			POP	BC
0330   02F4 C9          			RET
0331   02F5             
0332   02F5             ;==================================================================================
0333   02F5             ; Purge console input.
0334   02F5             ;==================================================================================
0335   02F5 06 03       PURGE:		LD	B,3
0336   02F7 CD D2 02    			CALL TOCONIN
0337   02FA 30 F9       			JR	NC,PURGE
0338   02FC C9          			RET
0339   02FD             
0340   02FD             ;================================================================================================
0341   02FD             ; Convert HEX to ASCII (B --> HL)
0342   02FD             ;================================================================================================
0343   02FD C5          B2HL:		PUSH	BC
0344   02FE 78          			LD	A,B
0345   02FF E6 0F       			AND	0FH
0346   0301 6F          			LD	L,A
0347   0302 D6 0A       			SUB	0AH
0348   0304 0E 30       			LD	C,030H
0349   0306 DA 0B 03    			JP	C,COMPENSE
0350   0309 0E 37       			LD	C,037H
0351   030B 7D          COMPENSE:	LD	A,L
0352   030C 81          			ADD	A,C
0353   030D 6F          			LD	L,A
0354   030E 78          			LD	A,B
0355   030F E6 F0       			AND	0F0H
0356   0311 CB 3F       			SRL	A
0357   0313 CB 3F       			SRL	A
0358   0315 CB 3F       			SRL	A
0359   0317 CB 3F       			SRL	A
0360   0319 67          			LD	H,A
0361   031A D6 0A       			SUB	0AH
0362   031C 0E 30       			LD	C,030H
0363   031E DA 23 03    			JP	C,COMPENSE2
0364   0321 0E 37       			LD	C,037H
0365   0323 7C          COMPENSE2:	LD	A,H
0366   0324 81          			ADD	A,C
0367   0325 67          			LD	H,A
0368   0326 C1          			POP	BC
0369   0327 C9          			RET
0370   0328             
0371   0328             ;==================================================================================
0372   0328             ; MESSAGE STRINGS
0373   0328             ;==================================================================================
0374   0328 0D 0A 4D 41 MSGME		.DB	CR,LF,"MAKE ERROR",0
0374   032C 4B 45 20 45 
0374   0330 52 52 4F 52 
0374   0334 00 
0375   0335 0D 0A 43 4C MSGCE		.DB	CR,LF,"CLOSE ERROR",0
0375   0339 4F 53 45 20 
0375   033D 45 52 52 4F 
0375   0341 52 00 
0376   0343 0D 0A 57 52 MSGWE		.DB	CR,LF,"WRITE ERROR",0
0376   0347 49 54 45 20 
0376   034B 45 52 52 4F 
0376   034F 52 00 
0377   0351 0D 0A 56 45 MSGVE		.DB	CR,LF,"VERIFY ERROR",0
0377   0355 52 49 46 59 
0377   0359 20 45 52 52 
0377   035D 4F 52 00 
0378   0360 0D 0A 42 4C MSGBLK		.DB CR,LF,"BLOCK "
0378   0364 4F 43 4B 20 
0379   0368 00 00 00    MSGBNUM		.DB	0,0,0
0380   036B             
0381   036B             ;==================================================================================
0382   036B             ; VARIABLES AND BUFFERS
0383   036B             ;==================================================================================
0384   036B 00          RETRY		.DB	0
0385   036C 00          CHKSUM		.DB	0
0386   036D 00          BLOCK		.DB	0
0387   036E             DMA4VER		.DS	128
0388   03EE             
0389   03EE             			
0390   03EE             			.END
tasm: Number of errors = 0
