0001   0000             ;==================================================================================
0002   0000             ; XMODEM.ASM version 1 - Kaltchuk, feb/2021
0003   0000             ;
0004   0000             ; This program implements xmodem protocol on CP/M. 
0005   0000             ; Only uploads (Windows --> CP/M)
0006   0000             ;
0007   0000             ; On the Windows console there's a counterpart program - XMODEM.PY, which starts
0008   0000             ; the application on CP/M.
0009   0000             ;==================================================================================
0010   0000             REBOOT		.EQU	0H
0011   0000             BDOS		.EQU	5H
0012   0000             TPA			.EQU	0100H
0013   0000             BIOS		.EQU	0E600h			; Base of BIOS.
0014   0000             
0015   0000             CONST		.EQU	BIOS+(3*2)		; BIOS entry for Console Status (regA=0FFh, char waiting. regA=0, buff empty)
0016   0000             CONIN		.EQU	BIOS+(3*3)		; BIOS entry for Console Input (console --> regA)
0017   0000             CONOUT		.EQU	BIOS+(3*4)		; BIOS entry for Console Output (regC --> console)
0018   0000             C_STRING	.EQU	9
0019   0000             F_CLOSE		.EQU	16
0020   0000             F_DELETE	.EQU	19
0021   0000             F_WRITE		.EQU	21
0022   0000             F_MAKE		.EQU	22
0023   0000             F_DMAOFF	.EQU	26
0024   0000             
0025   0000             SOH			.EQU	01H
0026   0000             EOT			.EQU	04H
0027   0000             ACK			.EQU	06H
0028   0000             LF			.EQU	0AH
0029   0000             CR			.EQU	0DH
0030   0000             NAK			.EQU	015H
0031   0000             CAN			.EQU	018H
0032   0000             SUB			.EQU	01AH
0033   0000             		
0034   0000             FCB			.EQU	0005CH
0035   0000             DMA			.EQU	080H
0036   0000             ;==================================================================================
0037   0100             			.ORG TPA
0038   0100             
0039   0100 31 A9 02    			LD	SP,STACK			; Set default stack.
0040   0103 3A 5D 00    			LD	A,(FCB+1)
0041   0106 FE 20       			CP	' '					; Test if program has argument (file name)
0042   0108 20 0B       			JR	NZ,START
0043   010A 11 0A 02    			LD	DE,MSG
0044   010D 0E 09       			LD	C,C_STRING
0045   010F CD 05 00    			CALL BDOS
0046   0112 C3 00 00    			JP	REBOOT
0047   0115 21 80 00    START:		LD	HL,DMA				; Initialize buffer pointer
0048   0118 22 84 02    			LD	(BUFPTR),HL
0049   011B 3E 00       			LD	A,0
0050   011D 32 87 02    			LD	(RETRY),A			; Initialize retry counter
0051   0120 3C          			INC	A
0052   0121 32 88 02    			LD	(BLOCK),A			; Initialize block counter
0053   0124 CD D4 01    			CALL DELFILE			; Delete file
0054   0127 CD DD 01    			CALL MAKEFILE			; Create file
0055   012A FE 04       			CP	4					; 0, 1, 2 or 3 = OK
0056   012C FA 35 01    			JP	M,ALIVE
0057   012F CD FB 01    CANCEL:		CALL SENDCAN
0058   0132 C3 00 00    			JP	REBOOT
0059   0135             
0060   0135 CD F5 01    ALIVE:		CALL SENDNAK
0061   0138 CD 09 E6    GETCHAR:	CALL CONIN				; Get 1st char
0062   013B FE 04       			CP	EOT					; Is it the end?
0063   013D CA C0 01    			JP	Z,CLOSE
0064   0140 FE 18       			CP	CAN					; Is it a cancel request?
0065   0142 CA 00 00    			JP	Z,REBOOT
0066   0145 FE 01       			CP	SOH					; Is a new block arriving?
0067   0147 20 EF       			JR	NZ,GETCHAR
0068   0149 3E 00       HEADER:		LD	A,0
0069   014B 32 86 02    			LD	(CHKSUM),A			; Reset checksum
0070   014E 21 80 00    			LD	HL,DMA
0071   0151 22 84 02    			LD	(BUFPTR),HL			; Reset buffer pointer
0072   0154 CD 09 E6    			CALL CONIN				; Get block number
0073   0157 47          			LD	B,A
0074   0158 CD 09 E6    			CALL CONIN				; Get /block number
0075   015B 80          			ADD	A,B
0076   015C FE FF       			CP	0FFH
0077   015E 20 CF       			JR	NZ, CANCEL
0078   0160 3A 88 02    			LD	A,(BLOCK)
0079   0163 2F          			CPL
0080   0164 B8          			CP	B
0081   0165 28 17       			JR	Z,GOOD2GO
0082   0167 3D          			DEC	A
0083   0168 B8          			CP	B					; Xmitter repeating last block?
0084   0169 20 C4       			JR	NZ,CANCEL			; Probably he missed my ACK signal.
0085   016B CD EF 01    			CALL SENDACK			; Resend ACK and go wait for next SOH
0086   016E 18 C8       			JR	GETCHAR
0087   0170             			
0088   0170 3A 87 02    AGAIN:		LD	A,(RETRY)
0089   0173 3C          			INC	A
0090   0174 32 87 02    			LD	(RETRY),A			; Increment retry counter
0091   0177 FE 04       			CP	4
0092   0179 F2 2F 01    			JP	P,CANCEL
0093   017C 18 B7       			JR	ALIVE
0094   017E             
0095   017E CD 09 E6    GOOD2GO:	CALL CONIN
0096   0181 2A 84 02    			LD	HL,(BUFPTR)
0097   0184 77          			LD	(HL),A				; Put received byte in buffer
0098   0185 23          			INC	HL
0099   0186 22 84 02    			LD	(BUFPTR),HL			; Increment buffer pointer
0100   0189 47          			LD	B,A
0101   018A 3A 86 02    			LD	A,(CHKSUM)
0102   018D 80          			ADD	A,B
0103   018E 32 86 02    			LD	(CHKSUM),A			; Update checksum
0104   0191 7C          			LD	A,H
0105   0192 FE 01       			CP	1					; Check if we reached the end of the buffer (0FFh is the last valid position)
0106   0194 20 E8       			JR	NZ,GOOD2GO
0107   0196 CD 09 E6    			CALL CONIN				; Receive checksum
0108   0199 47          			LD	B,A
0109   019A 3A 86 02    			LD	A,(CHKSUM)
0110   019D B8          			CP	B
0111   019E 20 D0       			JR	NZ,AGAIN			; See if checksum is OK
0112   01A0 3A 88 02    			LD	A, (BLOCK)
0113   01A3 3C          			INC	A
0114   01A4 32 88 02    			LD	(BLOCK),A			; Increment block counter
0115   01A7 3E 00       			LD	A,0
0116   01A9 32 87 02    			LD	(RETRY),A			; Reset retry counter
0117   01AC 21 80 00    			LD	HL,DMA
0118   01AF 22 84 02    			LD	(BUFPTR),HL			; Reset buffer pointer
0119   01B2 CD 01 02    			CALL WRITEBLK
0120   01B5 FE 00       			CP	0
0121   01B7 C2 2F 01    			JP	NZ,CANCEL
0122   01BA CD EF 01    			CALL SENDACK
0123   01BD C3 38 01    			JP	GETCHAR
0124   01C0             			
0125   01C0 CD F5 01    CLOSE:		CALL SENDNAK
0126   01C3 CD 09 E6    			CALL CONIN
0127   01C6 FE 04       			CP	EOT
0128   01C8 C2 2F 01    			JP	NZ, CANCEL
0129   01CB CD EF 01    			CALL SENDACK
0130   01CE CD E6 01    			CALL CLOSFILE
0131   01D1 C3 00 00    			JP	REBOOT
0132   01D4             			
0133   01D4             ;==================================================================================
0134   01D4             ; Delete file. Returns 0, 1, 2 or 3 if successful.
0135   01D4             ;==================================================================================
0136   01D4 0E 13       DELFILE:	LD	C,F_DELETE			; Delete file
0137   01D6 11 5C 00    			LD	DE,FCB
0138   01D9 CD 05 00    			CALL BDOS
0139   01DC C9          			RET
0140   01DD             			
0141   01DD             ;==================================================================================
0142   01DD             ; Make file. Returns 0, 1, 2 or 3 if successful.
0143   01DD             ;==================================================================================
0144   01DD 0E 16       MAKEFILE:	LD	C,F_MAKE			; Create file
0145   01DF 11 5C 00    			LD	DE,FCB
0146   01E2 CD 05 00    			CALL BDOS
0147   01E5 C9          			RET
0148   01E6             
0149   01E6             ;==================================================================================
0150   01E6             ; Close file. Returns 0, 1, 2 or 3 if successful.
0151   01E6             ;==================================================================================
0152   01E6 0E 10       CLOSFILE:	LD	C,F_CLOSE			; Close file
0153   01E8 11 5C 00    			LD	DE,FCB
0154   01EB CD 05 00    			CALL BDOS
0155   01EE C9          			RET
0156   01EF             			
0157   01EF             ;==================================================================================
0158   01EF             ; Send ACK
0159   01EF             ;==================================================================================
0160   01EF 0E 06       SENDACK:	LD C,ACK
0161   01F1 CD 0C E6    			CALL CONOUT
0162   01F4 C9          			RET
0163   01F5             
0164   01F5             ;==================================================================================
0165   01F5             ; Send NAK
0166   01F5             ;==================================================================================
0167   01F5 0E 15       SENDNAK:	LD C,NAK
0168   01F7 CD 0C E6    			CALL CONOUT
0169   01FA C9          			RET
0170   01FB             
0171   01FB             ;==================================================================================
0172   01FB             ; Send CAN
0173   01FB             ;==================================================================================
0174   01FB 0E 18       SENDCAN:	LD C,CAN
0175   01FD CD 0C E6    			CALL CONOUT
0176   0200 C9          			RET
0177   0201             
0178   0201             ;==================================================================================
0179   0201             ; Write block to file. Returns 0 if successful.
0180   0201             ;==================================================================================
0181   0201 0E 15       WRITEBLK:	LD	C,F_WRITE			; Write buffer to disk.
0182   0203 11 5C 00    			LD	DE,FCB
0183   0206 CD 05 00    			CALL BDOS
0184   0209 C9          			RET
0185   020A             
0186   020A             ;==================================================================================
0187   020A 58 4D 4F 44 MSG:		.DB	"XMODEM 1.0 - Receive a file from console and store it on disk."
0187   020E 45 4D 20 31 
0187   0212 2E 30 20 2D 
0187   0216 20 52 65 63 
0187   021A 65 69 76 65 
0187   021E 20 61 20 66 
0187   0222 69 6C 65 20 
0187   0226 66 72 6F 6D 
0187   022A 20 63 6F 6E 
0187   022E 73 6F 6C 65 
0187   0232 20 61 6E 64 
0187   0236 20 73 74 6F 
0187   023A 72 65 20 69 
0187   023E 74 20 6F 6E 
0187   0242 20 64 69 73 
0187   0246 6B 2E 
0188   0248 0D 0A       			.DB	CR,LF
0189   024A 55 73 65 20 			.DB	"Use 'XMODEM.PY' on Windows console to start this program.$"
0189   024E 27 58 4D 4F 
0189   0252 44 45 4D 2E 
0189   0256 50 59 27 20 
0189   025A 6F 6E 20 57 
0189   025E 69 6E 64 6F 
0189   0262 77 73 20 63 
0189   0266 6F 6E 73 6F 
0189   026A 6C 65 20 74 
0189   026E 6F 20 73 74 
0189   0272 61 72 74 20 
0189   0276 74 68 69 73 
0189   027A 20 70 72 6F 
0189   027E 67 72 61 6D 
0189   0282 2E 24 
0190   0284             
0191   0284 00 00       BUFPTR		.DW	0
0192   0286 00          CHKSUM	 	.DB	0
0193   0287 00          RETRY		.DB 0
0194   0288 00          BLOCK		.DB	0
0195   0289             
0196   0289             			.DS	020h			; Start of stack area.
0197   02A9             STACK		.EQU	$
0198   02A9             
0199   02A9             
0200   02A9             			.END
tasm: Number of errors = 0
