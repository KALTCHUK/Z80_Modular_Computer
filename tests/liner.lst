0001   0000             ;==================================================================================
0002   0000             ; LINER.ASM = MONITOR 2.0 - USE WITH VT100 TERMINAL
0003   0000             ; (Should behave like CCP on CP/M)
0004   0000             ;
0005   0000             ; Backspace = delete last character
0006   0000             ;        ^X = delete all the line
0007   0000             ;
0008   0000             ;==================================================================================
0009   0000             TPA			.EQU	0100H		; Transient Programs Area
0010   0000             MONITOR		.EQU	0D000H		; Monitor entry point
0011   0000             BIOS		.EQU	0E600H		; BIOS entry point
0012   0000             DMA			.EQU	0080H		; Buffer used by Monitor
0013   0000             
0014   0000             ;================================================================================================
0015   0000             ; BIOS functions.
0016   0000             ;================================================================================================
0017   0000             LEAP		.EQU	3					; 3 bytes for each entry (JP aaaa)
0018   0000             
0019   0000             BOOT:		.EQU	BIOS				;  0 Initialize.
0020   0000             WBOOT:		.EQU	BIOS+(LEAP*1)		;  1 Warm boot.
0021   0000             CONST:		.EQU	BIOS+(LEAP*2)		;  2 Console status.
0022   0000             CONIN:		.EQU	BIOS+(LEAP*3)		;  3 Console input.
0023   0000             CONOUT:		.EQU	BIOS+(LEAP*4)		;  4 Console OUTput.
0024   0000             LIST:		.EQU	BIOS+(LEAP*5)		;  5 List OUTput.
0025   0000             PUNCH:		.EQU	BIOS+(LEAP*6)		;  6 Punch OUTput.
0026   0000             READER:		.EQU	BIOS+(LEAP*7)		;  7 Reader input.
0027   0000             HOME:		.EQU	BIOS+(LEAP*8)		;  8 Home disk.
0028   0000             SELDSK:		.EQU	BIOS+(LEAP*9)		;  9 Select disk.
0029   0000             SETTRK:		.EQU	BIOS+(LEAP*10)		; 10 Select track.
0030   0000             SETSEC:		.EQU	BIOS+(LEAP*11)		; 11 Select sector.
0031   0000             SETDMA:		.EQU	BIOS+(LEAP*12)		; 12 Set DMA ADDress.
0032   0000             READ:		.EQU	BIOS+(LEAP*13)		; 13 Read 128 bytes.
0033   0000             WRITE:		.EQU	BIOS+(LEAP*14)		; 14 Write 128 bytes.
0034   0000             LISTST:		.EQU	BIOS+(LEAP*15)		; 15 List status.
0035   0000             SECTRAN:	.EQU	BIOS+(LEAP*16)		; 16 Sector translate.
0036   0000             PRINTSEQ:	.EQU	BIOS+(LEAP*17)		; not a BIOS function
0037   0000             
0038   0000             ;================================================================================================
0039   0000             ; ASCII characters.
0040   0000             ;================================================================================================
0041   0000             NUL			.EQU	00H
0042   0000             SOH			.EQU	01H
0043   0000             STX			.EQU	02H
0044   0000             ETX			.EQU	03H
0045   0000             EOT			.EQU	04H
0046   0000             ENQ			.EQU	05H
0047   0000             ACK			.EQU	06H
0048   0000             BEL			.EQU	07H
0049   0000             BS			.EQU	08H			; ^H
0050   0000             HT			.EQU	09H
0051   0000             LF			.EQU	0AH
0052   0000             VT			.EQU	0BH
0053   0000             FF			.EQU	0CH
0054   0000             CR			.EQU	0DH
0055   0000             SO			.EQU	0EH
0056   0000             SI			.EQU	0FH
0057   0000             DLE			.EQU	10H
0058   0000             DC1			.EQU	11H
0059   0000             DC2			.EQU	12H
0060   0000             DC3			.EQU	13H
0061   0000             DC4			.EQU	14H
0062   0000             NAK			.EQU	15H			; ^U
0063   0000             SYN			.EQU	16H
0064   0000             ETB			.EQU	17H
0065   0000             CAN			.EQU	18H			; ^X
0066   0000             EM			.EQU	19H
0067   0000             SUB			.EQU	1AH
0068   0000             ESC			.EQU	1BH
0069   0000             FS			.EQU	1CH
0070   0000             GS			.EQU	1DH
0071   0000             RS			.EQU	1EH
0072   0000             US			.EQU	1FH
0073   0000             
0074   0000             ;================================================================================================
0075   0000             ; Some constants
0076   0000             ;================================================================================================
0077   0000             MAXLBUF		.EQU	DMA+80
0078   0000             PROMPT		.EQU	'>'
0079   0000             MAXTRY		.EQU	10
0080   0000             
0081   0000             ;================================================================================================
0082   0000             ; MAIN PROGRAM STARTS HERE
0083   0000             ;================================================================================================
0084   0100             			.ORG TPA
0085   0100             
0086   0100 CD 33 E6    			CALL PRINTSEQ
0087   0103 5A 38 30 20 			.DB	"Z80 Modular Computer BIOS 1.0 by Kaltchuk - 2020",CR,LF
0087   0107 4D 6F 64 75 
0087   010B 6C 61 72 20 
0087   010F 43 6F 6D 70 
0087   0113 75 74 65 72 
0087   0117 20 42 49 4F 
0087   011B 53 20 31 2E 
0087   011F 30 20 62 79 
0087   0123 20 4B 61 6C 
0087   0127 74 63 68 75 
0087   012B 6B 20 2D 20 
0087   012F 32 30 32 30 
0087   0133 0D 0A 
0088   0135 4D 6F 6E 69 			.DB	"Monitor 2.0 - 2021",CR,LF,0
0088   0139 74 6F 72 20 
0088   013D 32 2E 30 20 
0088   0141 2D 20 32 30 
0088   0145 32 31 0D 0A 
0088   0149 00 
0089   014A 3E 00       CYCLE:		LD	A,0
0090   014C 32 B1 09    			LD	(ENVIR),A
0091   014F CD 95 08    			CALL PRINTENV
0092   0152 CD 1C 07    			CALL LINER					; Call the line manager
0093   0155 3A 80 00    			LD	A,(DMA)
0094   0158 FE 00       			CP	0
0095   015A 28 EE       			JR	Z,CYCLE					; User ENTERed an empty line. No need to parse.
0096   015C 21 4E 09    			LD	HL,CMDTBL
0097   015F CD C5 07    			CALL PARSER					; Find command comparing buffer with Command Table.
0098   0162 3C          			INC	A
0099   0163 28 01       			JR	Z,UNK					; No match found in command table.
0100   0165 E9          			JP	(HL)					; Jump to Command Routine
0101   0166 CD 01 07    UNK:		CALL UNKNOWN
0102   0169 18 DF       			JR	CYCLE
0103   016B             			
0104   016B             ;================================================================================================
0105   016B             ; Help for main program
0106   016B             ;================================================================================================
0107   016B CD 75 07    HELP:		CALL CRLF
0108   016E CD 33 E6    			CALL PRINTSEQ
0109   0171 20 4F 70 74 			.DB	" Options:   MEMORY",CR,LF
0109   0175 69 6F 6E 73 
0109   0179 3A 20 20 20 
0109   017D 4D 45 4D 4F 
0109   0181 52 59 0D 0A 
0110   0185 20 20 20 20 			.DB "            XMODEM aaaa",CR,LF
0110   0189 20 20 20 20 
0110   018D 20 20 20 20 
0110   0191 58 4D 4F 44 
0110   0195 45 4D 20 61 
0110   0199 61 61 61 0D 
0110   019D 0A 
0111   019E 20 20 20 20 			.DB "            HEX2COM aaaa",CR,LF
0111   01A2 20 20 20 20 
0111   01A6 20 20 20 20 
0111   01AA 48 45 58 32 
0111   01AE 43 4F 4D 20 
0111   01B2 61 61 61 61 
0111   01B6 0D 0A 
0112   01B8 20 20 20 20 			.DB "            LCD",CR,LF
0112   01BC 20 20 20 20 
0112   01C0 20 20 20 20 
0112   01C4 4C 43 44 0D 
0112   01C8 0A 
0113   01C9 20 20 20 20 			.DB "            DISK",CR,LF
0113   01CD 20 20 20 20 
0113   01D1 20 20 20 20 
0113   01D5 44 49 53 4B 
0113   01D9 0D 0A 
0114   01DB 20 20 20 20 			.DB "            RUN aaaa",CR,LF
0114   01DF 20 20 20 20 
0114   01E3 20 20 20 20 
0114   01E7 52 55 4E 20 
0114   01EB 61 61 61 61 
0114   01EF 0D 0A 
0115   01F1 20 20 20 20 			.DB "            BOOT",CR,LF,0
0115   01F5 20 20 20 20 
0115   01F9 20 20 20 20 
0115   01FD 42 4F 4F 54 
0115   0201 0D 0A 00 
0116   0204 C3 4A 01    			JP	CYCLE
0117   0207             			
0118   0207             ;================================================================================================
0119   0207             ; Memory Operations
0120   0207             ;
0121   0207             ; Options:	R aaaa					Read 1 page starting at aaaa. <ENTER>=next_page, <ESC>=quit.
0122   0207             ;			W aaaa,c1 c2 ... cN		Write at aaaa the sequence of characters.
0123   0207             ;			C aaaa-bbbb,cccc		Copy [aaaa ~ bbbb] to cccc.
0124   0207             ;			F aaaa-bbbb,cc			Fill [aaaa ~ bbbb] with cc.
0125   0207             ;			Q						Quit memory ops, return to Monitor.
0126   0207             ;================================================================================================
0127   0207 3E 4D       MEMO:		LD	A,'M'
0128   0209 32 B1 09    			LD	(ENVIR),A				; Set environment variable.
0129   020C CD 95 08    			CALL PRINTENV
0130   020F CD 1C 07    			CALL LINER					; Call the line manager.
0131   0212 3A 80 00    			LD	A,(DMA)
0132   0215 FE 00       			CP	0
0133   0217 28 EE       			JR	Z,MEMO					; User ENTERed an empty line. No need to parse.
0134   0219 21 90 09    			LD	HL,MEMOCT				; Set Memory command table.
0135   021C CD C5 07    			CALL PARSER					; Find command comparing buffer with Command Table.
0136   021F 3C          			INC	A
0137   0220 28 01       			JR	Z,MUNKNOWN				; No match found in command table.
0138   0222 E9          			JP	(HL)					; Jump to Command Routine
0139   0223 CD 01 07    MUNKNOWN:	CALL UNKNOWN
0140   0226 18 DF       			JR	MEMO
0141   0228             			
0142   0228             ;================================================================================================
0143   0228             ; Help for memory operations
0144   0228             ;================================================================================================
0145   0228 CD 75 07    MHELP:		CALL CRLF
0146   022B CD 33 E6    			CALL PRINTSEQ
0147   022E 20 4F 70 74 			.DB	" Options:   R aaaa",CR,LF
0147   0232 69 6F 6E 73 
0147   0236 3A 20 20 20 
0147   023A 52 20 61 61 
0147   023E 61 61 0D 0A 
0148   0242 20 20 20 20 			.DB "            W aaaa,c1 c2 cN",CR,LF
0148   0246 20 20 20 20 
0148   024A 20 20 20 20 
0148   024E 57 20 61 61 
0148   0252 61 61 2C 63 
0148   0256 31 20 63 32 
0148   025A 20 63 4E 0D 
0148   025E 0A 
0149   025F 20 20 20 20 			.DB "            C aaaa-bbbb,cccc",CR,LF
0149   0263 20 20 20 20 
0149   0267 20 20 20 20 
0149   026B 43 20 61 61 
0149   026F 61 61 2D 62 
0149   0273 62 62 62 2C 
0149   0277 63 63 63 63 
0149   027B 0D 0A 
0150   027D 20 20 20 20 			.DB "            F aaaa-bbbb,cc",CR,LF
0150   0281 20 20 20 20 
0150   0285 20 20 20 20 
0150   0289 46 20 61 61 
0150   028D 61 61 2D 62 
0150   0291 62 62 62 2C 
0150   0295 63 63 0D 0A 
0151   0299 20 20 20 20 			.DB "            Q",CR,LF,0
0151   029D 20 20 20 20 
0151   02A1 20 20 20 20 
0151   02A5 51 0D 0A 00 
0152   02A9 C3 07 02    			JP	MEMO
0153   02AC             			
0154   02AC             ;================================================================================================
0155   02AC             ; Quit memory operations
0156   02AC             ;================================================================================================
0157   02AC C3 4A 01    MQUIT:		JP	CYCLE					; Quit memory ops, return to monitor.
0158   02AF             
0159   02AF             ;================================================================================================
0160   02AF             ; Read memory operations
0161   02AF             ;================================================================================================
0162   02AF 11 81 00    MREAD:		LD	DE,DMA+1
0163   02B2 CD 23 08    			CALL GETWORD		; Get aaaa
0164   02B5 FE 01       			CP	1				; Is the argument OK?
0165   02B7 C2 07 02    			JP	NZ,MEMO
0166   02BA C5          			PUSH BC
0167   02BB D1          			POP	DE				; DE will be the address holder
0168   02BC 7B          			LD	A,E
0169   02BD E6 F0       			AND	0F0H
0170   02BF 5F          			LD	E,A				; trim addr (xxx0)
0171   02C0 CD 46 03    NEWHDR:		CALL PRINTHDR		; Print the header
0172   02C3 3E 10       			LD	A,16
0173   02C5 32 B2 09    			LD	(LINNUM),A
0174   02C8 CD 75 07    NEWLINE:	CALL CRLF
0175   02CB CD 95 08    			CALL PRINTENV
0176   02CE 42          			LD	B,D				; Print the address
0177   02CF CD F6 08    			CALL B2HL
0178   02D2 4C          			LD	C,H
0179   02D3 CD 0C E6    			CALL CONOUT
0180   02D6 4D          			LD	C,L
0181   02D7 CD 0C E6    			CALL CONOUT
0182   02DA 43          			LD	B,E
0183   02DB CD F6 08    			CALL B2HL
0184   02DE 4C          			LD	C,H
0185   02DF CD 0C E6    			CALL CONOUT
0186   02E2 4D          			LD	C,L
0187   02E3 CD 0C E6    			CALL CONOUT
0188   02E6 0E 3A       			LD	C,':'
0189   02E8 CD 0C E6    			CALL CONOUT
0190   02EB 0E 20       			LD	C,' '
0191   02ED CD 0C E6    			CALL CONOUT
0192   02F0 06 10       			LD	B,16
0193   02F2 C5          NEWCOL:		PUSH BC
0194   02F3 1A          			LD	A,(DE)			; Start printing the memory content
0195   02F4 13          			INC	DE
0196   02F5 47          			LD	B,A
0197   02F6 CD F6 08    			CALL B2HL
0198   02F9 4C          			LD	C,H
0199   02FA CD 0C E6    			CALL CONOUT
0200   02FD 4D          			LD	C,L
0201   02FE CD 0C E6    			CALL CONOUT
0202   0301 0E 20       			LD	C,' '
0203   0303 CD 0C E6    			CALL CONOUT
0204   0306 C1          			POP	BC
0205   0307 10 E9       			DJNZ NEWCOL
0206   0309 0E 20       			LD	C,' '
0207   030B CD 0C E6    			CALL CONOUT
0208   030E 21 F0 FF    			LD	HL,0FFF0H		; This is -10h
0209   0311 19          			ADD	HL,DE			; Go back to beginning of line
0210   0312 E5          			PUSH HL
0211   0313 D1          			POP	DE
0212   0314 06 10       			LD	B,16
0213   0316 C5          NEWCOL2:	PUSH BC				; Start printing the printables
0214   0317 0E 2E       			LD	C,'.'
0215   0319 1A          			LD	A,(DE)
0216   031A FE 20       			CP	20H
0217   031C FA 25 03    			JP	M,NOTPRTBL
0218   031F FE 7F       			CP	7FH
0219   0321 F2 25 03    			JP	P,NOTPRTBL
0220   0324 4F          			LD	C,A
0221   0325 CD 0C E6    NOTPRTBL:	CALL CONOUT
0222   0328 13          			INC	DE
0223   0329 C1          			POP	BC
0224   032A 10 EA       			DJNZ NEWCOL2
0225   032C 3A B2 09    			LD	A,(LINNUM)
0226   032F 3D          			DEC	A
0227   0330 32 B2 09    			LD	(LINNUM),A
0228   0333 20 93       			JR	NZ,NEWLINE
0229   0335 CD E5 03    			CALL PRINTFTR		; Print footer message
0230   0338 CD 09 E6    			CALL CONIN			; Wait for user's decision
0231   033B FE 0D       			CP	CR
0232   033D 28 81       TRYAGAIN:	JR	Z,NEWHDR
0233   033F FE 1B       			CP	ESC
0234   0341 CA 07 02    			JP	Z,MEMO
0235   0344 18 F7       			JR	TRYAGAIN
0236   0346             
0237   0346 CD 95 08    PRINTHDR:	CALL PRINTENV
0238   0349 CD 33 E6    			CALL PRINTSEQ
0239   034C 41 44 44 52 			.DB "ADDR: 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F  0123456789ABCDEF",CR,LF,0
0239   0350 3A 20 30 30 
0239   0354 20 30 31 20 
0239   0358 30 32 20 30 
0239   035C 33 20 30 34 
0239   0360 20 30 35 20 
0239   0364 30 36 20 30 
0239   0368 37 20 30 38 
0239   036C 20 30 39 20 
0239   0370 30 41 20 30 
0239   0374 42 20 30 43 
0239   0378 20 30 44 20 
0239   037C 30 45 20 30 
0239   0380 46 20 20 30 
0239   0384 31 32 33 34 
0239   0388 35 36 37 38 
0239   038C 39 41 42 43 
0239   0390 44 45 46 0D 
0239   0394 0A 00 
0240   0396 CD 95 08    			CALL PRINTENV
0241   0399 CD 33 E6    			CALL PRINTSEQ
0242   039C 2D 2D 2D 2D 			.DB "----- -----------------------------------------------  ----------------",0
0242   03A0 2D 20 2D 2D 
0242   03A4 2D 2D 2D 2D 
0242   03A8 2D 2D 2D 2D 
0242   03AC 2D 2D 2D 2D 
0242   03B0 2D 2D 2D 2D 
0242   03B4 2D 2D 2D 2D 
0242   03B8 2D 2D 2D 2D 
0242   03BC 2D 2D 2D 2D 
0242   03C0 2D 2D 2D 2D 
0242   03C4 2D 2D 2D 2D 
0242   03C8 2D 2D 2D 2D 
0242   03CC 2D 2D 2D 2D 
0242   03D0 2D 20 20 2D 
0242   03D4 2D 2D 2D 2D 
0242   03D8 2D 2D 2D 2D 
0242   03DC 2D 2D 2D 2D 
0242   03E0 2D 2D 2D 00 
0243   03E4 C9          			RET
0244   03E5             
0245   03E5 CD 75 07    PRINTFTR:	CALL CRLF
0246   03E8 CD 95 08    			CALL PRINTENV
0247   03EB CD 33 E6    			CALL PRINTSEQ
0248   03EE 3D 3D 3D 3D 			.DB "================== <ENTER> = next page, <ESC> = quit ==================",CR,LF,0
0248   03F2 3D 3D 3D 3D 
0248   03F6 3D 3D 3D 3D 
0248   03FA 3D 3D 3D 3D 
0248   03FE 3D 3D 20 3C 
0248   0402 45 4E 54 45 
0248   0406 52 3E 20 3D 
0248   040A 20 6E 65 78 
0248   040E 74 20 70 61 
0248   0412 67 65 2C 20 
0248   0416 3C 45 53 43 
0248   041A 3E 20 3D 20 
0248   041E 71 75 69 74 
0248   0422 20 3D 3D 3D 
0248   0426 3D 3D 3D 3D 
0248   042A 3D 3D 3D 3D 
0248   042E 3D 3D 3D 3D 
0248   0432 3D 3D 3D 0D 
0248   0436 0A 00 
0249   0438 C9          			RET
0250   0439             
0251   0439             ;================================================================================================
0252   0439             ; Write memory operations
0253   0439             ;================================================================================================
0254   0439 11 81 00    MWRITE:		LD	DE,DMA+1
0255   043C CD 23 08    			CALL GETWORD		; Get aaaa
0256   043F FE 01       			CP	1				; Is the argument OK?
0257   0441 C2 07 02    			JP	NZ,MEMO
0258   0444 ED 43 B4 09 			LD	(AAAA),BC		; Save aaaa
0259   0448 11 86 00    			LD	DE,DMA+6
0260   044B 13          MWNEXT:		INC	DE
0261   044C 1A          			LD	A,(DE)
0262   044D FE 00       			CP	0
0263   044F CA 07 02    			JP	Z,MEMO			; End of char string?
0264   0452 CD 37 08    			CALL GETBYTE		; Get cc
0265   0455 FE 01       			CP	1				; Is the argument OK?
0266   0457 C2 07 02    			JP	NZ,MEMO
0267   045A 2A B4 09    			LD	HL,(AAAA)
0268   045D 70          			LD	(HL),B			; Put the byte in memory
0269   045E 23          			INC	HL
0270   045F 22 B4 09    			LD	(AAAA),HL
0271   0462 18 E7       			JR	MWNEXT
0272   0464             
0273   0464             ;================================================================================================
0274   0464             ; Copy memory operations
0275   0464             ;================================================================================================
0276   0464 11 81 00    MCOPY:		LD	DE,DMA+1
0277   0467 CD 23 08    			CALL GETWORD		; Get aaaa
0278   046A FE 01       			CP	1				; Is the argument OK?
0279   046C C2 07 02    			JP	NZ,MEMO
0280   046F ED 43 B4 09 			LD	(AAAA),BC		; Save aaaa
0281   0473 11 87 00    			LD	DE,DMA+7
0282   0476 CD 23 08    			CALL GETWORD		; Get bbbb
0283   0479 FE 01       			CP	1				; Is the argument OK?
0284   047B C2 07 02    			JP	NZ,MEMO
0285   047E ED 43 B6 09 			LD	(BBBB),BC		; Save bbbb
0286   0482 11 8C 00    			LD	DE,DMA+12
0287   0485 CD 23 08    			CALL GETWORD		; Get cccc
0288   0488 FE 01       			CP	1				; Is the argument OK?
0289   048A C2 07 02    			JP	NZ,MEMO
0290   048D ED 43 B8 09 			LD	(CCCC),BC		; Save cccc
0291   0491 2A B6 09    			LD	HL,(BBBB)
0292   0494 ED 5B B4 09 			LD	DE,(AAAA)
0293   0498 AF          			XOR	A				; Reset carry flag
0294   0499 ED 52       			SBC	HL,DE
0295   049B 23          			INC	HL
0296   049C EB          			EX	DE,HL			; HL=source
0297   049D D5          			PUSH DE
0298   049E C1          			POP BC				; BC=counter
0299   049F ED 5B B8 09 			LD	DE,(CCCC)		; DE=target
0300   04A3 ED B0       			LDIR
0301   04A5 C3 07 02    			JP	MEMO
0302   04A8             
0303   04A8             ;================================================================================================
0304   04A8             ; Fill memory operations
0305   04A8             ;================================================================================================
0306   04A8 11 81 00    MFILL:		LD	DE,DMA+1
0307   04AB CD 23 08    			CALL GETWORD		; Get aaaa
0308   04AE FE 01       			CP	1				; Is the argument OK?
0309   04B0 C2 07 02    			JP	NZ,MEMO
0310   04B3 ED 43 B4 09 			LD	(AAAA),BC		; Save aaaa
0311   04B7 11 87 00    			LD	DE,DMA+7
0312   04BA CD 23 08    			CALL GETWORD		; Get bbbb
0313   04BD FE 01       			CP	1				; Is the argument OK?
0314   04BF C2 07 02    			JP	NZ,MEMO
0315   04C2 ED 43 B6 09 			LD	(BBBB),BC		; Save bbbb
0316   04C6 11 8C 00    			LD	DE,DMA+12
0317   04C9 CD 37 08    			CALL GETBYTE		; Get cc
0318   04CC FE 01       			CP	1				; Is the argument OK?
0319   04CE C2 07 02    			JP	NZ,MEMO
0320   04D1 2A B4 09    			LD	HL,(AAAA)
0321   04D4 70          			LD	(HL),B			; Put cc in the 1st position of the area to be filled.
0322   04D5 2A B6 09    			LD	HL,(BBBB)
0323   04D8 ED 5B B4 09 			LD	DE,(AAAA)
0324   04DC AF          			XOR	A				; Reset carry flag
0325   04DD ED 52       			SBC	HL,DE
0326   04DF EB          			EX	DE,HL			; HL=source
0327   04E0 D5          			PUSH DE
0328   04E1 C1          			POP BC				; BC=counter
0329   04E2 E5          			PUSH HL
0330   04E3 D1          			POP	DE
0331   04E4 13          			INC DE
0332   04E5 ED B0       			LDIR
0333   04E7 C3 07 02    			JP	MEMO
0334   04EA             
0335   04EA             ;================================================================================================
0336   04EA             ; Xmodem Command
0337   04EA             ;================================================================================================
0338   04EA 11 86 00    XMODEM:		LD	DE,DMA+6
0339   04ED CD 23 08    			CALL GETWORD		
0340   04F0 FE 01       			CP	1					; Is the argument OK?
0341   04F2 C2 4A 01    			JP	NZ,CYCLE
0342   04F5 ED 43 B4 09 			LD	(AAAA),BC			; Save address
0343   04F9 3E 00       			LD	A,0
0344   04FB 32 BC 09    			LD	(RETRY),A			; Init retry counter
0345   04FE 3C          			INC	A
0346   04FF 32 BD 09    			LD	(BLOCK),A			; Init block counter
0347   0502             
0348   0502 CD B8 05    ALIVE:		CALL SENDNAK
0349   0505 06 05       GET1ST:		LD	B,5
0350   0507 CD C4 05    			CALL TOCONIN			; 5s timeout
0351   050A 38 0D       			JR	C,REPEAT			; Timed out?
0352   050C FE 04       			CP	EOT
0353   050E 28 1A       			JR	Z,GOTEOT			; EOT?
0354   0510 FE 18       			CP	CAN
0355   0512 CA 4A 01    			JP	Z,CYCLE				; CAN?
0356   0515 FE 01       			CP	SOH
0357   0517 28 1F       			JR	Z,GOTSOH			; SOH?
0358   0519 3A BC 09    REPEAT:		LD	A,(RETRY)
0359   051C 3C          			INC	A
0360   051D 32 BC 09    			LD	(RETRY),A
0361   0520 FE 0A       			CP	MAXTRY
0362   0522 20 DE       			JR	NZ,ALIVE			; Try again?
0363   0524             OUT3:		
0364   0524 CD BE 05    			CALL SENDCAN
0365   0527 C3 4A 01    			JP	CYCLE
0366   052A             			
0367   052A CD B8 05    GOTEOT:		CALL SENDNAK
0368   052D 06 01       			LD	B,1
0369   052F CD C4 05    			CALL TOCONIN
0370   0532 CD B2 05    			CALL SENDACK
0371   0535 C3 4A 01    			JP	CYCLE
0372   0538             			
0373   0538 3E 00       GOTSOH:		LD	A,0
0374   053A 32 BA 09    			LD	(CHKSUM),A			; Reset checksum
0375   053D 32 BB 09    			LD	(BYTECNT),A			; Reset byte counter
0376   0540 06 01       			LD	B,1
0377   0542 CD C4 05    			CALL TOCONIN			; Get incoming block number
0378   0545 38 1F       			JR	C,OUT2				; Timed out?
0379   0547 4F          			LD	C,A					; Save incoming block number
0380   0548 06 01       			LD	B,1
0381   054A CD C4 05    			CALL TOCONIN			; Get complement of incoming block number
0382   054D 38 17       			JR	C,OUT2				; Timed out?
0383   054F 2F          			CPL
0384   0550 B9          			CP	C
0385   0551 20 13       			JR	NZ,OUT2				; block = //block?
0386   0553 3A BD 09    			LD	A,(BLOCK)
0387   0556 B9          			CP	C					; Is block number what we expected?
0388   0557 28 16       			JR	Z,RECPACK
0389   0559 3D          			DEC	A
0390   055A B9          			CP	C					; block number is the anterior? Probably sender missed our ACK.
0391   055B 20 09       			JR	NZ,OUT2
0392   055D CD E7 05    ANTBLK:		CALL PURGE				; Purge input buffer before sending ACK
0393   0560 CD B2 05    			CALL SENDACK
0394   0563 C3 05 05    			JP	GET1ST
0395   0566 CD E7 05    OUT2:		CALL PURGE
0396   0569 CD BE 05    			CALL SENDCAN
0397   056C C3 4A 01    			JP	CYCLE
0398   056F 06 01       RECPACK:	LD	B,1					; Start receiving data packet (128 bytes)
0399   0571 CD C4 05    			CALL TOCONIN
0400   0574 38 F0       			JR	C,OUT2				; Timed out?
0401   0576 2A B4 09    			LD	HL,(AAAA)
0402   0579 77          			LD	(HL),A				; Put byte in buffer
0403   057A 23          			INC	HL					; Inc buffer pointer
0404   057B 22 B4 09    			LD	(AAAA),HL
0405   057E 4F          			LD	C,A
0406   057F 3A BA 09    			LD	A,(CHKSUM)
0407   0582 81          			ADD	A,C
0408   0583 32 BA 09    			LD	(CHKSUM),A			; Update checksum
0409   0586 3A BB 09    			LD	A,(BYTECNT)			; Inc byte counter
0410   0589 3C          			INC	A
0411   058A 32 BB 09    			LD	(BYTECNT),A
0412   058D FE 80       			CP	128					; Check if we received a full data packet
0413   058F 20 DE       			JR	NZ,RECPACK
0414   0591 06 01       			LD	B,1
0415   0593 CD C4 05    			CALL TOCONIN			; Get checksum
0416   0596 38 CE       			JR	C,OUT2				; Timed out?
0417   0598 4F          			LD	C,A
0418   0599 3A BA 09    			LD	A,(CHKSUM)
0419   059C B9          			CP	C
0420   059D C2 19 05    			JP	NZ,REPEAT			; Checksum OK?
0421   05A0 3E 00       			LD	A,0
0422   05A2 32 BC 09    			LD	(RETRY),A			; Reset retry counter
0423   05A5 3A BD 09    			LD	A,(BLOCK)
0424   05A8 3C          			INC	A
0425   05A9 32 BD 09    			LD	(BLOCK),A			; Increment block counter
0426   05AC             
0427   05AC CD B2 05    			CALL SENDACK
0428   05AF C3 05 05    			JP	GET1ST
0429   05B2             			
0430   05B2             ;==================================================================================
0431   05B2             ; Send ACK
0432   05B2             ;==================================================================================
0433   05B2 0E 06       SENDACK:	LD C,ACK
0434   05B4 CD 0C E6    			CALL CONOUT
0435   05B7 C9          			RET
0436   05B8             
0437   05B8             ;==================================================================================
0438   05B8             ; Send NAK
0439   05B8             ;==================================================================================
0440   05B8 0E 15       SENDNAK:	LD C,NAK
0441   05BA CD 0C E6    			CALL CONOUT
0442   05BD C9          			RET
0443   05BE             
0444   05BE             ;==================================================================================
0445   05BE             ; Send CAN
0446   05BE             ;==================================================================================
0447   05BE 0E 18       SENDCAN:	LD C,CAN
0448   05C0 CD 0C E6    			CALL CONOUT
0449   05C3 C9          			RET
0450   05C4             
0451   05C4             ;==================================================================================
0452   05C4             ; Timed Out Console Input - X seconds, with X passed on reg B
0453   05C4             ; Incoming byte, if any, returns in A
0454   05C4             ; Carry flag set if timed out.
0455   05C4             ;==================================================================================
0456   05C4 C5          TOCONIN:	PUSH	BC
0457   05C5 E5          			PUSH	HL
0458   05C6 21 AD 02    LOOP0:		LD	HL,685				;2.5					\
0459   05C9 0E 23       LOOP1:		LD	C,35				;1.75	\				|
0460   05CB CD 06 E6    LOOP2:		CALL CONST				;36.5	|t=41.5C+0.5	| 
0461   05CE 3C          			INC	A					;1		|				|
0462   05CF 28 0E       			JR	Z,BWAITING			;3/1.75	|				| t=HL(41.5C+6.5)+1.25
0463   05D1 79          			LD	A,C					;1		|				|
0464   05D2 0D          			DEC	C					;1		|				|
0465   05D3 20 F6       			JR	NZ,LOOP2			;3/1.75	/				| with HL=685 and c=35,
0466   05D5 2B          			DEC	HL					;1						|  t=0.9994sec (WOW!!!)
0467   05D6 7C          			LD	A,H					;1						|
0468   05D7 B5          			OR	L					;1						|
0469   05D8 20 EF       			JR	NZ,LOOP1			;3/1.75					/
0470   05DA 10 EA       			DJNZ	LOOP0			;3.25/2
0471   05DC 37          			SCF
0472   05DD 18 05       			JR	TOUT
0473   05DF CD 09 E6    BWAITING:	CALL CONIN
0474   05E2 37          			SCF						; Reset carry flag
0475   05E3 3F          			CCF
0476   05E4 E1          TOUT:		POP	HL
0477   05E5 C1          			POP	BC
0478   05E6 C9          			RET
0479   05E7             
0480   05E7             ;==================================================================================
0481   05E7             ; Purge console input.
0482   05E7             ;==================================================================================
0483   05E7 06 03       PURGE:		LD	B,3
0484   05E9 CD C4 05    			CALL TOCONIN
0485   05EC 30 F9       			JR	NC,PURGE
0486   05EE C9          			RET
0487   05EF             
0488   05EF             ;================================================================================================
0489   05EF             ; Hexadecimal to Executable conversion command.
0490   05EF             ; Record structure:
0491   05EF             ;	<start_code> <byte_count> <address> <record_type> <data>...<data> <checksum>
0492   05EF             ;		':'	        1 byte     2 bytes    00h or 01h       n bytes	    1 byte
0493   05EF             ;
0494   05EF             ; Register usage:
0495   05EF             ;	IX = source address 
0496   05EF             ;	IY = target address
0497   05EF             ;================================================================================================
0498   05EF 11 88 00    HEX2COM:	LD	DE,DMA+8
0499   05F2 CD 23 08    			CALL GETWORD		
0500   05F5 FE 01       			CP	1					; Is the argument OK?
0501   05F7 C2 4A 01    			JP	NZ,CYCLE
0502   05FA C5          			PUSH BC					; IX holds the source address
0503   05FB DD E1       			POP	IX
0504   05FD             			
0505   05FD DD 7E 00    FINDSC:		LD	A,(IX+0)
0506   0600 DD 23       			INC IX
0507   0602 FE 3A       			CP	':'					; Do we have a start code?
0508   0604 20 F7       			JR	NZ,FINDSC
0509   0606 3E 00       			LD	A,0					; Reset checksum
0510   0608 32 BA 09    			LD	(CHKSUM),A
0511   060B CD 98 06    			CALL HGB				; Get byte count
0512   060E 78          			LD	A,B
0513   060F FE 00       			CP	0
0514   0611 CA 4A 01    			JP	Z,CYCLE				; If byte count=0, we're done.
0515   0614 32 BB 09    			LD	(BYTECNT),A			; Save byte count
0516   0617 CD 7A 06    			CALL UPCHKSUM			; Update checksum
0517   061A DD 23       			INC	IX
0518   061C CD A2 06    			CALL HGW				; Get target address
0519   061F C5          			PUSH BC
0520   0620 FD E1       			POP IY					; IY holds the target address
0521   0622 CD 7A 06    			CALL UPCHKSUM			; Update checksum
0522   0625 41          			LD	B,C
0523   0626 CD 7A 06    			CALL UPCHKSUM			; Update checksum
0524   0629 CD 82 06    			CALL PRTADDR			; Print target address
0525   062C CD 98 06    			CALL HGB				; Get record type (just for checksum update)
0526   062F CD 7A 06    			CALL UPCHKSUM			; Update checksum
0527   0632 DD 23       			INC	IX
0528   0634 3A BB 09    			LD	A,(BYTECNT)
0529   0637 47          			LD	B,A
0530   0638 C5          GETDATA:	PUSH BC
0531   0639 CD 98 06    			CALL HGB				; Get data byte
0532   063C FD 70 00    			LD	(IY+0),B
0533   063F CD 7A 06    			CALL UPCHKSUM			; Update checksum
0534   0642 FD 23       			INC	IY
0535   0644 DD 23       			INC IX
0536   0646 C1          			POP BC
0537   0647 10 EF       			DJNZ GETDATA
0538   0649 CD 98 06    			CALL HGB				; Get checksum
0539   064C 3A BA 09    			LD	A,(CHKSUM)
0540   064F ED 44       			NEG
0541   0651 B8          			CP	B
0542   0652 20 0D       			JR	NZ,CHKSUMER
0543   0654 CD 33 E6    			CALL PRINTSEQ
0544   0657 3A 20 4F 4B 			.DB	": OK.",CR,LF,0
0544   065B 2E 0D 0A 00 
0545   065F 18 9C       			JR	FINDSC
0546   0661 CD 33 E6    CHKSUMER:	CALL PRINTSEQ
0547   0664 3A 20 43 68 			.DB	": Checksum Error.",CR,LF,0
0547   0668 65 63 6B 73 
0547   066C 75 6D 20 45 
0547   0670 72 72 6F 72 
0547   0674 2E 0D 0A 00 
0548   0678 18 83       			JR	FINDSC
0549   067A             
0550   067A 3A BA 09    UPCHKSUM:	LD	A,(CHKSUM)
0551   067D 80          			ADD	A,B
0552   067E 32 BA 09    			LD	(CHKSUM),A
0553   0681 C9          			RET
0554   0682             
0555   0682 CD 95 08    PRTADDR:	CALL PRINTENV
0556   0685 DD 2B       			DEC IX
0557   0687 DD 2B       			DEC IX
0558   0689 DD 2B       			DEC IX
0559   068B 06 04       			LD	B,4
0560   068D DD 4E 00    NXTA:		LD	C,(IX+0)
0561   0690 CD 0C E6    			CALL CONOUT
0562   0693 DD 23       			INC	IX
0563   0695 10 F6       			DJNZ NXTA
0564   0697 C9          			RET
0565   0698             			
0566   0698 DD E5       HGB:		PUSH IX
0567   069A D1          			POP	DE
0568   069B CD 37 08    			CALL GETBYTE
0569   069E D5          			PUSH DE
0570   069F DD E1       			POP IX
0571   06A1 C9          			RET
0572   06A2             
0573   06A2 DD E5       HGW:		PUSH IX
0574   06A4 D1          			POP	DE
0575   06A5 CD 23 08    			CALL GETWORD
0576   06A8 D5          			PUSH DE
0577   06A9 DD E1       			POP IX
0578   06AB C9          			RET
0579   06AC             
0580   06AC             ;================================================================================================
0581   06AC             ; LCD Operations
0582   06AC             ;================================================================================================
0583   06AC CD 33 E6    LCD:		CALL PRINTSEQ
0584   06AF 4C 5D 52 65 			.DB	"L]Ready for LCD Operations",CR,LF,0
0584   06B3 61 64 79 20 
0584   06B7 66 6F 72 20 
0584   06BB 4C 43 44 20 
0584   06BF 4F 70 65 72 
0584   06C3 61 74 69 6F 
0584   06C7 6E 73 0D 0A 
0584   06CB 00 
0585   06CC C3 4A 01    			JP	CYCLE
0586   06CF             
0587   06CF             ;================================================================================================
0588   06CF             ; Disk Operations
0589   06CF             ;================================================================================================
0590   06CF CD 33 E6    DISK:		CALL PRINTSEQ
0591   06D2 44 5D 52 65 			.DB	"D]Ready for Disk Operations",CR,LF,0
0591   06D6 61 64 79 20 
0591   06DA 66 6F 72 20 
0591   06DE 44 69 73 6B 
0591   06E2 20 4F 70 65 
0591   06E6 72 61 74 69 
0591   06EA 6F 6E 73 0D 
0591   06EE 0A 00 
0592   06F0 C3 4A 01    			JP	CYCLE
0593   06F3             
0594   06F3             ;================================================================================================
0595   06F3             ; Run (Execute) Command
0596   06F3             ;================================================================================================
0597   06F3 11 83 00    RUN:		LD	DE,DMA+3
0598   06F6 CD 23 08    			CALL GETWORD		
0599   06F9 FE 01       			CP	1				; Is the argument OK?
0600   06FB C2 4A 01    			JP	NZ,CYCLE
0601   06FE C5          			PUSH BC
0602   06FF E1          			POP	HL
0603   0700 E9          			JP	(HL)			; Continue execution where user requested. His responsability!
0604   0701             
0605   0701             ;================================================================================================
0606   0701             ; Unknown Command message. HL has the address of the line buffer.
0607   0701             ;================================================================================================
0608   0701 CD 95 08    UNKNOWN:	CALL PRINTENV
0609   0704 21 80 00    			LD	HL,DMA
0610   0707 7E          UNEXT:		LD	A,(HL)
0611   0708 FE 00       			CP	0
0612   070A 28 07       			JR	Z,UEND
0613   070C 4F          			LD	C,A
0614   070D CD 0C E6    			CALL CONOUT
0615   0710 23          			INC	HL
0616   0711 18 F4       			JR	UNEXT
0617   0713 0E 3F       UEND:		LD	C,'?'
0618   0715 CD 0C E6    			CALL CONOUT
0619   0718 CD 75 07    			CALL CRLF
0620   071B C9          			RET
0621   071C             
0622   071C             ;================================================================================================
0623   071C             ; Routine to manage line input from console. Returns A=0FFh if user typed Ctrl-Z (ETX).
0624   071C             ;================================================================================================
0625   071C 21 80 00    LINER:		LD	HL,DMA
0626   071F 22 AF 09    			LD	(LBUFPTR),HL			; Init line buffer pointer.
0627   0722 CD 09 E6    WAITCHAR:	CALL CONIN					; Wait till user types something.
0628   0725 FE 03       			CP	ETX						; Is it Ctrl-C?
0629   0727 28 42       			JR	Z,GOTETX
0630   0729 FE 1A       			CP	SUB						; Is is Ctrl-Z?
0631   072B 28 3E       			JR	Z,GOTSUB
0632   072D FE 18       			CP	CAN
0633   072F 28 40       			JR	Z,GOTCAN				; Is it <CAN>? (= delete line).
0634   0731 FE 0D       			CP	CR
0635   0733 28 29       			JR	Z,GOTCR					; Is it <ENTER>?
0636   0735 FE 08       			CP	BS
0637   0737 28 1E       			JR	Z,GOTBS					; Is it <BS>? (= backspace).
0638   0739 2A AF 09    			LD	HL,(LBUFPTR)			; None of the above options, so let's put it in the buffer.
0639   073C 01 D0 00    			LD	BC,MAXLBUF				; But 1st, we have to check if we still have space.
0640   073F 37          			SCF
0641   0740 3F          			CCF
0642   0741 ED 42       			SBC	HL,BC
0643   0743 28 0E       			JR	Z,LBUFFULL				; Is buffer full?
0644   0745 2A AF 09    			LD	HL,(LBUFPTR)
0645   0748 77          			LD	(HL),A
0646   0749 23          			INC	HL
0647   074A 22 AF 09    			LD	(LBUFPTR),HL
0648   074D 4F          			LD	C,A
0649   074E CD 0C E6    OUTWAIT:	CALL CONOUT
0650   0751 18 CF       			JR	WAITCHAR
0651   0753             
0652   0753 0E 07       LBUFFULL:	LD	C,BEL					; Buffer is full. Just ring the bell.
0653   0755 18 F7       			JR	OUTWAIT
0654   0757             
0655   0757 16 01       GOTBS:		LD	D,1						; We got a backspace.
0656   0759 CD 80 07    AFTGOTBS:	CALL BSPROC
0657   075C 18 C4       			JR	WAITCHAR
0658   075E             
0659   075E 2A AF 09    GOTCR:		LD	HL,(LBUFPTR)			; We got an ENTER, which means the the user
0660   0761 3E 00       			LD	A,0						; has finished typing the command line.
0661   0763 77          			LD	(HL),A
0662   0764 CD 75 07    			CALL CRLF
0663   0767 CD AE 07    			CALL UPPER					; Convert line to uppercase before parsing.
0664   076A C9          			RET
0665   076B             GOTETX:
0666   076B CD 75 07    GOTSUB:		CALL CRLF					; User abort request (Ctrl-C or Ctrl-Z).
0667   076E 3E 0C       			LD	A,FF
0668   0770 C9          			RET
0669   0771             			
0670   0771 16 00       GOTCAN:		LD	D,0						; We got a line delete.
0671   0773 18 E4       			JR	AFTGOTBS
0672   0775             			
0673   0775 0E 0D       CRLF:		LD	C,CR
0674   0777 CD 0C E6    			CALL CONOUT
0675   077A 0E 0A       			LD	C,LF
0676   077C CD 0C E6    			CALL CONOUT					; Output <CR><LF>.
0677   077F C9          			RET
0678   0780             
0679   0780             ;================================================================================================
0680   0780             ; Routine to do the backspace and line delete. D=1, backspace; D=0, delete line.
0681   0780             ;================================================================================================
0682   0780 2A AF 09    BSPROC:		LD	HL,(LBUFPTR)
0683   0783 01 80 00    			LD	BC,DMA
0684   0786 37          			SCF
0685   0787 3F          			CCF
0686   0788 ED 42       			SBC	HL,BC
0687   078A 28 1C       			JR	Z,LBUFEMPTY
0688   078C 2A AF 09    			LD	HL,(LBUFPTR)
0689   078F 2B          			DEC	HL
0690   0790 22 AF 09    			LD	(LBUFPTR),HL
0691   0793 0E 08       			LD	C,BS
0692   0795 CD 0C E6    			CALL CONOUT
0693   0798 0E 20       			LD	C,' '
0694   079A CD 0C E6    			CALL CONOUT
0695   079D 0E 08       			LD	C,BS
0696   079F CD 0C E6    			CALL CONOUT
0697   07A2 7A          			LD	A,D
0698   07A3 FE 01       			CP	1
0699   07A5 C8          			RET	Z
0700   07A6 18 D8       			JR	BSPROC
0701   07A8             
0702   07A8 0E 07       LBUFEMPTY:	LD	C,BEL
0703   07AA CD 0C E6    			CALL CONOUT
0704   07AD C9          			RET
0705   07AE             			
0706   07AE             ;================================================================================================
0707   07AE             ; Routine to convert line buffer content to upper case
0708   07AE             ;================================================================================================
0709   07AE 21 7F 00    UPPER:		LD	HL,DMA-1
0710   07B1 23          NEXT2UP:	INC	HL
0711   07B2 7E          			LD	A,(HL)
0712   07B3 FE 00       			CP	0
0713   07B5 C8          			RET	Z
0714   07B6 FE 61       			CP	'a'
0715   07B8 FA B1 07    			JP	M,NEXT2UP
0716   07BB FE 7B       			CP	'{'
0717   07BD F2 B1 07    			JP	P,NEXT2UP
0718   07C0 D6 20       			SUB	20H
0719   07C2 77          			LD	(HL),A
0720   07C3 18 EC       			JR	NEXT2UP
0721   07C5             			
0722   07C5             ;================================================================================================
0723   07C5             ; Routine to parse command. HL=cmd_table_pointer.
0724   07C5             ; regA=cmd_num or FFh if no match. HL=jump_address or 0000 if no match.
0725   07C5             ;================================================================================================
0726   07C5 C5          PARSER:		PUSH BC
0727   07C6 D5          			PUSH DE
0728   07C7 11 80 00    			LD	DE,DMA
0729   07CA 3E 00       			LD	A,0
0730   07CC 32 AE 09    			LD	(CMDNUM),A		; Init command number.
0731   07CF 1A          NEXT2PARS:	LD	A,(DE)
0732   07D0 BE          			CP	(HL)
0733   07D1 20 04       			JR	NZ,NOTEQU
0734   07D3 23          			INC	HL
0735   07D4 13          			INC	DE
0736   07D5 18 F8       			JR	NEXT2PARS
0737   07D7 7E          NOTEQU:		LD	A,(HL)
0738   07D8 FE 1E       			CP	RS
0739   07DA 28 04       			JR	Z,ISRS
0740   07DC FE 03       			CP	ETX
0741   07DE 20 22       			JR	NZ,NEXTCMD
0742   07E0 1A          ISRS:		LD	A,(DE)
0743   07E1 FE 00       			CP	0
0744   07E3 28 04       			JR	Z,ISZERO
0745   07E5 FE 20       			CP	' '
0746   07E7 20 19       			JR	NZ,NEXTCMD
0747   07E9 7E          ISZERO:		LD	A,(HL)
0748   07EA FE 03       			CP	ETX
0749   07EC 28 03       			JR	Z,CMDMATCH
0750   07EE 23          			INC	HL
0751   07EF 18 F8       			JR	ISZERO
0752   07F1 23          CMDMATCH:	INC	HL
0753   07F2 E5          			PUSH HL
0754   07F3 D1          			POP	DE				; DE=addr of jump table
0755   07F4 26 00       			LD	H,0
0756   07F6 3A AE 09    			LD	A,(CMDNUM)
0757   07F9 6F          			LD	L,A
0758   07FA E5          			PUSH HL
0759   07FB C1          			POP	BC
0760   07FC 09          			ADD	HL,BC			; command_number * 2
0761   07FD 09          			ADD	HL,BC			; command_number * 3
0762   07FE 19          			ADD HL,DE
0763   07FF D1          			POP	DE
0764   0800 C1          			POP	BC
0765   0801 C9          			RET					; A=command_number, HL=jump_address
0766   0802 7E          NEXTCMD:	LD	A,(HL)
0767   0803 FE 1E       			CP	RS
0768   0805 28 07       			JR	Z,ISRS2
0769   0807 FE 03       			CP	ETX
0770   0809 28 10       			JR	Z,NOMATCH
0771   080B 23          			INC	HL
0772   080C 18 F4       			JR	NEXTCMD
0773   080E 23          ISRS2:		INC	HL
0774   080F 3A AE 09    			LD	A,(CMDNUM)
0775   0812 3C          			INC	A
0776   0813 32 AE 09    			LD	(CMDNUM),A
0777   0816 11 80 00    			LD	DE,DMA
0778   0819 18 B4       			JR	NEXT2PARS
0779   081B 21 00 00    NOMATCH:	LD	HL,0
0780   081E 3E FF       			LD	A,0FFH
0781   0820 D1          			POP	DE
0782   0821 C1          			POP	BC
0783   0822 C9          			RET
0784   0823             
0785   0823             ;================================================================================================
0786   0823             ; Routine to get word from command line. DE=line_buf_ptr(should point to where word starts).
0787   0823             ; If successfull, return word in BC. A=0 if missing arg, A=1 if OK, A=2 if invalid arg. 
0788   0823             ;================================================================================================
0789   0823 CD 37 08    GETWORD:	CALL GETBYTE
0790   0826 FE 01       			CP	1
0791   0828 C0          			RET	NZ
0792   0829 48          			LD	C,B
0793   082A 13          			INC	DE
0794   082B CD 37 08    			CALL GETBYTE
0795   082E FE 01       			CP	1
0796   0830 C0          			RET NZ
0797   0831 78          			LD	A,B
0798   0832 41          			LD	B,C
0799   0833 4F          			LD	C,A
0800   0834 3E 01       			LD	A,1
0801   0836 C9          			RET
0802   0837             			
0803   0837             ;================================================================================================
0804   0837             ; Routine to get byte from command line. DE=line_buf_ptr(should point to where byte starts).
0805   0837             ; If successfull, return byte in regB. A=0 if missing arg, A=1 if OK, A=2 if invalid arg. 
0806   0837             ;================================================================================================
0807   0837 1A          GETBYTE:	LD	A,(DE)
0808   0838 FE 00       			CP	0
0809   083A 28 1C       			JR	Z,GBNA				; End of buffer and no arg found.
0810   083C FE 20       			CP	' '
0811   083E 28 35       			JR	Z,GBSPC				; Trim the space.
0812   0840 67          			LD	H,A
0813   0841 CD A6 08    			CALL ISITHEX
0814   0844 FE 01       			CP	1
0815   0846 20 30       			JR	NZ,GBIA				; Invalid arg.
0816   0848 13          			INC	DE
0817   0849 1A          			LD	A,(DE)
0818   084A 6F          			LD	L,A
0819   084B CD A6 08    			CALL ISITHEX
0820   084E FE 01       			CP	1
0821   0850 20 26       			JR	NZ,GBIA				; Invalid arg.
0822   0852 CD C0 08    			CALL HL2B				; Convert ASCII pair to byte
0823   0855 3E 01       			LD	A,1
0824   0857 C9          			RET
0825   0858 CD 95 08    GBNA:		CALL PRINTENV
0826   085B CD 33 E6    			CALL PRINTSEQ
0827   085E 4D 69 73 73 			.DB	"Missing argument.",CR,LF,0
0827   0862 69 6E 67 20 
0827   0866 61 72 67 75 
0827   086A 6D 65 6E 74 
0827   086E 2E 0D 0A 00 
0828   0872 3E 00       			LD	A,0
0829   0874 C9          			RET
0830   0875 13          GBSPC:		INC	DE
0831   0876 18 BF       			JR	GETBYTE
0832   0878 CD 95 08    GBIA:		CALL PRINTENV
0833   087B CD 33 E6    			CALL PRINTSEQ
0834   087E 49 6E 76 61 			.DB	"Invalid argument.",CR,LF,0
0834   0882 6C 69 64 20 
0834   0886 61 72 67 75 
0834   088A 6D 65 6E 74 
0834   088E 2E 0D 0A 00 
0835   0892 3E 02       			LD	A,2
0836   0894 C9          			RET
0837   0895             
0838   0895 3A B1 09    PRINTENV:	LD	A,(ENVIR)			; Print environment letter (M, L, D or none) before message.
0839   0898 FE 00       			CP	0
0840   089A 28 04       			JR	Z,NOLETTER
0841   089C 4F          			LD	C,A
0842   089D CD 0C E6    			CALL CONOUT
0843   08A0 0E 3E       NOLETTER:	LD	C,PROMPT
0844   08A2 CD 0C E6    			CALL CONOUT
0845   08A5 C9          			RET
0846   08A6             
0847   08A6 FE 47       ISITHEX:	CP	'G'
0848   08A8 F2 BA 08    			JP	P,NOTHEX
0849   08AB FE 41       			CP	'A'
0850   08AD F2 BD 08    			JP	P,ISHEX
0851   08B0 FE 40       			CP	040H
0852   08B2 F2 BA 08    			JP	P,NOTHEX
0853   08B5 FE 30       			CP	'0'
0854   08B7 F2 BD 08    			JP	P,ISHEX
0855   08BA 3E 00       NOTHEX:		LD	A,0
0856   08BC C9          			RET
0857   08BD 3E 01       ISHEX:		LD	A,1
0858   08BF C9          			RET
0859   08C0             
0860   08C0             ;================================================================================================
0861   08C0             ; Convert ASCII to HEX (HL --> B)
0862   08C0             ;================================================================================================
0863   08C0 C5          HL2B:		PUSH BC
0864   08C1 3E 60       			LD	A,060H
0865   08C3 94          			SUB	H
0866   08C4 0E 57       			LD	C,057H
0867   08C6 DA D3 08    			JP	C,DISCOUNT
0868   08C9 3E 40       			LD	A,040H
0869   08CB 94          			SUB	H
0870   08CC 0E 37       			LD	C,037H
0871   08CE DA D3 08    			JP	C,DISCOUNT
0872   08D1 0E 30       			LD	C,030H
0873   08D3 7C          DISCOUNT:	LD	A,H
0874   08D4 91          			SUB	C
0875   08D5 47          CONVL:		LD	B,A
0876   08D6 CB 20       			SLA	B
0877   08D8 CB 20       			SLA	B
0878   08DA CB 20       			SLA	B
0879   08DC CB 20       			SLA	B
0880   08DE 3E 60       			LD	A,060H
0881   08E0 95          			SUB	L
0882   08E1 0E 57       			LD	C,057H
0883   08E3 DA F0 08    			JP	C,DISCOUNT2
0884   08E6 3E 40       			LD	A,040H
0885   08E8 95          			SUB	L
0886   08E9 0E 37       			LD	C,037H
0887   08EB DA F0 08    			JP	C,DISCOUNT2
0888   08EE 0E 30       			LD	C,030H
0889   08F0 7D          DISCOUNT2:	LD	A,L
0890   08F1 91          			SUB	C
0891   08F2 B0          			OR	B
0892   08F3 C1          			POP	BC
0893   08F4 47          			LD	B,A
0894   08F5 C9          			RET
0895   08F6             
0896   08F6             ;================================================================================================
0897   08F6             ; Convert HEX to ASCII (B --> HL)
0898   08F6             ;================================================================================================
0899   08F6 C5          B2HL:		PUSH	BC
0900   08F7 78          			LD	A,B
0901   08F8 E6 0F       			AND	0FH
0902   08FA 6F          			LD	L,A
0903   08FB D6 0A       			SUB	0AH
0904   08FD 0E 30       			LD	C,030H
0905   08FF DA 04 09    			JP	C,COMPENSE
0906   0902 0E 37       			LD	C,037H
0907   0904 7D          COMPENSE:	LD	A,L
0908   0905 81          			ADD	A,C
0909   0906 6F          			LD	L,A
0910   0907 78          			LD	A,B
0911   0908 E6 F0       			AND	0F0H
0912   090A CB 3F       			SRL	A
0913   090C CB 3F       			SRL	A
0914   090E CB 3F       			SRL	A
0915   0910 CB 3F       			SRL	A
0916   0912 67          			LD	H,A
0917   0913 D6 0A       			SUB	0AH
0918   0915 0E 30       			LD	C,030H
0919   0917 DA 1C 09    			JP	C,COMPENSE2
0920   091A 0E 37       			LD	C,037H
0921   091C 7C          COMPENSE2:	LD	A,H
0922   091D 81          			ADD	A,C
0923   091E 67          			LD	H,A
0924   091F C1          			POP	BC
0925   0920 C9          			RET
0926   0921             
0927   0921             ;*****************************************************
0928   0921             ;********* Entry point for RUN command test **********
0929   0921             ;*****************************************************
0930   0921 CD 33 E6    RUNCMDTST:	CALL PRINTSEQ
0931   0924 0D 0A       			.DB	CR,LF
0932   0926 20 2A 2A 2A 			.DB	" *** RUN COMMAND TEST EXIT POINT ***"
0932   092A 20 52 55 4E 
0932   092E 20 43 4F 4D 
0932   0932 4D 41 4E 44 
0932   0936 20 54 45 53 
0932   093A 54 20 45 58 
0932   093E 49 54 20 50 
0932   0942 4F 49 4E 54 
0932   0946 20 2A 2A 2A 
0933   094A 0D 0A 00    			.DB	CR,LF,0
0934   094D 76          			HALT
0935   094E             
0936   094E             ;================================================================================================
0937   094E 3F 1E       CMDTBL:		.DB	"?",RS
0938   0950 42 4F 4F 54 			.DB	"BOOT",RS
0938   0954 1E 
0939   0955 4D 45 4D 4F 			.DB	"MEMORY",RS
0939   0959 52 59 1E 
0940   095C 58 4D 4F 44 			.DB	"XMODEM",RS
0940   0960 45 4D 1E 
0941   0963 48 45 58 32 			.DB	"HEX2COM",RS
0941   0967 43 4F 4D 1E 
0942   096B 4C 43 44 1E 			.DB	"LCD",RS
0943   096F 44 49 53 4B 			.DB	"DISK",RS
0943   0973 1E 
0944   0974 52 55 4E 03 			.DB	"RUN",ETX
0945   0978             
0946   0978 C3 6B 01    JMPTBL:		JP	HELP
0947   097B C3 03 E6    			JP	WBOOT
0948   097E C3 07 02    			JP	MEMO
0949   0981 C3 EA 04    			JP	XMODEM
0950   0984 C3 EF 05    			JP	HEX2COM
0951   0987 C3 AC 06    			JP	LCD
0952   098A C3 CF 06    			JP	DISK
0953   098D C3 F3 06    			JP	RUN
0954   0990             			
0955   0990 3F 1E       MEMOCT:		.DB	"?",RS
0956   0992 51 1E       			.DB	"Q",RS
0957   0994 52 1E       			.DB	"R",RS
0958   0996 57 1E       			.DB	"W",RS
0959   0998 43 1E       			.DB	"C",RS
0960   099A 46 03       			.DB	"F",ETX
0961   099C             
0962   099C C3 28 02    MEMOJT:		JP	MHELP
0963   099F C3 AC 02    			JP	MQUIT
0964   09A2 C3 AF 02    			JP	MREAD
0965   09A5 C3 39 04    			JP	MWRITE
0966   09A8 C3 64 04    			JP	MCOPY
0967   09AB C3 A8 04    			JP	MFILL
0968   09AE             			
0969   09AE 00          CMDNUM		.DB	0
0970   09AF 00 00       LBUFPTR		.DW	0
0971   09B1 00          ENVIR		.DB	0			; 0=MONITOR, M=MEMO, L=LCD, D=DISK
0972   09B2 00          LINNUM		.DB	0
0973   09B3 00          COLNUM		.DB	0
0974   09B4 00 00       AAAA		.DW	0
0975   09B6 00 00       BBBB		.DW	0
0976   09B8 00 00       CCCC		.DW	0
0977   09BA 00          CHKSUM	 	.DB	0					; Checksum for xmodem
0978   09BB 00          BYTECNT		.DB	0					; Byte counter for xmodem and hex2com
0979   09BC 00          RETRY		.DB 0					; Retry counter for xmodem
0980   09BD 00          BLOCK		.DB	0					; Block counter for xmodem
0981   09BE             
0982   09BE             			.DS 20
0983   09D2             MSTACK		.EQU $
0984   09D2             
0985   09D2             			.END
tasm: Number of errors = 0
