
preTTY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  000003e8  0000047c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000104  00800146  00800146  000004c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000895  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d4  00000000  00000000  00000e19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e5  00000000  00000000  000014ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  000018d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f9  00000000  00000000  000019e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003ab  00000000  00000000  00001de1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000218c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__vector_1>
   8:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  14:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  1c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  20:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  2c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  30:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  34:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  38:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  3c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  44:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  48:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_18>
  4c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  54:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  58:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  5c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  60:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  68:	4b 01       	movw	r8, r22
  6a:	73 01       	movw	r14, r6
  6c:	50 01       	movw	r10, r0
  6e:	55 01       	movw	r10, r10
  70:	5a 01       	movw	r10, r20
  72:	5f 01       	movw	r10, r30
  74:	64 01       	movw	r12, r8
  76:	69 01       	movw	r12, r18

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	d8 e0       	ldi	r29, 0x08	; 8
  80:	de bf       	out	0x3e, r29	; 62
  82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_copy_data>:
  84:	11 e0       	ldi	r17, 0x01	; 1
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b1 e0       	ldi	r27, 0x01	; 1
  8a:	e8 ee       	ldi	r30, 0xE8	; 232
  8c:	f3 e0       	ldi	r31, 0x03	; 3
  8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
  90:	05 90       	lpm	r0, Z+
  92:	0d 92       	st	X+, r0
  94:	a6 34       	cpi	r26, 0x46	; 70
  96:	b1 07       	cpc	r27, r17
  98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>

0000009a <__do_clear_bss>:
  9a:	22 e0       	ldi	r18, 0x02	; 2
  9c:	a6 e4       	ldi	r26, 0x46	; 70
  9e:	b1 e0       	ldi	r27, 0x01	; 1
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
  a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
  a4:	aa 34       	cpi	r26, 0x4A	; 74
  a6:	b2 07       	cpc	r27, r18
  a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>
  aa:	0e 94 98 01 	call	0x330	; 0x330 <main>
  ae:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <_exit>

000000b2 <__bad_interrupt>:
  b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b6 <setDataBus>:
char	uBuffRX[MAXBUFF]; 					// Buffer for chars that arrived through serial port.
int		uBuffRX_inPtr=0, uBuffRX_outPtr=0;

void setDataBus(int modus)
{
	if (modus == asInput)	// Write zeros to PORTs
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	39 f4       	brne	.+14     	; 0xc8 <setDataBus+0x12>
	{
		DDRB &= ~0x07;
  ba:	84 b1       	in	r24, 0x04	; 4
  bc:	88 7f       	andi	r24, 0xF8	; 248
  be:	84 b9       	out	0x04, r24	; 4
		DDRD &= ~0xf8;
  c0:	8a b1       	in	r24, 0x0a	; 10
  c2:	87 70       	andi	r24, 0x07	; 7
  c4:	8a b9       	out	0x0a, r24	; 10
  c6:	08 95       	ret
	}
	else					// Write ones to PORTs
	{
		DDRB |= 0x07;
  c8:	84 b1       	in	r24, 0x04	; 4
  ca:	87 60       	ori	r24, 0x07	; 7
  cc:	84 b9       	out	0x04, r24	; 4
		DDRD |= 0xf8;
  ce:	8a b1       	in	r24, 0x0a	; 10
  d0:	88 6f       	ori	r24, 0xF8	; 248
  d2:	8a b9       	out	0x0a, r24	; 10
  d4:	08 95       	ret

000000d6 <xmit>:
	}
}

void xmit(char toSend)
{
	while ( !( UCSR0A & (1<<UDRE0)) )
  d6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  da:	95 ff       	sbrs	r25, 5
  dc:	fc cf       	rjmp	.-8      	; 0xd6 <xmit>
	{}
	UDR0 = toSend;
  de:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	while ( !( UCSR0A & (1<<UDRE0)) )
  e2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  e6:	85 ff       	sbrs	r24, 5
  e8:	fc cf       	rjmp	.-8      	; 0xe2 <xmit+0xc>
	{}
}
  ea:	08 95       	ret

000000ec <reply>:

void reply(char toPost)
{
  ec:	cf 93       	push	r28
  ee:	c8 2f       	mov	r28, r24
	setDataBus(asOutput);
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 5b 00 	call	0xb6	; 0xb6 <setDataBus>
	PORTB = (PINB&~0x7)|(toPost&0x7);
  f8:	83 b1       	in	r24, 0x03	; 3
  fa:	88 7f       	andi	r24, 0xF8	; 248
  fc:	9c 2f       	mov	r25, r28
  fe:	97 70       	andi	r25, 0x07	; 7
 100:	89 2b       	or	r24, r25
 102:	85 b9       	out	0x05, r24	; 5
	PORTD = (PIND&~0xf8)|(toPost&0xf8);
 104:	89 b1       	in	r24, 0x09	; 9
 106:	87 70       	andi	r24, 0x07	; 7
 108:	c8 7f       	andi	r28, 0xF8	; 248
 10a:	c8 2b       	or	r28, r24
 10c:	cb b9       	out	0x0b, r28	; 11

	RSM_LO;							// Release wait line
 10e:	88 b1       	in	r24, 0x08	; 8
 110:	87 7f       	andi	r24, 0xF7	; 247
 112:	88 b9       	out	0x08, r24	; 8
	RSM_HI;
 114:	88 b1       	in	r24, 0x08	; 8
 116:	88 60       	ori	r24, 0x08	; 8
 118:	88 b9       	out	0x08, r24	; 8

	setDataBus(asInput);
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 5b 00 	call	0xb6	; 0xb6 <setDataBus>
}
 122:	cf 91       	pop	r28
 124:	08 95       	ret

00000126 <USART_Init>:

void USART_Init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 126:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 12a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	/* Enable receiver, transmitter and also RX_complete_interrupt */
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 12e:	88 e9       	ldi	r24, 0x98	; 152
 130:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	/* Set frame format: 8N1 */
	UCSR0C = (3<<UCSZ00);
 134:	86 e0       	ldi	r24, 0x06	; 6
 136:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 13a:	08 95       	ret

0000013c <__vector_18>:
}

ISR(USART_RX_vect)
{
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	2f 93       	push	r18
 148:	3f 93       	push	r19
 14a:	4f 93       	push	r20
 14c:	8f 93       	push	r24
 14e:	9f 93       	push	r25
 150:	ef 93       	push	r30
 152:	ff 93       	push	r31
	uBuffRX[uBuffRX_inPtr++] = UDR0;
 154:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <uBuffRX_inPtr>
 158:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <uBuffRX_inPtr+0x1>
 15c:	9c 01       	movw	r18, r24
 15e:	2f 5f       	subi	r18, 0xFF	; 255
 160:	3f 4f       	sbci	r19, 0xFF	; 255
 162:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <uBuffRX_inPtr+0x1>
 166:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <uBuffRX_inPtr>
 16a:	40 91 c6 00 	lds	r20, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 16e:	fc 01       	movw	r30, r24
 170:	e6 5b       	subi	r30, 0xB6	; 182
 172:	fe 4f       	sbci	r31, 0xFE	; 254
 174:	40 83       	st	Z, r20
	if (uBuffRX_inPtr == MAXBUFF)
 176:	21 15       	cp	r18, r1
 178:	31 40       	sbci	r19, 0x01	; 1
 17a:	21 f4       	brne	.+8      	; 0x184 <__vector_18+0x48>
		uBuffRX_inPtr = 0;
 17c:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <uBuffRX_inPtr+0x1>
 180:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <uBuffRX_inPtr>
}
 184:	ff 91       	pop	r31
 186:	ef 91       	pop	r30
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	4f 91       	pop	r20
 18e:	3f 91       	pop	r19
 190:	2f 91       	pop	r18
 192:	0f 90       	pop	r0
 194:	0f be       	out	0x3f, r0	; 63
 196:	0f 90       	pop	r0
 198:	1f 90       	pop	r1
 19a:	18 95       	reti

0000019c <__vector_1>:

ISR(INT0_vect)									// We got a chip_select (CPU wants something)
{
 19c:	1f 92       	push	r1
 19e:	0f 92       	push	r0
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	0f 92       	push	r0
 1a4:	11 24       	eor	r1, r1
 1a6:	2f 93       	push	r18
 1a8:	3f 93       	push	r19
 1aa:	4f 93       	push	r20
 1ac:	5f 93       	push	r21
 1ae:	6f 93       	push	r22
 1b0:	7f 93       	push	r23
 1b2:	8f 93       	push	r24
 1b4:	9f 93       	push	r25
 1b6:	af 93       	push	r26
 1b8:	bf 93       	push	r27
 1ba:	ef 93       	push	r30
 1bc:	ff 93       	push	r31
	char			operation;
	char			dataByte;
	unsigned long	newBaud=38400;
	
	operation = PINC & 0x7;						// Snapshots from I/O pins
 1be:	96 b1       	in	r25, 0x06	; 6
 1c0:	97 70       	andi	r25, 0x07	; 7
	dataByte = (PIND & 0xf8)|(PINB & 0x07);
 1c2:	89 b1       	in	r24, 0x09	; 9
 1c4:	e3 b1       	in	r30, 0x03	; 3
 1c6:	28 2f       	mov	r18, r24
 1c8:	28 7f       	andi	r18, 0xF8	; 248
 1ca:	8e 2f       	mov	r24, r30
 1cc:	87 70       	andi	r24, 0x07	; 7
 1ce:	82 2b       	or	r24, r18

	switch (operation)
 1d0:	93 30       	cpi	r25, 0x03	; 3
 1d2:	09 f4       	brne	.+2      	; 0x1d6 <__vector_1+0x3a>
 1d4:	52 c0       	rjmp	.+164    	; 0x27a <__vector_1+0xde>
 1d6:	20 f4       	brcc	.+8      	; 0x1e0 <__vector_1+0x44>
 1d8:	92 30       	cpi	r25, 0x02	; 2
 1da:	09 f4       	brne	.+2      	; 0x1de <__vector_1+0x42>
 1dc:	45 c0       	rjmp	.+138    	; 0x268 <__vector_1+0xcc>
 1de:	97 c0       	rjmp	.+302    	; 0x30e <__vector_1+0x172>
 1e0:	94 30       	cpi	r25, 0x04	; 4
 1e2:	19 f0       	breq	.+6      	; 0x1ea <__vector_1+0x4e>
 1e4:	95 30       	cpi	r25, 0x05	; 5
 1e6:	69 f1       	breq	.+90     	; 0x242 <__vector_1+0xa6>
 1e8:	92 c0       	rjmp	.+292    	; 0x30e <__vector_1+0x172>
	{
		case RD_DATA:							// Read data request
			if (uBuffRX_inPtr != uBuffRX_outPtr)
 1ea:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <uBuffRX_inPtr>
 1ee:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <uBuffRX_inPtr+0x1>
 1f2:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__data_end>
 1f6:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <__data_end+0x1>
 1fa:	28 17       	cp	r18, r24
 1fc:	39 07       	cpc	r19, r25
 1fe:	d1 f0       	breq	.+52     	; 0x234 <__vector_1+0x98>
			{
				reply(uBuffRX[uBuffRX_outPtr++]);
 200:	9c 01       	movw	r18, r24
 202:	2f 5f       	subi	r18, 0xFF	; 255
 204:	3f 4f       	sbci	r19, 0xFF	; 255
 206:	30 93 47 01 	sts	0x0147, r19	; 0x800147 <__data_end+0x1>
 20a:	20 93 46 01 	sts	0x0146, r18	; 0x800146 <__data_end>
 20e:	fc 01       	movw	r30, r24
 210:	e6 5b       	subi	r30, 0xB6	; 182
 212:	fe 4f       	sbci	r31, 0xFE	; 254
 214:	80 81       	ld	r24, Z
 216:	0e 94 76 00 	call	0xec	; 0xec <reply>
				if (uBuffRX_outPtr == MAXBUFF)
 21a:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__data_end>
 21e:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <__data_end+0x1>
 222:	81 15       	cp	r24, r1
 224:	91 40       	sbci	r25, 0x01	; 1
 226:	09 f0       	breq	.+2      	; 0x22a <__vector_1+0x8e>
 228:	72 c0       	rjmp	.+228    	; 0x30e <__vector_1+0x172>
					uBuffRX_outPtr = 0;
 22a:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__data_end+0x1>
 22e:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__data_end>
 232:	6d c0       	rjmp	.+218    	; 0x30e <__vector_1+0x172>
			}
			else
			{
				RSM_LO;							// Release wait line
 234:	88 b1       	in	r24, 0x08	; 8
 236:	87 7f       	andi	r24, 0xF7	; 247
 238:	88 b9       	out	0x08, r24	; 8
				RSM_HI;
 23a:	88 b1       	in	r24, 0x08	; 8
 23c:	88 60       	ori	r24, 0x08	; 8
 23e:	88 b9       	out	0x08, r24	; 8
 240:	66 c0       	rjmp	.+204    	; 0x30e <__vector_1+0x172>
			}
		break;
		
		case RD_STATUS:							// Read status request
			if (uBuffRX_inPtr != uBuffRX_outPtr)	// Put 0xff on data bus
 242:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <uBuffRX_inPtr>
 246:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <uBuffRX_inPtr+0x1>
 24a:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__data_end>
 24e:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <__data_end+0x1>
 252:	28 17       	cp	r18, r24
 254:	39 07       	cpc	r19, r25
 256:	21 f0       	breq	.+8      	; 0x260 <__vector_1+0xc4>
			{
				reply(0xff);
 258:	8f ef       	ldi	r24, 0xFF	; 255
 25a:	0e 94 76 00 	call	0xec	; 0xec <reply>
 25e:	57 c0       	rjmp	.+174    	; 0x30e <__vector_1+0x172>
			}
			else								// Put 00 on data bus
			{
				reply(0);
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	0e 94 76 00 	call	0xec	; 0xec <reply>
 266:	53 c0       	rjmp	.+166    	; 0x30e <__vector_1+0x172>
			}
		break;
		
		case WR_DATA:							// write data request
			xmit(dataByte);
 268:	0e 94 6b 00 	call	0xd6	; 0xd6 <xmit>
			RSM_LO;								// Release wait line
 26c:	88 b1       	in	r24, 0x08	; 8
 26e:	87 7f       	andi	r24, 0xF7	; 247
 270:	88 b9       	out	0x08, r24	; 8
			RSM_HI;
 272:	88 b1       	in	r24, 0x08	; 8
 274:	88 60       	ori	r24, 0x08	; 8
 276:	88 b9       	out	0x08, r24	; 8
		break;
 278:	4a c0       	rjmp	.+148    	; 0x30e <__vector_1+0x172>
		
		case WR_COMMAND:						// write command request
			switch (dataByte)
 27a:	08 2e       	mov	r0, r24
 27c:	00 0c       	add	r0, r0
 27e:	99 0b       	sbc	r25, r25
 280:	aa 0b       	sbc	r26, r26
 282:	bb 0b       	sbc	r27, r27
 284:	fc 01       	movw	r30, r24
 286:	f1 97       	sbiw	r30, 0x31	; 49
 288:	e8 30       	cpi	r30, 0x08	; 8
 28a:	f1 05       	cpc	r31, r1
 28c:	38 f5       	brcc	.+78     	; 0x2dc <__vector_1+0x140>
 28e:	ec 5c       	subi	r30, 0xCC	; 204
 290:	ff 4f       	sbci	r31, 0xFF	; 255
 292:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__tablejump2__>
			{
				case '1':
					newBaud = 600;
 296:	28 e5       	ldi	r18, 0x58	; 88
 298:	32 e0       	ldi	r19, 0x02	; 2
 29a:	40 e0       	ldi	r20, 0x00	; 0
 29c:	50 e0       	ldi	r21, 0x00	; 0
 29e:	27 c0       	rjmp	.+78     	; 0x2ee <__vector_1+0x152>
					break;
				case '2':
					newBaud = 1200;
					break;
				case '3':
					newBaud = 2400;
 2a0:	20 e6       	ldi	r18, 0x60	; 96
 2a2:	39 e0       	ldi	r19, 0x09	; 9
 2a4:	40 e0       	ldi	r20, 0x00	; 0
 2a6:	50 e0       	ldi	r21, 0x00	; 0
					break;
 2a8:	22 c0       	rjmp	.+68     	; 0x2ee <__vector_1+0x152>
				case '4':
					newBaud = 4800;
 2aa:	20 ec       	ldi	r18, 0xC0	; 192
 2ac:	32 e1       	ldi	r19, 0x12	; 18
 2ae:	40 e0       	ldi	r20, 0x00	; 0
 2b0:	50 e0       	ldi	r21, 0x00	; 0
					break;
 2b2:	1d c0       	rjmp	.+58     	; 0x2ee <__vector_1+0x152>
				case '5':
					newBaud = 9600;
 2b4:	20 e8       	ldi	r18, 0x80	; 128
 2b6:	35 e2       	ldi	r19, 0x25	; 37
 2b8:	40 e0       	ldi	r20, 0x00	; 0
 2ba:	50 e0       	ldi	r21, 0x00	; 0
					break;
 2bc:	18 c0       	rjmp	.+48     	; 0x2ee <__vector_1+0x152>
				case '6':
					newBaud = 19200;
 2be:	20 e0       	ldi	r18, 0x00	; 0
 2c0:	3b e4       	ldi	r19, 0x4B	; 75
 2c2:	40 e0       	ldi	r20, 0x00	; 0
 2c4:	50 e0       	ldi	r21, 0x00	; 0
					break;
 2c6:	13 c0       	rjmp	.+38     	; 0x2ee <__vector_1+0x152>
				case '7':
					newBaud = 38400;
 2c8:	20 e0       	ldi	r18, 0x00	; 0
 2ca:	36 e9       	ldi	r19, 0x96	; 150
 2cc:	40 e0       	ldi	r20, 0x00	; 0
 2ce:	50 e0       	ldi	r21, 0x00	; 0
					break;
 2d0:	0e c0       	rjmp	.+28     	; 0x2ee <__vector_1+0x152>
				case '8':
					newBaud = 125000;
 2d2:	28 e4       	ldi	r18, 0x48	; 72
 2d4:	38 ee       	ldi	r19, 0xE8	; 232
 2d6:	41 e0       	ldi	r20, 0x01	; 1
 2d8:	50 e0       	ldi	r21, 0x00	; 0
					break;
 2da:	09 c0       	rjmp	.+18     	; 0x2ee <__vector_1+0x152>
				case '9':
				default:
					newBaud = 250000;
 2dc:	20 e9       	ldi	r18, 0x90	; 144
 2de:	30 ed       	ldi	r19, 0xD0	; 208
 2e0:	43 e0       	ldi	r20, 0x03	; 3
 2e2:	50 e0       	ldi	r21, 0x00	; 0
					break;
 2e4:	04 c0       	rjmp	.+8      	; 0x2ee <__vector_1+0x152>
			{
				case '1':
					newBaud = 600;
					break;
				case '2':
					newBaud = 1200;
 2e6:	20 eb       	ldi	r18, 0xB0	; 176
 2e8:	34 e0       	ldi	r19, 0x04	; 4
 2ea:	40 e0       	ldi	r20, 0x00	; 0
 2ec:	50 e0       	ldi	r21, 0x00	; 0
				case '9':
				default:
					newBaud = 250000;
					break;
			}
			USART_Init((F_CPU/16/newBaud)-1);
 2ee:	60 ed       	ldi	r22, 0xD0	; 208
 2f0:	72 e1       	ldi	r23, 0x12	; 18
 2f2:	83 e1       	ldi	r24, 0x13	; 19
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 ca 01 	call	0x394	; 0x394 <__udivmodsi4>
 2fa:	c9 01       	movw	r24, r18
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	0e 94 93 00 	call	0x126	; 0x126 <USART_Init>
			RSM_LO;								// Release wait line
 302:	88 b1       	in	r24, 0x08	; 8
 304:	87 7f       	andi	r24, 0xF7	; 247
 306:	88 b9       	out	0x08, r24	; 8
			RSM_HI;
 308:	88 b1       	in	r24, 0x08	; 8
 30a:	88 60       	ori	r24, 0x08	; 8
 30c:	88 b9       	out	0x08, r24	; 8
		break;
	}
}
 30e:	ff 91       	pop	r31
 310:	ef 91       	pop	r30
 312:	bf 91       	pop	r27
 314:	af 91       	pop	r26
 316:	9f 91       	pop	r25
 318:	8f 91       	pop	r24
 31a:	7f 91       	pop	r23
 31c:	6f 91       	pop	r22
 31e:	5f 91       	pop	r21
 320:	4f 91       	pop	r20
 322:	3f 91       	pop	r19
 324:	2f 91       	pop	r18
 326:	0f 90       	pop	r0
 328:	0f be       	out	0x3f, r0	; 63
 32a:	0f 90       	pop	r0
 32c:	1f 90       	pop	r1
 32e:	18 95       	reti

00000330 <main>:

int main(void)
{
 330:	cf 93       	push	r28
 332:	df 93       	push	r29
 334:	cd b7       	in	r28, 0x3d	; 61
 336:	de b7       	in	r29, 0x3e	; 62
 338:	c6 54       	subi	r28, 0x46	; 70
 33a:	d1 09       	sbc	r29, r1
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	f8 94       	cli
 340:	de bf       	out	0x3e, r29	; 62
 342:	0f be       	out	0x3f, r0	; 63
 344:	cd bf       	out	0x3d, r28	; 61
	char	iniMsg[] = "\r\n*** TTY card, 250kbps 8N1. ***\r\n*** by Kaltchuk, sep/2021. ***\r\n\r\n\0";
 346:	86 e4       	ldi	r24, 0x46	; 70
 348:	e0 e0       	ldi	r30, 0x00	; 0
 34a:	f1 e0       	ldi	r31, 0x01	; 1
 34c:	de 01       	movw	r26, r28
 34e:	11 96       	adiw	r26, 0x01	; 1
 350:	01 90       	ld	r0, Z+
 352:	0d 92       	st	X+, r0
 354:	8a 95       	dec	r24
 356:	e1 f7       	brne	.-8      	; 0x350 <main+0x20>
	int		i=0;
	
	USART_Init(MYUBRR);		// Initialize USART
 358:	84 e0       	ldi	r24, 0x04	; 4
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 93 00 	call	0x126	; 0x126 <USART_Init>
}

int main(void)
{
	char	iniMsg[] = "\r\n*** TTY card, 250kbps 8N1. ***\r\n*** by Kaltchuk, sep/2021. ***\r\n\r\n\0";
	int		i=0;
 360:	00 e0       	ldi	r16, 0x00	; 0
 362:	10 e0       	ldi	r17, 0x00	; 0
	
	USART_Init(MYUBRR);		// Initialize USART
	while ( iniMsg[i] != 0)	
 364:	04 c0       	rjmp	.+8      	; 0x36e <main+0x3e>
	{
		xmit(iniMsg[i++]);
 366:	0f 5f       	subi	r16, 0xFF	; 255
 368:	1f 4f       	sbci	r17, 0xFF	; 255
 36a:	0e 94 6b 00 	call	0xd6	; 0xd6 <xmit>
{
	char	iniMsg[] = "\r\n*** TTY card, 250kbps 8N1. ***\r\n*** by Kaltchuk, sep/2021. ***\r\n\r\n\0";
	int		i=0;
	
	USART_Init(MYUBRR);		// Initialize USART
	while ( iniMsg[i] != 0)	
 36e:	e1 e0       	ldi	r30, 0x01	; 1
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	ec 0f       	add	r30, r28
 374:	fd 1f       	adc	r31, r29
 376:	e0 0f       	add	r30, r16
 378:	f1 1f       	adc	r31, r17
 37a:	80 81       	ld	r24, Z
 37c:	81 11       	cpse	r24, r1
 37e:	f3 cf       	rjmp	.-26     	; 0x366 <main+0x36>
	{
		xmit(iniMsg[i++]);
	}
	DDRC |= (1<<RSM);		// Configure RSM pin as output
 380:	87 b1       	in	r24, 0x07	; 7
 382:	88 60       	ori	r24, 0x08	; 8
 384:	87 b9       	out	0x07, r24	; 7
	RSM_HI;					// Turn off RSM (active low)
 386:	88 b1       	in	r24, 0x08	; 8
 388:	88 60       	ori	r24, 0x08	; 8
 38a:	88 b9       	out	0x08, r24	; 8
	EIMSK = (1<<INT0);		// Enable INT0 (chip select)
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	8d bb       	out	0x1d, r24	; 29
	
	sei();
 390:	78 94       	sei
 392:	ff cf       	rjmp	.-2      	; 0x392 <main+0x62>

00000394 <__udivmodsi4>:
 394:	a1 e2       	ldi	r26, 0x21	; 33
 396:	1a 2e       	mov	r1, r26
 398:	aa 1b       	sub	r26, r26
 39a:	bb 1b       	sub	r27, r27
 39c:	fd 01       	movw	r30, r26
 39e:	0d c0       	rjmp	.+26     	; 0x3ba <__udivmodsi4_ep>

000003a0 <__udivmodsi4_loop>:
 3a0:	aa 1f       	adc	r26, r26
 3a2:	bb 1f       	adc	r27, r27
 3a4:	ee 1f       	adc	r30, r30
 3a6:	ff 1f       	adc	r31, r31
 3a8:	a2 17       	cp	r26, r18
 3aa:	b3 07       	cpc	r27, r19
 3ac:	e4 07       	cpc	r30, r20
 3ae:	f5 07       	cpc	r31, r21
 3b0:	20 f0       	brcs	.+8      	; 0x3ba <__udivmodsi4_ep>
 3b2:	a2 1b       	sub	r26, r18
 3b4:	b3 0b       	sbc	r27, r19
 3b6:	e4 0b       	sbc	r30, r20
 3b8:	f5 0b       	sbc	r31, r21

000003ba <__udivmodsi4_ep>:
 3ba:	66 1f       	adc	r22, r22
 3bc:	77 1f       	adc	r23, r23
 3be:	88 1f       	adc	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	1a 94       	dec	r1
 3c4:	69 f7       	brne	.-38     	; 0x3a0 <__udivmodsi4_loop>
 3c6:	60 95       	com	r22
 3c8:	70 95       	com	r23
 3ca:	80 95       	com	r24
 3cc:	90 95       	com	r25
 3ce:	9b 01       	movw	r18, r22
 3d0:	ac 01       	movw	r20, r24
 3d2:	bd 01       	movw	r22, r26
 3d4:	cf 01       	movw	r24, r30
 3d6:	08 95       	ret

000003d8 <__tablejump2__>:
 3d8:	ee 0f       	add	r30, r30
 3da:	ff 1f       	adc	r31, r31
 3dc:	05 90       	lpm	r0, Z+
 3de:	f4 91       	lpm	r31, Z
 3e0:	e0 2d       	mov	r30, r0
 3e2:	09 94       	ijmp

000003e4 <_exit>:
 3e4:	f8 94       	cli

000003e6 <__stop_program>:
 3e6:	ff cf       	rjmp	.-2      	; 0x3e6 <__stop_program>
