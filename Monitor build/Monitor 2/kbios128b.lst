0001   0000             ;==================================================================================
0002   0000             ; Contents of this file are copyright Grant Searle
0003   0000             ; Blocking/unblocking routines are the published version by Digital Research
0004   0000             ; (bugfixed, as found on the web)
0005   0000             ;
0006   0000             ; You have permission to use this for NON COMMERCIAL USE ONLY
0007   0000             ;
0008   0000             ; Customized by Kaltchuk for use with Z80 Modular Computer, december/2020.
0009   0000             ; CP/M is booted from ROM.
0010   0000             ; 04/02/21 - This version corrects a bug in wboot.
0011   0000             ;
0012   0000             ;==================================================================================
0013   0000             #INCLUDE	"equates.h"
0001+  0000             
0002+  0000             CCP				.EQU	0D000h			; Base of CCP (or Monitor).
0003+  0000             BIOS			.EQU	0E620h			; Base of BIOS.
0004+  0000             ROM_CCP			.EQU	CCP-0C000h		; Base of CCP in ROM
0005+  0000             ROM_BIOS		.EQU	BIOS-0C000h		; Base of BIOS in ROM
0006+  0000             
0007+  0000             ccp				.EQU	CCP
0008+  0000             bios			.EQU	BIOS
0014   0000             
0015   0000             ; Set CP/M low memory data, vector and buffer addresses.
0016   0000             
0017   0000             iobyte			.EQU	03h				; Intel standard I/O definition byte.
0018   0000             userdrv			.EQU	04h				; Current user number and drive.
0019   0000             tpabuf			.EQU	80h				; Default I/O buffer and command line storage.
0020   0000             
0021   0000             blksiz			.equ	4096			;CP/M allocation size
0022   0000             hstsiz			.equ	512				;host disk sector size
0023   0000             hstspt			.equ	32				;host disk sectors/trk
0024   0000             hstblk			.equ	hstsiz/128		;CP/M sects/host buff
0025   0000             cpmspt			.equ	hstblk * hstspt	;CP/M sectors/track
0026   0000             secmsk			.equ	hstblk-1		;sector mask
0027   0000             										;compute sector mask
0028   0000             ;secshf			.equ	2				;log2(hstblk)
0029   0000             	
0030   0000             wrall			.equ	0				;write to allocated
0031   0000             wrdir			.equ	1				;write to directory
0032   0000             wrual			.equ	2				;write to unallocated
0033   0000             
0034   0000             ; MEM card stuff
0035   0000             ROM_RAM0		.EQU	0F0H			; ROM + RAM bank 0
0036   0000             NOROM_RAM0		.EQU	0F1H			; no ROM + RAM bank 0 (full RAM)
0037   0000             ROM_RAM1		.EQU	0F2H			; ROM + RAM bank 1
0038   0000             NOROM_RAM1		.EQU	0F3H			; no ROM + RAM bank 1 (full RAM)
0039   0000             
0040   0000             ; USART card stuff
0041   0000             USART_DAT		.EQU	0D0H			; USART data addr
0042   0000             USART_CMD		.EQU	0D1H			; USART command addr
0043   0000             USART_STA		.EQU	0D1H			; USART status addr
0044   0000             UMODE			.EQU	06FH			; 8N1 (8 bit, no parity, 1 stop), baud=clock/64
0045   0000             UCMD0			.EQU	015H			; initial command: Rx enable, Tx enable, reset error flags
0046   0000             
0047   0000             ; LCD card address list.
0048   0000             LCD_ADDR	.EQU	0E0H
0049   0000             DAT_WR		.EQU	LCD_ADDR+1
0050   0000             DAT_RD		.EQU	LCD_ADDR+3
0051   0000             CMD_WR		.EQU	LCD_ADDR
0052   0000             CMD_RD		.EQU	LCD_ADDR+2
0053   0000             
0054   0000             
0055   0000             ; FLASH card stuff
0056   0000             FLASH_ADDR		.EQU	0B0H			; Base I/O address for compact flash card
0057   0000             CF_DATA			.EQU	(FLASH_ADDR+0)	; R/W
0058   0000             CF_FEATURES		.EQU	(FLASH_ADDR+1)	; W
0059   0000             CF_ERROR		.EQU	(FLASH_ADDR+1)	; R
0060   0000             CF_SECCOUNT		.EQU	(FLASH_ADDR+2)	; W
0061   0000             
0062   0000             CF_SECTOR		.EQU	(FLASH_ADDR+3)	; W
0063   0000             CF_CYL_LOW		.EQU	(FLASH_ADDR+4)	; W
0064   0000             CF_CYL_HI		.EQU	(FLASH_ADDR+5)	; W
0065   0000             CF_HEAD			.EQU	(FLASH_ADDR+6)	; W
0066   0000             
0067   0000             CF_LBA0			.EQU	(FLASH_ADDR+3)	; W
0068   0000             CF_LBA1			.EQU	(FLASH_ADDR+4)	; W
0069   0000             CF_LBA2			.EQU	(FLASH_ADDR+5)	; W
0070   0000             CF_LBA3			.EQU	(FLASH_ADDR+6)	; W
0071   0000             
0072   0000             CF_STATUS		.EQU	(FLASH_ADDR+7)	; R
0073   0000             CF_COMMAND		.EQU	(FLASH_ADDR+7)	; W
0074   0000             
0075   0000             ;CF Features
0076   0000             CF_8BIT			.EQU	1
0077   0000             CF_NOCACHE		.EQU	082H
0078   0000             
0079   0000             ;CF Commands
0080   0000             CF_READ_SEC		.EQU	020H
0081   0000             CF_WRITE_SEC	.EQU	030H
0082   0000             CF_SET_FEAT		.EQU 	0EFH
0083   0000             
0084   0000             ;================================================================================================
0085   0000             ; ASCII characters.
0086   0000             ;================================================================================================
0087   0000             NUL			.EQU	00H
0088   0000             LF			.EQU	0AH
0089   0000             FF			.EQU	0CH
0090   0000             CR			.EQU	0DH
0091   0000             DC1			.EQU	11H
0092   0000             DC2			.EQU	12H
0093   0000             DC3			.EQU	13H
0094   0000             DC4			.EQU	14H
0095   0000             ;================================================================================================
0096   0000             
0097   E620             		.ORG	bios					; BIOS origin.
0098   E620             
0099   E620             ;================================================================================================
0100   E620             ; BIOS jump table.
0101   E620             ;================================================================================================
0102   E620 C3 83 E7    		JP	boot						;  0 Initialize.
0103   E623 C3 20 E8    wboote:	JP	wboot						;  1 Warm boot.
0104   E626 C3 A4 E8    		JP	CONST						;  2 Console status.
0105   E629 C3 B7 E8    		JP	CONIN						;  3 Console input.
0106   E62C C3 D9 E8    		JP	CONOUT						;  4 Console OUTput.
0107   E62F C3 E6 E8    		JP	LIST						;  5 List OUTput.
0108   E632 C3 F3 E8    		JP	PUNCH						;  6 punch OUTput.
0109   E635 C3 E3 E8    		JP	READER						;  7 Reader input.
0110   E638 C3 45 EA    		JP	home						;  8 Home disk.
0111   E63B C3 1D EA    		JP	seldsk						;  9 Select disk.
0112   E63E C3 51 EA    		JP	settrk						; 10 Select track.
0113   E641 C3 56 EA    		JP	setsec						; 11 Select sector.
0114   E644 C3 5B EA    		JP	setdma						; 12 Set DMA ADDress.
0115   E647 C3 63 EA    		JP	read						; 13 Read 128 bytes.
0116   E64A C3 77 EA    		JP	write						; 14 Write 128 bytes.
0117   E64D C3 F6 E8    		JP	LISTST						; 15 List status.
0118   E650 C3 60 EA    		JP	sectran						; 16 Sector translate.
0119   E653 C3 51 EC    		JP	PRINTSEQ					; not a BIOS function
0120   E656             
0121   E656             ;================================================================================================
0122   E656             ; Disk parameter headers for disk 0 to 15
0123   E656             ;================================================================================================
0124   E656             dpbase:
0125   E656 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb0,0000h,alv00
0125   E65A 00 00 00 00 
0125   E65E 65 EC 56 E7 
0125   E662 00 00 E5 EC 
0126   E666 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv01
0126   E66A 00 00 00 00 
0126   E66E 65 EC 65 E7 
0126   E672 00 00 E6 ED 
0127   E676 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv02
0127   E67A 00 00 00 00 
0127   E67E 65 EC 65 E7 
0127   E682 00 00 E7 EE 
0128   E686 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv03
0128   E68A 00 00 00 00 
0128   E68E 65 EC 65 E7 
0128   E692 00 00 E8 EF 
0129   E696 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv04
0129   E69A 00 00 00 00 
0129   E69E 65 EC 65 E7 
0129   E6A2 00 00 E9 F0 
0130   E6A6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv05
0130   E6AA 00 00 00 00 
0130   E6AE 65 EC 65 E7 
0130   E6B2 00 00 EA F1 
0131   E6B6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv06
0131   E6BA 00 00 00 00 
0131   E6BE 65 EC 65 E7 
0131   E6C2 00 00 EB F2 
0132   E6C6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv07
0132   E6CA 00 00 00 00 
0132   E6CE 65 EC 65 E7 
0132   E6D2 00 00 EC F3 
0133   E6D6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv08
0133   E6DA 00 00 00 00 
0133   E6DE 65 EC 65 E7 
0133   E6E2 00 00 ED F4 
0134   E6E6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv09
0134   E6EA 00 00 00 00 
0134   E6EE 65 EC 65 E7 
0134   E6F2 00 00 EE F5 
0135   E6F6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv10
0135   E6FA 00 00 00 00 
0135   E6FE 65 EC 65 E7 
0135   E702 00 00 EF F6 
0136   E706 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv11
0136   E70A 00 00 00 00 
0136   E70E 65 EC 65 E7 
0136   E712 00 00 F0 F7 
0137   E716 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv12
0137   E71A 00 00 00 00 
0137   E71E 65 EC 65 E7 
0137   E722 00 00 F1 F8 
0138   E726 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv13
0138   E72A 00 00 00 00 
0138   E72E 65 EC 65 E7 
0138   E732 00 00 F2 F9 
0139   E736 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv14
0139   E73A 00 00 00 00 
0139   E73E 65 EC 65 E7 
0139   E742 00 00 F3 FA 
0140   E746 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpbLast,0000h,alv15
0140   E74A 00 00 00 00 
0140   E74E 65 EC 74 E7 
0140   E752 00 00 F4 FB 
0141   E756             
0142   E756             ; First drive has a reserved track for CP/M
0143   E756             dpb0:
0144   E756 80 00       		.DW 128 ;SPT - sectors per track
0145   E758 05          		.DB 5   ;BSH - block shift factor
0146   E759 1F          		.DB 31  ;BLM - block mask
0147   E75A 01          		.DB 1   ;EXM - Extent mask
0148   E75B FB 07       		.DW 2043 ; (2047-4) DSM - Storage size (blocks - 1)
0149   E75D FF 01       		.DW 511 ;DRM - Number of directory entries - 1
0150   E75F F0          		.DB 240 ;AL0 - 1 bit set per directory block
0151   E760 00          		.DB 0   ;AL1 -            "
0152   E761 00 00       		.DW 0   ;CKS - DIR check vector size (DRM+1)/4 (0=fixed disk)
0153   E763 01 00       		.DW 1   ;ON  - Reserved tracks
0154   E765             
0155   E765             dpb:
0156   E765 80 00       		.DW 128 ;SPT - sectors per track
0157   E767 05          		.DB 5   ;BSH - block shift factor
0158   E768 1F          		.DB 31  ;BLM - block mask
0159   E769 01          		.DB 1   ;EXM - Extent mask
0160   E76A FF 07       		.DW 2047 ;DSM - Storage size (blocks - 1)
0161   E76C FF 01       		.DW 511 ;DRM - Number of directory entries - 1
0162   E76E F0          		.DB 240 ;AL0 - 1 bit set per directory block
0163   E76F 00          		.DB 0   ;AL1 -            "
0164   E770 00 00       		.DW 0   ;CKS - DIR check vector size (DRM+1)/4 (0=fixed disk)
0165   E772 00 00       		.DW 0   ;OFF - Reserved tracks
0166   E774             
0167   E774             ; Last drive is smaller because CF is never full 64MB or 128MB
0168   E774             dpbLast:
0169   E774 80 00       		.DW 128 ;SPT - sectors per track
0170   E776 05          		.DB 5   ;BSH - block shift factor
0171   E777 1F          		.DB 31  ;BLM - block mask
0172   E778 01          		.DB 1   ;EXM - Extent mask
0173   E779 FF 01       		.DW 511 ;DSM - Storage size (blocks - 1)  ; 511 = 2MB (for 128MB card), 1279 = 5MB (for 64MB card)
0174   E77B FF 01       		.DW 511 ;DRM - Number of directory entries - 1
0175   E77D F0          		.DB 240 ;AL0 - 1 bit set per directory block
0176   E77E 00          		.DB 0   ;AL1 -            "
0177   E77F 00 00       		.DW 0   ;CKS - DIR check vector size (DRM+1)/4 (0=fixed disk)
0178   E781 00 00       		.DW 0   ;OFF - Reserved tracks
0179   E783             
0180   E783             ;================================================================================================
0181   E783             ; Cold boot
0182   E783             ;================================================================================================
0183   E783             
0184   E783             boot:
0185   E783 F3          		DI						; Disable interrupts.
0186   E784 31 84 FF    		LD	SP,BIOSSTACK		; Set default stack.
0187   E787             
0188   E787 D3 F1       		OUT (NOROM_RAM0),A		; Turn off ROM. Doesn't matter what we output
0189   E789             
0190   E789 CD 8D E8    		CALL USARTINIT			; Initialize USART
0191   E78C             
0192   E78C 01 10 FF    		LD	BC,BUFINI			; Initialize pointers for USART buffer
0193   E78F ED 43 60 FF 		LD	(WRPTR),BC
0194   E793 ED 43 62 FF 		LD	(RDPTR),BC
0195   E797             
0196   E797 CD 46 EC    		CALL	cfWait			; Initialize FLASH
0197   E79A 3E 01       		LD 	A,CF_8BIT			; Set IDE to be 8bit
0198   E79C D3 B1       		OUT	(CF_FEATURES),A
0199   E79E 3E EF       		LD	A,CF_SET_FEAT
0200   E7A0 D3 B7       		OUT	(CF_COMMAND),A
0201   E7A2             
0202   E7A2 CD 46 EC    		CALL	cfWait
0203   E7A5 3E 82       		LD 	A,CF_NOCACHE		; No write cache
0204   E7A7 D3 B1       		OUT	(CF_FEATURES),A
0205   E7A9 3E EF       		LD	A,CF_SET_FEAT
0206   E7AB D3 B7       		OUT	(CF_COMMAND),A
0207   E7AD             
0208   E7AD AF          		XOR	A					; set drive byte to A:
0209   E7AE 32 04 00    		LD	(userdrv),A
0210   E7B1             
0211   E7B1 01 10 FF    		LD	BC,BUFINI			; reset serial input buffer
0212   E7B4 ED 43 60 FF 		LD	(WRPTR),BC
0213   E7B8 ED 43 62 FF 		LD	(RDPTR),BC
0214   E7BC             
0215   E7BC             
0216   E7BC CD 51 EC    		CALL	PRINTSEQ
0217   E7BF 5A 38 30 20 		.DB "Z80 Modular Computer by Kaltchuk 2020.",CR,LF
0217   E7C3 4D 6F 64 75 
0217   E7C7 6C 61 72 20 
0217   E7CB 43 6F 6D 70 
0217   E7CF 75 74 65 72 
0217   E7D3 20 62 79 20 
0217   E7D7 4B 61 6C 74 
0217   E7DB 63 68 75 6B 
0217   E7DF 20 32 30 32 
0217   E7E3 30 2E 0D 0A 
0218   E7E7 42 49 4F 53 		.DB "BIOS 1.0B - 128MB Flash, LCD drive.",CR,LF
0218   E7EB 20 31 2E 30 
0218   E7EF 42 20 2D 20 
0218   E7F3 31 32 38 4D 
0218   E7F7 42 20 46 6C 
0218   E7FB 61 73 68 2C 
0218   E7FF 20 4C 43 44 
0218   E803 20 64 72 69 
0218   E807 76 65 2E 0D 
0218   E80B 0A 
0219   E80C 4D 30 4E 49 		.DB "M0NITOR 2.1.",CR,LF,CR,LF,0
0219   E810 54 4F 52 20 
0219   E814 32 2E 31 2E 
0219   E818 0D 0A 0D 0A 
0219   E81C 00 
0220   E81D             
0221   E81D C3 33 E8    		JP	gocpm
0222   E820             
0223   E820             ;================================================================================================
0224   E820             ; Warm boot
0225   E820             ;================================================================================================
0226   E820             
0227   E820             wboot:
0228   E820 F3          		DI						; Disable interrupts.
0229   E821 31 84 FF    		LD	SP,BIOSSTACK		; Set default stack.
0230   E824             
0231   E824 D3 F0       		OUT (ROM_RAM0),A		; Turn on ROM. Doesn't matter what we output
0232   E826             
0233   E826 01 00 16    		LD	BC,01600H			; Copy CP/M ROM (01000h) to RAM (0D000h)
0234   E829 11 00 D0    		LD	DE,CCP				; Don't copy the BIOS!!!
0235   E82C 21 00 10    		LD	HL,ROM_CCP
0236   E82F ED B0       		LDIR
0237   E831             
0238   E831 D3 F1       		OUT (NOROM_RAM0),A		; Turn off ROM. Doesn't matter what we output
0239   E833             
0240   E833             
0241   E833             ;================================================================================================
0242   E833             ; Common code for cold and warm boot
0243   E833             ;================================================================================================
0244   E833             
0245   E833             gocpm:
0246   E833 AF          		XOR	A					; 0 to accumulator
0247   E834 32 03 FD    		LD	(hstact),A			; host buffer inactive
0248   E837 32 05 FD    		LD	(unacnt),A			; clear unalloc count
0249   E83A             
0250   E83A 21 80 00    		LD	HL,tpabuf			; ADDress of BIOS DMA buffer.
0251   E83D 22 0E FD    		LD	(dmaAddr),HL
0252   E840             		
0253   E840 3E C3       		LD	A,0C3h				; Opcode for 'JP'.
0254   E842 32 00 00    		LD	(00h),A				; Load at start of RAM.
0255   E845 21 23 E6    		LD	HL,wboote			; ADDress of jump for a warm boot.
0256   E848 22 01 00    		LD	(01h),HL
0257   E84B 32 05 00    		LD	(05h),A				; Opcode for 'JP'.
0258   E84E 2A 1E E6    		LD	HL,(BIOS-2)			; ADDress of jump for the BDOS.
0259   E851 22 06 00    		LD	(06h),HL
0260   E854 32 38 00    		LD	(038H),A			; at 038h write "JP UINT"
0261   E857 21 6C E8    		LD	HL,UINT				; which is the interrupt routine to catch incoming
0262   E85A 22 39 00    		LD	(039H),HL			; character on the USART
0263   E85D 3E 00       		LD	A,0
0264   E85F 32 03 00    		LD	(iobyte),A			; Set IOBYTE to 00
0265   E862 3A 04 00    		LD	A,(userdrv)			; Save new drive number (0).
0266   E865 4F          		LD	C,A					; Pass drive number in C.
0267   E866             
0268   E866 ED 56       		IM	1
0269   E868 FB          		EI
0270   E869             	
0271   E869 C3 00 D0    		JP	ccp					; Start CP/M by jumping to the CCP.
0272   E86C             
0273   E86C             ;================================================================================================
0274   E86C             ; Interrupt routine for USART
0275   E86C             ;================================================================================================
0276   E86C             UINT:
0277   E86C C5          		PUSH	BC
0278   E86D E5          		PUSH	HL
0279   E86E             
0280   E86E DB D0       		IN	A,(USART_DAT)		; read incoming byte
0281   E870             ;		OUT	(USART_DAT),A		; send character
0282   E870 ED 4B 60 FF 		LD	BC,(WRPTR)
0283   E874 02          		LD	(BC),A
0284   E875 03          		INC	BC
0285   E876 21 60 FF    		LD	HL,BUFEND
0286   E879 37          		SCF
0287   E87A 3F          		CCF
0288   E87B ED 42       		SBC	HL,BC
0289   E87D 20 03       		JR	NZ,EOINT
0290   E87F 01 10 FF    		LD	BC,BUFINI
0291   E882 ED 43 60 FF EOINT:	LD	(WRPTR),BC
0292   E886             
0293   E886 E1          		POP	HL
0294   E887 C1          		POP	BC
0295   E888 ED 56       		IM	1
0296   E88A FB          		EI
0297   E88B ED 4D       		RETI
0298   E88D             
0299   E88D             ;================================================================================================
0300   E88D             ; Initialize USART
0301   E88D             ;================================================================================================
0302   E88D             USARTINIT:
0303   E88D 3E 00       		LD 	A,0					; Worst case init: put in SYNC mode, 
0304   E88F D3 D1       		OUT	(USART_CMD),A		; send 2 dummy 00 sync chars and reset
0305   E891 00          		NOP
0306   E892 D3 D1       		OUT	(USART_CMD),A
0307   E894 00          		NOP
0308   E895 D3 D1       		OUT	(USART_CMD),A
0309   E897 3E 40       		LD 	A,040H				; Reset USART
0310   E899 D3 D1       		OUT	(USART_CMD),A
0311   E89B 3E 6F       		LD 	A,UMODE				; Set USART mode
0312   E89D D3 D1       		OUT	(USART_CMD),A
0313   E89F 3E 15       		LD 	A,UCMD0				; Set USART initial command
0314   E8A1 D3 D1       		OUT	(USART_CMD),A
0315   E8A3 C9          		RET
0316   E8A4             
0317   E8A4             ;================================================================================================
0318   E8A4             ; Console I/O routines
0319   E8A4             ;================================================================================================
0320   E8A4             ;================================================================================================
0321   E8A4             ; Console Status (Return A=0FFh if character waiting. Otherwise, A=0)
0322   E8A4             ;================================================================================================
0323   E8A4             CONST:
0324   E8A4 C5          		PUSH	BC
0325   E8A5 E5          		PUSH	HL
0326   E8A6 ED 4B 60 FF 		LD	BC,(WRPTR)
0327   E8AA 2A 62 FF    		LD	HL,(RDPTR)
0328   E8AD AF          		XOR	A					; Reset carry flag
0329   E8AE ED 42       		SBC	HL,BC
0330   E8B0 28 02       		JR	Z,CONVOID
0331   E8B2 3E FF       		LD	A,0FFH
0332   E8B4             CONVOID:
0333   E8B4 E1          		POP	HL
0334   E8B5 C1          		POP	BC
0335   E8B6 C9          	  	RET
0336   E8B7             
0337   E8B7             ;================================================================================================
0338   E8B7             ; Console Input (Wait for input and return character in A)
0339   E8B7             ;================================================================================================
0340   E8B7             CONIN:
0341   E8B7 C5          		PUSH	BC	
0342   E8B8 E5          		PUSH	HL	
0343   E8B9 CD A4 E8    AGAIN:	CALL	CONST
0344   E8BC FE 00       		CP	0
0345   E8BE 28 F9       		JR	Z,AGAIN			; Keep trying till we receive something
0346   E8C0 ED 4B 62 FF 		LD	BC,(RDPTR)
0347   E8C4 0A          		LD	A,(BC)
0348   E8C5 03          		INC	BC
0349   E8C6 21 60 FF    		LD	HL,BUFEND
0350   E8C9 37          		SCF
0351   E8CA 3F          		CCF
0352   E8CB ED 42       		SBC	HL,BC
0353   E8CD 20 03       		JR	NZ,EOCONIN
0354   E8CF 01 10 FF    		LD	BC,BUFINI
0355   E8D2 ED 43 62 FF EOCONIN:	LD	(RDPTR),BC
0356   E8D6 E1          		POP	HL
0357   E8D7 C1          		POP	BC
0358   E8D8 C9          		RET					; Char read returns in A
0359   E8D9             
0360   E8D9             ;================================================================================================
0361   E8D9             ; Console Output (Send character in reg C)
0362   E8D9             ;================================================================================================
0363   E8D9             CONOUT:
0364   E8D9 DB D1       		IN	A,(USART_STA)		; read USART status byte
0365   E8DB E6 04       		AND	04H				; get only the TxEMPTY bit
0366   E8DD 28 FA       		JR	Z,CONOUT
0367   E8DF 79          		LD	A,C
0368   E8E0 D3 D0       		OUT	(USART_DAT),A		; send character
0369   E8E2 C9          		RET
0370   E8E3             
0371   E8E3             ;================================================================================================
0372   E8E3             ; Reader Input
0373   E8E3             ;================================================================================================
0374   E8E3 C3 B7 E8    READER:	JP CONIN	
0375   E8E6             
0376   E8E6             ;================================================================================================
0377   E8E6             ; List Output
0378   E8E6             ;================================================================================================
0379   E8E6 3A 03 00    LIST:		LD	A,(iobyte)
0380   E8E9 E6 C0       			AND	0C0H			; Get LIST portion of IOBYTE
0381   E8EB FE C0       			CP	0C0H
0382   E8ED CA 07 E9    			JP	Z,LCD
0383   E8F0 C3 D9 E8    			JP CONOUT
0384   E8F3             
0385   E8F3             ;================================================================================================
0386   E8F3             ; Punch Output
0387   E8F3             ;================================================================================================
0388   E8F3 C3 D9 E8    PUNCH:	JP CONOUT	
0389   E8F6             
0390   E8F6             ;================================================================================================
0391   E8F6             ; List Status (List = Console)
0392   E8F6             ;================================================================================================
0393   E8F6 3A 03 00    LISTST:		LD	A,(iobyte)
0394   E8F9 E6 C0       			AND	0C0H			; Get LIST portion of IOBYTE
0395   E8FB FE C0       			CP	0C0H
0396   E8FD CA 03 E9    			JP	Z,LCDST
0397   E900 C3 A4 E8    			JP CONST
0398   E903             
0399   E903             ;================================================================================================
0400   E903             ; LCD STATUS. Return A=LCD_card_addr. A=0 if no card initialized.
0401   E903             ;================================================================================================
0402   E903 CD 76 E9    LCDST:		CALL BWAIT
0403   E906 C9          			RET
0404   E907             
0405   E907             ;================================================================================================
0406   E907             ; LCD OUTPUT. Send C to LCD, if C>1FH (printable range). 
0407   E907             ; Accepts also LF, CR and FF (Form Feed = clear LCD).
0408   E907             ; If C=DC1, initialize LCD card.
0409   E907             ; If C=DC2, position cursor as indicated in regB.
0410   E907             ;================================================================================================
0411   E907 E5          LCD:		PUSH HL
0412   E908 79          			LD	A,C
0413   E909 FE 14       			CP	20
0414   E90B FA 13 E9    			JP	M,ASCIILO
0415   E90E CD 88 E9    			CALL LCDPUT
0416   E911 18 19       			JR	GETOUT
0417   E913 FE 0A       ASCIILO:	CP	LF
0418   E915 CC A8 E9    			CALL Z,LCDLF			; Line Feed
0419   E918 FE 0D       			CP	CR
0420   E91A CC 9C E9    			CALL Z,LCDCR			; Carriage Return
0421   E91D FE 0C       			CP	FF
0422   E91F CC 7E E9    			CALL Z,LCDCLEAR			; Form Feed, which is a 'clear LCD'
0423   E922 FE 11       			CP	DC1
0424   E924 CC 2E E9    			CALL Z,LCDINIT			; Initialize LCD card.
0425   E927 FE 12       			CP	DC2
0426   E929 CC 91 E9    			CALL Z,LCDPOS			; Cursor reposition request. New position in regB
0427   E92C E1          GETOUT:		POP	HL
0428   E92D C9          			RET
0429   E92E             
0430   E92E             ;================================================================================================
0431   E92E             ; Initialize LCD
0432   E92E             ;================================================================================================
0433   E92E 06 0F       LCDINIT:	LD	B,15			; wait 15ms
0434   E930 CD F9 E9    			CALL DELAYMS
0435   E933 3E 30       			LD	A,030H			; write command 030h
0436   E935 D3 E0       			OUT	(CMD_WR),A
0437   E937 06 05       			LD	B,5				; wait 5ms
0438   E939 CD F9 E9    			CALL DELAYMS
0439   E93C 3E 30       			LD	A,030H			; write command 030h
0440   E93E D3 E0       			OUT	(CMD_WR),A
0441   E940 0E 14       			LD	C,20			; wait (5X20) 100us
0442   E942 CD 05 EA    			CALL DELAY5US
0443   E945 3E 30       			LD	A,030H			; write command 030h
0444   E947 D3 E0       			OUT	(CMD_WR),A
0445   E949 0E 14       			LD	C,20			; wait (5X20) 100us
0446   E94B CD 05 EA    			CALL DELAY5US
0447   E94E 3E 38       			LD	A,038H			; write command 038h = function set (8-bits, 2-lines, 5x7dots)
0448   E950 D3 E0       			OUT	(CMD_WR),A
0449   E952 CD 76 E9    			CALL BWAIT
0450   E955 3E 08       			LD	A,08H			; write command 08h = display (off)
0451   E957 D3 E0       			OUT	(CMD_WR),A
0452   E959 CD 76 E9    			CALL BWAIT
0453   E95C 3E 01       			LD	A,01H			; write command 01h = clear display
0454   E95E D3 E0       			OUT	(CMD_WR),A
0455   E960 CD 76 E9    			CALL BWAIT
0456   E963 3E 06       			LD	A,06H			; write command 06h = entry mode (increment)
0457   E965 D3 E0       			OUT	(CMD_WR),A
0458   E967 CD 76 E9    			CALL BWAIT
0459   E96A 3E 0C       			LD	A,0CH			; write command 0Ch = display (on)
0460   E96C D3 E0       			OUT	(CMD_WR),A
0461   E96E 3E E0       			LD	A,LCD_ADDR
0462   E970 32 0C EA    			LD	(LCDSTATUS),A
0463   E973 3E 00       			LD	A,0
0464   E975 C9          			RET
0465   E976             
0466   E976             ;================================================================================================
0467   E976             ; Wait until Busy flag = 0
0468   E976             ;================================================================================================
0469   E976 DB E2       BWAIT:		IN	A,(CMD_RD)
0470   E978 07          			RLCA
0471   E979 38 FB       			JR	C,BWAIT
0472   E97B CB 3F       			SRL	A
0473   E97D C9          			RET
0474   E97E             			
0475   E97E             ;================================================================================================
0476   E97E             ; Clear LCD and goto line 1, column 1.
0477   E97E             ;================================================================================================
0478   E97E CD 76 E9    LCDCLEAR:	CALL BWAIT
0479   E981 3E 01       			LD	A,01H
0480   E983 D3 E0       			OUT	(CMD_WR),A
0481   E985 3E 00       			LD	A,0
0482   E987 C9          			RET
0483   E988             
0484   E988             ;================================================================================================
0485   E988             ; Send to LCD char in regC. Print at current position (what ever it is)
0486   E988             ;================================================================================================
0487   E988 CD 76 E9    LCDPUT:		CALL BWAIT
0488   E98B 79          			LD	A,C	
0489   E98C D3 E1       			OUT	(DAT_WR),A
0490   E98E 3E 00       			LD	A,0
0491   E990 C9          			RET
0492   E991             
0493   E991             ;================================================================================================
0494   E991             ; Position LCD cursor at regB.
0495   E991             ;================================================================================================
0496   E991 CD 76 E9    LCDPOS:		CALL BWAIT
0497   E994 78          			LD	A,B
0498   E995 F6 80       			OR	80H
0499   E997 D3 E0       			OUT	(CMD_WR),A
0500   E999 3E 00       			LD	A,0
0501   E99B C9          			RET
0502   E99C             
0503   E99C             ;================================================================================================
0504   E99C             ; Do CR (Carriage Return)
0505   E99C             ;================================================================================================
0506   E99C CD 76 E9    LCDCR:		CALL BWAIT
0507   E99F E6 F0       			AND	0F0H			; Keep line info, set column to 1.
0508   E9A1 F6 80       			OR	080H
0509   E9A3 D3 E0       			OUT	(CMD_WR),A
0510   E9A5 3E 00       			LD	A,0
0511   E9A7 C9          			RET
0512   E9A8             			
0513   E9A8             ;================================================================================================
0514   E9A8             ; Do LF (Line Feed)
0515   E9A8             ;================================================================================================
0516   E9A8 CD 76 E9    LCDLF:		CALL BWAIT			; regA holds LCD address counter
0517   E9AB 57          			LD	D,A
0518   E9AC E6 40       			AND	40H				; get only the 7th bit to see on which line the cursor is.
0519   E9AE 28 26       			JR	Z,LN11
0520   E9B0 CD 76 E9    			CALL BWAIT
0521   E9B3 3E C0       			LD	A,0C0H
0522   E9B5 D3 E0       			OUT	(CMD_WR),A		; set addr counter to source position (2,1)
0523   E9B7 21 0D EA    			LD	HL,BUF
0524   E9BA 06 10       			LD	B,10H
0525   E9BC CD 76 E9    NEWSRC:		CALL BWAIT
0526   E9BF DB E3       			IN	A,(DAT_RD)		; get data from source position
0527   E9C1 77          			LD	(HL),A			; Store char in buffer
0528   E9C2 23          			INC	HL
0529   E9C3 10 F7       			DJNZ NEWSRC
0530   E9C5 CD 7E E9    			CALL LCDCLEAR
0531   E9C8 21 0D EA    			LD	HL,BUF
0532   E9CB 06 10       			LD	B,10H
0533   E9CD CD 76 E9    NEWTGT:		CALL BWAIT
0534   E9D0 7E          			LD	A,(HL)
0535   E9D1 23          			INC	HL
0536   E9D2 D3 E1       			OUT	(DAT_WR),A
0537   E9D4 10 F7       			DJNZ NEWTGT
0538   E9D6             
0539   E9D6 CD 76 E9    LN11:		CALL BWAIT
0540   E9D9 7A          			LD	A,D
0541   E9DA E6 0F       			AND	0FH
0542   E9DC F6 C0       			OR	0C0H
0543   E9DE D3 E0       			OUT	(CMD_WR),A
0544   E9E0 3E 00       			LD	A,0
0545   E9E2 C9          			RET
0546   E9E3             
0547   E9E3             ;================================================================================================
0548   E9E3             ; Delay X seconds, with X passed on reg B
0549   E9E3             ;================================================================================================
0550   E9E3 C5          DELAYS:		PUSH BC
0551   E9E4 E5          			PUSH HL
0552   E9E5 21 8F 02    LOOP0:		LD	HL,655		;2.5				\
0553   E9E8 0E FF       LOOP1:		LD	C,255		;1.75	\			|
0554   E9EA 0D          LOOP2:		DEC	C			;1		|			|
0555   E9EB 00          			NOP				;1		| t=6C+0.5	| 
0556   E9EC 79          			LD	A,C			;1		|			| t=HL(6C+6.5)+1.25
0557   E9ED 20 FB       			JR	NZ,LOOP2	;3/1.75	/			|
0558   E9EF 2B          			DEC	HL			;1					| with HL=655 and c=255, t=1.006sec (WOW!!!)
0559   E9F0 7C          			LD	A,H			;1					|
0560   E9F1 B5          			OR	L			;1					|
0561   E9F2 20 F4       			JR	NZ,LOOP1	;3/1.75				/
0562   E9F4 10 EF       			DJNZ LOOP0		;3.25/2
0563   E9F6 E1          			POP	HL
0564   E9F7 C1          			POP	BC
0565   E9F8 C9          			RET
0566   E9F9             
0567   E9F9             ;================================================================================================
0568   E9F9             ; Delay X miliseconds, with X passed on reg B
0569   E9F9             ;================================================================================================
0570   E9F9 C5          DELAYMS:	PUSH BC
0571   E9FA 0E C8       DECB:		LD	C,0C8H
0572   E9FC 00          DECC:		NOP
0573   E9FD 0D          			DEC	C
0574   E9FE 20 FC       			JR	NZ,DECC
0575   EA00 05          			DEC	B
0576   EA01 20 F7       			JR	NZ,DECB
0577   EA03 C1          			POP	BC
0578   EA04 C9          			RET
0579   EA05             
0580   EA05             ;================================================================================================
0581   EA05             ; Delay 5*X microseconds, with X passed on reg C
0582   EA05             ;================================================================================================
0583   EA05 C5          DELAY5US:	PUSH BC
0584   EA06 00          DEC:		NOP
0585   EA07 0D          			DEC	C
0586   EA08 20 FC       			JR	NZ,DEC
0587   EA0A C1          			POP	BC
0588   EA0B C9          			RET
0589   EA0C             
0590   EA0C             ;================================================================================================
0591   EA0C 00          LCDSTATUS	.DB	0			; After LCD has been initialized, it will hold card addr.
0592   EA0D             BUF			.DS	10H			; Buffer for Line Feed operation
0593   EA1D             ;================================================================================================
0594   EA1D             ; Disk processing entry points
0595   EA1D             ;================================================================================================
0596   EA1D             seldsk:
0597   EA1D 21 00 00    		LD	HL,$0000
0598   EA20 79          		LD	A,C
0599   EA21 FE 10       		CP	16		; 16 for 128MB disk, 8 for 64MB disk
0600   EA23 38 0D       		jr	C,chgdsk	; if invalid drive will give BDOS error
0601   EA25 3A 04 00    		LD	A,(userdrv)	; so set the drive back to a:
0602   EA28 B9          		CP	C		; If the default disk is not the same as the
0603   EA29 C0          		RET	NZ		; selected drive then return, 
0604   EA2A AF          		XOR	A		; else reset default back to a:
0605   EA2B 32 04 00    		LD	(userdrv),A	; otherwise will be stuck in a loop
0606   EA2E 32 F9 FC    		LD	(sekdsk),A
0607   EA31 C9          		ret
0608   EA32             
0609   EA32 32 F9 FC    chgdsk:		LD 	(sekdsk),A
0610   EA35 CB 07       		RLC	a		;*2
0611   EA37 CB 07       		RLC	a		;*4
0612   EA39 CB 07       		RLC	a		;*8
0613   EA3B CB 07       		RLC	a		;*16
0614   EA3D 21 56 E6    		LD 	HL,dpbase
0615   EA40 06 00       		LD	b,0
0616   EA42 4F          		LD	c,A	
0617   EA43 09          		ADD	HL,BC
0618   EA44             
0619   EA44 C9          		RET
0620   EA45             
0621   EA45             ;------------------------------------------------------------------------------------------------
0622   EA45             home:
0623   EA45 3A 04 FD    		ld	a,(hstwrt)	;check for pending write
0624   EA48 B7          		or	a
0625   EA49 20 03       		jr	nz,homed
0626   EA4B 32 03 FD    		ld	(hstact),a	;clear host active flag
0627   EA4E             homed:
0628   EA4E 01 00 00    		LD 	BC,0000h
0629   EA51             
0630   EA51             ;------------------------------------------------------------------------------------------------
0631   EA51 ED 43 FA FC settrk:		LD 	(sektrk),BC	; Set track passed from BDOS in register BC.
0632   EA55 C9          		RET
0633   EA56             
0634   EA56             ;------------------------------------------------------------------------------------------------
0635   EA56 ED 43 FC FC setsec:		LD 	(seksec),BC	; Set sector passed from BDOS in register BC.
0636   EA5A C9          		RET
0637   EA5B             
0638   EA5B             ;------------------------------------------------------------------------------------------------
0639   EA5B ED 43 0E FD setdma:		LD 	(dmaAddr),BC	; Set DMA ADDress given by registers BC.
0640   EA5F C9          		RET
0641   EA60             
0642   EA60             ;------------------------------------------------------------------------------------------------
0643   EA60 C5          sectran:	PUSH 	BC
0644   EA61 E1          		POP 	HL
0645   EA62 C9          		RET
0646   EA63             
0647   EA63             ;------------------------------------------------------------------------------------------------
0648   EA63             read:
0649   EA63             		;read the selected CP/M sector
0650   EA63 AF          		xor	a
0651   EA64 32 05 FD    		ld	(unacnt),a
0652   EA67 3E 01       		ld	a,1
0653   EA69 32 0C FD    		ld	(readop),a		;read operation
0654   EA6C 32 0B FD    		ld	(rsflag),a		;must read data
0655   EA6F 3E 02       		ld	a,wrual
0656   EA71 32 0D FD    		ld	(wrtype),a		;treat as unalloc
0657   EA74 C3 DE EA    		jp	rwoper			;to perform the read
0658   EA77             
0659   EA77             
0660   EA77             ;------------------------------------------------------------------------------------------------
0661   EA77             write:
0662   EA77             		;write the selected CP/M sector
0663   EA77 AF          		xor	a		;0 to accumulator
0664   EA78 32 0C FD    		ld	(readop),a	;not a read operation
0665   EA7B 79          		ld	a,c		;write type in c
0666   EA7C 32 0D FD    		ld	(wrtype),a
0667   EA7F FE 02       		cp	wrual		;write unallocated?
0668   EA81 20 17       		jr	nz,chkuna	;check for unalloc
0669   EA83             ;
0670   EA83             ;		write to unallocated, set parameters
0671   EA83 3E 20       		ld	a,blksiz/128	;next unalloc recs
0672   EA85 32 05 FD    		ld	(unacnt),a
0673   EA88 3A F9 FC    		ld	a,(sekdsk)		;disk to seek
0674   EA8B 32 06 FD    		ld	(unadsk),a		;unadsk = sekdsk
0675   EA8E 2A FA FC    		ld	hl,(sektrk)
0676   EA91 22 07 FD    		ld	(unatrk),hl		;unatrk = sectrk
0677   EA94 3A FC FC    		ld	a,(seksec)
0678   EA97 32 09 FD    		ld	(unasec),a		;unasec = seksec
0679   EA9A             ;
0680   EA9A             chkuna:
0681   EA9A             ;		check for write to unallocated sector
0682   EA9A 3A 05 FD    		ld	a,(unacnt)		;any unalloc remain?
0683   EA9D B7          		or	a	
0684   EA9E 28 36       		jr	z,alloc		;skip if not
0685   EAA0             ;
0686   EAA0             ;		more unallocated records remain
0687   EAA0 3D          		dec	a		;unacnt = unacnt-1
0688   EAA1 32 05 FD    		ld	(unacnt),a
0689   EAA4 3A F9 FC    		ld	a,(sekdsk)		;same disk?
0690   EAA7 21 06 FD    		ld	hl,unadsk
0691   EAAA BE          		cp	(hl)		;sekdsk = unadsk?
0692   EAAB C2 D6 EA    		jp	nz,alloc		;skip if not
0693   EAAE             ;
0694   EAAE             ;		disks are the same
0695   EAAE 21 07 FD    		ld	hl,unatrk
0696   EAB1 CD 75 EB    		call	sektrkcmp	;sektrk = unatrk?
0697   EAB4 C2 D6 EA    		jp	nz,alloc		;skip if not
0698   EAB7             ;
0699   EAB7             ;		tracks are the same
0700   EAB7 3A FC FC    		ld	a,(seksec)		;same sector?
0701   EABA 21 09 FD    		ld	hl,unasec
0702   EABD BE          		cp	(hl)		;seksec = unasec?
0703   EABE C2 D6 EA    		jp	nz,alloc		;skip if not
0704   EAC1             ;
0705   EAC1             ;		match, move to next sector for future ref
0706   EAC1 34          		inc	(hl)		;unasec = unasec+1
0707   EAC2 7E          		ld	a,(hl)		;end of track?
0708   EAC3 FE 80       		cp	cpmspt		;count CP/M sectors
0709   EAC5 38 09       		jr	c,noovf		;skip if no overflow
0710   EAC7             ;
0711   EAC7             ;		overflow to next track
0712   EAC7 36 00       		ld	(hl),0		;unasec = 0
0713   EAC9 2A 07 FD    		ld	hl,(unatrk)
0714   EACC 23          		inc	hl
0715   EACD 22 07 FD    		ld	(unatrk),hl		;unatrk = unatrk+1
0716   EAD0             ;
0717   EAD0             noovf:
0718   EAD0             		;match found, mark as unnecessary read
0719   EAD0 AF          		xor	a		;0 to accumulator
0720   EAD1 32 0B FD    		ld	(rsflag),a		;rsflag = 0
0721   EAD4 18 08       		jr	rwoper		;to perform the write
0722   EAD6             ;
0723   EAD6             alloc:
0724   EAD6             		;not an unallocated record, requires pre-read
0725   EAD6 AF          		xor	a		;0 to accum
0726   EAD7 32 05 FD    		ld	(unacnt),a		;unacnt = 0
0727   EADA 3C          		inc	a		;1 to accum
0728   EADB 32 0B FD    		ld	(rsflag),a		;rsflag = 1
0729   EADE             
0730   EADE             ;------------------------------------------------------------------------------------------------
0731   EADE             rwoper:
0732   EADE             		;enter here to perform the read/write
0733   EADE AF          		xor	a		;zero to accum
0734   EADF 32 0A FD    		ld	(erflag),a		;no errors (yet)
0735   EAE2 3A FC FC    		ld	a,(seksec)		;compute host sector
0736   EAE5 B7          		or	a		;carry = 0
0737   EAE6 1F          		rra			;shift right
0738   EAE7 B7          		or	a		;carry = 0
0739   EAE8 1F          		rra			;shift right
0740   EAE9 32 02 FD    		ld	(sekhst),a		;host sector to seek
0741   EAEC             ;
0742   EAEC             ;		active host sector?
0743   EAEC 21 03 FD    		ld	hl,hstact	;host active flag
0744   EAEF 7E          		ld	a,(hl)
0745   EAF0 36 01       		ld	(hl),1		;always becomes 1
0746   EAF2 B7          		or	a		;was it already?
0747   EAF3 28 21       		jr	z,filhst		;fill host if not
0748   EAF5             ;
0749   EAF5             ;		host buffer active, same as seek buffer?
0750   EAF5 3A F9 FC    		ld	a,(sekdsk)
0751   EAF8 21 FE FC    		ld	hl,hstdsk	;same disk?
0752   EAFB BE          		cp	(hl)		;sekdsk = hstdsk?
0753   EAFC 20 11       		jr	nz,nomatch
0754   EAFE             ;
0755   EAFE             ;		same disk, same track?
0756   EAFE 21 FF FC    		ld	hl,hsttrk
0757   EB01 CD 75 EB    		call	sektrkcmp	;sektrk = hsttrk?
0758   EB04 20 09       		jr	nz,nomatch
0759   EB06             ;
0760   EB06             ;		same disk, same track, same buffer?
0761   EB06 3A 02 FD    		ld	a,(sekhst)
0762   EB09 21 01 FD    		ld	hl,hstsec	;sekhst = hstsec?
0763   EB0C BE          		cp	(hl)
0764   EB0D 28 24       		jr	z,match		;skip if match
0765   EB0F             ;
0766   EB0F             nomatch:
0767   EB0F             		;proper disk, but not correct sector
0768   EB0F 3A 04 FD    		ld	a,(hstwrt)		;host written?
0769   EB12 B7          		or	a
0770   EB13 C4 1D EC    		call	nz,writehst	;clear host buff
0771   EB16             ;
0772   EB16             filhst:
0773   EB16             		;may have to fill the host buffer
0774   EB16 3A F9 FC    		ld	a,(sekdsk)
0775   EB19 32 FE FC    		ld	(hstdsk),a
0776   EB1C 2A FA FC    		ld	hl,(sektrk)
0777   EB1F 22 FF FC    		ld	(hsttrk),hl
0778   EB22 3A 02 FD    		ld	a,(sekhst)
0779   EB25 32 01 FD    		ld	(hstsec),a
0780   EB28 3A 0B FD    		ld	a,(rsflag)		;need to read?
0781   EB2B B7          		or	a
0782   EB2C C4 F4 EB    		call	nz,readhst		;yes, if 1
0783   EB2F AF          		xor	a		;0 to accum
0784   EB30 32 04 FD    		ld	(hstwrt),a		;no pending write
0785   EB33             ;
0786   EB33             match:
0787   EB33             		;copy data to or from buffer
0788   EB33 3A FC FC    		ld	a,(seksec)		;mask buffer number
0789   EB36 E6 03       		and	secmsk		;least signif bits
0790   EB38 6F          		ld	l,a		;ready to shift
0791   EB39 26 00       		ld	h,0		;double count
0792   EB3B 29          		add	hl,hl
0793   EB3C 29          		add	hl,hl
0794   EB3D 29          		add	hl,hl
0795   EB3E 29          		add	hl,hl
0796   EB3F 29          		add	hl,hl
0797   EB40 29          		add	hl,hl
0798   EB41 29          		add	hl,hl
0799   EB42             ;		hl has relative host buffer address
0800   EB42 11 10 FD    		ld	de,hstbuf
0801   EB45 19          		add	hl,de		;hl = host address
0802   EB46 EB          		ex	de,hl			;now in DE
0803   EB47 2A 0E FD    		ld	hl,(dmaAddr)		;get/put CP/M data
0804   EB4A 0E 80       		ld	c,128		;length of move
0805   EB4C 3A 0C FD    		ld	a,(readop)		;which way?
0806   EB4F B7          		or	a
0807   EB50 20 06       		jr	nz,rwmove		;skip if read
0808   EB52             ;
0809   EB52             ;	write operation, mark and switch direction
0810   EB52 3E 01       		ld	a,1
0811   EB54 32 04 FD    		ld	(hstwrt),a		;hstwrt = 1
0812   EB57 EB          		ex	de,hl			;source/dest swap
0813   EB58             ;
0814   EB58             rwmove:
0815   EB58             		;C initially 128, DE is source, HL is dest
0816   EB58 1A          		ld	a,(de)		;source character
0817   EB59 13          		inc	de
0818   EB5A 77          		ld	(hl),a		;to dest
0819   EB5B 23          		inc	hl
0820   EB5C 0D          		dec	c		;loop 128 times
0821   EB5D 20 F9       		jr	nz,rwmove
0822   EB5F             ;
0823   EB5F             ;		data has been moved to/from host buffer
0824   EB5F 3A 0D FD    		ld	a,(wrtype)		;write type
0825   EB62 FE 01       		cp	wrdir		;to directory?
0826   EB64 3A 0A FD    		ld	a,(erflag)		;in case of errors
0827   EB67 C0          		ret	nz			;no further processing
0828   EB68             ;
0829   EB68             ;		clear host buffer for directory write
0830   EB68 B7          		or	a		;errors?
0831   EB69 C0          		ret	nz			;skip if so
0832   EB6A AF          		xor	a		;0 to accum
0833   EB6B 32 04 FD    		ld	(hstwrt),a		;buffer written
0834   EB6E CD 1D EC    		call	writehst
0835   EB71 3A 0A FD    		ld	a,(erflag)
0836   EB74 C9          		ret
0837   EB75             
0838   EB75             ;------------------------------------------------------------------------------------------------
0839   EB75             ;Utility subroutine for 16-bit compare
0840   EB75             sektrkcmp:
0841   EB75             		;HL = .unatrk or .hsttrk, compare with sektrk
0842   EB75 EB          		ex	de,hl
0843   EB76 21 FA FC    		ld	hl,sektrk
0844   EB79 1A          		ld	a,(de)		;low byte compare
0845   EB7A BE          		cp	(HL)		;same?
0846   EB7B C0          		ret	nz			;return if not
0847   EB7C             ;		low bytes equal, test high 1s
0848   EB7C 13          		inc	de
0849   EB7D 23          		inc	hl
0850   EB7E 1A          		ld	a,(de)
0851   EB7F BE          		cp	(hl)	;sets flags
0852   EB80 C9          		ret
0853   EB81             
0854   EB81             ;================================================================================================
0855   EB81             ; Convert track/head/sector into LBA for physical access to the disk
0856   EB81             ;================================================================================================
0857   EB81             setLBAaddr:	
0858   EB81 2A FF FC    		LD	HL,(hsttrk)
0859   EB84 CB 05       		RLC	L
0860   EB86 CB 05       		RLC	L
0861   EB88 CB 05       		RLC	L
0862   EB8A CB 05       		RLC	L
0863   EB8C CB 05       		RLC	L
0864   EB8E 7D          		LD	A,L
0865   EB8F E6 E0       		AND	0E0H
0866   EB91 6F          		LD	L,A
0867   EB92 3A 01 FD    		LD	A,(hstsec)
0868   EB95 85          		ADD	A,L
0869   EB96 32 F5 FC    		LD	(lba0),A
0870   EB99             
0871   EB99 2A FF FC    		LD	HL,(hsttrk)
0872   EB9C CB 0D       		RRC	L
0873   EB9E CB 0D       		RRC	L
0874   EBA0 CB 0D       		RRC	L
0875   EBA2 7D          		LD	A,L
0876   EBA3 E6 1F       		AND	01FH
0877   EBA5 6F          		LD	L,A
0878   EBA6 CB 04       		RLC	H
0879   EBA8 CB 04       		RLC	H
0880   EBAA CB 04       		RLC	H
0881   EBAC CB 04       		RLC	H
0882   EBAE CB 04       		RLC	H
0883   EBB0 7C          		LD	A,H
0884   EBB1 E6 20       		AND	020H
0885   EBB3 67          		LD	H,A
0886   EBB4 3A FE FC    		LD	A,(hstdsk)
0887   EBB7 CB 07       		RLC	a
0888   EBB9 CB 07       		RLC	a
0889   EBBB CB 07       		RLC	a
0890   EBBD CB 07       		RLC	a
0891   EBBF CB 07       		RLC	a
0892   EBC1 CB 07       		RLC	a
0893   EBC3 E6 C0       		AND	0C0H
0894   EBC5 84          		ADD	A,H
0895   EBC6 85          		ADD	A,L
0896   EBC7 32 F6 FC    		LD	(lba1),A
0897   EBCA             		
0898   EBCA             
0899   EBCA 3A FE FC    		LD	A,(hstdsk)
0900   EBCD CB 0F       		RRC	A
0901   EBCF CB 0F       		RRC	A
0902   EBD1 E6 03       		AND	03H
0903   EBD3 32 F7 FC    		LD	(lba2),A
0904   EBD6             
0905   EBD6             ; LBA Mode using drive 0 = E0
0906   EBD6 3E E0       		LD	a,0E0H
0907   EBD8 32 F8 FC    		LD	(lba3),A
0908   EBDB             
0909   EBDB             
0910   EBDB 3A F5 FC    		LD	A,(lba0)
0911   EBDE D3 B3       		OUT 	(CF_LBA0),A
0912   EBE0             
0913   EBE0 3A F6 FC    		LD	A,(lba1)
0914   EBE3 D3 B4       		OUT 	(CF_LBA1),A
0915   EBE5             
0916   EBE5 3A F7 FC    		LD	A,(lba2)
0917   EBE8 D3 B5       		OUT 	(CF_LBA2),A
0918   EBEA             
0919   EBEA 3A F8 FC    		LD	A,(lba3)
0920   EBED D3 B6       		OUT 	(CF_LBA3),A
0921   EBEF             
0922   EBEF 3E 01       		LD 	A,1
0923   EBF1 D3 B2       		OUT 	(CF_SECCOUNT),A
0924   EBF3             
0925   EBF3 C9          		RET				
0926   EBF4             
0927   EBF4             ;================================================================================================
0928   EBF4             ; Read physical sector from host
0929   EBF4             ;================================================================================================
0930   EBF4             readhst:
0931   EBF4 F5          		PUSH 	AF
0932   EBF5 C5          		PUSH 	BC
0933   EBF6 E5          		PUSH 	HL
0934   EBF7             
0935   EBF7 CD 46 EC    		CALL 	cfWait
0936   EBFA             
0937   EBFA CD 81 EB    		CALL 	setLBAaddr
0938   EBFD             
0939   EBFD 3E 20       		LD 	A,CF_READ_SEC
0940   EBFF D3 B7       		OUT 	(CF_COMMAND),A
0941   EC01             
0942   EC01 CD 46 EC    		CALL 	cfWait
0943   EC04             
0944   EC04 0E 04       		LD 	c,4
0945   EC06 21 10 FD    		LD 	HL,hstbuf
0946   EC09             rd4secs:
0947   EC09 06 80       		LD 	b,128
0948   EC0B             rdByte:
0949   EC0B DB B0       		in 	A,(CF_DATA)
0950   EC0D 77          		LD 	(HL),A
0951   EC0E 23          		iNC 	HL
0952   EC0F 05          		dec 	b
0953   EC10 20 F9       		JR 	NZ, rdByte
0954   EC12 0D          		dec 	c
0955   EC13 20 F4       		JR 	NZ,rd4secs
0956   EC15             
0957   EC15 E1          		POP 	HL
0958   EC16 C1          		POP 	BC
0959   EC17 F1          		POP 	AF
0960   EC18             
0961   EC18 AF          		XOR 	a
0962   EC19 32 0A FD    		ld	(erflag),a
0963   EC1C C9          		RET
0964   EC1D             
0965   EC1D             ;================================================================================================
0966   EC1D             ; Write physical sector to host
0967   EC1D             ;================================================================================================
0968   EC1D             writehst:
0969   EC1D F5          		PUSH 	AF
0970   EC1E C5          		PUSH 	BC
0971   EC1F E5          		PUSH 	HL
0972   EC20             
0973   EC20 CD 46 EC    		CALL 	cfWait
0974   EC23             
0975   EC23 CD 81 EB    		CALL 	setLBAaddr
0976   EC26             
0977   EC26 3E 30       		LD 	A,CF_WRITE_SEC
0978   EC28 D3 B7       		OUT 	(CF_COMMAND),A
0979   EC2A             
0980   EC2A CD 46 EC    		CALL 	cfWait
0981   EC2D             
0982   EC2D 0E 04       		LD 	c,4
0983   EC2F 21 10 FD    		LD 	HL,hstbuf
0984   EC32             wr4secs:
0985   EC32 06 80       		LD 	b,128
0986   EC34 7E          wrByte:		LD 	A,(HL)
0987   EC35 D3 B0       		OUT 	(CF_DATA),A
0988   EC37 23          		iNC 	HL
0989   EC38 05          		dec 	b
0990   EC39 20 F9       		JR 	NZ, wrByte
0991   EC3B             
0992   EC3B 0D          		dec 	c
0993   EC3C 20 F4       		JR 	NZ,wr4secs
0994   EC3E             
0995   EC3E E1          		POP 	HL
0996   EC3F C1          		POP 	BC
0997   EC40 F1          		POP 	AF
0998   EC41             
0999   EC41 AF          		XOR 	a
1000   EC42 32 0A FD    		ld	(erflag),a
1001   EC45 C9          		RET
1002   EC46             
1003   EC46             ;================================================================================================
1004   EC46             ; Wait for disk to be ready (busy=0,ready=1)
1005   EC46             ;================================================================================================
1006   EC46             cfWait:
1007   EC46 F5          		PUSH 	AF
1008   EC47             cfWait1:
1009   EC47 DB B7       		in 	A,(CF_STATUS)
1010   EC49 E6 80       		AND 	080H
1011   EC4B FE 80       		cp 	080H
1012   EC4D 28 F8       		JR	Z,cfWait1
1013   EC4F F1          		POP 	AF
1014   EC50 C9          		RET
1015   EC51             
1016   EC51             ;================================================================================================
1017   EC51             ; Print (on console) a sequence of characters ending with zero
1018   EC51             ;================================================================================================
1019   EC51             PRINTSEQ:
1020   EC51 E3          		EX 	(SP),HL 		; Push HL and put RET address into HL
1021   EC52 F5          		PUSH 	AF
1022   EC53 C5          		PUSH 	BC
1023   EC54             NEXTCHAR:
1024   EC54 7E          		LD 	A,(HL)
1025   EC55 FE 00       		CP	0
1026   EC57 28 07       		JR	Z,ENDOFPRINT
1027   EC59 4F          		LD  	C,A
1028   EC5A CD D9 E8    		CALL 	CONOUT		; Print to console
1029   EC5D 23          		INC 	HL
1030   EC5E 18 F4       		JR	NEXTCHAR
1031   EC60             ENDOFPRINT:
1032   EC60 23          		INC 	HL 			; Get past "null" terminator
1033   EC61 C1          		POP 	BC
1034   EC62 F1          		POP 	AF
1035   EC63 E3          		EX 	(SP),HL 		; Push new RET address on stack and restore HL
1036   EC64 C9          		RET
1037   EC65             
1038   EC65             ;================================================================================================
1039   EC65             ; Data storage
1040   EC65             ;================================================================================================
1041   EC65             dirbuf: 	.ds 128 		;scratch directory area
1042   ECE5             alv00: 		.ds 257			;allocation vector 0
1043   EDE6             alv01: 		.ds 257			;allocation vector 1
1044   EEE7             alv02: 		.ds 257			;allocation vector 2
1045   EFE8             alv03: 		.ds 257			;allocation vector 3
1046   F0E9             alv04: 		.ds 257			;allocation vector 4
1047   F1EA             alv05: 		.ds 257			;allocation vector 5
1048   F2EB             alv06: 		.ds 257			;allocation vector 6
1049   F3EC             alv07: 		.ds 257			;allocation vector 7
1050   F4ED             alv08: 		.ds 257			;allocation vector 8
1051   F5EE             alv09: 		.ds 257			;allocation vector 9
1052   F6EF             alv10: 		.ds 257			;allocation vector 10
1053   F7F0             alv11: 		.ds 257			;allocation vector 11
1054   F8F1             alv12: 		.ds 257			;allocation vector 12
1055   F9F2             alv13: 		.ds 257			;allocation vector 13
1056   FAF3             alv14: 		.ds 257			;allocation vector 14
1057   FBF4             alv15: 		.ds 257			;allocation vector 15
1058   FCF5             
1059   FCF5 00          lba0		.DB	00h
1060   FCF6 00          lba1		.DB	00h
1061   FCF7 00          lba2		.DB	00h
1062   FCF8 00          lba3		.DB	00h
1063   FCF9             
1064   FCF9             sekdsk:		.ds	1		;seek disk number
1065   FCFA             sektrk:		.ds	2		;seek track number
1066   FCFC             seksec:		.ds	2		;seek sector number
1067   FCFE             ;
1068   FCFE             hstdsk:		.ds	1		;host disk number
1069   FCFF             hsttrk:		.ds	2		;host track number
1070   FD01             hstsec:		.ds	1		;host sector number
1071   FD02             ;
1072   FD02             sekhst:		.ds	1		;seek shr secshf
1073   FD03             hstact:		.ds	1		;host active flag
1074   FD04             hstwrt:		.ds	1		;host written flag
1075   FD05             ;
1076   FD05             unacnt:		.ds	1		;unalloc rec cnt
1077   FD06             unadsk:		.ds	1		;last unalloc disk
1078   FD07             unatrk:		.ds	2		;last unalloc track
1079   FD09             unasec:		.ds	1		;last unalloc sector
1080   FD0A             ;
1081   FD0A             erflag:		.ds	1		;error reporting
1082   FD0B             rsflag:		.ds	1		;read sector flag
1083   FD0C             readop:		.ds	1		;1 if read operation
1084   FD0D             wrtype:		.ds	1		;write operation type
1085   FD0E             dmaAddr:	.ds	2		;last dma address
1086   FD10             hstbuf:		.ds	512		;host buffer
1087   FF10             hstBufEnd:	.EQU	$
1088   FF10             
1089   FF10             BUFINI		.EQU	$
1090   FF10             			.DS	050H
1091   FF60             BUFEND		.EQU	$
1092   FF60             WRPTR:		.DS	2			; write pointer
1093   FF62             RDPTR:		.DS	2			; read pointer
1094   FF64             
1095   FF64             			.DS	020h			; Start of BIOS stack area.
1096   FF84             BIOSSTACK:	.EQU	$
1097   FF84             
1098   FF84             biosEnd:	.EQU	$
1099   FF84             
1100   FF84             		.END
tasm: Number of errors = 0
