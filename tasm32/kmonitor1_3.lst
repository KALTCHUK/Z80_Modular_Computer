0001   0000             ;Monitor 1.0: Commands available: Read memory, Write to memory, Jump to address.
0002   0000             ;Monitor 1.1: Commands added: write Hex to memory, Test memory range.
0003   0000             ;Monitor 1.2: Commands modified: Read memory accepts multiple scrolls.
0004   0000             ;Monitor 1.3: Improved version of H command.
0005   0000             ;
0006   0000             ;==================================================================================
0007   0000             ; Monitor for Z80 Modular Computer by P.R.Kaltchuk 2020
0008   0000             ;==================================================================================
0009   0000             BIOS			.EQU	0E600H		; BIOS entry point
0010   0000             LF			.EQU	0AH			; line feed
0011   0000             FF			.EQU	0CH			; form feed
0012   0000             CR			.EQU	0DH			; carriage return
0013   0000             SPACE			.EQU	020H			; space
0014   0000             COLON			.EQU	03AH			; colon
0015   0000             
0016   0000             READCOLS		.EQU	010H			; parameters used for read memory command (READCMD)
0017   0000             READLINES		.EQU	010H
0018   0000             
0019   0000             DRAFT			.EQU	0C000H		; draft area to write incoming HEX-format data
0020   0000             
0021   0000             ;================================================================================================
0022   D000             			.ORG 0D000H
0023   D000             
0024   D000             MONITOR:
0025   D000 CD 33 E6    		CALL	PRINTSEQ
0026   D003 5A 38 30 20 		.TEXT	"Z80 Modular Computer Monitor V1.2 by Kaltchuk, Sep/2020"
0026   D007 4D 6F 64 75 
0026   D00B 6C 61 72 20 
0026   D00F 43 6F 6D 70 
0026   D013 75 74 65 72 
0026   D017 20 4D 6F 6E 
0026   D01B 69 74 6F 72 
0026   D01F 20 56 31 2E 
0026   D023 32 20 62 79 
0026   D027 20 4B 61 6C 
0026   D02B 74 63 68 75 
0026   D02F 6B 2C 20 53 
0026   D033 65 70 2F 32 
0026   D037 30 32 30 
0027   D03A 0D 0A 0D 0A 		.DB	CR,LF,CR,LF,0
0027   D03E 00 
0028   D03F             CMDLIST:
0029   D03F CD 33 E6    		CALL	PRINTSEQ
0030   D042 56 61 6C 69 		.TEXT	"Valid commands:"
0030   D046 64 20 63 6F 
0030   D04A 6D 6D 61 6E 
0030   D04E 64 73 3A 
0031   D051 0D 0A       		.DB	CR,LF
0032   D053 20 20 20 52 		.TEXT	"   Raaaa   read memory starting at aaaa"
0032   D057 61 61 61 61 
0032   D05B 20 20 20 72 
0032   D05F 65 61 64 20 
0032   D063 6D 65 6D 6F 
0032   D067 72 79 20 73 
0032   D06B 74 61 72 74 
0032   D06F 69 6E 67 20 
0032   D073 61 74 20 61 
0032   D077 61 61 61 
0033   D07A 0D 0A       		.DB	CR,LF
0034   D07C 20 20 20 57 		.TEXT	"   Waaaa   write to memory starting at aaaa"
0034   D080 61 61 61 61 
0034   D084 20 20 20 77 
0034   D088 72 69 74 65 
0034   D08C 20 74 6F 20 
0034   D090 6D 65 6D 6F 
0034   D094 72 79 20 73 
0034   D098 74 61 72 74 
0034   D09C 69 6E 67 20 
0034   D0A0 61 74 20 61 
0034   D0A4 61 61 61 
0035   D0A7 0D 0A       		.DB	CR,LF
0036   D0A9 20 20 20 48 		.TEXT	"   H       write intel hex format to memory"
0036   D0AD 20 20 20 20 
0036   D0B1 20 20 20 77 
0036   D0B5 72 69 74 65 
0036   D0B9 20 69 6E 74 
0036   D0BD 65 6C 20 68 
0036   D0C1 65 78 20 66 
0036   D0C5 6F 72 6D 61 
0036   D0C9 74 20 74 6F 
0036   D0CD 20 6D 65 6D 
0036   D0D1 6F 72 79 
0037   D0D4 0D 0A       		.DB	CR,LF
0038   D0D6 20 20 20 4A 		.TEXT	"   Jaaaa   jump to address aaaa"
0038   D0DA 61 61 61 61 
0038   D0DE 20 20 20 6A 
0038   D0E2 75 6D 70 20 
0038   D0E6 74 6F 20 61 
0038   D0EA 64 64 72 65 
0038   D0EE 73 73 20 61 
0038   D0F2 61 61 61 
0039   D0F5 0D 0A 0D 0A 		.DB	CR,LF,CR,LF
0040   D0F9 20 20 20 2A 		.TEXT	"   * Where aaaa is always a 4-character hex value."
0040   D0FD 20 57 68 65 
0040   D101 72 65 20 61 
0040   D105 61 61 61 20 
0040   D109 69 73 20 61 
0040   D10D 6C 77 61 79 
0040   D111 73 20 61 20 
0040   D115 34 2D 63 68 
0040   D119 61 72 61 63 
0040   D11D 74 65 72 20 
0040   D121 68 65 78 20 
0040   D125 76 61 6C 75 
0040   D129 65 2E 
0041   D12B 0D 0A 00    		.DB	CR,LF,0
0042   D12E             
0043   D12E ED 56       		IM	1
0044   D130 FB          		EI
0045   D131             
0046   D131             ;================================================================================================
0047   D131             ; Wait for command
0048   D131             ;================================================================================================
0049   D131 CD 33 E6    WAITCMD:	CALL	PRINTSEQ
0050   D134 0D 0A 3E 00 		.DB	CR,LF,'>',0
0051   D138             
0052   D138 CD 09 E6    		CALL CONIN
0053   D13B             
0054   D13B FE 52       		CP	'R'
0055   D13D CA 8C D1    		JP	Z,READCMD
0056   D140 FE 72       		CP	'r'
0057   D142 CA 8C D1    		JP	Z,READCMD
0058   D145             
0059   D145 FE 57       		CP	'W'
0060   D147 CA F0 D2    		JP	Z,WRITECMD
0061   D14A FE 77       		CP	'w'
0062   D14C CA F0 D2    		JP	Z,WRITECMD
0063   D14F             
0064   D14F FE 48       		CP	'H'
0065   D151 CA 89 D3    		JP	Z,HEXCMD
0066   D154 FE 68       		CP	'h'
0067   D156 CA 89 D3    		JP	Z,HEXCMD
0068   D159             
0069   D159 FE 4A       		CP	'J'
0070   D15B CA 39 D4    		JP	Z,JUMPCMD
0071   D15E FE 6A       		CP	'j'
0072   D160 CA 39 D4    		JP	Z,JUMPCMD
0073   D163             
0074   D163 FE 54       		CP	'T'
0075   D165 CA 44 D4    		JP	Z,TESTCMD
0076   D168 FE 74       		CP	't'
0077   D16A CA 44 D4    		JP	Z,TESTCMD
0078   D16D             
0079   D16D             UNKNOWNCMD:
0080   D16D CD F5 D4    		CALL FLUSHBUF
0081   D170 CD 33 E6    		CALL	PRINTSEQ
0082   D173 0D 0A       		.DB	CR,LF
0083   D175 3E 55 6E 6B 		.TEXT ">Unknown command."
0083   D179 6E 6F 77 6E 
0083   D17D 20 63 6F 6D 
0083   D181 6D 61 6E 64 
0083   D185 2E 
0084   D186 0D 0A 00    		.DB	CR,LF,0
0085   D189 C3 3F D0    		JP	CMDLIST
0086   D18C             
0087   D18C             ;================================================================================================
0088   D18C             ; Read memory, starting at address aaaa
0089   D18C             ;================================================================================================
0090   D18C             READCMD:
0091   D18C CD 83 D4    		CALL	GETADDR			; DE holds the address to start reading
0092   D18F FE 00       		CP	0
0093   D191 CA 3F D0    		JP	Z,CMDLIST
0094   D194 3E F0       PGDN:		LD	A,0F0H
0095   D196 A3          		AND	E
0096   D197 5F          		LD	E,A				; DE converted from AAAA to AAA0
0097   D198 D5          		PUSH	DE
0098   D199 DD E1       		POP	IX				; from now on, IX will hold the address
0099   D19B CD 33 E6    		CALL	PRINTSEQ			; print header
0100   D19E 0D 0A       		.DB	CR,LF
0101   D1A0 41 44 44 52 		.TEXT "ADDR: 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F  0123456789ABCDEF"
0101   D1A4 3A 20 30 30 
0101   D1A8 20 30 31 20 
0101   D1AC 30 32 20 30 
0101   D1B0 33 20 30 34 
0101   D1B4 20 30 35 20 
0101   D1B8 30 36 20 30 
0101   D1BC 37 20 30 38 
0101   D1C0 20 30 39 20 
0101   D1C4 30 41 20 30 
0101   D1C8 42 20 30 43 
0101   D1CC 20 30 44 20 
0101   D1D0 30 45 20 30 
0101   D1D4 46 20 20 30 
0101   D1D8 31 32 33 34 
0101   D1DC 35 36 37 38 
0101   D1E0 39 41 42 43 
0101   D1E4 44 45 46 
0102   D1E7 0D 0A       		.DB	CR,LF
0103   D1E9 2D 2D 2D 2D 		.TEXT "----- -----------------------------------------------  ----------------"
0103   D1ED 2D 20 2D 2D 
0103   D1F1 2D 2D 2D 2D 
0103   D1F5 2D 2D 2D 2D 
0103   D1F9 2D 2D 2D 2D 
0103   D1FD 2D 2D 2D 2D 
0103   D201 2D 2D 2D 2D 
0103   D205 2D 2D 2D 2D 
0103   D209 2D 2D 2D 2D 
0103   D20D 2D 2D 2D 2D 
0103   D211 2D 2D 2D 2D 
0103   D215 2D 2D 2D 2D 
0103   D219 2D 2D 2D 2D 
0103   D21D 2D 20 20 2D 
0103   D221 2D 2D 2D 2D 
0103   D225 2D 2D 2D 2D 
0103   D229 2D 2D 2D 2D 
0103   D22D 2D 2D 2D 
0104   D230 0D 0A 00    		.DB	CR,LF,0
0105   D233 16 10       		LD	D,READLINES		; lines
0106   D235 1E 10       NEWL:		LD	E,READCOLS			; columns
0107   D237 DD E5       		PUSH	IX				; prepare to print address
0108   D239 E1          		POP	HL
0109   D23A 44          		LD	B,H
0110   D23B CD 36 D5    		CALL	HEX2ASCII
0111   D23E 4C          		LD	C,H
0112   D23F CD 0C E6    		CALL	CONOUT
0113   D242 4D          		LD	C,L
0114   D243 CD 0C E6    		CALL	CONOUT
0115   D246 DD E5       		PUSH	IX
0116   D248 E1          		POP	HL
0117   D249 45          		LD	B,L
0118   D24A CD 36 D5    		CALL	HEX2ASCII
0119   D24D 4C          		LD	C,H
0120   D24E CD 0C E6    		CALL	CONOUT
0121   D251 4D          		LD	C,L
0122   D252 CD 0C E6    		CALL	CONOUT
0123   D255 0E 3A       		LD	C,COLON
0124   D257 CD 0C E6    		CALL	CONOUT
0125   D25A 0E 20       		LD	C,SPACE
0126   D25C CD 0C E6    		CALL	CONOUT
0127   D25F DD E5       		PUSH	IX
0128   D261 FD E1       		POP	IY				; IY holds a copy of the 1st memory address from current line
0129   D263 DD 7E 00    NEWC:		LD	A,(IX)			; prepare to print memory contents
0130   D266 47          		LD	B,A
0131   D267 CD 36 D5    		CALL	HEX2ASCII			; now HL contains the ASCII exivalent of memory content
0132   D26A 4C          		LD	C,H
0133   D26B CD 0C E6    		CALL	CONOUT
0134   D26E 4D          		LD	C,L
0135   D26F CD 0C E6    		CALL	CONOUT
0136   D272 0E 20       		LD	C,SPACE
0137   D274 CD 0C E6    		CALL	CONOUT
0138   D277 DD 23       		INC	IX
0139   D279 1D          		DEC	E
0140   D27A 20 E7       		JR	NZ,NEWC
0141   D27C 0E 20       		LD	C,SPACE
0142   D27E CD 0C E6    		CALL CONOUT
0143   D281 1E 10       		LD	E,READCOLS			; now start doing the printables' area
0144   D283 FD 7E 00    NEWCP:	LD	A,(IY)
0145   D286 FE 20       		CP	020H
0146   D288 FA 8F D2    		JP	M,NOTPTBL
0147   D28B 4F          		LD	C,A
0148   D28C C3 91 D2    		JP 	CONTCP
0149   D28F 0E 2E       NOTPTBL:	LD	C,'.'
0150   D291 CD 0C E6    CONTCP:	CALL	CONOUT
0151   D294 FD 23       		INC	IY
0152   D296 1D          		DEC	E
0153   D297 20 EA       		JR	NZ,NEWCP
0154   D299 0E 0D       		LD	C,CR
0155   D29B CD 0C E6    		CALL	CONOUT
0156   D29E 0E 0A       		LD	C,LF
0157   D2A0 CD 0C E6    		CALL	CONOUT
0158   D2A3 15          		DEC	D
0159   D2A4 20 8F       		JR	NZ,NEWL
0160   D2A6 0E 0D       		LD	C,CR
0161   D2A8 CD 0C E6    		CALL	CONOUT
0162   D2AB 0E 0A       		LD	C,LF
0163   D2AD CD 0C E6    		CALL	CONOUT
0164   D2B0 CD 33 E6    		CALL	PRINTSEQ			; print question
0165   D2B3 3E 5B 53 50 		.TEXT ">[SPACE][ENTER] = Read next page."
0165   D2B7 41 43 45 5D 
0165   D2BB 5B 45 4E 54 
0165   D2BF 45 52 5D 20 
0165   D2C3 3D 20 52 65 
0165   D2C7 61 64 20 6E 
0165   D2CB 65 78 74 20 
0165   D2CF 70 61 67 65 
0165   D2D3 2E 
0166   D2D4 0D 0A 3E 00 		.DB	CR,LF,'>',0
0167   D2D8 CD 09 E6    		CALL	CONIN				; What's your answer?
0168   D2DB FE 20       		CP	' '
0169   D2DD CA E6 D2    		JP	Z,SCROLL
0170   D2E0 CD 74 D4    		CALL	GETCRLF
0171   D2E3 C3 31 D1    		JP	WAITCMD
0172   D2E6 FD E5       SCROLL:	PUSH	IY
0173   D2E8 D1          		POP	DE
0174   D2E9 13          		INC	DE
0175   D2EA CD 74 D4    		CALL	GETCRLF
0176   D2ED C3 94 D1    		JP	PGDN
0177   D2F0             
0178   D2F0             ;================================================================================================
0179   D2F0             ; Write to memory, starting at address aaaa
0180   D2F0             ;================================================================================================
0181   D2F0             WRITECMD:
0182   D2F0 CD 83 D4    		CALL	GETADDR			; DE holds the address to start writing
0183   D2F3 FE 00       		CP	0
0184   D2F5 CA 3F D0    		JP	Z,CMDLIST
0185   D2F8 CD 33 E6    		CALL	PRINTSEQ
0186   D2FB 3E 53 65 6E 		.TEXT ">Send data to be written."
0186   D2FF 64 20 64 61 
0186   D303 74 61 20 74 
0186   D307 6F 20 62 65 
0186   D30B 20 77 72 69 
0186   D30F 74 74 65 6E 
0186   D313 2E 
0187   D314 0D 0A 3E 00 		.DB	CR,LF,'>',0
0188   D318             
0189   D318 CD 3D D3    		CALL	SBRWR				; call the subroutine that does the dirty job
0190   D31B             
0191   D31B CD 33 E6    		CALL	PRINTSEQ
0192   D31E 3E 57 72 69 		.TEXT ">Write command completed."
0192   D322 74 65 20 63 
0192   D326 6F 6D 6D 61 
0192   D32A 6E 64 20 63 
0192   D32E 6F 6D 70 6C 
0192   D332 65 74 65 64 
0192   D336 2E 
0193   D337 0D 0A 00    		.DB	CR,LF,0
0194   D33A C3 31 D1    		JP	WAITCMD
0195   D33D             
0196   D33D             ;================================================================================================
0197   D33D             ; Subroutine that writes to memory. Used by WRITECMD and HEXCMD.
0198   D33D             ;================================================================================================
0199   D33D             SBRWR:
0200   D33D CD 09 E6    NEXTWR:	CALL	CONIN
0201   D340 67          		LD	H,A
0202   D341 FE 0D       		CP	CR
0203   D343 28 10       		JR	Z,EOW
0204   D345 CD 09 E6    		CALL	CONIN
0205   D348 6F          		LD	L,A				; at this point HL holds the value to be written (ASCII)
0206   D349 FE 0D       		CP	CR
0207   D34B 28 08       		JR	Z,EOW
0208   D34D CD 00 D5    		CALL	ASCII2HEX			; B holds the hex value
0209   D350 78          		LD	A,B
0210   D351 12          		LD	(DE),A
0211   D352 13          		INC	DE
0212   D353 18 E8       		JR	NEXTWR
0213   D355 CD 09 E6    EOW:		CALL	CONIN
0214   D358 FE 0A       		CP	LF
0215   D35A C8          		RET	Z
0216   D35B CD 33 E6    		CALL	PRINTSEQ
0217   D35E 0D 0A       		.DB	CR,LF
0218   D360 3E 53 79 6E 		.TEXT ">Syntax error. Incomplete ASCII pair."
0218   D364 74 61 78 20 
0218   D368 65 72 72 6F 
0218   D36C 72 2E 20 49 
0218   D370 6E 63 6F 6D 
0218   D374 70 6C 65 74 
0218   D378 65 20 41 53 
0218   D37C 43 49 49 20 
0218   D380 70 61 69 72 
0218   D384 2E 
0219   D385 0D 0A 00    		.DB	CR,LF,0
0220   D388 C9          		RET
0221   D389             
0222   D389             ;================================================================================================
0223   D389             ; Write to memory using Intel hex file format input.
0224   D389             ;	1)read all HEX-format data and write it to draft area (DRAFT).
0225   D389             ;	2)read each line from draft area, calculate checksum and write bytes
0226   D389             ;	  to the designated area.
0227   D389             ;	3)for each line, report if checksum is OK or ERROR
0228   D389             ;
0229   D389             ; Record structure:
0230   D389             ;	<start_code> <byte_count> <address> <record_type> <data>...<data> <checksum>
0231   D389             ;		':'		1 byte	2 bytes	00h or 01h		n bytes	    1 byte
0232   D389             ;
0233   D389             ; Register usage:
0234   D389             ;	IX = source address (somewhere in draft area)
0235   D389             ;	IY = target address
0236   D389             ;	B  = byte count
0237   D389             ;	C  = checksum accumulator
0238   D389             ;================================================================================================
0239   D389             HEXCMD:
0240   D389 CD 33 E6    		CALL	PRINTSEQ
0241   D38C 3E 53 65 6E 		.TEXT ">Send HEX-format data to be written."
0241   D390 64 20 48 45 
0241   D394 58 2D 66 6F 
0241   D398 72 6D 61 74 
0241   D39C 20 64 61 74 
0241   D3A0 61 20 74 6F 
0241   D3A4 20 62 65 20 
0241   D3A8 77 72 69 74 
0241   D3AC 74 65 6E 2E 
0242   D3B0 0D 0A 3E 00 		.DB CR,LF,'>',0
0243   D3B4 11 00 C0    		LD	DE,DRAFT			; set the address of the draft area
0244   D3B7 CD 3D D3    		CALL	SBRWR	
0245   D3BA             
0246   D3BA DD 21 00 C0 		LD	IX,DRAFT
0247   D3BE DD 7E 00    NOTSC:	LD	A,(IX+0)			; search for start code ':'
0248   D3C1 DD 23       		INC	IX
0249   D3C3 FE 3A       		CP	':'
0250   D3C5 20 F7       		JR	NZ,NOTSC
0251   D3C7 DD 7E 00    		LD	A,(IX+0)			; read byte count
0252   D3CA DD 23       		INC	IX
0253   D3CC FE 00       		CP	0
0254   D3CE CA 17 D4    		JP	Z,EOHF			; if byte count is zero, we've reached EOF
0255   D3D1 47          		LD	B,A				; now reg B holds byte count
0256   D3D2 DD 56 00    		LD	D,(IX+0)			; read address
0257   D3D5 DD 23       		INC	IX
0258   D3D7 DD 5E 00    		LD	E,(IX+0)
0259   D3DA DD 23       		INC	IX
0260   D3DC D5          		PUSH	DE
0261   D3DD FD E1       		POP	IY				; now IY contains target address
0262   D3DF 82          		ADD	A,D
0263   D3E0 83          		ADD	A,E
0264   D3E1 4F          		LD	C,A				; update checksum acc
0265   D3E2 DD 23       		INC	IX				; skip record type
0266   D3E4 DD 7E 00    NEXTD:	LD	A,(IX+0)			; read data
0267   D3E7 FD 77 00    		LD	(IY+0),A			; write data
0268   D3EA DD 23       		INC	IX
0269   D3EC FD 23       		INC	IY 
0270   D3EE 81          		ADD	A,C
0271   D3EF 4F          		LD	C,A				; update checksum acc
0272   D3F0 10 F2       		DJNZ	NEXTD
0273   D3F2 DD 7E 00    		LD	A,(IX+0)			; read checksum byte
0274   D3F5 DD 23       		INC	IX
0275   D3F7 ED 44       		NEG
0276   D3F9 B9          		CP	C				; compare with checksum acc
0277   D3FA 20 0C       		JR	NZ,CSERR
0278   D3FC CD 33 E6    		CALL PRINTSEQ
0279   D3FF 3E 4F 4B    		.TEXT	">OK"
0280   D402 0D 0A 00    		.DB	CR,LF,0
0281   D405 C3 BE D3    		JP	NOTSC
0282   D408 CD 33 E6    CSERR:	CALL PRINTSEQ
0283   D40B 3E 45 52 52 		.TEXT	">ERROR"
0283   D40F 4F 52 
0284   D411 0D 0A 00    		.DB	CR,LF,0
0285   D414 C3 BE D3    		JP	NOTSC
0286   D417             
0287   D417 CD 33 E6    EOHF:		CALL	PRINTSEQ
0288   D41A 3E 57 72 69 		.TEXT ">Write command completed."
0288   D41E 74 65 20 63 
0288   D422 6F 6D 6D 61 
0288   D426 6E 64 20 63 
0288   D42A 6F 6D 70 6C 
0288   D42E 65 74 65 64 
0288   D432 2E 
0289   D433 0D 0A 00    		.DB	CR,LF,0
0290   D436 C3 31 D1    		JP	WAITCMD
0291   D439             
0292   D439             ;================================================================================================
0293   D439             ; Jump to address aaaa
0294   D439             ;================================================================================================
0295   D439             JUMPCMD:
0296   D439 CD 83 D4    		CALL	GETADDR
0297   D43C FE 00       		CP	0
0298   D43E CA 3F D0    		JP	Z,CMDLIST
0299   D441 D5          		PUSH	DE
0300   D442 E1          		POP	HL
0301   D443 E9          		JP	(HL)
0302   D444             
0303   D444             ;================================================================================================
0304   D444             ; Test quality of RX. Count how many bytes are not equal to CHAR in the page starting at ATARGET
0305   D444             ;================================================================================================
0306   D444             COUNTER	.EQU	05000H
0307   D444             CHAR		.EQU	05001H
0308   D444             ATARGET	.EQU	04000H
0309   D444             
0310   D444 CD 09 E6    TESTCMD:	CALL	CONIN				; get CR + LF
0311   D447 CD 09 E6    		CALL	CONIN
0312   D44A             
0313   D44A 3E 00       		LD	A,0
0314   D44C 47          		LD	B,A
0315   D44D 32 00 50    		LD	(COUNTER),A
0316   D450 3A 01 50    		LD	A,(CHAR)
0317   D453 4F          		LD	C,A
0318   D454 11 00 40    		LD	DE,ATARGET
0319   D457 21 00 50    		LD	HL,COUNTER
0320   D45A             
0321   D45A 1A          REPT:		LD	A,(DE)
0322   D45B B9          		CP	C
0323   D45C 28 01       		JR	Z,EQUAL
0324   D45E 34          		INC	(HL)
0325   D45F 13          EQUAL:	INC	DE
0326   D460 10 F8       		DJNZ	REPT
0327   D462 3A 00 50    		LD	A,(COUNTER)
0328   D465 47          		LD	B,A
0329   D466 CD 36 D5    		CALL	HEX2ASCII
0330   D469 4C          		LD	C,H
0331   D46A CD 0C E6    		CALL	CONOUT
0332   D46D 4D          		LD	C,L
0333   D46E CD 0C E6    		CALL	CONOUT
0334   D471 C3 31 D1    		JP	WAITCMD
0335   D474             
0336   D474             ;================================================================================================
0337   D474             ; Get CR + LF.
0338   D474             ;================================================================================================
0339   D474             GETCRLF:
0340   D474 CD 09 E6    ISITCR:	CALL	CONIN				; ok, so now we expect to find <CR><LF> in the buffer
0341   D477 FE 0D       		CP	CR
0342   D479 20 F9       		JR	NZ,ISITCR
0343   D47B CD 09 E6    ISITLF:	CALL	CONIN
0344   D47E FE 0A       		CP	LF
0345   D480 20 F9       		JR	NZ,ISITLF
0346   D482 C9          		RET
0347   D483             
0348   D483             ;================================================================================================
0349   D483             ; Get address parameter from command line and return it in DE. If error, A=0.
0350   D483             ;================================================================================================
0351   D483 C5          GETADDR:	PUSH	BC
0352   D484 E5          		PUSH	HL
0353   D485 CD 09 E6    		CALL	CONIN
0354   D488 67          		LD	H,A
0355   D489 CD 09 E6    		CALL	CONIN
0356   D48C 6F          		LD	L,A
0357   D48D CD 00 D5    		CALL	ASCII2HEX
0358   D490 50          		LD	D,B
0359   D491 CD 09 E6    		CALL	CONIN
0360   D494 67          		LD	H,A
0361   D495 CD 09 E6    		CALL	CONIN
0362   D498 6F          		LD	L,A
0363   D499 CD 00 D5    		CALL	ASCII2HEX
0364   D49C 58          		LD	E,B				; now DE contains the address
0365   D49D CD 09 E6    		CALL	CONIN				; ok, so now we expect to find <CR><LF> in the buffer
0366   D4A0 FE 0D       		CP	CR
0367   D4A2 20 0C       		JR	NZ,SYNERR
0368   D4A4 CD 09 E6    		CALL	CONIN
0369   D4A7 FE 0A       		CP	LF
0370   D4A9 20 05       		JR	NZ,SYNERR
0371   D4AB 3E FF       		LD	A,0FFH
0372   D4AD E1          		POP	HL
0373   D4AE C1          		POP	BC
0374   D4AF C9          		RET
0375   D4B0 CD F5 D4    SYNERR:	CALL	FLUSHBUF
0376   D4B3 CD 33 E6    		CALL	PRINTSEQ
0377   D4B6 0D 0A       		.DB CR,LF
0378   D4B8 53 79 6E 74 		.TEXT "Syntax error. aaaa must be a 4-character hex number."
0378   D4BC 61 78 20 65 
0378   D4C0 72 72 6F 72 
0378   D4C4 2E 20 61 61 
0378   D4C8 61 61 20 6D 
0378   D4CC 75 73 74 20 
0378   D4D0 62 65 20 61 
0378   D4D4 20 34 2D 63 
0378   D4D8 68 61 72 61 
0378   D4DC 63 74 65 72 
0378   D4E0 20 68 65 78 
0378   D4E4 20 6E 75 6D 
0378   D4E8 62 65 72 2E 
0379   D4EC 0D 0A       		.DB CR,LF
0380   D4EE 0D 0A 00    		.DB CR,LF,0
0381   D4F1 AF          		XOR	A
0382   D4F2 E1          		POP	HL
0383   D4F3 C1          		POP	BC
0384   D4F4 C9          		RET
0385   D4F5             
0386   D4F5             ;================================================================================================
0387   D4F5             ; Flush serial input buffer
0388   D4F5             ;================================================================================================
0389   D4F5             FLUSHBUF:
0390   D4F5 CD 06 E6    		CALL	CONST
0391   D4F8 FE 00       		CP	0
0392   D4FA C8          		RET	Z
0393   D4FB CD 09 E6    		CALL	CONIN
0394   D4FE 18 F5       		JR	FLUSHBUF
0395   D500             
0396   D500             ;================================================================================================
0397   D500             ; Convert ASCII to HEX (HL --> B)
0398   D500             ;================================================================================================
0399   D500 C5          ASCII2HEX:	PUSH	BC
0400   D501 3E 60       		LD	A,060H
0401   D503 94          		SUB	H
0402   D504 0E 57       		LD	C,057H
0403   D506 DA 13 D5    		JP	C,DISCOUNT
0404   D509 3E 40       		LD	A,040H
0405   D50B 94          		SUB	H
0406   D50C 0E 37       		LD	C,037H
0407   D50E DA 13 D5    		JP	C,DISCOUNT
0408   D511 0E 30       		LD	C,030H
0409   D513             DISCOUNT:
0410   D513 7C          		LD	A,H
0411   D514 91          		SUB	C
0412   D515             CONVL:
0413   D515 47          		LD	B,A
0414   D516 CB 20       		SLA	B
0415   D518 CB 20       		SLA	B
0416   D51A CB 20       		SLA	B
0417   D51C CB 20       		SLA	B
0418   D51E             
0419   D51E 3E 60       		LD	A,060H
0420   D520 95          		SUB	L
0421   D521 0E 57       		LD	C,057H
0422   D523 DA 30 D5    		JP	C,DISCOUNT2
0423   D526 3E 40       		LD	A,040H
0424   D528 95          		SUB	L
0425   D529 0E 37       		LD	C,037H
0426   D52B DA 30 D5    		JP	C,DISCOUNT2
0427   D52E 0E 30       		LD	C,030H
0428   D530             DISCOUNT2:
0429   D530 7D          		LD	A,L
0430   D531 91          		SUB	C
0431   D532 B0          		OR	B
0432   D533 C1          		POP	BC
0433   D534 47          		LD	B,A
0434   D535 C9          		RET
0435   D536             
0436   D536             ;================================================================================================
0437   D536             ; Convert HEX to ASCII (B --> HL)
0438   D536             ;================================================================================================
0439   D536 C5          HEX2ASCII:	PUSH	BC
0440   D537 78          		LD	A,B
0441   D538 E6 0F       		AND	0FH
0442   D53A 6F          		LD	L,A
0443   D53B D6 0A       		SUB	0AH
0444   D53D 0E 30       		LD	C,030H
0445   D53F DA 44 D5    		JP	C,COMPENSATE
0446   D542 0E 37       		LD	C,037H
0447   D544             COMPENSATE:
0448   D544 7D          		LD	A,L
0449   D545 81          		ADD	A,C
0450   D546 6F          		LD	L,A
0451   D547 78          		LD	A,B
0452   D548 E6 F0       		AND	0F0H
0453   D54A CB 3F       		SRL	A
0454   D54C CB 3F       		SRL	A
0455   D54E CB 3F       		SRL	A
0456   D550 CB 3F       		SRL	A
0457   D552 67          		LD	H,A
0458   D553 D6 0A       		SUB	0AH
0459   D555 0E 30       		LD	C,030H
0460   D557 DA 5C D5    		JP	C,COMPENSATE2
0461   D55A 0E 37       		LD	C,037H
0462   D55C             COMPENSATE2:
0463   D55C 7C          		LD	A,H
0464   D55D 81          		ADD	A,C
0465   D55E 67          		LD	H,A
0466   D55F C1          		POP	BC
0467   D560 C9          		RET
0468   D561             
0469   D561             ;================================================================================================
0470   D561             ; Delay X seconds, with X passed on reg B
0471   D561             ;================================================================================================
0472   D561             DELAYS:
0473   D561 C5          		PUSH	BC
0474   D562 E5          		PUSH	HL
0475   D563 21 8F 02    LOOP0:	LD	HL,655
0476   D566 0E FF       LOOP1:	LD	C,255		;1.75					\
0477   D568 0D          LOOP2:	DEC	C		;1		\			|
0478   D569 00          		NOP			;1		| t=6(X-1)+1.75	| (7.75+t)(y-1)
0479   D56A 79          		LD	A,C		;1		|			|
0480   D56B 20 FB       		JR	NZ,LOOP2	;3/1.75	/			|
0481   D56D 2B          		DEC	HL		;1					|
0482   D56E 7C          		LD	A,H		;1					|
0483   D56F B5          		OR	L		;1					|
0484   D570 20 F4       		JR	NZ,LOOP1	;3/1.75				/
0485   D572 10 EF       		DJNZ	LOOP0
0486   D574 E1          		POP	HL
0487   D575 C1          		POP	BC
0488   D576 C9          		RET
0489   D577             
0490   E600             		.ORG	BIOS
0491   E600             ;================================================================================================
0492   E600             ; BIOS jump table.
0493   E600             ;================================================================================================
0494   E600 C3 00 00    BOOT:		JP	0			;  0 Initialize.
0495   E603 C3 00 00    WBOOT:	JP	0			;  1 Warm boot.
0496   E606 C3 00 00    CONST:	JP	0			;  2 Console status.
0497   E609 C3 00 00    CONIN:	JP	0			;  3 Console input.
0498   E60C C3 00 00    CONOUT:	JP	0			;  4 Console OUTput.
0499   E60F C3 00 00    LIST:		JP	0			;  5 List OUTput.
0500   E612 C3 00 00    PUNCH:	JP	0			;  6 Punch OUTput.
0501   E615 C3 00 00    READER:	JP	0			;  7 Reader input.
0502   E618 C3 00 00    HOME:		JP	0			;  8 Home disk.
0503   E61B C3 00 00    SELDSK:	JP	0			;  9 Select disk.
0504   E61E C3 00 00    SETTRK:	JP	0			; 10 Select track.
0505   E621 C3 00 00    SETSEC:	JP	0			; 11 Select sector.
0506   E624 C3 00 00    SETDMA:	JP	0			; 12 Set DMA ADDress.
0507   E627 C3 00 00    READ:		JP	0			; 13 Read 128 bytes.
0508   E62A C3 00 00    WRITE:	JP	0			; 14 Write 128 bytes.
0509   E62D C3 00 00    LISTST:	JP	0			; 15 List status.
0510   E630 C3 00 00    SECTRAN:	JP	0			; 16 Sector translate.
0511   E633 C3 00 00    PRINTSEQ:	JP	0			; not a BIOS function
0512   E636             
0513   E636             ;================================================================================================
0514   E636             
0515   E636             		.END
tasm: Number of errors = 0
