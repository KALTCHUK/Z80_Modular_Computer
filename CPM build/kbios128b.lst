0001   0000             ;==================================================================================
0002   0000             ; Contents of this file are copyright Grant Searle
0003   0000             ; Blocking/unblocking routines are the published version by Digital Research
0004   0000             ; (bugfixed, as found on the web)
0005   0000             ;
0006   0000             ; You have permission to use this for NON COMMERCIAL USE ONLY
0007   0000             ;
0008   0000             ; Customized by Kaltchuk for use with Z80 Modular Computer, december/2020.
0009   0000             ; CP/M is booted from ROM.
0010   0000             ; 04/02/21 - This version corrects a bug in wboot.
0011   0000             ;
0012   0000             ;==================================================================================
0013   0000             #INCLUDE	"equates.h"
0001+  0000             
0002+  0000             CCP				.EQU	0D000h			; Base of CCP (or Monitor).
0003+  0000             BIOS			.EQU	0E620h			; Base of BIOS.
0004+  0000             ROM_CCP			.EQU	CCP-0C000h		; Base of CCP in ROM
0005+  0000             ROM_BIOS		.EQU	BIOS-0C000h		; Base of BIOS in ROM
0006+  0000             
0007+  0000             ccp				.EQU	CCP
0008+  0000             bios			.EQU	BIOS
0014   0000             
0015   0000             ; Set CP/M low memory data, vector and buffer addresses.
0016   0000             
0017   0000             iobyte			.EQU	03h				; Intel standard I/O definition byte.
0018   0000             userdrv			.EQU	04h				; Current user number and drive.
0019   0000             tpabuf			.EQU	80h				; Default I/O buffer and command line storage.
0020   0000             
0021   0000             blksiz			.equ	4096			;CP/M allocation size
0022   0000             hstsiz			.equ	512				;host disk sector size
0023   0000             hstspt			.equ	32				;host disk sectors/trk
0024   0000             hstblk			.equ	hstsiz/128		;CP/M sects/host buff
0025   0000             cpmspt			.equ	hstblk * hstspt	;CP/M sectors/track
0026   0000             secmsk			.equ	hstblk-1		;sector mask
0027   0000             										;compute sector mask
0028   0000             ;secshf			.equ	2				;log2(hstblk)
0029   0000             	
0030   0000             wrall			.equ	0				;write to allocated
0031   0000             wrdir			.equ	1				;write to directory
0032   0000             wrual			.equ	2				;write to unallocated
0033   0000             
0034   0000             ; MEM card stuff
0035   0000             ROM_RAM0		.EQU	0F0H			; ROM + RAM bank 0
0036   0000             NOROM_RAM0		.EQU	0F1H			; no ROM + RAM bank 0 (full RAM)
0037   0000             ROM_RAM1		.EQU	0F2H			; ROM + RAM bank 1
0038   0000             NOROM_RAM1		.EQU	0F3H			; no ROM + RAM bank 1 (full RAM)
0039   0000             
0040   0000             ; USART card stuff
0041   0000             USART_DAT		.EQU	0D0H			; USART data addr
0042   0000             USART_CMD		.EQU	0D1H			; USART command addr
0043   0000             USART_STA		.EQU	0D1H			; USART status addr
0044   0000             UMODE			.EQU	06FH			; 8N1 (8 bit, no parity, 1 stop), baud=clock/64
0045   0000             UCMD0			.EQU	015H			; initial command: Rx enable, Tx enable, reset error flags
0046   0000             
0047   0000             ; LCD card address list.
0048   0000             LCD_ADDR	.EQU	0E0H
0049   0000             DAT_WR		.EQU	LCD_ADDR+1
0050   0000             DAT_RD		.EQU	LCD_ADDR+3
0051   0000             CMD_WR		.EQU	LCD_ADDR
0052   0000             CMD_RD		.EQU	LCD_ADDR+2
0053   0000             
0054   0000             
0055   0000             ; FLASH card stuff
0056   0000             FLASH_ADDR		.EQU	0B0H			; Base I/O address for compact flash card
0057   0000             CF_DATA			.EQU	(FLASH_ADDR+0)	; R/W
0058   0000             CF_FEATURES		.EQU	(FLASH_ADDR+1)	; W
0059   0000             CF_ERROR		.EQU	(FLASH_ADDR+1)	; R
0060   0000             CF_SECCOUNT		.EQU	(FLASH_ADDR+2)	; W
0061   0000             
0062   0000             CF_SECTOR		.EQU	(FLASH_ADDR+3)	; W
0063   0000             CF_CYL_LOW		.EQU	(FLASH_ADDR+4)	; W
0064   0000             CF_CYL_HI		.EQU	(FLASH_ADDR+5)	; W
0065   0000             CF_HEAD			.EQU	(FLASH_ADDR+6)	; W
0066   0000             
0067   0000             CF_LBA0			.EQU	(FLASH_ADDR+3)	; W
0068   0000             CF_LBA1			.EQU	(FLASH_ADDR+4)	; W
0069   0000             CF_LBA2			.EQU	(FLASH_ADDR+5)	; W
0070   0000             CF_LBA3			.EQU	(FLASH_ADDR+6)	; W
0071   0000             
0072   0000             CF_STATUS		.EQU	(FLASH_ADDR+7)	; R
0073   0000             CF_COMMAND		.EQU	(FLASH_ADDR+7)	; W
0074   0000             
0075   0000             ;CF Features
0076   0000             CF_8BIT			.EQU	1
0077   0000             CF_NOCACHE		.EQU	082H
0078   0000             
0079   0000             ;CF Commands
0080   0000             CF_READ_SEC		.EQU	020H
0081   0000             CF_WRITE_SEC	.EQU	030H
0082   0000             CF_SET_FEAT		.EQU 	0EFH
0083   0000             
0084   0000             ;================================================================================================
0085   0000             ; ASCII characters.
0086   0000             ;================================================================================================
0087   0000             NUL			.EQU	00H
0088   0000             LF			.EQU	0AH
0089   0000             FF			.EQU	0CH
0090   0000             CR			.EQU	0DH
0091   0000             DC1			.EQU	11H
0092   0000             DC2			.EQU	12H
0093   0000             DC3			.EQU	13H
0094   0000             DC4			.EQU	14H
0095   0000             ;================================================================================================
0096   0000             
0097   E620             		.ORG	bios					; BIOS origin.
0098   E620             
0099   E620             ;================================================================================================
0100   E620             ; BIOS jump table.
0101   E620             ;================================================================================================
0102   E620 C3 83 E7    		JP	boot						;  0 Initialize.
0103   E623 C3 43 E8    wboote:	JP	wboot						;  1 Warm boot.
0104   E626 C3 C7 E8    		JP	CONST						;  2 Console status.
0105   E629 C3 DA E8    		JP	CONIN						;  3 Console input.
0106   E62C C3 FC E8    		JP	CONOUT						;  4 Console OUTput.
0107   E62F C3 09 E9    		JP	LIST						;  5 List OUTput.
0108   E632 C3 16 E9    		JP	PUNCH						;  6 punch OUTput.
0109   E635 C3 06 E9    		JP	READER						;  7 Reader input.
0110   E638 C3 68 EA    		JP	home						;  8 Home disk.
0111   E63B C3 40 EA    		JP	seldsk						;  9 Select disk.
0112   E63E C3 74 EA    		JP	settrk						; 10 Select track.
0113   E641 C3 79 EA    		JP	setsec						; 11 Select sector.
0114   E644 C3 7E EA    		JP	setdma						; 12 Set DMA ADDress.
0115   E647 C3 86 EA    		JP	read						; 13 Read 128 bytes.
0116   E64A C3 9A EA    		JP	write						; 14 Write 128 bytes.
0117   E64D C3 19 E9    		JP	LISTST						; 15 List status.
0118   E650 C3 83 EA    		JP	sectran						; 16 Sector translate.
0119   E653 C3 74 EC    		JP	PRINTSEQ					; not a BIOS function
0120   E656             
0121   E656             ;================================================================================================
0122   E656             ; Disk parameter headers for disk 0 to 15
0123   E656             ;================================================================================================
0124   E656             dpbase:
0125   E656 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb0,0000h,alv00
0125   E65A 00 00 00 00 
0125   E65E 88 EC 56 E7 
0125   E662 00 00 08 ED 
0126   E666 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv01
0126   E66A 00 00 00 00 
0126   E66E 88 EC 65 E7 
0126   E672 00 00 09 EE 
0127   E676 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv02
0127   E67A 00 00 00 00 
0127   E67E 88 EC 65 E7 
0127   E682 00 00 0A EF 
0128   E686 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv03
0128   E68A 00 00 00 00 
0128   E68E 88 EC 65 E7 
0128   E692 00 00 0B F0 
0129   E696 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv04
0129   E69A 00 00 00 00 
0129   E69E 88 EC 65 E7 
0129   E6A2 00 00 0C F1 
0130   E6A6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv05
0130   E6AA 00 00 00 00 
0130   E6AE 88 EC 65 E7 
0130   E6B2 00 00 0D F2 
0131   E6B6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv06
0131   E6BA 00 00 00 00 
0131   E6BE 88 EC 65 E7 
0131   E6C2 00 00 0E F3 
0132   E6C6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv07
0132   E6CA 00 00 00 00 
0132   E6CE 88 EC 65 E7 
0132   E6D2 00 00 0F F4 
0133   E6D6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv08
0133   E6DA 00 00 00 00 
0133   E6DE 88 EC 65 E7 
0133   E6E2 00 00 10 F5 
0134   E6E6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv09
0134   E6EA 00 00 00 00 
0134   E6EE 88 EC 65 E7 
0134   E6F2 00 00 11 F6 
0135   E6F6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv10
0135   E6FA 00 00 00 00 
0135   E6FE 88 EC 65 E7 
0135   E702 00 00 12 F7 
0136   E706 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv11
0136   E70A 00 00 00 00 
0136   E70E 88 EC 65 E7 
0136   E712 00 00 13 F8 
0137   E716 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv12
0137   E71A 00 00 00 00 
0137   E71E 88 EC 65 E7 
0137   E722 00 00 14 F9 
0138   E726 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv13
0138   E72A 00 00 00 00 
0138   E72E 88 EC 65 E7 
0138   E732 00 00 15 FA 
0139   E736 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv14
0139   E73A 00 00 00 00 
0139   E73E 88 EC 65 E7 
0139   E742 00 00 16 FB 
0140   E746 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpbLast,0000h,alv15
0140   E74A 00 00 00 00 
0140   E74E 88 EC 74 E7 
0140   E752 00 00 17 FC 
0141   E756             
0142   E756             ; First drive has a reserved track for CP/M
0143   E756             dpb0:
0144   E756 80 00       		.DW 128 ;SPT - sectors per track
0145   E758 05          		.DB 5   ;BSH - block shift factor
0146   E759 1F          		.DB 31  ;BLM - block mask
0147   E75A 01          		.DB 1   ;EXM - Extent mask
0148   E75B FB 07       		.DW 2043 ; (2047-4) DSM - Storage size (blocks - 1)
0149   E75D FF 01       		.DW 511 ;DRM - Number of directory entries - 1
0150   E75F F0          		.DB 240 ;AL0 - 1 bit set per directory block
0151   E760 00          		.DB 0   ;AL1 -            "
0152   E761 00 00       		.DW 0   ;CKS - DIR check vector size (DRM+1)/4 (0=fixed disk)
0153   E763 01 00       		.DW 1   ;ON  - Reserved tracks
0154   E765             
0155   E765             dpb:
0156   E765 80 00       		.DW 128 ;SPT - sectors per track
0157   E767 05          		.DB 5   ;BSH - block shift factor
0158   E768 1F          		.DB 31  ;BLM - block mask
0159   E769 01          		.DB 1   ;EXM - Extent mask
0160   E76A FF 07       		.DW 2047 ;DSM - Storage size (blocks - 1)
0161   E76C FF 01       		.DW 511 ;DRM - Number of directory entries - 1
0162   E76E F0          		.DB 240 ;AL0 - 1 bit set per directory block
0163   E76F 00          		.DB 0   ;AL1 -            "
0164   E770 00 00       		.DW 0   ;CKS - DIR check vector size (DRM+1)/4 (0=fixed disk)
0165   E772 00 00       		.DW 0   ;OFF - Reserved tracks
0166   E774             
0167   E774             ; Last drive is smaller because CF is never full 64MB or 128MB
0168   E774             dpbLast:
0169   E774 80 00       		.DW 128 ;SPT - sectors per track
0170   E776 05          		.DB 5   ;BSH - block shift factor
0171   E777 1F          		.DB 31  ;BLM - block mask
0172   E778 01          		.DB 1   ;EXM - Extent mask
0173   E779 FF 01       		.DW 511 ;DSM - Storage size (blocks - 1)  ; 511 = 2MB (for 128MB card), 1279 = 5MB (for 64MB card)
0174   E77B FF 01       		.DW 511 ;DRM - Number of directory entries - 1
0175   E77D F0          		.DB 240 ;AL0 - 1 bit set per directory block
0176   E77E 00          		.DB 0   ;AL1 -            "
0177   E77F 00 00       		.DW 0   ;CKS - DIR check vector size (DRM+1)/4 (0=fixed disk)
0178   E781 00 00       		.DW 0   ;OFF - Reserved tracks
0179   E783             
0180   E783             ;================================================================================================
0181   E783             ; Cold boot
0182   E783             ;================================================================================================
0183   E783             
0184   E783             boot:
0185   E783 F3          		DI						; Disable interrupts.
0186   E784 31 A7 FF    		LD	SP,BIOSSTACK		; Set default stack.
0187   E787             
0188   E787 D3 F1       		OUT (NOROM_RAM0),A		; Turn off ROM. Doesn't matter what we output
0189   E789             
0190   E789 CD B0 E8    		CALL USARTINIT			; Initialize USART
0191   E78C             
0192   E78C 01 33 FF    		LD	BC,BUFINI			; Initialize pointers for USART buffer
0193   E78F ED 43 83 FF 		LD	(WRPTR),BC
0194   E793 ED 43 85 FF 		LD	(RDPTR),BC
0195   E797             
0196   E797 CD 69 EC    		CALL	cfWait			; Initialize FLASH
0197   E79A 3E 01       		LD 	A,CF_8BIT			; Set IDE to be 8bit
0198   E79C D3 B1       		OUT	(CF_FEATURES),A
0199   E79E 3E EF       		LD	A,CF_SET_FEAT
0200   E7A0 D3 B7       		OUT	(CF_COMMAND),A
0201   E7A2             
0202   E7A2 CD 69 EC    		CALL	cfWait
0203   E7A5 3E 82       		LD 	A,CF_NOCACHE		; No write cache
0204   E7A7 D3 B1       		OUT	(CF_FEATURES),A
0205   E7A9 3E EF       		LD	A,CF_SET_FEAT
0206   E7AB D3 B7       		OUT	(CF_COMMAND),A
0207   E7AD             
0208   E7AD AF          		XOR	A					; set drive byte to A:
0209   E7AE 32 04 00    		LD	(userdrv),A
0210   E7B1             
0211   E7B1 01 33 FF    		LD	BC,BUFINI			; reset serial input buffer
0212   E7B4 ED 43 83 FF 		LD	(WRPTR),BC
0213   E7B8 ED 43 85 FF 		LD	(RDPTR),BC
0214   E7BC             
0215   E7BC             
0216   E7BC CD 74 EC    		CALL	PRINTSEQ
0217   E7BF 5A 38 30 20 		.DB "Z80 Modular Computer by Kaltchuk 2020.",CR,LF
0217   E7C3 4D 6F 64 75 
0217   E7C7 6C 61 72 20 
0217   E7CB 43 6F 6D 70 
0217   E7CF 75 74 65 72 
0217   E7D3 20 62 79 20 
0217   E7D7 4B 61 6C 74 
0217   E7DB 63 68 75 6B 
0217   E7DF 20 32 30 32 
0217   E7E3 30 2E 0D 0A 
0218   E7E7 42 49 4F 53 		.DB "BIOS 1.0B - 128MB Flash, LCD drive.",CR,LF
0218   E7EB 20 31 2E 30 
0218   E7EF 42 20 2D 20 
0218   E7F3 31 32 38 4D 
0218   E7F7 42 20 46 6C 
0218   E7FB 61 73 68 2C 
0218   E7FF 20 4C 43 44 
0218   E803 20 64 72 69 
0218   E807 76 65 2E 0D 
0218   E80B 0A 
0219   E80C 43 50 2F 4D 		.DB "CP/M 2.2 Copyright 1979 (c) by Digital Research",CR,LF,CR,LF,0
0219   E810 20 32 2E 32 
0219   E814 20 43 6F 70 
0219   E818 79 72 69 67 
0219   E81C 68 74 20 31 
0219   E820 39 37 39 20 
0219   E824 28 63 29 20 
0219   E828 62 79 20 44 
0219   E82C 69 67 69 74 
0219   E830 61 6C 20 52 
0219   E834 65 73 65 61 
0219   E838 72 63 68 0D 
0219   E83C 0A 0D 0A 00 
0220   E840             
0221   E840 C3 56 E8    		JP	gocpm
0222   E843             
0223   E843             ;================================================================================================
0224   E843             ; Warm boot
0225   E843             ;================================================================================================
0226   E843             
0227   E843             wboot:
0228   E843 F3          		DI						; Disable interrupts.
0229   E844 31 A7 FF    		LD	SP,BIOSSTACK		; Set default stack.
0230   E847             
0231   E847 D3 F0       		OUT (ROM_RAM0),A		; Turn on ROM. Doesn't matter what we output
0232   E849             
0233   E849 01 00 16    		LD	BC,01600H			; Copy CP/M ROM (01000h) to RAM (0D000h)
0234   E84C 11 00 D0    		LD	DE,CCP				; Don't copy the BIOS!!!
0235   E84F 21 00 10    		LD	HL,ROM_CCP
0236   E852 ED B0       		LDIR
0237   E854             
0238   E854 D3 F1       		OUT (NOROM_RAM0),A		; Turn off ROM. Doesn't matter what we output
0239   E856             
0240   E856             
0241   E856             ;================================================================================================
0242   E856             ; Common code for cold and warm boot
0243   E856             ;================================================================================================
0244   E856             
0245   E856             gocpm:
0246   E856 AF          		XOR	A					; 0 to accumulator
0247   E857 32 26 FD    		LD	(hstact),A			; host buffer inactive
0248   E85A 32 28 FD    		LD	(unacnt),A			; clear unalloc count
0249   E85D             
0250   E85D 21 80 00    		LD	HL,tpabuf			; ADDress of BIOS DMA buffer.
0251   E860 22 31 FD    		LD	(dmaAddr),HL
0252   E863             		
0253   E863 3E C3       		LD	A,0C3h				; Opcode for 'JP'.
0254   E865 32 00 00    		LD	(00h),A				; Load at start of RAM.
0255   E868 21 23 E6    		LD	HL,wboote			; ADDress of jump for a warm boot.
0256   E86B 22 01 00    		LD	(01h),HL
0257   E86E 32 05 00    		LD	(05h),A				; Opcode for 'JP'.
0258   E871 2A 1E E6    		LD	HL,(BIOS-2)			; ADDress of jump for the BDOS.
0259   E874 22 06 00    		LD	(06h),HL
0260   E877 32 38 00    		LD	(038H),A			; at 038h write "JP UINT"
0261   E87A 21 8F E8    		LD	HL,UINT				; which is the interrupt routine to catch incoming
0262   E87D 22 39 00    		LD	(039H),HL			; character on the USART
0263   E880 3E 00       		LD	A,0
0264   E882 32 03 00    		LD	(iobyte),A			; Set IOBYTE to 00
0265   E885 3A 04 00    		LD	A,(userdrv)			; Save new drive number (0).
0266   E888 4F          		LD	C,A					; Pass drive number in C.
0267   E889             
0268   E889 ED 56       		IM	1
0269   E88B FB          		EI
0270   E88C             	
0271   E88C C3 00 D0    		JP	ccp					; Start CP/M by jumping to the CCP.
0272   E88F             
0273   E88F             ;================================================================================================
0274   E88F             ; Interrupt routine for USART
0275   E88F             ;================================================================================================
0276   E88F             UINT:
0277   E88F C5          		PUSH	BC
0278   E890 E5          		PUSH	HL
0279   E891             
0280   E891 DB D0       		IN	A,(USART_DAT)		; read incoming byte
0281   E893             ;		OUT	(USART_DAT),A		; send character
0282   E893 ED 4B 83 FF 		LD	BC,(WRPTR)
0283   E897 02          		LD	(BC),A
0284   E898 03          		INC	BC
0285   E899 21 83 FF    		LD	HL,BUFEND
0286   E89C 37          		SCF
0287   E89D 3F          		CCF
0288   E89E ED 42       		SBC	HL,BC
0289   E8A0 20 03       		JR	NZ,EOINT
0290   E8A2 01 33 FF    		LD	BC,BUFINI
0291   E8A5 ED 43 83 FF EOINT:	LD	(WRPTR),BC
0292   E8A9             
0293   E8A9 E1          		POP	HL
0294   E8AA C1          		POP	BC
0295   E8AB ED 56       		IM	1
0296   E8AD FB          		EI
0297   E8AE ED 4D       		RETI
0298   E8B0             
0299   E8B0             ;================================================================================================
0300   E8B0             ; Initialize USART
0301   E8B0             ;================================================================================================
0302   E8B0             USARTINIT:
0303   E8B0 3E 00       		LD 	A,0					; Worst case init: put in SYNC mode, 
0304   E8B2 D3 D1       		OUT	(USART_CMD),A		; send 2 dummy 00 sync chars and reset
0305   E8B4 00          		NOP
0306   E8B5 D3 D1       		OUT	(USART_CMD),A
0307   E8B7 00          		NOP
0308   E8B8 D3 D1       		OUT	(USART_CMD),A
0309   E8BA 3E 40       		LD 	A,040H				; Reset USART
0310   E8BC D3 D1       		OUT	(USART_CMD),A
0311   E8BE 3E 6F       		LD 	A,UMODE				; Set USART mode
0312   E8C0 D3 D1       		OUT	(USART_CMD),A
0313   E8C2 3E 15       		LD 	A,UCMD0				; Set USART initial command
0314   E8C4 D3 D1       		OUT	(USART_CMD),A
0315   E8C6 C9          		RET
0316   E8C7             
0317   E8C7             ;================================================================================================
0318   E8C7             ; Console I/O routines
0319   E8C7             ;================================================================================================
0320   E8C7             ;================================================================================================
0321   E8C7             ; Console Status (Return A=0FFh if character waiting. Otherwise, A=0)
0322   E8C7             ;================================================================================================
0323   E8C7             CONST:
0324   E8C7 C5          		PUSH	BC
0325   E8C8 E5          		PUSH	HL
0326   E8C9 ED 4B 83 FF 		LD	BC,(WRPTR)
0327   E8CD 2A 85 FF    		LD	HL,(RDPTR)
0328   E8D0 AF          		XOR	A					; Reset carry flag
0329   E8D1 ED 42       		SBC	HL,BC
0330   E8D3 28 02       		JR	Z,CONVOID
0331   E8D5 3E FF       		LD	A,0FFH
0332   E8D7             CONVOID:
0333   E8D7 E1          		POP	HL
0334   E8D8 C1          		POP	BC
0335   E8D9 C9          	  	RET
0336   E8DA             
0337   E8DA             ;================================================================================================
0338   E8DA             ; Console Input (Wait for input and return character in A)
0339   E8DA             ;================================================================================================
0340   E8DA             CONIN:
0341   E8DA C5          		PUSH	BC	
0342   E8DB E5          		PUSH	HL	
0343   E8DC CD C7 E8    AGAIN:	CALL	CONST
0344   E8DF FE 00       		CP	0
0345   E8E1 28 F9       		JR	Z,AGAIN			; Keep trying till we receive something
0346   E8E3 ED 4B 85 FF 		LD	BC,(RDPTR)
0347   E8E7 0A          		LD	A,(BC)
0348   E8E8 03          		INC	BC
0349   E8E9 21 83 FF    		LD	HL,BUFEND
0350   E8EC 37          		SCF
0351   E8ED 3F          		CCF
0352   E8EE ED 42       		SBC	HL,BC
0353   E8F0 20 03       		JR	NZ,EOCONIN
0354   E8F2 01 33 FF    		LD	BC,BUFINI
0355   E8F5 ED 43 85 FF EOCONIN:	LD	(RDPTR),BC
0356   E8F9 E1          		POP	HL
0357   E8FA C1          		POP	BC
0358   E8FB C9          		RET					; Char read returns in A
0359   E8FC             
0360   E8FC             ;================================================================================================
0361   E8FC             ; Console Output (Send character in reg C)
0362   E8FC             ;================================================================================================
0363   E8FC             CONOUT:
0364   E8FC DB D1       		IN	A,(USART_STA)		; read USART status byte
0365   E8FE E6 04       		AND	04H				; get only the TxEMPTY bit
0366   E900 28 FA       		JR	Z,CONOUT
0367   E902 79          		LD	A,C
0368   E903 D3 D0       		OUT	(USART_DAT),A		; send character
0369   E905 C9          		RET
0370   E906             
0371   E906             ;================================================================================================
0372   E906             ; Reader Input
0373   E906             ;================================================================================================
0374   E906 C3 DA E8    READER:	JP CONIN	
0375   E909             
0376   E909             ;================================================================================================
0377   E909             ; List Output
0378   E909             ;================================================================================================
0379   E909 3A 03 00    LIST:		LD	A,(iobyte)
0380   E90C E6 C0       			AND	0C0H			; Get LIST portion of IOBYTE
0381   E90E FE C0       			CP	0C0H
0382   E910 CA 2A E9    			JP	Z,LCD
0383   E913 C3 FC E8    			JP CONOUT
0384   E916             
0385   E916             ;================================================================================================
0386   E916             ; Punch Output
0387   E916             ;================================================================================================
0388   E916 C3 FC E8    PUNCH:	JP CONOUT	
0389   E919             
0390   E919             ;================================================================================================
0391   E919             ; List Status (List = Console)
0392   E919             ;================================================================================================
0393   E919 3A 03 00    LISTST:		LD	A,(iobyte)
0394   E91C E6 C0       			AND	0C0H			; Get LIST portion of IOBYTE
0395   E91E FE C0       			CP	0C0H
0396   E920 CA 26 E9    			JP	Z,LCDST
0397   E923 C3 C7 E8    			JP CONST
0398   E926             
0399   E926             ;================================================================================================
0400   E926             ; LCD STATUS. Return A=LCD_card_addr. A=0 if no card initialized.
0401   E926             ;================================================================================================
0402   E926 CD 99 E9    LCDST:		CALL BWAIT
0403   E929 C9          			RET
0404   E92A             
0405   E92A             ;================================================================================================
0406   E92A             ; LCD OUTPUT. Send C to LCD, if C>1FH (printable range). 
0407   E92A             ; Accepts also LF, CR and FF (Form Feed = clear LCD).
0408   E92A             ; If C=DC1, initialize LCD card.
0409   E92A             ; If C=DC2, position cursor as indicated in regB.
0410   E92A             ;================================================================================================
0411   E92A E5          LCD:		PUSH HL
0412   E92B 79          			LD	A,C
0413   E92C FE 14       			CP	20
0414   E92E FA 36 E9    			JP	M,ASCIILO
0415   E931 CD AB E9    			CALL LCDPUT
0416   E934 18 19       			JR	GETOUT
0417   E936 FE 0A       ASCIILO:	CP	LF
0418   E938 CC CB E9    			CALL Z,LCDLF			; Line Feed
0419   E93B FE 0D       			CP	CR
0420   E93D CC BF E9    			CALL Z,LCDCR			; Carriage Return
0421   E940 FE 0C       			CP	FF
0422   E942 CC A1 E9    			CALL Z,LCDCLEAR			; Form Feed, which is a 'clear LCD'
0423   E945 FE 11       			CP	DC1
0424   E947 CC 51 E9    			CALL Z,LCDINIT			; Initialize LCD card.
0425   E94A FE 12       			CP	DC2
0426   E94C CC B4 E9    			CALL Z,LCDPOS			; Cursor reposition request. New position in regB
0427   E94F E1          GETOUT:		POP	HL
0428   E950 C9          			RET
0429   E951             
0430   E951             ;================================================================================================
0431   E951             ; Initialize LCD
0432   E951             ;================================================================================================
0433   E951 06 0F       LCDINIT:	LD	B,15			; wait 15ms
0434   E953 CD 1C EA    			CALL DELAYMS
0435   E956 3E 30       			LD	A,030H			; write command 030h
0436   E958 D3 E0       			OUT	(CMD_WR),A
0437   E95A 06 05       			LD	B,5				; wait 5ms
0438   E95C CD 1C EA    			CALL DELAYMS
0439   E95F 3E 30       			LD	A,030H			; write command 030h
0440   E961 D3 E0       			OUT	(CMD_WR),A
0441   E963 0E 14       			LD	C,20			; wait (5X20) 100us
0442   E965 CD 28 EA    			CALL DELAY5US
0443   E968 3E 30       			LD	A,030H			; write command 030h
0444   E96A D3 E0       			OUT	(CMD_WR),A
0445   E96C 0E 14       			LD	C,20			; wait (5X20) 100us
0446   E96E CD 28 EA    			CALL DELAY5US
0447   E971 3E 38       			LD	A,038H			; write command 038h = function set (8-bits, 2-lines, 5x7dots)
0448   E973 D3 E0       			OUT	(CMD_WR),A
0449   E975 CD 99 E9    			CALL BWAIT
0450   E978 3E 08       			LD	A,08H			; write command 08h = display (off)
0451   E97A D3 E0       			OUT	(CMD_WR),A
0452   E97C CD 99 E9    			CALL BWAIT
0453   E97F 3E 01       			LD	A,01H			; write command 01h = clear display
0454   E981 D3 E0       			OUT	(CMD_WR),A
0455   E983 CD 99 E9    			CALL BWAIT
0456   E986 3E 06       			LD	A,06H			; write command 06h = entry mode (increment)
0457   E988 D3 E0       			OUT	(CMD_WR),A
0458   E98A CD 99 E9    			CALL BWAIT
0459   E98D 3E 0C       			LD	A,0CH			; write command 0Ch = display (on)
0460   E98F D3 E0       			OUT	(CMD_WR),A
0461   E991 3E E0       			LD	A,LCD_ADDR
0462   E993 32 2F EA    			LD	(LCDSTATUS),A
0463   E996 3E 00       			LD	A,0
0464   E998 C9          			RET
0465   E999             
0466   E999             ;================================================================================================
0467   E999             ; Wait until Busy flag = 0
0468   E999             ;================================================================================================
0469   E999 DB E2       BWAIT:		IN	A,(CMD_RD)
0470   E99B 07          			RLCA
0471   E99C 38 FB       			JR	C,BWAIT
0472   E99E CB 3F       			SRL	A
0473   E9A0 C9          			RET
0474   E9A1             			
0475   E9A1             ;================================================================================================
0476   E9A1             ; Clear LCD and goto line 1, column 1.
0477   E9A1             ;================================================================================================
0478   E9A1 CD 99 E9    LCDCLEAR:	CALL BWAIT
0479   E9A4 3E 01       			LD	A,01H
0480   E9A6 D3 E0       			OUT	(CMD_WR),A
0481   E9A8 3E 00       			LD	A,0
0482   E9AA C9          			RET
0483   E9AB             
0484   E9AB             ;================================================================================================
0485   E9AB             ; Send to LCD char in regC. Print at current position (what ever it is)
0486   E9AB             ;================================================================================================
0487   E9AB CD 99 E9    LCDPUT:		CALL BWAIT
0488   E9AE 79          			LD	A,C	
0489   E9AF D3 E1       			OUT	(DAT_WR),A
0490   E9B1 3E 00       			LD	A,0
0491   E9B3 C9          			RET
0492   E9B4             
0493   E9B4             ;================================================================================================
0494   E9B4             ; Position LCD cursor at regB.
0495   E9B4             ;================================================================================================
0496   E9B4 CD 99 E9    LCDPOS:		CALL BWAIT
0497   E9B7 78          			LD	A,B
0498   E9B8 F6 80       			OR	80H
0499   E9BA D3 E0       			OUT	(CMD_WR),A
0500   E9BC 3E 00       			LD	A,0
0501   E9BE C9          			RET
0502   E9BF             
0503   E9BF             ;================================================================================================
0504   E9BF             ; Do CR (Carriage Return)
0505   E9BF             ;================================================================================================
0506   E9BF CD 99 E9    LCDCR:		CALL BWAIT
0507   E9C2 E6 F0       			AND	0F0H			; Keep line info, set column to 1.
0508   E9C4 F6 80       			OR	080H
0509   E9C6 D3 E0       			OUT	(CMD_WR),A
0510   E9C8 3E 00       			LD	A,0
0511   E9CA C9          			RET
0512   E9CB             			
0513   E9CB             ;================================================================================================
0514   E9CB             ; Do LF (Line Feed)
0515   E9CB             ;================================================================================================
0516   E9CB CD 99 E9    LCDLF:		CALL BWAIT			; regA holds LCD address counter
0517   E9CE 57          			LD	D,A
0518   E9CF E6 40       			AND	40H				; get only the 7th bit to see on which line the cursor is.
0519   E9D1 28 26       			JR	Z,LN11
0520   E9D3 CD 99 E9    			CALL BWAIT
0521   E9D6 3E C0       			LD	A,0C0H
0522   E9D8 D3 E0       			OUT	(CMD_WR),A		; set addr counter to source position (2,1)
0523   E9DA 21 30 EA    			LD	HL,BUF
0524   E9DD 06 10       			LD	B,10H
0525   E9DF CD 99 E9    NEWSRC:		CALL BWAIT
0526   E9E2 DB E3       			IN	A,(DAT_RD)		; get data from source position
0527   E9E4 77          			LD	(HL),A			; Store char in buffer
0528   E9E5 23          			INC	HL
0529   E9E6 10 F7       			DJNZ NEWSRC
0530   E9E8 CD A1 E9    			CALL LCDCLEAR
0531   E9EB 21 30 EA    			LD	HL,BUF
0532   E9EE 06 10       			LD	B,10H
0533   E9F0 CD 99 E9    NEWTGT:		CALL BWAIT
0534   E9F3 7E          			LD	A,(HL)
0535   E9F4 23          			INC	HL
0536   E9F5 D3 E1       			OUT	(DAT_WR),A
0537   E9F7 10 F7       			DJNZ NEWTGT
0538   E9F9             
0539   E9F9 CD 99 E9    LN11:		CALL BWAIT
0540   E9FC 7A          			LD	A,D
0541   E9FD E6 0F       			AND	0FH
0542   E9FF F6 C0       			OR	0C0H
0543   EA01 D3 E0       			OUT	(CMD_WR),A
0544   EA03 3E 00       			LD	A,0
0545   EA05 C9          			RET
0546   EA06             
0547   EA06             ;================================================================================================
0548   EA06             ; Delay X seconds, with X passed on reg B
0549   EA06             ;================================================================================================
0550   EA06 C5          DELAYS:		PUSH BC
0551   EA07 E5          			PUSH HL
0552   EA08 21 8F 02    LOOP0:		LD	HL,655		;2.5				\
0553   EA0B 0E FF       LOOP1:		LD	C,255		;1.75	\			|
0554   EA0D 0D          LOOP2:		DEC	C			;1		|			|
0555   EA0E 00          			NOP				;1		| t=6C+0.5	| 
0556   EA0F 79          			LD	A,C			;1		|			| t=HL(6C+6.5)+1.25
0557   EA10 20 FB       			JR	NZ,LOOP2	;3/1.75	/			|
0558   EA12 2B          			DEC	HL			;1					| with HL=655 and c=255, t=1.006sec (WOW!!!)
0559   EA13 7C          			LD	A,H			;1					|
0560   EA14 B5          			OR	L			;1					|
0561   EA15 20 F4       			JR	NZ,LOOP1	;3/1.75				/
0562   EA17 10 EF       			DJNZ LOOP0		;3.25/2
0563   EA19 E1          			POP	HL
0564   EA1A C1          			POP	BC
0565   EA1B C9          			RET
0566   EA1C             
0567   EA1C             ;================================================================================================
0568   EA1C             ; Delay X miliseconds, with X passed on reg B
0569   EA1C             ;================================================================================================
0570   EA1C C5          DELAYMS:	PUSH BC
0571   EA1D 0E C8       DECB:		LD	C,0C8H
0572   EA1F 00          DECC:		NOP
0573   EA20 0D          			DEC	C
0574   EA21 20 FC       			JR	NZ,DECC
0575   EA23 05          			DEC	B
0576   EA24 20 F7       			JR	NZ,DECB
0577   EA26 C1          			POP	BC
0578   EA27 C9          			RET
0579   EA28             
0580   EA28             ;================================================================================================
0581   EA28             ; Delay 5*X microseconds, with X passed on reg C
0582   EA28             ;================================================================================================
0583   EA28 C5          DELAY5US:	PUSH BC
0584   EA29 00          DEC:		NOP
0585   EA2A 0D          			DEC	C
0586   EA2B 20 FC       			JR	NZ,DEC
0587   EA2D C1          			POP	BC
0588   EA2E C9          			RET
0589   EA2F             
0590   EA2F             ;================================================================================================
0591   EA2F 00          LCDSTATUS	.DB	0			; After LCD has been initialized, it will hold card addr.
0592   EA30             BUF			.DS	10H			; Buffer for Line Feed operation
0593   EA40             ;================================================================================================
0594   EA40             ; Disk processing entry points
0595   EA40             ;================================================================================================
0596   EA40             seldsk:
0597   EA40 21 00 00    		LD	HL,$0000
0598   EA43 79          		LD	A,C
0599   EA44 FE 10       		CP	16		; 16 for 128MB disk, 8 for 64MB disk
0600   EA46 38 0D       		jr	C,chgdsk	; if invalid drive will give BDOS error
0601   EA48 3A 04 00    		LD	A,(userdrv)	; so set the drive back to a:
0602   EA4B B9          		CP	C		; If the default disk is not the same as the
0603   EA4C C0          		RET	NZ		; selected drive then return, 
0604   EA4D AF          		XOR	A		; else reset default back to a:
0605   EA4E 32 04 00    		LD	(userdrv),A	; otherwise will be stuck in a loop
0606   EA51 32 1C FD    		LD	(sekdsk),A
0607   EA54 C9          		ret
0608   EA55             
0609   EA55 32 1C FD    chgdsk:		LD 	(sekdsk),A
0610   EA58 CB 07       		RLC	a		;*2
0611   EA5A CB 07       		RLC	a		;*4
0612   EA5C CB 07       		RLC	a		;*8
0613   EA5E CB 07       		RLC	a		;*16
0614   EA60 21 56 E6    		LD 	HL,dpbase
0615   EA63 06 00       		LD	b,0
0616   EA65 4F          		LD	c,A	
0617   EA66 09          		ADD	HL,BC
0618   EA67             
0619   EA67 C9          		RET
0620   EA68             
0621   EA68             ;------------------------------------------------------------------------------------------------
0622   EA68             home:
0623   EA68 3A 27 FD    		ld	a,(hstwrt)	;check for pending write
0624   EA6B B7          		or	a
0625   EA6C 20 03       		jr	nz,homed
0626   EA6E 32 26 FD    		ld	(hstact),a	;clear host active flag
0627   EA71             homed:
0628   EA71 01 00 00    		LD 	BC,0000h
0629   EA74             
0630   EA74             ;------------------------------------------------------------------------------------------------
0631   EA74 ED 43 1D FD settrk:		LD 	(sektrk),BC	; Set track passed from BDOS in register BC.
0632   EA78 C9          		RET
0633   EA79             
0634   EA79             ;------------------------------------------------------------------------------------------------
0635   EA79 ED 43 1F FD setsec:		LD 	(seksec),BC	; Set sector passed from BDOS in register BC.
0636   EA7D C9          		RET
0637   EA7E             
0638   EA7E             ;------------------------------------------------------------------------------------------------
0639   EA7E ED 43 31 FD setdma:		LD 	(dmaAddr),BC	; Set DMA ADDress given by registers BC.
0640   EA82 C9          		RET
0641   EA83             
0642   EA83             ;------------------------------------------------------------------------------------------------
0643   EA83 C5          sectran:	PUSH 	BC
0644   EA84 E1          		POP 	HL
0645   EA85 C9          		RET
0646   EA86             
0647   EA86             ;------------------------------------------------------------------------------------------------
0648   EA86             read:
0649   EA86             		;read the selected CP/M sector
0650   EA86 AF          		xor	a
0651   EA87 32 28 FD    		ld	(unacnt),a
0652   EA8A 3E 01       		ld	a,1
0653   EA8C 32 2F FD    		ld	(readop),a		;read operation
0654   EA8F 32 2E FD    		ld	(rsflag),a		;must read data
0655   EA92 3E 02       		ld	a,wrual
0656   EA94 32 30 FD    		ld	(wrtype),a		;treat as unalloc
0657   EA97 C3 01 EB    		jp	rwoper			;to perform the read
0658   EA9A             
0659   EA9A             
0660   EA9A             ;------------------------------------------------------------------------------------------------
0661   EA9A             write:
0662   EA9A             		;write the selected CP/M sector
0663   EA9A AF          		xor	a		;0 to accumulator
0664   EA9B 32 2F FD    		ld	(readop),a	;not a read operation
0665   EA9E 79          		ld	a,c		;write type in c
0666   EA9F 32 30 FD    		ld	(wrtype),a
0667   EAA2 FE 02       		cp	wrual		;write unallocated?
0668   EAA4 20 17       		jr	nz,chkuna	;check for unalloc
0669   EAA6             ;
0670   EAA6             ;		write to unallocated, set parameters
0671   EAA6 3E 20       		ld	a,blksiz/128	;next unalloc recs
0672   EAA8 32 28 FD    		ld	(unacnt),a
0673   EAAB 3A 1C FD    		ld	a,(sekdsk)		;disk to seek
0674   EAAE 32 29 FD    		ld	(unadsk),a		;unadsk = sekdsk
0675   EAB1 2A 1D FD    		ld	hl,(sektrk)
0676   EAB4 22 2A FD    		ld	(unatrk),hl		;unatrk = sectrk
0677   EAB7 3A 1F FD    		ld	a,(seksec)
0678   EABA 32 2C FD    		ld	(unasec),a		;unasec = seksec
0679   EABD             ;
0680   EABD             chkuna:
0681   EABD             ;		check for write to unallocated sector
0682   EABD 3A 28 FD    		ld	a,(unacnt)		;any unalloc remain?
0683   EAC0 B7          		or	a	
0684   EAC1 28 36       		jr	z,alloc		;skip if not
0685   EAC3             ;
0686   EAC3             ;		more unallocated records remain
0687   EAC3 3D          		dec	a		;unacnt = unacnt-1
0688   EAC4 32 28 FD    		ld	(unacnt),a
0689   EAC7 3A 1C FD    		ld	a,(sekdsk)		;same disk?
0690   EACA 21 29 FD    		ld	hl,unadsk
0691   EACD BE          		cp	(hl)		;sekdsk = unadsk?
0692   EACE C2 F9 EA    		jp	nz,alloc		;skip if not
0693   EAD1             ;
0694   EAD1             ;		disks are the same
0695   EAD1 21 2A FD    		ld	hl,unatrk
0696   EAD4 CD 98 EB    		call	sektrkcmp	;sektrk = unatrk?
0697   EAD7 C2 F9 EA    		jp	nz,alloc		;skip if not
0698   EADA             ;
0699   EADA             ;		tracks are the same
0700   EADA 3A 1F FD    		ld	a,(seksec)		;same sector?
0701   EADD 21 2C FD    		ld	hl,unasec
0702   EAE0 BE          		cp	(hl)		;seksec = unasec?
0703   EAE1 C2 F9 EA    		jp	nz,alloc		;skip if not
0704   EAE4             ;
0705   EAE4             ;		match, move to next sector for future ref
0706   EAE4 34          		inc	(hl)		;unasec = unasec+1
0707   EAE5 7E          		ld	a,(hl)		;end of track?
0708   EAE6 FE 80       		cp	cpmspt		;count CP/M sectors
0709   EAE8 38 09       		jr	c,noovf		;skip if no overflow
0710   EAEA             ;
0711   EAEA             ;		overflow to next track
0712   EAEA 36 00       		ld	(hl),0		;unasec = 0
0713   EAEC 2A 2A FD    		ld	hl,(unatrk)
0714   EAEF 23          		inc	hl
0715   EAF0 22 2A FD    		ld	(unatrk),hl		;unatrk = unatrk+1
0716   EAF3             ;
0717   EAF3             noovf:
0718   EAF3             		;match found, mark as unnecessary read
0719   EAF3 AF          		xor	a		;0 to accumulator
0720   EAF4 32 2E FD    		ld	(rsflag),a		;rsflag = 0
0721   EAF7 18 08       		jr	rwoper		;to perform the write
0722   EAF9             ;
0723   EAF9             alloc:
0724   EAF9             		;not an unallocated record, requires pre-read
0725   EAF9 AF          		xor	a		;0 to accum
0726   EAFA 32 28 FD    		ld	(unacnt),a		;unacnt = 0
0727   EAFD 3C          		inc	a		;1 to accum
0728   EAFE 32 2E FD    		ld	(rsflag),a		;rsflag = 1
0729   EB01             
0730   EB01             ;------------------------------------------------------------------------------------------------
0731   EB01             rwoper:
0732   EB01             		;enter here to perform the read/write
0733   EB01 AF          		xor	a		;zero to accum
0734   EB02 32 2D FD    		ld	(erflag),a		;no errors (yet)
0735   EB05 3A 1F FD    		ld	a,(seksec)		;compute host sector
0736   EB08 B7          		or	a		;carry = 0
0737   EB09 1F          		rra			;shift right
0738   EB0A B7          		or	a		;carry = 0
0739   EB0B 1F          		rra			;shift right
0740   EB0C 32 25 FD    		ld	(sekhst),a		;host sector to seek
0741   EB0F             ;
0742   EB0F             ;		active host sector?
0743   EB0F 21 26 FD    		ld	hl,hstact	;host active flag
0744   EB12 7E          		ld	a,(hl)
0745   EB13 36 01       		ld	(hl),1		;always becomes 1
0746   EB15 B7          		or	a		;was it already?
0747   EB16 28 21       		jr	z,filhst		;fill host if not
0748   EB18             ;
0749   EB18             ;		host buffer active, same as seek buffer?
0750   EB18 3A 1C FD    		ld	a,(sekdsk)
0751   EB1B 21 21 FD    		ld	hl,hstdsk	;same disk?
0752   EB1E BE          		cp	(hl)		;sekdsk = hstdsk?
0753   EB1F 20 11       		jr	nz,nomatch
0754   EB21             ;
0755   EB21             ;		same disk, same track?
0756   EB21 21 22 FD    		ld	hl,hsttrk
0757   EB24 CD 98 EB    		call	sektrkcmp	;sektrk = hsttrk?
0758   EB27 20 09       		jr	nz,nomatch
0759   EB29             ;
0760   EB29             ;		same disk, same track, same buffer?
0761   EB29 3A 25 FD    		ld	a,(sekhst)
0762   EB2C 21 24 FD    		ld	hl,hstsec	;sekhst = hstsec?
0763   EB2F BE          		cp	(hl)
0764   EB30 28 24       		jr	z,match		;skip if match
0765   EB32             ;
0766   EB32             nomatch:
0767   EB32             		;proper disk, but not correct sector
0768   EB32 3A 27 FD    		ld	a,(hstwrt)		;host written?
0769   EB35 B7          		or	a
0770   EB36 C4 40 EC    		call	nz,writehst	;clear host buff
0771   EB39             ;
0772   EB39             filhst:
0773   EB39             		;may have to fill the host buffer
0774   EB39 3A 1C FD    		ld	a,(sekdsk)
0775   EB3C 32 21 FD    		ld	(hstdsk),a
0776   EB3F 2A 1D FD    		ld	hl,(sektrk)
0777   EB42 22 22 FD    		ld	(hsttrk),hl
0778   EB45 3A 25 FD    		ld	a,(sekhst)
0779   EB48 32 24 FD    		ld	(hstsec),a
0780   EB4B 3A 2E FD    		ld	a,(rsflag)		;need to read?
0781   EB4E B7          		or	a
0782   EB4F C4 17 EC    		call	nz,readhst		;yes, if 1
0783   EB52 AF          		xor	a		;0 to accum
0784   EB53 32 27 FD    		ld	(hstwrt),a		;no pending write
0785   EB56             ;
0786   EB56             match:
0787   EB56             		;copy data to or from buffer
0788   EB56 3A 1F FD    		ld	a,(seksec)		;mask buffer number
0789   EB59 E6 03       		and	secmsk		;least signif bits
0790   EB5B 6F          		ld	l,a		;ready to shift
0791   EB5C 26 00       		ld	h,0		;double count
0792   EB5E 29          		add	hl,hl
0793   EB5F 29          		add	hl,hl
0794   EB60 29          		add	hl,hl
0795   EB61 29          		add	hl,hl
0796   EB62 29          		add	hl,hl
0797   EB63 29          		add	hl,hl
0798   EB64 29          		add	hl,hl
0799   EB65             ;		hl has relative host buffer address
0800   EB65 11 33 FD    		ld	de,hstbuf
0801   EB68 19          		add	hl,de		;hl = host address
0802   EB69 EB          		ex	de,hl			;now in DE
0803   EB6A 2A 31 FD    		ld	hl,(dmaAddr)		;get/put CP/M data
0804   EB6D 0E 80       		ld	c,128		;length of move
0805   EB6F 3A 2F FD    		ld	a,(readop)		;which way?
0806   EB72 B7          		or	a
0807   EB73 20 06       		jr	nz,rwmove		;skip if read
0808   EB75             ;
0809   EB75             ;	write operation, mark and switch direction
0810   EB75 3E 01       		ld	a,1
0811   EB77 32 27 FD    		ld	(hstwrt),a		;hstwrt = 1
0812   EB7A EB          		ex	de,hl			;source/dest swap
0813   EB7B             ;
0814   EB7B             rwmove:
0815   EB7B             		;C initially 128, DE is source, HL is dest
0816   EB7B 1A          		ld	a,(de)		;source character
0817   EB7C 13          		inc	de
0818   EB7D 77          		ld	(hl),a		;to dest
0819   EB7E 23          		inc	hl
0820   EB7F 0D          		dec	c		;loop 128 times
0821   EB80 20 F9       		jr	nz,rwmove
0822   EB82             ;
0823   EB82             ;		data has been moved to/from host buffer
0824   EB82 3A 30 FD    		ld	a,(wrtype)		;write type
0825   EB85 FE 01       		cp	wrdir		;to directory?
0826   EB87 3A 2D FD    		ld	a,(erflag)		;in case of errors
0827   EB8A C0          		ret	nz			;no further processing
0828   EB8B             ;
0829   EB8B             ;		clear host buffer for directory write
0830   EB8B B7          		or	a		;errors?
0831   EB8C C0          		ret	nz			;skip if so
0832   EB8D AF          		xor	a		;0 to accum
0833   EB8E 32 27 FD    		ld	(hstwrt),a		;buffer written
0834   EB91 CD 40 EC    		call	writehst
0835   EB94 3A 2D FD    		ld	a,(erflag)
0836   EB97 C9          		ret
0837   EB98             
0838   EB98             ;------------------------------------------------------------------------------------------------
0839   EB98             ;Utility subroutine for 16-bit compare
0840   EB98             sektrkcmp:
0841   EB98             		;HL = .unatrk or .hsttrk, compare with sektrk
0842   EB98 EB          		ex	de,hl
0843   EB99 21 1D FD    		ld	hl,sektrk
0844   EB9C 1A          		ld	a,(de)		;low byte compare
0845   EB9D BE          		cp	(HL)		;same?
0846   EB9E C0          		ret	nz			;return if not
0847   EB9F             ;		low bytes equal, test high 1s
0848   EB9F 13          		inc	de
0849   EBA0 23          		inc	hl
0850   EBA1 1A          		ld	a,(de)
0851   EBA2 BE          		cp	(hl)	;sets flags
0852   EBA3 C9          		ret
0853   EBA4             
0854   EBA4             ;================================================================================================
0855   EBA4             ; Convert track/head/sector into LBA for physical access to the disk
0856   EBA4             ;================================================================================================
0857   EBA4             setLBAaddr:	
0858   EBA4 2A 22 FD    		LD	HL,(hsttrk)
0859   EBA7 CB 05       		RLC	L
0860   EBA9 CB 05       		RLC	L
0861   EBAB CB 05       		RLC	L
0862   EBAD CB 05       		RLC	L
0863   EBAF CB 05       		RLC	L
0864   EBB1 7D          		LD	A,L
0865   EBB2 E6 E0       		AND	0E0H
0866   EBB4 6F          		LD	L,A
0867   EBB5 3A 24 FD    		LD	A,(hstsec)
0868   EBB8 85          		ADD	A,L
0869   EBB9 32 18 FD    		LD	(lba0),A
0870   EBBC             
0871   EBBC 2A 22 FD    		LD	HL,(hsttrk)
0872   EBBF CB 0D       		RRC	L
0873   EBC1 CB 0D       		RRC	L
0874   EBC3 CB 0D       		RRC	L
0875   EBC5 7D          		LD	A,L
0876   EBC6 E6 1F       		AND	01FH
0877   EBC8 6F          		LD	L,A
0878   EBC9 CB 04       		RLC	H
0879   EBCB CB 04       		RLC	H
0880   EBCD CB 04       		RLC	H
0881   EBCF CB 04       		RLC	H
0882   EBD1 CB 04       		RLC	H
0883   EBD3 7C          		LD	A,H
0884   EBD4 E6 20       		AND	020H
0885   EBD6 67          		LD	H,A
0886   EBD7 3A 21 FD    		LD	A,(hstdsk)
0887   EBDA CB 07       		RLC	a
0888   EBDC CB 07       		RLC	a
0889   EBDE CB 07       		RLC	a
0890   EBE0 CB 07       		RLC	a
0891   EBE2 CB 07       		RLC	a
0892   EBE4 CB 07       		RLC	a
0893   EBE6 E6 C0       		AND	0C0H
0894   EBE8 84          		ADD	A,H
0895   EBE9 85          		ADD	A,L
0896   EBEA 32 19 FD    		LD	(lba1),A
0897   EBED             		
0898   EBED             
0899   EBED 3A 21 FD    		LD	A,(hstdsk)
0900   EBF0 CB 0F       		RRC	A
0901   EBF2 CB 0F       		RRC	A
0902   EBF4 E6 03       		AND	03H
0903   EBF6 32 1A FD    		LD	(lba2),A
0904   EBF9             
0905   EBF9             ; LBA Mode using drive 0 = E0
0906   EBF9 3E E0       		LD	a,0E0H
0907   EBFB 32 1B FD    		LD	(lba3),A
0908   EBFE             
0909   EBFE             
0910   EBFE 3A 18 FD    		LD	A,(lba0)
0911   EC01 D3 B3       		OUT 	(CF_LBA0),A
0912   EC03             
0913   EC03 3A 19 FD    		LD	A,(lba1)
0914   EC06 D3 B4       		OUT 	(CF_LBA1),A
0915   EC08             
0916   EC08 3A 1A FD    		LD	A,(lba2)
0917   EC0B D3 B5       		OUT 	(CF_LBA2),A
0918   EC0D             
0919   EC0D 3A 1B FD    		LD	A,(lba3)
0920   EC10 D3 B6       		OUT 	(CF_LBA3),A
0921   EC12             
0922   EC12 3E 01       		LD 	A,1
0923   EC14 D3 B2       		OUT 	(CF_SECCOUNT),A
0924   EC16             
0925   EC16 C9          		RET				
0926   EC17             
0927   EC17             ;================================================================================================
0928   EC17             ; Read physical sector from host
0929   EC17             ;================================================================================================
0930   EC17             readhst:
0931   EC17 F5          		PUSH 	AF
0932   EC18 C5          		PUSH 	BC
0933   EC19 E5          		PUSH 	HL
0934   EC1A             
0935   EC1A CD 69 EC    		CALL 	cfWait
0936   EC1D             
0937   EC1D CD A4 EB    		CALL 	setLBAaddr
0938   EC20             
0939   EC20 3E 20       		LD 	A,CF_READ_SEC
0940   EC22 D3 B7       		OUT 	(CF_COMMAND),A
0941   EC24             
0942   EC24 CD 69 EC    		CALL 	cfWait
0943   EC27             
0944   EC27 0E 04       		LD 	c,4
0945   EC29 21 33 FD    		LD 	HL,hstbuf
0946   EC2C             rd4secs:
0947   EC2C 06 80       		LD 	b,128
0948   EC2E             rdByte:
0949   EC2E DB B0       		in 	A,(CF_DATA)
0950   EC30 77          		LD 	(HL),A
0951   EC31 23          		iNC 	HL
0952   EC32 05          		dec 	b
0953   EC33 20 F9       		JR 	NZ, rdByte
0954   EC35 0D          		dec 	c
0955   EC36 20 F4       		JR 	NZ,rd4secs
0956   EC38             
0957   EC38 E1          		POP 	HL
0958   EC39 C1          		POP 	BC
0959   EC3A F1          		POP 	AF
0960   EC3B             
0961   EC3B AF          		XOR 	a
0962   EC3C 32 2D FD    		ld	(erflag),a
0963   EC3F C9          		RET
0964   EC40             
0965   EC40             ;================================================================================================
0966   EC40             ; Write physical sector to host
0967   EC40             ;================================================================================================
0968   EC40             writehst:
0969   EC40 F5          		PUSH 	AF
0970   EC41 C5          		PUSH 	BC
0971   EC42 E5          		PUSH 	HL
0972   EC43             
0973   EC43 CD 69 EC    		CALL 	cfWait
0974   EC46             
0975   EC46 CD A4 EB    		CALL 	setLBAaddr
0976   EC49             
0977   EC49 3E 30       		LD 	A,CF_WRITE_SEC
0978   EC4B D3 B7       		OUT 	(CF_COMMAND),A
0979   EC4D             
0980   EC4D CD 69 EC    		CALL 	cfWait
0981   EC50             
0982   EC50 0E 04       		LD 	c,4
0983   EC52 21 33 FD    		LD 	HL,hstbuf
0984   EC55             wr4secs:
0985   EC55 06 80       		LD 	b,128
0986   EC57 7E          wrByte:		LD 	A,(HL)
0987   EC58 D3 B0       		OUT 	(CF_DATA),A
0988   EC5A 23          		iNC 	HL
0989   EC5B 05          		dec 	b
0990   EC5C 20 F9       		JR 	NZ, wrByte
0991   EC5E             
0992   EC5E 0D          		dec 	c
0993   EC5F 20 F4       		JR 	NZ,wr4secs
0994   EC61             
0995   EC61 E1          		POP 	HL
0996   EC62 C1          		POP 	BC
0997   EC63 F1          		POP 	AF
0998   EC64             
0999   EC64 AF          		XOR 	a
1000   EC65 32 2D FD    		ld	(erflag),a
1001   EC68 C9          		RET
1002   EC69             
1003   EC69             ;================================================================================================
1004   EC69             ; Wait for disk to be ready (busy=0,ready=1)
1005   EC69             ;================================================================================================
1006   EC69             cfWait:
1007   EC69 F5          		PUSH 	AF
1008   EC6A             cfWait1:
1009   EC6A DB B7       		in 	A,(CF_STATUS)
1010   EC6C E6 80       		AND 	080H
1011   EC6E FE 80       		cp 	080H
1012   EC70 28 F8       		JR	Z,cfWait1
1013   EC72 F1          		POP 	AF
1014   EC73 C9          		RET
1015   EC74             
1016   EC74             ;================================================================================================
1017   EC74             ; Print (on console) a sequence of characters ending with zero
1018   EC74             ;================================================================================================
1019   EC74             PRINTSEQ:
1020   EC74 E3          		EX 	(SP),HL 		; Push HL and put RET address into HL
1021   EC75 F5          		PUSH 	AF
1022   EC76 C5          		PUSH 	BC
1023   EC77             NEXTCHAR:
1024   EC77 7E          		LD 	A,(HL)
1025   EC78 FE 00       		CP	0
1026   EC7A 28 07       		JR	Z,ENDOFPRINT
1027   EC7C 4F          		LD  	C,A
1028   EC7D CD FC E8    		CALL 	CONOUT		; Print to console
1029   EC80 23          		INC 	HL
1030   EC81 18 F4       		JR	NEXTCHAR
1031   EC83             ENDOFPRINT:
1032   EC83 23          		INC 	HL 			; Get past "null" terminator
1033   EC84 C1          		POP 	BC
1034   EC85 F1          		POP 	AF
1035   EC86 E3          		EX 	(SP),HL 		; Push new RET address on stack and restore HL
1036   EC87 C9          		RET
1037   EC88             
1038   EC88             ;================================================================================================
1039   EC88             ; Data storage
1040   EC88             ;================================================================================================
1041   EC88             dirbuf: 	.ds 128 		;scratch directory area
1042   ED08             alv00: 		.ds 257			;allocation vector 0
1043   EE09             alv01: 		.ds 257			;allocation vector 1
1044   EF0A             alv02: 		.ds 257			;allocation vector 2
1045   F00B             alv03: 		.ds 257			;allocation vector 3
1046   F10C             alv04: 		.ds 257			;allocation vector 4
1047   F20D             alv05: 		.ds 257			;allocation vector 5
1048   F30E             alv06: 		.ds 257			;allocation vector 6
1049   F40F             alv07: 		.ds 257			;allocation vector 7
1050   F510             alv08: 		.ds 257			;allocation vector 8
1051   F611             alv09: 		.ds 257			;allocation vector 9
1052   F712             alv10: 		.ds 257			;allocation vector 10
1053   F813             alv11: 		.ds 257			;allocation vector 11
1054   F914             alv12: 		.ds 257			;allocation vector 12
1055   FA15             alv13: 		.ds 257			;allocation vector 13
1056   FB16             alv14: 		.ds 257			;allocation vector 14
1057   FC17             alv15: 		.ds 257			;allocation vector 15
1058   FD18             
1059   FD18 00          lba0		.DB	00h
1060   FD19 00          lba1		.DB	00h
1061   FD1A 00          lba2		.DB	00h
1062   FD1B 00          lba3		.DB	00h
1063   FD1C             
1064   FD1C             sekdsk:		.ds	1		;seek disk number
1065   FD1D             sektrk:		.ds	2		;seek track number
1066   FD1F             seksec:		.ds	2		;seek sector number
1067   FD21             ;
1068   FD21             hstdsk:		.ds	1		;host disk number
1069   FD22             hsttrk:		.ds	2		;host track number
1070   FD24             hstsec:		.ds	1		;host sector number
1071   FD25             ;
1072   FD25             sekhst:		.ds	1		;seek shr secshf
1073   FD26             hstact:		.ds	1		;host active flag
1074   FD27             hstwrt:		.ds	1		;host written flag
1075   FD28             ;
1076   FD28             unacnt:		.ds	1		;unalloc rec cnt
1077   FD29             unadsk:		.ds	1		;last unalloc disk
1078   FD2A             unatrk:		.ds	2		;last unalloc track
1079   FD2C             unasec:		.ds	1		;last unalloc sector
1080   FD2D             ;
1081   FD2D             erflag:		.ds	1		;error reporting
1082   FD2E             rsflag:		.ds	1		;read sector flag
1083   FD2F             readop:		.ds	1		;1 if read operation
1084   FD30             wrtype:		.ds	1		;write operation type
1085   FD31             dmaAddr:	.ds	2		;last dma address
1086   FD33             hstbuf:		.ds	512		;host buffer
1087   FF33             hstBufEnd:	.EQU	$
1088   FF33             
1089   FF33             BUFINI		.EQU	$
1090   FF33             			.DS	050H
1091   FF83             BUFEND		.EQU	$
1092   FF83             WRPTR:		.DS	2			; write pointer
1093   FF85             RDPTR:		.DS	2			; read pointer
1094   FF87             
1095   FF87             			.DS	020h			; Start of BIOS stack area.
1096   FFA7             BIOSSTACK:	.EQU	$
1097   FFA7             
1098   FFA7             biosEnd:	.EQU	$
1099   FFA7             
1100   FFA7             		.END
tasm: Number of errors = 0
