0001   0000             ;==================================================================================
0002   0000             ; Contents of this file are copyright Grant Searle
0003   0000             ; Blocking/unblocking routines are the published version by Digital Research
0004   0000             ; (bugfixed, as found on the web)
0005   0000             ;
0006   0000             ; You have permission to use this for NON COMMERCIAL USE ONLY
0007   0000             ;
0008   0000             ; Customized by Kaltchuk for use with Z80 Modular Computer, december/2020.
0009   0000             ; CP/M is booted from ROM.
0010   0000             ;
0011   0000             ; 04/02/21 - version B corrects a bug in wboot.
0012   0000             ; 09/06/21 - version C sets serial comm to 38.4kbps and
0013   0000             ;            puts "IOBYTE set" in the cold boot.
0014   0000             ; 12/06/21 - version D fixes a bug with CONIN.
0015   0000             ; 16/06/21 - version 2.0 is mainly about the new serial communication card,
0016   0000             ;            which doesn't use interrupt signal because all the buffering is
0017   0000             ;            done by the card instead of the CPU. So check CONST, CONIN and
0018   0000             ;            CONOUT. There are also some "cosmetic" changes on the boot msg.
0019   0000             ;==================================================================================
0020   0000             #INCLUDE	"equates.h"
0001+  0000             
0002+  0000             CCP				.EQU	0D000h			; Base of CCP (or Monitor).
0003+  0000             BIOS			.EQU	0E620h			; Base of BIOS.
0004+  0000             ROM_CCP			.EQU	CCP-0C000h		; Base of CCP in ROM
0005+  0000             ROM_BIOS		.EQU	BIOS-0C000h		; Base of BIOS in ROM
0006+  0000             
0007+  0000             ccp				.EQU	CCP
0008+  0000             bios			.EQU	BIOS
0021   0000             
0022   0000             ; Set CP/M low memory data, vector and buffer addresses.
0023   0000             
0024   0000             iobyte			.EQU	03h				; Intel standard I/O definition byte.
0025   0000             userdrv			.EQU	04h				; Current user number and drive.
0026   0000             tpabuf			.EQU	80h				; Default I/O buffer and command line storage.
0027   0000             
0028   0000             blksiz			.equ	4096			;CP/M allocation size
0029   0000             hstsiz			.equ	512				;host disk sector size
0030   0000             hstspt			.equ	32				;host disk sectors/trk
0031   0000             hstblk			.equ	hstsiz/128		;CP/M sects/host buff
0032   0000             cpmspt			.equ	hstblk * hstspt	;CP/M sectors/track
0033   0000             secmsk			.equ	hstblk-1		;sector mask
0034   0000             										;compute sector mask
0035   0000             ;secshf			.equ	2				;log2(hstblk)
0036   0000             	
0037   0000             wrall			.equ	0				;write to allocated
0038   0000             wrdir			.equ	1				;write to directory
0039   0000             wrual			.equ	2				;write to unallocated
0040   0000             
0041   0000             ; MEM card stuff
0042   0000             MEM_ADDR		.EQU	0F0H			; MEM card address
0043   0000             ROM_RAM0		.EQU	MEM_ADDR		; ROM + RAM bank 0
0044   0000             NOROM_RAM0		.EQU	MEM_ADDR+1		; no ROM + RAM bank 0 (full RAM)
0045   0000             ROM_RAM1		.EQU	MEM_ADDR+2		; ROM + RAM bank 1
0046   0000             NOROM_RAM1		.EQU	MEM_ADDR+3		; no ROM + RAM bank 1 (full RAM)
0047   0000             
0048   0000             ; USART card stuff (addr00=serial 0 or 1, addr01=cmd/status or data)
0049   0000             USART_ADDR		.EQU	0D0H			; USART card address
0050   0000             SER0_DAT		.EQU	USART_ADDR+2	; Serial 0 data addr
0051   0000             SER0_CMD		.EQU	USART_ADDR		; Serial 0 command addr
0052   0000             SER0_STA		.EQU	USART_ADDR		; Serial 0 status addr
0053   0000             
0054   0000             ; LCD card address list.
0055   0000             LCD_ADDR		.EQU	0E0H				; LCD card address
0056   0000             DAT_WR			.EQU	LCD_ADDR+1
0057   0000             DAT_RD			.EQU	LCD_ADDR+3
0058   0000             CMD_WR			.EQU	LCD_ADDR
0059   0000             CMD_RD			.EQU	LCD_ADDR+2
0060   0000             
0061   0000             
0062   0000             ; FLASH card stuff
0063   0000             FLASH_ADDR		.EQU	0B0H			; FLASH card address
0064   0000             CF_DATA			.EQU	(FLASH_ADDR+0)	; R/W
0065   0000             CF_FEATURES		.EQU	(FLASH_ADDR+1)	; W
0066   0000             CF_ERROR		.EQU	(FLASH_ADDR+1)	; R
0067   0000             CF_SECCOUNT		.EQU	(FLASH_ADDR+2)	; W
0068   0000             
0069   0000             CF_SECTOR		.EQU	(FLASH_ADDR+3)	; W
0070   0000             CF_CYL_LOW		.EQU	(FLASH_ADDR+4)	; W
0071   0000             CF_CYL_HI		.EQU	(FLASH_ADDR+5)	; W
0072   0000             CF_HEAD			.EQU	(FLASH_ADDR+6)	; W
0073   0000             
0074   0000             CF_LBA0			.EQU	(FLASH_ADDR+3)	; W
0075   0000             CF_LBA1			.EQU	(FLASH_ADDR+4)	; W
0076   0000             CF_LBA2			.EQU	(FLASH_ADDR+5)	; W
0077   0000             CF_LBA3			.EQU	(FLASH_ADDR+6)	; W
0078   0000             
0079   0000             CF_STATUS		.EQU	(FLASH_ADDR+7)	; R
0080   0000             CF_COMMAND		.EQU	(FLASH_ADDR+7)	; W
0081   0000             
0082   0000             ;CF Features
0083   0000             CF_8BIT			.EQU	1
0084   0000             CF_NOCACHE		.EQU	082H
0085   0000             
0086   0000             ;CF Commands
0087   0000             CF_READ_SEC		.EQU	020H
0088   0000             CF_WRITE_SEC	.EQU	030H
0089   0000             CF_SET_FEAT		.EQU 	0EFH
0090   0000             
0091   0000             ;================================================================================================
0092   0000             ; ASCII characters.
0093   0000             ;================================================================================================
0094   0000             NUL			.EQU	00H
0095   0000             LF			.EQU	0AH
0096   0000             FF			.EQU	0CH
0097   0000             CR			.EQU	0DH
0098   0000             DC1			.EQU	11H
0099   0000             DC2			.EQU	12H
0100   0000             DC3			.EQU	13H
0101   0000             DC4			.EQU	14H
0102   0000             ;================================================================================================
0103   0000             
0104   E620             		.ORG	bios					; BIOS origin.
0105   E620             
0106   E620             ;================================================================================================
0107   E620             ; BIOS jump table.
0108   E620             ;================================================================================================
0109   E620 C3 83 E7    		JP	boot						;  0 Initialize.
0110   E623 C3 37 E8    wboote:	JP	wboot						;  1 Warm boot.
0111   E626 C3 75 E8    		JP	CONST						;  2 Console status.
0112   E629 C3 7D E8    		JP	CONIN						;  3 Console input.
0113   E62C C3 87 E8    		JP	CONOUT						;  4 Console OUTput.
0114   E62F C3 94 E8    		JP	LIST						;  5 List OUTput.
0115   E632 C3 A1 E8    		JP	PUNCH						;  6 punch OUTput.
0116   E635 C3 91 E8    		JP	READER						;  7 Reader input.
0117   E638 C3 F3 E9    		JP	home						;  8 Home disk.
0118   E63B C3 CB E9    		JP	seldsk						;  9 Select disk.
0119   E63E C3 FF E9    		JP	settrk						; 10 Select track.
0120   E641 C3 04 EA    		JP	setsec						; 11 Select sector.
0121   E644 C3 09 EA    		JP	setdma						; 12 Set DMA ADDress.
0122   E647 C3 11 EA    		JP	read						; 13 Read 128 bytes.
0123   E64A C3 25 EA    		JP	write						; 14 Write 128 bytes.
0124   E64D C3 A4 E8    		JP	LISTST						; 15 List status.
0125   E650 C3 0E EA    		JP	sectran						; 16 Sector translate.
0126   E653 C3 FF EB    		JP	PRINTSEQ					; not a BIOS function
0127   E656             
0128   E656             ;================================================================================================
0129   E656             ; Disk parameter headers for disk 0 to 15
0130   E656             ;================================================================================================
0131   E656             dpbase:
0132   E656 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb0,0000h,alv00
0132   E65A 00 00 00 00 
0132   E65E 13 EC 56 E7 
0132   E662 00 00 93 EC 
0133   E666 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv01
0133   E66A 00 00 00 00 
0133   E66E 13 EC 65 E7 
0133   E672 00 00 94 ED 
0134   E676 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv02
0134   E67A 00 00 00 00 
0134   E67E 13 EC 65 E7 
0134   E682 00 00 95 EE 
0135   E686 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv03
0135   E68A 00 00 00 00 
0135   E68E 13 EC 65 E7 
0135   E692 00 00 96 EF 
0136   E696 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv04
0136   E69A 00 00 00 00 
0136   E69E 13 EC 65 E7 
0136   E6A2 00 00 97 F0 
0137   E6A6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv05
0137   E6AA 00 00 00 00 
0137   E6AE 13 EC 65 E7 
0137   E6B2 00 00 98 F1 
0138   E6B6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv06
0138   E6BA 00 00 00 00 
0138   E6BE 13 EC 65 E7 
0138   E6C2 00 00 99 F2 
0139   E6C6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv07
0139   E6CA 00 00 00 00 
0139   E6CE 13 EC 65 E7 
0139   E6D2 00 00 9A F3 
0140   E6D6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv08
0140   E6DA 00 00 00 00 
0140   E6DE 13 EC 65 E7 
0140   E6E2 00 00 9B F4 
0141   E6E6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv09
0141   E6EA 00 00 00 00 
0141   E6EE 13 EC 65 E7 
0141   E6F2 00 00 9C F5 
0142   E6F6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv10
0142   E6FA 00 00 00 00 
0142   E6FE 13 EC 65 E7 
0142   E702 00 00 9D F6 
0143   E706 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv11
0143   E70A 00 00 00 00 
0143   E70E 13 EC 65 E7 
0143   E712 00 00 9E F7 
0144   E716 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv12
0144   E71A 00 00 00 00 
0144   E71E 13 EC 65 E7 
0144   E722 00 00 9F F8 
0145   E726 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv13
0145   E72A 00 00 00 00 
0145   E72E 13 EC 65 E7 
0145   E732 00 00 A0 F9 
0146   E736 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv14
0146   E73A 00 00 00 00 
0146   E73E 13 EC 65 E7 
0146   E742 00 00 A1 FA 
0147   E746 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpbLast,0000h,alv15
0147   E74A 00 00 00 00 
0147   E74E 13 EC 74 E7 
0147   E752 00 00 A2 FB 
0148   E756             
0149   E756             ; First drive has a reserved track for CP/M
0150   E756             dpb0:
0151   E756 80 00       		.DW 128 ;SPT - sectors per track
0152   E758 05          		.DB 5   ;BSH - block shift factor
0153   E759 1F          		.DB 31  ;BLM - block mask
0154   E75A 01          		.DB 1   ;EXM - Extent mask
0155   E75B FB 07       		.DW 2043 ; (2047-4) DSM - Storage size (blocks - 1)
0156   E75D FF 01       		.DW 511 ;DRM - Number of directory entries - 1
0157   E75F F0          		.DB 240 ;AL0 - 1 bit set per directory block
0158   E760 00          		.DB 0   ;AL1 -            "
0159   E761 00 00       		.DW 0   ;CKS - DIR check vector size (DRM+1)/4 (0=fixed disk)
0160   E763 01 00       		.DW 1   ;ON  - Reserved tracks
0161   E765             
0162   E765             dpb:
0163   E765 80 00       		.DW 128 ;SPT - sectors per track
0164   E767 05          		.DB 5   ;BSH - block shift factor
0165   E768 1F          		.DB 31  ;BLM - block mask
0166   E769 01          		.DB 1   ;EXM - Extent mask
0167   E76A FF 07       		.DW 2047 ;DSM - Storage size (blocks - 1)
0168   E76C FF 01       		.DW 511 ;DRM - Number of directory entries - 1
0169   E76E F0          		.DB 240 ;AL0 - 1 bit set per directory block
0170   E76F 00          		.DB 0   ;AL1 -            "
0171   E770 00 00       		.DW 0   ;CKS - DIR check vector size (DRM+1)/4 (0=fixed disk)
0172   E772 00 00       		.DW 0   ;OFF - Reserved tracks
0173   E774             
0174   E774             ; Last drive is smaller because CF is never full 64MB or 128MB
0175   E774             dpbLast:
0176   E774 80 00       		.DW 128 ;SPT - sectors per track
0177   E776 05          		.DB 5   ;BSH - block shift factor
0178   E777 1F          		.DB 31  ;BLM - block mask
0179   E778 01          		.DB 1   ;EXM - Extent mask
0180   E779 FF 01       		.DW 511 ;DSM - Storage size (blocks - 1)  ; 511 = 2MB (for 128MB card), 1279 = 5MB (for 64MB card)
0181   E77B FF 01       		.DW 511 ;DRM - Number of directory entries - 1
0182   E77D F0          		.DB 240 ;AL0 - 1 bit set per directory block
0183   E77E 00          		.DB 0   ;AL1 -            "
0184   E77F 00 00       		.DW 0   ;CKS - DIR check vector size (DRM+1)/4 (0=fixed disk)
0185   E781 00 00       		.DW 0   ;OFF - Reserved tracks
0186   E783             
0187   E783             ;================================================================================================
0188   E783             ; Cold boot
0189   E783             ;================================================================================================
0190   E783             
0191   E783             boot:
0192   E783 F3          		DI						; Disable interrupts.
0193   E784 31 DE FE    		LD	SP,BIOSSTACK		; Set default stack.
0194   E787             
0195   E787 D3 F1       		OUT (NOROM_RAM0),A		; Turn off ROM. Doesn't matter what we output
0196   E789             
0197   E789 CD F4 EB    		CALL	cfWait			; Initialize FLASH
0198   E78C 3E 01       		LD 	A,CF_8BIT			; Set IDE to be 8bit
0199   E78E D3 B1       		OUT	(CF_FEATURES),A
0200   E790 3E EF       		LD	A,CF_SET_FEAT
0201   E792 D3 B7       		OUT	(CF_COMMAND),A
0202   E794             
0203   E794 CD F4 EB    		CALL	cfWait
0204   E797 3E 82       		LD 	A,CF_NOCACHE		; No write cache
0205   E799 D3 B1       		OUT	(CF_FEATURES),A
0206   E79B 3E EF       		LD	A,CF_SET_FEAT
0207   E79D D3 B7       		OUT	(CF_COMMAND),A
0208   E79F             
0209   E79F AF          		XOR	A
0210   E7A0 32 04 00    		LD	(userdrv),A			; set drive byte to A:
0211   E7A3 32 03 00    		LD	(iobyte),A			; Set IOBYTE to 00
0212   E7A6             
0213   E7A6 CD FF EB    		CALL	PRINTSEQ
0214   E7A9 0D 0A 5A 38 		.DB CR,LF,"Z80 Modular Computer by Kaltchuk 2020.",CR,LF
0214   E7AD 30 20 4D 6F 
0214   E7B1 64 75 6C 61 
0214   E7B5 72 20 43 6F 
0214   E7B9 6D 70 75 74 
0214   E7BD 65 72 20 62 
0214   E7C1 79 20 4B 61 
0214   E7C5 6C 74 63 68 
0214   E7C9 75 6B 20 32 
0214   E7CD 30 32 30 2E 
0214   E7D1 0D 0A 
0215   E7D3 42 49 4F 53 		.DB "BIOS 2.0 - 128MB Compact Flash, LCD drive.",CR,LF
0215   E7D7 20 32 2E 30 
0215   E7DB 20 2D 20 31 
0215   E7DF 32 38 4D 42 
0215   E7E3 20 43 6F 6D 
0215   E7E7 70 61 63 74 
0215   E7EB 20 46 6C 61 
0215   E7EF 73 68 2C 20 
0215   E7F3 4C 43 44 20 
0215   E7F7 64 72 69 76 
0215   E7FB 65 2E 0D 0A 
0216   E7FF 43 50 2F 4D 		.DB "CP/M 2.2+ Copyright 1979 (c) by Digital Research",CR,LF,CR,LF,0
0216   E803 20 32 2E 32 
0216   E807 2B 20 43 6F 
0216   E80B 70 79 72 69 
0216   E80F 67 68 74 20 
0216   E813 31 39 37 39 
0216   E817 20 28 63 29 
0216   E81B 20 62 79 20 
0216   E81F 44 69 67 69 
0216   E823 74 61 6C 20 
0216   E827 52 65 73 65 
0216   E82B 61 72 63 68 
0216   E82F 0D 0A 0D 0A 
0216   E833 00 
0217   E834             
0218   E834 C3 4A E8    		JP	gocpm
0219   E837             
0220   E837             ;================================================================================================
0221   E837             ; Warm boot
0222   E837             ;================================================================================================
0223   E837             
0224   E837             wboot:
0225   E837 F3          		DI						; Disable interrupts.
0226   E838 31 DE FE    		LD	SP,BIOSSTACK		; Set default stack.
0227   E83B             
0228   E83B D3 F0       		OUT (ROM_RAM0),A		; Turn on ROM. Doesn't matter what we output
0229   E83D             
0230   E83D 01 20 16    		LD	BC,BIOS-CCP			; Copy CP/M ROM (01000h) to RAM (0D000h)
0231   E840 11 00 D0    		LD	DE,CCP				; Don't copy the BIOS!!!
0232   E843 21 00 10    		LD	HL,ROM_CCP
0233   E846 ED B0       		LDIR
0234   E848             
0235   E848 D3 F1       		OUT (NOROM_RAM0),A		; Turn off ROM. Doesn't matter what we output
0236   E84A             
0237   E84A             
0238   E84A             ;================================================================================================
0239   E84A             ; Common code for cold and warm boot
0240   E84A             ;================================================================================================
0241   E84A             
0242   E84A             gocpm:
0243   E84A AF          		XOR	A					; 0 to accumulator
0244   E84B 32 B1 FC    		LD	(hstact),A			; host buffer inactive
0245   E84E 32 B3 FC    		LD	(unacnt),A			; clear unalloc count
0246   E851             
0247   E851 21 80 00    		LD	HL,tpabuf			; ADDress of BIOS DMA buffer.
0248   E854 22 BC FC    		LD	(dmaAddr),HL
0249   E857             		
0250   E857 3E C3       		LD	A,0C3h				; Opcode for 'JP'.
0251   E859 32 00 00    		LD	(00h),A				; Load at start of RAM.
0252   E85C 21 23 E6    		LD	HL,wboote			; ADDress of jump for a warm boot.
0253   E85F 22 01 00    		LD	(01h),HL
0254   E862 32 05 00    		LD	(05h),A				; Opcode for 'JP'.
0255   E865 2A 1E E6    		LD	HL,(BIOS-2)			; ADDress of jump for the BDOS.
0256   E868 22 06 00    		LD	(06h),HL
0257   E86B 3A 04 00    		LD	A,(userdrv)			; Save new drive number (0).
0258   E86E 4F          		LD	C,A					; Pass drive number in C.
0259   E86F             
0260   E86F ED 46       		IM	0
0261   E871 FB          		EI
0262   E872             	
0263   E872 C3 00 D0    		JP	ccp					; Start CP/M by jumping to the CCP.
0264   E875             ;================================================================================================
0265   E875             ; Console I/O routines
0266   E875             ;================================================================================================
0267   E875             ;================================================================================================
0268   E875             ; Console Status (Return A=0FFh if character waiting. Otherwise, A=0)
0269   E875             ;================================================================================================
0270   E875             CONST:
0271   E875 DB D0       		IN	A,(SER0_STA)
0272   E877 E6 02       		AND	02				; get only the inBuffer flag
0273   E879 C8          		RET	Z
0274   E87A 3E FF       		LD	A,0FFH
0275   E87C C9          	  	RET
0276   E87D             
0277   E87D             ;================================================================================================
0278   E87D             ; Console Input (Wait for input and return character in A)
0279   E87D             ;================================================================================================
0280   E87D             CONIN:
0281   E87D CD 75 E8    		CALL CONST
0282   E880 FE 00       		CP	0
0283   E882 28 F9       		JR	Z,CONIN
0284   E884 DB D2       		IN	A,(SER0_DAT)
0285   E886 C9          		RET					; Char read returns in A
0286   E887             
0287   E887             ;================================================================================================
0288   E887             ; Console Output (Send character in reg C)
0289   E887             ;================================================================================================
0290   E887             CONOUT:
0291   E887 DB D0       		IN	A,(SER0_STA)	; read USART status byte
0292   E889 E6 01       		AND	01				; get only the outBuffer flag
0293   E88B 20 FA       		JR	NZ,CONOUT
0294   E88D 79          		LD	A,C
0295   E88E D3 D2       		OUT	(SER0_DAT),A	; send character
0296   E890 C9          		RET
0297   E891             
0298   E891             ;================================================================================================
0299   E891             ; Reader Input
0300   E891             ;================================================================================================
0301   E891 C3 7D E8    READER:	JP CONIN	
0302   E894             
0303   E894             ;================================================================================================
0304   E894             ; List Output
0305   E894             ;================================================================================================
0306   E894 3A 03 00    LIST:		LD	A,(iobyte)
0307   E897 E6 C0       			AND	0C0H			; Get LIST portion of IOBYTE
0308   E899 FE C0       			CP	0C0H
0309   E89B CA B5 E8    			JP	Z,LCD
0310   E89E C3 87 E8    			JP CONOUT
0311   E8A1             
0312   E8A1             ;================================================================================================
0313   E8A1             ; Punch Output
0314   E8A1             ;================================================================================================
0315   E8A1 C3 87 E8    PUNCH:	JP CONOUT	
0316   E8A4             
0317   E8A4             ;================================================================================================
0318   E8A4             ; List Status (List = Console)
0319   E8A4             ;================================================================================================
0320   E8A4 3A 03 00    LISTST:		LD	A,(iobyte)
0321   E8A7 E6 C0       			AND	0C0H			; Get LIST portion of IOBYTE
0322   E8A9 FE C0       			CP	0C0H
0323   E8AB CA B1 E8    			JP	Z,LCDST
0324   E8AE C3 75 E8    			JP CONST
0325   E8B1             
0326   E8B1             ;================================================================================================
0327   E8B1             ; LCD STATUS. Return A=LCD_card_addr. A=0 if no card initialized.
0328   E8B1             ;================================================================================================
0329   E8B1 CD 24 E9    LCDST:		CALL BWAIT
0330   E8B4 C9          			RET
0331   E8B5             
0332   E8B5             ;================================================================================================
0333   E8B5             ; LCD OUTPUT. Send C to LCD, if C>1FH (printable range). 
0334   E8B5             ; Accepts also LF, CR and FF (Form Feed = clear LCD).
0335   E8B5             ; If C=DC1, initialize LCD card.
0336   E8B5             ; If C=DC2, position cursor as indicated in regB.
0337   E8B5             ;================================================================================================
0338   E8B5 E5          LCD:		PUSH HL
0339   E8B6 79          			LD	A,C
0340   E8B7 FE 14       			CP	20
0341   E8B9 FA C1 E8    			JP	M,ASCIILO
0342   E8BC CD 36 E9    			CALL LCDPUT
0343   E8BF 18 19       			JR	GETOUT
0344   E8C1 FE 0A       ASCIILO:	CP	LF
0345   E8C3 CC 56 E9    			CALL Z,LCDLF			; Line Feed
0346   E8C6 FE 0D       			CP	CR
0347   E8C8 CC 4A E9    			CALL Z,LCDCR			; Carriage Return
0348   E8CB FE 0C       			CP	FF
0349   E8CD CC 2C E9    			CALL Z,LCDCLEAR			; Form Feed, which is a 'clear LCD'
0350   E8D0 FE 11       			CP	DC1
0351   E8D2 CC DC E8    			CALL Z,LCDINIT			; Initialize LCD card.
0352   E8D5 FE 12       			CP	DC2
0353   E8D7 CC 3F E9    			CALL Z,LCDPOS			; Cursor reposition request. New position in regB
0354   E8DA E1          GETOUT:		POP	HL
0355   E8DB C9          			RET
0356   E8DC             
0357   E8DC             ;================================================================================================
0358   E8DC             ; Initialize LCD
0359   E8DC             ;================================================================================================
0360   E8DC 06 0F       LCDINIT:	LD	B,15			; wait 15ms
0361   E8DE CD A7 E9    			CALL DELAYMS
0362   E8E1 3E 30       			LD	A,030H			; write command 030h
0363   E8E3 D3 E0       			OUT	(CMD_WR),A
0364   E8E5 06 05       			LD	B,5				; wait 5ms
0365   E8E7 CD A7 E9    			CALL DELAYMS
0366   E8EA 3E 30       			LD	A,030H			; write command 030h
0367   E8EC D3 E0       			OUT	(CMD_WR),A
0368   E8EE 0E 14       			LD	C,20			; wait (5X20) 100us
0369   E8F0 CD B3 E9    			CALL DELAY5US
0370   E8F3 3E 30       			LD	A,030H			; write command 030h
0371   E8F5 D3 E0       			OUT	(CMD_WR),A
0372   E8F7 0E 14       			LD	C,20			; wait (5X20) 100us
0373   E8F9 CD B3 E9    			CALL DELAY5US
0374   E8FC 3E 38       			LD	A,038H			; write command 038h = function set (8-bits, 2-lines, 5x7dots)
0375   E8FE D3 E0       			OUT	(CMD_WR),A
0376   E900 CD 24 E9    			CALL BWAIT
0377   E903 3E 08       			LD	A,08H			; write command 08h = display (off)
0378   E905 D3 E0       			OUT	(CMD_WR),A
0379   E907 CD 24 E9    			CALL BWAIT
0380   E90A 3E 01       			LD	A,01H			; write command 01h = clear display
0381   E90C D3 E0       			OUT	(CMD_WR),A
0382   E90E CD 24 E9    			CALL BWAIT
0383   E911 3E 06       			LD	A,06H			; write command 06h = entry mode (increment)
0384   E913 D3 E0       			OUT	(CMD_WR),A
0385   E915 CD 24 E9    			CALL BWAIT
0386   E918 3E 0C       			LD	A,0CH			; write command 0Ch = display (on)
0387   E91A D3 E0       			OUT	(CMD_WR),A
0388   E91C 3E E0       			LD	A,LCD_ADDR
0389   E91E 32 BA E9    			LD	(LCDSTATUS),A
0390   E921 3E 00       			LD	A,0
0391   E923 C9          			RET
0392   E924             
0393   E924             ;================================================================================================
0394   E924             ; Wait until Busy flag = 0
0395   E924             ;================================================================================================
0396   E924 DB E2       BWAIT:		IN	A,(CMD_RD)
0397   E926 07          			RLCA
0398   E927 38 FB       			JR	C,BWAIT
0399   E929 CB 3F       			SRL	A
0400   E92B C9          			RET
0401   E92C             			
0402   E92C             ;================================================================================================
0403   E92C             ; Clear LCD and goto line 1, column 1.
0404   E92C             ;================================================================================================
0405   E92C CD 24 E9    LCDCLEAR:	CALL BWAIT
0406   E92F 3E 01       			LD	A,01H
0407   E931 D3 E0       			OUT	(CMD_WR),A
0408   E933 3E 00       			LD	A,0
0409   E935 C9          			RET
0410   E936             
0411   E936             ;================================================================================================
0412   E936             ; Send to LCD char in regC. Print at current position (what ever it is)
0413   E936             ;================================================================================================
0414   E936 CD 24 E9    LCDPUT:		CALL BWAIT
0415   E939 79          			LD	A,C	
0416   E93A D3 E1       			OUT	(DAT_WR),A
0417   E93C 3E 00       			LD	A,0
0418   E93E C9          			RET
0419   E93F             
0420   E93F             ;================================================================================================
0421   E93F             ; Position LCD cursor at regB.
0422   E93F             ;================================================================================================
0423   E93F CD 24 E9    LCDPOS:		CALL BWAIT
0424   E942 78          			LD	A,B
0425   E943 F6 80       			OR	80H
0426   E945 D3 E0       			OUT	(CMD_WR),A
0427   E947 3E 00       			LD	A,0
0428   E949 C9          			RET
0429   E94A             
0430   E94A             ;================================================================================================
0431   E94A             ; Do CR (Carriage Return)
0432   E94A             ;================================================================================================
0433   E94A CD 24 E9    LCDCR:		CALL BWAIT
0434   E94D E6 F0       			AND	0F0H			; Keep line info, set column to 1.
0435   E94F F6 80       			OR	080H
0436   E951 D3 E0       			OUT	(CMD_WR),A
0437   E953 3E 00       			LD	A,0
0438   E955 C9          			RET
0439   E956             			
0440   E956             ;================================================================================================
0441   E956             ; Do LF (Line Feed)
0442   E956             ;================================================================================================
0443   E956 CD 24 E9    LCDLF:		CALL BWAIT			; regA holds LCD address counter
0444   E959 57          			LD	D,A
0445   E95A E6 40       			AND	40H				; get only the 7th bit to see on which line the cursor is.
0446   E95C 28 26       			JR	Z,LN11
0447   E95E CD 24 E9    			CALL BWAIT
0448   E961 3E C0       			LD	A,0C0H
0449   E963 D3 E0       			OUT	(CMD_WR),A		; set addr counter to source position (2,1)
0450   E965 21 BB E9    			LD	HL,BUF
0451   E968 06 10       			LD	B,10H
0452   E96A CD 24 E9    NEWSRC:		CALL BWAIT
0453   E96D DB E3       			IN	A,(DAT_RD)		; get data from source position
0454   E96F 77          			LD	(HL),A			; Store char in buffer
0455   E970 23          			INC	HL
0456   E971 10 F7       			DJNZ NEWSRC
0457   E973 CD 2C E9    			CALL LCDCLEAR
0458   E976 21 BB E9    			LD	HL,BUF
0459   E979 06 10       			LD	B,10H
0460   E97B CD 24 E9    NEWTGT:		CALL BWAIT
0461   E97E 7E          			LD	A,(HL)
0462   E97F 23          			INC	HL
0463   E980 D3 E1       			OUT	(DAT_WR),A
0464   E982 10 F7       			DJNZ NEWTGT
0465   E984             
0466   E984 CD 24 E9    LN11:		CALL BWAIT
0467   E987 7A          			LD	A,D
0468   E988 E6 0F       			AND	0FH
0469   E98A F6 C0       			OR	0C0H
0470   E98C D3 E0       			OUT	(CMD_WR),A
0471   E98E 3E 00       			LD	A,0
0472   E990 C9          			RET
0473   E991             
0474   E991             ;================================================================================================
0475   E991             ; Delay X seconds, with X passed on reg B
0476   E991             ;================================================================================================
0477   E991 C5          DELAYS:		PUSH BC
0478   E992 E5          			PUSH HL
0479   E993 21 8F 02    LOOP0:		LD	HL,655		;2.5				\
0480   E996 0E FF       LOOP1:		LD	C,255		;1.75	\			|
0481   E998 0D          LOOP2:		DEC	C			;1		|			|
0482   E999 00          			NOP				;1		| t=6C+0.5	| 
0483   E99A 79          			LD	A,C			;1		|			| t=HL(6C+6.5)+1.25
0484   E99B 20 FB       			JR	NZ,LOOP2	;3/1.75	/			|
0485   E99D 2B          			DEC	HL			;1					| with HL=655 and c=255, t=1.006sec (WOW!!!)
0486   E99E 7C          			LD	A,H			;1					|
0487   E99F B5          			OR	L			;1					|
0488   E9A0 20 F4       			JR	NZ,LOOP1	;3/1.75				/
0489   E9A2 10 EF       			DJNZ LOOP0		;3.25/2
0490   E9A4 E1          			POP	HL
0491   E9A5 C1          			POP	BC
0492   E9A6 C9          			RET
0493   E9A7             
0494   E9A7             ;================================================================================================
0495   E9A7             ; Delay X miliseconds, with X passed on reg B
0496   E9A7             ;================================================================================================
0497   E9A7 C5          DELAYMS:	PUSH BC
0498   E9A8 0E C8       DECB:		LD	C,0C8H
0499   E9AA 00          DECC:		NOP
0500   E9AB 0D          			DEC	C
0501   E9AC 20 FC       			JR	NZ,DECC
0502   E9AE 05          			DEC	B
0503   E9AF 20 F7       			JR	NZ,DECB
0504   E9B1 C1          			POP	BC
0505   E9B2 C9          			RET
0506   E9B3             
0507   E9B3             ;================================================================================================
0508   E9B3             ; Delay 5*X microseconds, with X passed on reg C
0509   E9B3             ;================================================================================================
0510   E9B3 C5          DELAY5US:	PUSH BC
0511   E9B4 00          DEC:		NOP
0512   E9B5 0D          			DEC	C
0513   E9B6 20 FC       			JR	NZ,DEC
0514   E9B8 C1          			POP	BC
0515   E9B9 C9          			RET
0516   E9BA             
0517   E9BA             ;================================================================================================
0518   E9BA 00          LCDSTATUS	.DB	0			; After LCD has been initialized, it will hold card addr.
0519   E9BB             BUF			.DS	10H			; Buffer for Line Feed operation
0520   E9CB             ;================================================================================================
0521   E9CB             ; Disk processing entry points
0522   E9CB             ;================================================================================================
0523   E9CB             seldsk:
0524   E9CB 21 00 00    		LD	HL,$0000
0525   E9CE 79          		LD	A,C
0526   E9CF FE 10       		CP	16		; 16 for 128MB disk, 8 for 64MB disk
0527   E9D1 38 0D       		jr	C,chgdsk	; if invalid drive will give BDOS error
0528   E9D3 3A 04 00    		LD	A,(userdrv)	; so set the drive back to a:
0529   E9D6 B9          		CP	C		; If the default disk is not the same as the
0530   E9D7 C0          		RET	NZ		; selected drive then return, 
0531   E9D8 AF          		XOR	A		; else reset default back to a:
0532   E9D9 32 04 00    		LD	(userdrv),A	; otherwise will be stuck in a loop
0533   E9DC 32 A7 FC    		LD	(sekdsk),A
0534   E9DF C9          		ret
0535   E9E0             
0536   E9E0 32 A7 FC    chgdsk:		LD 	(sekdsk),A
0537   E9E3 CB 07       		RLC	a		;*2
0538   E9E5 CB 07       		RLC	a		;*4
0539   E9E7 CB 07       		RLC	a		;*8
0540   E9E9 CB 07       		RLC	a		;*16
0541   E9EB 21 56 E6    		LD 	HL,dpbase
0542   E9EE 06 00       		LD	b,0
0543   E9F0 4F          		LD	c,A	
0544   E9F1 09          		ADD	HL,BC
0545   E9F2             
0546   E9F2 C9          		RET
0547   E9F3             
0548   E9F3             ;------------------------------------------------------------------------------------------------
0549   E9F3             home:
0550   E9F3 3A B2 FC    		ld	a,(hstwrt)	;check for pending write
0551   E9F6 B7          		or	a
0552   E9F7 20 03       		jr	nz,homed
0553   E9F9 32 B1 FC    		ld	(hstact),a	;clear host active flag
0554   E9FC             homed:
0555   E9FC 01 00 00    		LD 	BC,0000h
0556   E9FF             
0557   E9FF             ;------------------------------------------------------------------------------------------------
0558   E9FF ED 43 A8 FC settrk:		LD 	(sektrk),BC	; Set track passed from BDOS in register BC.
0559   EA03 C9          		RET
0560   EA04             
0561   EA04             ;------------------------------------------------------------------------------------------------
0562   EA04 ED 43 AA FC setsec:		LD 	(seksec),BC	; Set sector passed from BDOS in register BC.
0563   EA08 C9          		RET
0564   EA09             
0565   EA09             ;------------------------------------------------------------------------------------------------
0566   EA09 ED 43 BC FC setdma:		LD 	(dmaAddr),BC	; Set DMA ADDress given by registers BC.
0567   EA0D C9          		RET
0568   EA0E             
0569   EA0E             ;------------------------------------------------------------------------------------------------
0570   EA0E C5          sectran:	PUSH 	BC
0571   EA0F E1          		POP 	HL
0572   EA10 C9          		RET
0573   EA11             
0574   EA11             ;------------------------------------------------------------------------------------------------
0575   EA11             read:
0576   EA11             		;read the selected CP/M sector
0577   EA11 AF          		xor	a
0578   EA12 32 B3 FC    		ld	(unacnt),a
0579   EA15 3E 01       		ld	a,1
0580   EA17 32 BA FC    		ld	(readop),a		;read operation
0581   EA1A 32 B9 FC    		ld	(rsflag),a		;must read data
0582   EA1D 3E 02       		ld	a,wrual
0583   EA1F 32 BB FC    		ld	(wrtype),a		;treat as unalloc
0584   EA22 C3 8C EA    		jp	rwoper			;to perform the read
0585   EA25             
0586   EA25             
0587   EA25             ;------------------------------------------------------------------------------------------------
0588   EA25             write:
0589   EA25             		;write the selected CP/M sector
0590   EA25 AF          		xor	a		;0 to accumulator
0591   EA26 32 BA FC    		ld	(readop),a	;not a read operation
0592   EA29 79          		ld	a,c		;write type in c
0593   EA2A 32 BB FC    		ld	(wrtype),a
0594   EA2D FE 02       		cp	wrual		;write unallocated?
0595   EA2F 20 17       		jr	nz,chkuna	;check for unalloc
0596   EA31             ;
0597   EA31             ;		write to unallocated, set parameters
0598   EA31 3E 20       		ld	a,blksiz/128	;next unalloc recs
0599   EA33 32 B3 FC    		ld	(unacnt),a
0600   EA36 3A A7 FC    		ld	a,(sekdsk)		;disk to seek
0601   EA39 32 B4 FC    		ld	(unadsk),a		;unadsk = sekdsk
0602   EA3C 2A A8 FC    		ld	hl,(sektrk)
0603   EA3F 22 B5 FC    		ld	(unatrk),hl		;unatrk = sectrk
0604   EA42 3A AA FC    		ld	a,(seksec)
0605   EA45 32 B7 FC    		ld	(unasec),a		;unasec = seksec
0606   EA48             ;
0607   EA48             chkuna:
0608   EA48             ;		check for write to unallocated sector
0609   EA48 3A B3 FC    		ld	a,(unacnt)		;any unalloc remain?
0610   EA4B B7          		or	a	
0611   EA4C 28 36       		jr	z,alloc		;skip if not
0612   EA4E             ;
0613   EA4E             ;		more unallocated records remain
0614   EA4E 3D          		dec	a		;unacnt = unacnt-1
0615   EA4F 32 B3 FC    		ld	(unacnt),a
0616   EA52 3A A7 FC    		ld	a,(sekdsk)		;same disk?
0617   EA55 21 B4 FC    		ld	hl,unadsk
0618   EA58 BE          		cp	(hl)		;sekdsk = unadsk?
0619   EA59 C2 84 EA    		jp	nz,alloc		;skip if not
0620   EA5C             ;
0621   EA5C             ;		disks are the same
0622   EA5C 21 B5 FC    		ld	hl,unatrk
0623   EA5F CD 23 EB    		call	sektrkcmp	;sektrk = unatrk?
0624   EA62 C2 84 EA    		jp	nz,alloc		;skip if not
0625   EA65             ;
0626   EA65             ;		tracks are the same
0627   EA65 3A AA FC    		ld	a,(seksec)		;same sector?
0628   EA68 21 B7 FC    		ld	hl,unasec
0629   EA6B BE          		cp	(hl)		;seksec = unasec?
0630   EA6C C2 84 EA    		jp	nz,alloc		;skip if not
0631   EA6F             ;
0632   EA6F             ;		match, move to next sector for future ref
0633   EA6F 34          		inc	(hl)		;unasec = unasec+1
0634   EA70 7E          		ld	a,(hl)		;end of track?
0635   EA71 FE 80       		cp	cpmspt		;count CP/M sectors
0636   EA73 38 09       		jr	c,noovf		;skip if no overflow
0637   EA75             ;
0638   EA75             ;		overflow to next track
0639   EA75 36 00       		ld	(hl),0		;unasec = 0
0640   EA77 2A B5 FC    		ld	hl,(unatrk)
0641   EA7A 23          		inc	hl
0642   EA7B 22 B5 FC    		ld	(unatrk),hl		;unatrk = unatrk+1
0643   EA7E             ;
0644   EA7E             noovf:
0645   EA7E             		;match found, mark as unnecessary read
0646   EA7E AF          		xor	a		;0 to accumulator
0647   EA7F 32 B9 FC    		ld	(rsflag),a		;rsflag = 0
0648   EA82 18 08       		jr	rwoper		;to perform the write
0649   EA84             ;
0650   EA84             alloc:
0651   EA84             		;not an unallocated record, requires pre-read
0652   EA84 AF          		xor	a		;0 to accum
0653   EA85 32 B3 FC    		ld	(unacnt),a		;unacnt = 0
0654   EA88 3C          		inc	a		;1 to accum
0655   EA89 32 B9 FC    		ld	(rsflag),a		;rsflag = 1
0656   EA8C             
0657   EA8C             ;------------------------------------------------------------------------------------------------
0658   EA8C             rwoper:
0659   EA8C             		;enter here to perform the read/write
0660   EA8C AF          		xor	a		;zero to accum
0661   EA8D 32 B8 FC    		ld	(erflag),a		;no errors (yet)
0662   EA90 3A AA FC    		ld	a,(seksec)		;compute host sector
0663   EA93 B7          		or	a		;carry = 0
0664   EA94 1F          		rra			;shift right
0665   EA95 B7          		or	a		;carry = 0
0666   EA96 1F          		rra			;shift right
0667   EA97 32 B0 FC    		ld	(sekhst),a		;host sector to seek
0668   EA9A             ;
0669   EA9A             ;		active host sector?
0670   EA9A 21 B1 FC    		ld	hl,hstact	;host active flag
0671   EA9D 7E          		ld	a,(hl)
0672   EA9E 36 01       		ld	(hl),1		;always becomes 1
0673   EAA0 B7          		or	a		;was it already?
0674   EAA1 28 21       		jr	z,filhst		;fill host if not
0675   EAA3             ;
0676   EAA3             ;		host buffer active, same as seek buffer?
0677   EAA3 3A A7 FC    		ld	a,(sekdsk)
0678   EAA6 21 AC FC    		ld	hl,hstdsk	;same disk?
0679   EAA9 BE          		cp	(hl)		;sekdsk = hstdsk?
0680   EAAA 20 11       		jr	nz,nomatch
0681   EAAC             ;
0682   EAAC             ;		same disk, same track?
0683   EAAC 21 AD FC    		ld	hl,hsttrk
0684   EAAF CD 23 EB    		call	sektrkcmp	;sektrk = hsttrk?
0685   EAB2 20 09       		jr	nz,nomatch
0686   EAB4             ;
0687   EAB4             ;		same disk, same track, same buffer?
0688   EAB4 3A B0 FC    		ld	a,(sekhst)
0689   EAB7 21 AF FC    		ld	hl,hstsec	;sekhst = hstsec?
0690   EABA BE          		cp	(hl)
0691   EABB 28 24       		jr	z,match		;skip if match
0692   EABD             ;
0693   EABD             nomatch:
0694   EABD             		;proper disk, but not correct sector
0695   EABD 3A B2 FC    		ld	a,(hstwrt)		;host written?
0696   EAC0 B7          		or	a
0697   EAC1 C4 CB EB    		call	nz,writehst	;clear host buff
0698   EAC4             ;
0699   EAC4             filhst:
0700   EAC4             		;may have to fill the host buffer
0701   EAC4 3A A7 FC    		ld	a,(sekdsk)
0702   EAC7 32 AC FC    		ld	(hstdsk),a
0703   EACA 2A A8 FC    		ld	hl,(sektrk)
0704   EACD 22 AD FC    		ld	(hsttrk),hl
0705   EAD0 3A B0 FC    		ld	a,(sekhst)
0706   EAD3 32 AF FC    		ld	(hstsec),a
0707   EAD6 3A B9 FC    		ld	a,(rsflag)		;need to read?
0708   EAD9 B7          		or	a
0709   EADA C4 A2 EB    		call	nz,readhst		;yes, if 1
0710   EADD AF          		xor	a		;0 to accum
0711   EADE 32 B2 FC    		ld	(hstwrt),a		;no pending write
0712   EAE1             ;
0713   EAE1             match:
0714   EAE1             		;copy data to or from buffer
0715   EAE1 3A AA FC    		ld	a,(seksec)		;mask buffer number
0716   EAE4 E6 03       		and	secmsk		;least signif bits
0717   EAE6 6F          		ld	l,a		;ready to shift
0718   EAE7 26 00       		ld	h,0		;double count
0719   EAE9 29          		add	hl,hl
0720   EAEA 29          		add	hl,hl
0721   EAEB 29          		add	hl,hl
0722   EAEC 29          		add	hl,hl
0723   EAED 29          		add	hl,hl
0724   EAEE 29          		add	hl,hl
0725   EAEF 29          		add	hl,hl
0726   EAF0             ;		hl has relative host buffer address
0727   EAF0 11 BE FC    		ld	de,hstbuf
0728   EAF3 19          		add	hl,de		;hl = host address
0729   EAF4 EB          		ex	de,hl			;now in DE
0730   EAF5 2A BC FC    		ld	hl,(dmaAddr)		;get/put CP/M data
0731   EAF8 0E 80       		ld	c,128		;length of move
0732   EAFA 3A BA FC    		ld	a,(readop)		;which way?
0733   EAFD B7          		or	a
0734   EAFE 20 06       		jr	nz,rwmove		;skip if read
0735   EB00             ;
0736   EB00             ;	write operation, mark and switch direction
0737   EB00 3E 01       		ld	a,1
0738   EB02 32 B2 FC    		ld	(hstwrt),a		;hstwrt = 1
0739   EB05 EB          		ex	de,hl			;source/dest swap
0740   EB06             ;
0741   EB06             rwmove:
0742   EB06             		;C initially 128, DE is source, HL is dest
0743   EB06 1A          		ld	a,(de)		;source character
0744   EB07 13          		inc	de
0745   EB08 77          		ld	(hl),a		;to dest
0746   EB09 23          		inc	hl
0747   EB0A 0D          		dec	c		;loop 128 times
0748   EB0B 20 F9       		jr	nz,rwmove
0749   EB0D             ;
0750   EB0D             ;		data has been moved to/from host buffer
0751   EB0D 3A BB FC    		ld	a,(wrtype)		;write type
0752   EB10 FE 01       		cp	wrdir		;to directory?
0753   EB12 3A B8 FC    		ld	a,(erflag)		;in case of errors
0754   EB15 C0          		ret	nz			;no further processing
0755   EB16             ;
0756   EB16             ;		clear host buffer for directory write
0757   EB16 B7          		or	a		;errors?
0758   EB17 C0          		ret	nz			;skip if so
0759   EB18 AF          		xor	a		;0 to accum
0760   EB19 32 B2 FC    		ld	(hstwrt),a		;buffer written
0761   EB1C CD CB EB    		call	writehst
0762   EB1F 3A B8 FC    		ld	a,(erflag)
0763   EB22 C9          		ret
0764   EB23             
0765   EB23             ;------------------------------------------------------------------------------------------------
0766   EB23             ;Utility subroutine for 16-bit compare
0767   EB23             sektrkcmp:
0768   EB23             		;HL = .unatrk or .hsttrk, compare with sektrk
0769   EB23 EB          		ex	de,hl
0770   EB24 21 A8 FC    		ld	hl,sektrk
0771   EB27 1A          		ld	a,(de)		;low byte compare
0772   EB28 BE          		cp	(HL)		;same?
0773   EB29 C0          		ret	nz			;return if not
0774   EB2A             ;		low bytes equal, test high 1s
0775   EB2A 13          		inc	de
0776   EB2B 23          		inc	hl
0777   EB2C 1A          		ld	a,(de)
0778   EB2D BE          		cp	(hl)	;sets flags
0779   EB2E C9          		ret
0780   EB2F             
0781   EB2F             ;================================================================================================
0782   EB2F             ; Convert track/head/sector into LBA for physical access to the disk
0783   EB2F             ;================================================================================================
0784   EB2F             setLBAaddr:	
0785   EB2F 2A AD FC    		LD	HL,(hsttrk)
0786   EB32 CB 05       		RLC	L
0787   EB34 CB 05       		RLC	L
0788   EB36 CB 05       		RLC	L
0789   EB38 CB 05       		RLC	L
0790   EB3A CB 05       		RLC	L
0791   EB3C 7D          		LD	A,L
0792   EB3D E6 E0       		AND	0E0H
0793   EB3F 6F          		LD	L,A
0794   EB40 3A AF FC    		LD	A,(hstsec)
0795   EB43 85          		ADD	A,L
0796   EB44 32 A3 FC    		LD	(lba0),A
0797   EB47             
0798   EB47 2A AD FC    		LD	HL,(hsttrk)
0799   EB4A CB 0D       		RRC	L
0800   EB4C CB 0D       		RRC	L
0801   EB4E CB 0D       		RRC	L
0802   EB50 7D          		LD	A,L
0803   EB51 E6 1F       		AND	01FH
0804   EB53 6F          		LD	L,A
0805   EB54 CB 04       		RLC	H
0806   EB56 CB 04       		RLC	H
0807   EB58 CB 04       		RLC	H
0808   EB5A CB 04       		RLC	H
0809   EB5C CB 04       		RLC	H
0810   EB5E 7C          		LD	A,H
0811   EB5F E6 20       		AND	020H
0812   EB61 67          		LD	H,A
0813   EB62 3A AC FC    		LD	A,(hstdsk)
0814   EB65 CB 07       		RLC	a
0815   EB67 CB 07       		RLC	a
0816   EB69 CB 07       		RLC	a
0817   EB6B CB 07       		RLC	a
0818   EB6D CB 07       		RLC	a
0819   EB6F CB 07       		RLC	a
0820   EB71 E6 C0       		AND	0C0H
0821   EB73 84          		ADD	A,H
0822   EB74 85          		ADD	A,L
0823   EB75 32 A4 FC    		LD	(lba1),A
0824   EB78             		
0825   EB78             
0826   EB78 3A AC FC    		LD	A,(hstdsk)
0827   EB7B CB 0F       		RRC	A
0828   EB7D CB 0F       		RRC	A
0829   EB7F E6 03       		AND	03H
0830   EB81 32 A5 FC    		LD	(lba2),A
0831   EB84             
0832   EB84             ; LBA Mode using drive 0 = E0
0833   EB84 3E E0       		LD	a,0E0H
0834   EB86 32 A6 FC    		LD	(lba3),A
0835   EB89             
0836   EB89             
0837   EB89 3A A3 FC    		LD	A,(lba0)
0838   EB8C D3 B3       		OUT 	(CF_LBA0),A
0839   EB8E             
0840   EB8E 3A A4 FC    		LD	A,(lba1)
0841   EB91 D3 B4       		OUT 	(CF_LBA1),A
0842   EB93             
0843   EB93 3A A5 FC    		LD	A,(lba2)
0844   EB96 D3 B5       		OUT 	(CF_LBA2),A
0845   EB98             
0846   EB98 3A A6 FC    		LD	A,(lba3)
0847   EB9B D3 B6       		OUT 	(CF_LBA3),A
0848   EB9D             
0849   EB9D 3E 01       		LD 	A,1
0850   EB9F D3 B2       		OUT 	(CF_SECCOUNT),A
0851   EBA1             
0852   EBA1 C9          		RET				
0853   EBA2             
0854   EBA2             ;================================================================================================
0855   EBA2             ; Read physical sector from host
0856   EBA2             ;================================================================================================
0857   EBA2             readhst:
0858   EBA2 F5          		PUSH 	AF
0859   EBA3 C5          		PUSH 	BC
0860   EBA4 E5          		PUSH 	HL
0861   EBA5             
0862   EBA5 CD F4 EB    		CALL 	cfWait
0863   EBA8             
0864   EBA8 CD 2F EB    		CALL 	setLBAaddr
0865   EBAB             
0866   EBAB 3E 20       		LD 	A,CF_READ_SEC
0867   EBAD D3 B7       		OUT 	(CF_COMMAND),A
0868   EBAF             
0869   EBAF CD F4 EB    		CALL 	cfWait
0870   EBB2             
0871   EBB2 0E 04       		LD 	c,4
0872   EBB4 21 BE FC    		LD 	HL,hstbuf
0873   EBB7             rd4secs:
0874   EBB7 06 80       		LD 	b,128
0875   EBB9             rdByte:
0876   EBB9 DB B0       		in 	A,(CF_DATA)
0877   EBBB 77          		LD 	(HL),A
0878   EBBC 23          		iNC 	HL
0879   EBBD 05          		dec 	b
0880   EBBE 20 F9       		JR 	NZ, rdByte
0881   EBC0 0D          		dec 	c
0882   EBC1 20 F4       		JR 	NZ,rd4secs
0883   EBC3             
0884   EBC3 E1          		POP 	HL
0885   EBC4 C1          		POP 	BC
0886   EBC5 F1          		POP 	AF
0887   EBC6             
0888   EBC6 AF          		XOR 	a
0889   EBC7 32 B8 FC    		ld	(erflag),a
0890   EBCA C9          		RET
0891   EBCB             
0892   EBCB             ;================================================================================================
0893   EBCB             ; Write physical sector to host
0894   EBCB             ;================================================================================================
0895   EBCB             writehst:
0896   EBCB F5          		PUSH 	AF
0897   EBCC C5          		PUSH 	BC
0898   EBCD E5          		PUSH 	HL
0899   EBCE             
0900   EBCE CD F4 EB    		CALL 	cfWait
0901   EBD1             
0902   EBD1 CD 2F EB    		CALL 	setLBAaddr
0903   EBD4             
0904   EBD4 3E 30       		LD 	A,CF_WRITE_SEC
0905   EBD6 D3 B7       		OUT 	(CF_COMMAND),A
0906   EBD8             
0907   EBD8 CD F4 EB    		CALL 	cfWait
0908   EBDB             
0909   EBDB 0E 04       		LD 	c,4
0910   EBDD 21 BE FC    		LD 	HL,hstbuf
0911   EBE0             wr4secs:
0912   EBE0 06 80       		LD 	b,128
0913   EBE2 7E          wrByte:		LD 	A,(HL)
0914   EBE3 D3 B0       		OUT 	(CF_DATA),A
0915   EBE5 23          		iNC 	HL
0916   EBE6 05          		dec 	b
0917   EBE7 20 F9       		JR 	NZ, wrByte
0918   EBE9             
0919   EBE9 0D          		dec 	c
0920   EBEA 20 F4       		JR 	NZ,wr4secs
0921   EBEC             
0922   EBEC E1          		POP 	HL
0923   EBED C1          		POP 	BC
0924   EBEE F1          		POP 	AF
0925   EBEF             
0926   EBEF AF          		XOR 	a
0927   EBF0 32 B8 FC    		ld	(erflag),a
0928   EBF3 C9          		RET
0929   EBF4             
0930   EBF4             ;================================================================================================
0931   EBF4             ; Wait for disk to be ready (busy=0,ready=1)
0932   EBF4             ;================================================================================================
0933   EBF4             cfWait:
0934   EBF4 F5          		PUSH 	AF
0935   EBF5             cfWait1:
0936   EBF5 DB B7       		in 	A,(CF_STATUS)
0937   EBF7 E6 80       		AND 	080H
0938   EBF9 FE 80       		cp 	080H
0939   EBFB 28 F8       		JR	Z,cfWait1
0940   EBFD F1          		POP 	AF
0941   EBFE C9          		RET
0942   EBFF             
0943   EBFF             ;================================================================================================
0944   EBFF             ; Print (on console) a sequence of characters ending with zero
0945   EBFF             ;================================================================================================
0946   EBFF             PRINTSEQ:
0947   EBFF E3          		EX 	(SP),HL 		; Push HL and put RET address into HL
0948   EC00 F5          		PUSH 	AF
0949   EC01 C5          		PUSH 	BC
0950   EC02             NEXTCHAR:
0951   EC02 7E          		LD 	A,(HL)
0952   EC03 FE 00       		CP	0
0953   EC05 28 07       		JR	Z,ENDOFPRINT
0954   EC07 4F          		LD  	C,A
0955   EC08 CD 87 E8    		CALL 	CONOUT		; Print to console
0956   EC0B 23          		INC 	HL
0957   EC0C 18 F4       		JR	NEXTCHAR
0958   EC0E             ENDOFPRINT:
0959   EC0E 23          		INC 	HL 			; Get past "null" terminator
0960   EC0F C1          		POP 	BC
0961   EC10 F1          		POP 	AF
0962   EC11 E3          		EX 	(SP),HL 		; Push new RET address on stack and restore HL
0963   EC12 C9          		RET
0964   EC13             
0965   EC13             ;================================================================================================
0966   EC13             ; Data storage
0967   EC13             ;================================================================================================
0968   EC13             dirbuf: 	.ds 128 		;scratch directory area
0969   EC93             alv00: 		.ds 257			;allocation vector 0
0970   ED94             alv01: 		.ds 257			;allocation vector 1
0971   EE95             alv02: 		.ds 257			;allocation vector 2
0972   EF96             alv03: 		.ds 257			;allocation vector 3
0973   F097             alv04: 		.ds 257			;allocation vector 4
0974   F198             alv05: 		.ds 257			;allocation vector 5
0975   F299             alv06: 		.ds 257			;allocation vector 6
0976   F39A             alv07: 		.ds 257			;allocation vector 7
0977   F49B             alv08: 		.ds 257			;allocation vector 8
0978   F59C             alv09: 		.ds 257			;allocation vector 9
0979   F69D             alv10: 		.ds 257			;allocation vector 10
0980   F79E             alv11: 		.ds 257			;allocation vector 11
0981   F89F             alv12: 		.ds 257			;allocation vector 12
0982   F9A0             alv13: 		.ds 257			;allocation vector 13
0983   FAA1             alv14: 		.ds 257			;allocation vector 14
0984   FBA2             alv15: 		.ds 257			;allocation vector 15
0985   FCA3             
0986   FCA3 00          lba0		.DB	00h
0987   FCA4 00          lba1		.DB	00h
0988   FCA5 00          lba2		.DB	00h
0989   FCA6 00          lba3		.DB	00h
0990   FCA7             
0991   FCA7             sekdsk:		.ds	1		;seek disk number
0992   FCA8             sektrk:		.ds	2		;seek track number
0993   FCAA             seksec:		.ds	2		;seek sector number
0994   FCAC             ;
0995   FCAC             hstdsk:		.ds	1		;host disk number
0996   FCAD             hsttrk:		.ds	2		;host track number
0997   FCAF             hstsec:		.ds	1		;host sector number
0998   FCB0             ;
0999   FCB0             sekhst:		.ds	1		;seek shr secshf
1000   FCB1             hstact:		.ds	1		;host active flag
1001   FCB2             hstwrt:		.ds	1		;host written flag
1002   FCB3             ;
1003   FCB3             unacnt:		.ds	1		;unalloc rec cnt
1004   FCB4             unadsk:		.ds	1		;last unalloc disk
1005   FCB5             unatrk:		.ds	2		;last unalloc track
1006   FCB7             unasec:		.ds	1		;last unalloc sector
1007   FCB8             ;
1008   FCB8             erflag:		.ds	1		;error reporting
1009   FCB9             rsflag:		.ds	1		;read sector flag
1010   FCBA             readop:		.ds	1		;1 if read operation
1011   FCBB             wrtype:		.ds	1		;write operation type
1012   FCBC             dmaAddr:	.ds	2		;last dma address
1013   FCBE             hstbuf:		.ds	512		;host buffer
1014   FEBE             hstBufEnd:	.EQU	$
1015   FEBE             
1016   FEBE             			.DS	020h			; Start of BIOS stack area.
1017   FEDE             BIOSSTACK:	.EQU	$
1018   FEDE             
1019   FEDE             biosEnd:	.EQU	$
1020   FEDE             
1021   FEDE             		.END
tasm: Number of errors = 0
