0001   0000             ;==================================================================================
0002   0000             ; Contents of this file are copyright Grant Searle
0003   0000             ; Blocking/unblocking routines are the published version by Digital Research
0004   0000             ; (bugfixed, as found on the web)
0005   0000             ;
0006   0000             ; You have permission to use this for NON COMMERCIAL USE ONLY
0007   0000             ; If you wish to use it elsewhere, please include an acknowledgement to myself.
0008   0000             ;
0009   0000             ; http://searle.hostei.com/grant/index.html
0010   0000             ;
0011   0000             ; eMail: home.micros01@btinternet.com
0012   0000             ;
0013   0000             ; If the above don't work, please perform an Internet search to see if I have
0014   0000             ; updated the web page hosting service.
0015   0000             ;
0016   0000             ; Customized by Kaltchuk for use with Z80 Modular Computer, december/2020.
0017   0000             ; CP/M is booted from ROM.
0018   0000             ; 04/02/21 - This version corrects a bug in wboot.
0019   0000             ;
0020   0000             ;==================================================================================
0021   0000             CCP				.EQU	0D000h			; Base of CCP (or Monitor).
0022   0000             BIOS			.EQU	0E600h			; Base of BIOS.
0023   0000             ROM_CCP			.EQU	01000h			; Base of CCP in ROM
0024   0000             ROM_BIOS		.EQU	02600h			; Base of BIOS in ROM
0025   0000             
0026   0000             ccp				.EQU	0D000h			; Base of CCP.
0027   0000             bdos			.EQU	ccp + 0806h		; Base of BDOS.
0028   0000             bios			.EQU	0E600h			; Base of BIOS.
0029   0000             
0030   0000             ; Set CP/M low memory data, vector and buffer addresses.
0031   0000             
0032   0000             iobyte			.EQU	03h				; Intel standard I/O definition byte.
0033   0000             userdrv			.EQU	04h				; Current user number and drive.
0034   0000             tpabuf			.EQU	80h				; Default I/O buffer and command line storage.
0035   0000             
0036   0000             blksiz			.equ	4096			;CP/M allocation size
0037   0000             hstsiz			.equ	512				;host disk sector size
0038   0000             hstspt			.equ	32				;host disk sectors/trk
0039   0000             hstblk			.equ	hstsiz/128		;CP/M sects/host buff
0040   0000             cpmspt			.equ	hstblk * hstspt	;CP/M sectors/track
0041   0000             secmsk			.equ	hstblk-1		;sector mask
0042   0000             										;compute sector mask
0043   0000             ;secshf			.equ	2				;log2(hstblk)
0044   0000             	
0045   0000             wrall			.equ	0				;write to allocated
0046   0000             wrdir			.equ	1				;write to directory
0047   0000             wrual			.equ	2				;write to unallocated
0048   0000             
0049   0000             ; MEM card stuff
0050   0000             ROM_RAM0		.EQU	0F0H			; ROM + RAM bank 0
0051   0000             NOROM_RAM0		.EQU	0F1H			; no ROM + RAM bank 0 (full RAM)
0052   0000             ROM_RAM1		.EQU	0F2H			; ROM + RAM bank 1
0053   0000             NOROM_RAM1		.EQU	0F3H			; no ROM + RAM bank 1 (full RAM)
0054   0000             
0055   0000             ; USART card stuff
0056   0000             USART_DAT		.EQU	0D0H			; USART data addr
0057   0000             USART_CMD		.EQU	0D1H			; USART command addr
0058   0000             USART_STA		.EQU	0D1H			; USART status addr
0059   0000             UMODE			.EQU	06FH			; 8N1 (8 bit, no parity, 1 stop), baud=clock/64
0060   0000             UCMD0			.EQU	015H			; initial command: Rx enable, Tx enable, reset error flags
0061   0000             
0062   0000             ; LCD card address list.
0063   0000             LCD_ADDR	.EQU	0E0H
0064   0000             DAT_WR		.EQU	LCD_ADDR+1
0065   0000             DAT_RD		.EQU	LCD_ADDR+3
0066   0000             CMD_WR		.EQU	LCD_ADDR
0067   0000             CMD_RD		.EQU	LCD_ADDR+2
0068   0000             
0069   0000             
0070   0000             ; FLASH card stuff
0071   0000             FLASH_ADDR		.EQU	0B0H			; Base I/O address for compact flash card
0072   0000             CF_DATA			.EQU	(FLASH_ADDR+0)	; R/W
0073   0000             CF_FEATURES		.EQU	(FLASH_ADDR+1)	; W
0074   0000             CF_ERROR		.EQU	(FLASH_ADDR+1)	; R
0075   0000             CF_SECCOUNT		.EQU	(FLASH_ADDR+2)	; W
0076   0000             
0077   0000             CF_SECTOR		.EQU	(FLASH_ADDR+3)	; W
0078   0000             CF_CYL_LOW		.EQU	(FLASH_ADDR+4)	; W
0079   0000             CF_CYL_HI		.EQU	(FLASH_ADDR+5)	; W
0080   0000             CF_HEAD			.EQU	(FLASH_ADDR+6)	; W
0081   0000             
0082   0000             CF_LBA0			.EQU	(FLASH_ADDR+3)	; W
0083   0000             CF_LBA1			.EQU	(FLASH_ADDR+4)	; W
0084   0000             CF_LBA2			.EQU	(FLASH_ADDR+5)	; W
0085   0000             CF_LBA3			.EQU	(FLASH_ADDR+6)	; W
0086   0000             
0087   0000             CF_STATUS		.EQU	(FLASH_ADDR+7)	; R
0088   0000             CF_COMMAND		.EQU	(FLASH_ADDR+7)	; W
0089   0000             
0090   0000             ;CF Features
0091   0000             CF_8BIT			.EQU	1
0092   0000             CF_NOCACHE		.EQU	082H
0093   0000             
0094   0000             ;CF Commands
0095   0000             CF_READ_SEC		.EQU	020H
0096   0000             CF_WRITE_SEC	.EQU	030H
0097   0000             CF_SET_FEAT		.EQU 	0EFH
0098   0000             
0099   0000             ;================================================================================================
0100   0000             ; ASCII characters.
0101   0000             ;================================================================================================
0102   0000             NUL			.EQU	00H
0103   0000             LF			.EQU	0AH
0104   0000             FF			.EQU	0CH
0105   0000             CR			.EQU	0DH
0106   0000             DC1			.EQU	11H
0107   0000             DC2			.EQU	12H
0108   0000             DC3			.EQU	13H
0109   0000             DC4			.EQU	14H
0110   0000             ;================================================================================================
0111   0000             
0112   E600             		.ORG	bios					; BIOS origin.
0113   E600             
0114   E600             ;================================================================================================
0115   E600             ; BIOS jump table.
0116   E600             ;================================================================================================
0117   E600 C3 63 E7    		JP	boot						;  0 Initialize.
0118   E603 C3 05 E8    wboote:	JP	wboot						;  1 Warm boot.
0119   E606 C3 89 E8    		JP	CONST						;  2 Console status.
0120   E609 C3 9C E8    		JP	CONIN						;  3 Console input.
0121   E60C C3 BE E8    		JP	CONOUT						;  4 Console OUTput.
0122   E60F C3 CB E8    		JP	LIST						;  5 List OUTput.
0123   E612 C3 D8 E8    		JP	PUNCH						;  6 punch OUTput.
0124   E615 C3 C8 E8    		JP	READER						;  7 Reader input.
0125   E618 C3 2A EA    		JP	home						;  8 Home disk.
0126   E61B C3 02 EA    		JP	seldsk						;  9 Select disk.
0127   E61E C3 36 EA    		JP	settrk						; 10 Select track.
0128   E621 C3 3B EA    		JP	setsec						; 11 Select sector.
0129   E624 C3 40 EA    		JP	setdma						; 12 Set DMA ADDress.
0130   E627 C3 48 EA    		JP	read						; 13 Read 128 bytes.
0131   E62A C3 5C EA    		JP	write						; 14 Write 128 bytes.
0132   E62D C3 DB E8    		JP	LISTST						; 15 List status.
0133   E630 C3 45 EA    		JP	sectran						; 16 Sector translate.
0134   E633 C3 36 EC    		JP	PRINTSEQ					; not a BIOS function
0135   E636             
0136   E636             ;================================================================================================
0137   E636             ; Disk parameter headers for disk 0 to 15
0138   E636             ;================================================================================================
0139   E636             dpbase:
0140   E636 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb0,0000h,alv00
0140   E63A 00 00 00 00 
0140   E63E 4A EC 36 E7 
0140   E642 00 00 CA EC 
0141   E646 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv01
0141   E64A 00 00 00 00 
0141   E64E 4A EC 45 E7 
0141   E652 00 00 CB ED 
0142   E656 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv02
0142   E65A 00 00 00 00 
0142   E65E 4A EC 45 E7 
0142   E662 00 00 CC EE 
0143   E666 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv03
0143   E66A 00 00 00 00 
0143   E66E 4A EC 45 E7 
0143   E672 00 00 CD EF 
0144   E676 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv04
0144   E67A 00 00 00 00 
0144   E67E 4A EC 45 E7 
0144   E682 00 00 CE F0 
0145   E686 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv05
0145   E68A 00 00 00 00 
0145   E68E 4A EC 45 E7 
0145   E692 00 00 CF F1 
0146   E696 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv06
0146   E69A 00 00 00 00 
0146   E69E 4A EC 45 E7 
0146   E6A2 00 00 D0 F2 
0147   E6A6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv07
0147   E6AA 00 00 00 00 
0147   E6AE 4A EC 45 E7 
0147   E6B2 00 00 D1 F3 
0148   E6B6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv08
0148   E6BA 00 00 00 00 
0148   E6BE 4A EC 45 E7 
0148   E6C2 00 00 D2 F4 
0149   E6C6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv09
0149   E6CA 00 00 00 00 
0149   E6CE 4A EC 45 E7 
0149   E6D2 00 00 D3 F5 
0150   E6D6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv10
0150   E6DA 00 00 00 00 
0150   E6DE 4A EC 45 E7 
0150   E6E2 00 00 D4 F6 
0151   E6E6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv11
0151   E6EA 00 00 00 00 
0151   E6EE 4A EC 45 E7 
0151   E6F2 00 00 D5 F7 
0152   E6F6 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv12
0152   E6FA 00 00 00 00 
0152   E6FE 4A EC 45 E7 
0152   E702 00 00 D6 F8 
0153   E706 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv13
0153   E70A 00 00 00 00 
0153   E70E 4A EC 45 E7 
0153   E712 00 00 D7 F9 
0154   E716 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpb,0000h,alv14
0154   E71A 00 00 00 00 
0154   E71E 4A EC 45 E7 
0154   E722 00 00 D8 FA 
0155   E726 00 00 00 00 	 	.DW 0000h,0000h,0000h,0000h,dirbuf,dpbLast,0000h,alv15
0155   E72A 00 00 00 00 
0155   E72E 4A EC 54 E7 
0155   E732 00 00 D9 FB 
0156   E736             
0157   E736             ; First drive has a reserved track for CP/M
0158   E736             dpb0:
0159   E736 80 00       		.DW 128 ;SPT - sectors per track
0160   E738 05          		.DB 5   ;BSH - block shift factor
0161   E739 1F          		.DB 31  ;BLM - block mask
0162   E73A 01          		.DB 1   ;EXM - Extent mask
0163   E73B FB 07       		.DW 2043 ; (2047-4) DSM - Storage size (blocks - 1)
0164   E73D FF 01       		.DW 511 ;DRM - Number of directory entries - 1
0165   E73F F0          		.DB 240 ;AL0 - 1 bit set per directory block
0166   E740 00          		.DB 0   ;AL1 -            "
0167   E741 00 00       		.DW 0   ;CKS - DIR check vector size (DRM+1)/4 (0=fixed disk)
0168   E743 01 00       		.DW 1   ;ON  - Reserved tracks
0169   E745             
0170   E745             dpb:
0171   E745 80 00       		.DW 128 ;SPT - sectors per track
0172   E747 05          		.DB 5   ;BSH - block shift factor
0173   E748 1F          		.DB 31  ;BLM - block mask
0174   E749 01          		.DB 1   ;EXM - Extent mask
0175   E74A FF 07       		.DW 2047 ;DSM - Storage size (blocks - 1)
0176   E74C FF 01       		.DW 511 ;DRM - Number of directory entries - 1
0177   E74E F0          		.DB 240 ;AL0 - 1 bit set per directory block
0178   E74F 00          		.DB 0   ;AL1 -            "
0179   E750 00 00       		.DW 0   ;CKS - DIR check vector size (DRM+1)/4 (0=fixed disk)
0180   E752 00 00       		.DW 0   ;OFF - Reserved tracks
0181   E754             
0182   E754             ; Last drive is smaller because CF is never full 64MB or 128MB
0183   E754             dpbLast:
0184   E754 80 00       		.DW 128 ;SPT - sectors per track
0185   E756 05          		.DB 5   ;BSH - block shift factor
0186   E757 1F          		.DB 31  ;BLM - block mask
0187   E758 01          		.DB 1   ;EXM - Extent mask
0188   E759 FF 01       		.DW 511 ;DSM - Storage size (blocks - 1)  ; 511 = 2MB (for 128MB card), 1279 = 5MB (for 64MB card)
0189   E75B FF 01       		.DW 511 ;DRM - Number of directory entries - 1
0190   E75D F0          		.DB 240 ;AL0 - 1 bit set per directory block
0191   E75E 00          		.DB 0   ;AL1 -            "
0192   E75F 00 00       		.DW 0   ;CKS - DIR check vector size (DRM+1)/4 (0=fixed disk)
0193   E761 00 00       		.DW 0   ;OFF - Reserved tracks
0194   E763             
0195   E763             ;================================================================================================
0196   E763             ; Cold boot
0197   E763             ;================================================================================================
0198   E763             
0199   E763             boot:
0200   E763 F3          		DI						; Disable interrupts.
0201   E764 31 69 FF    		LD	SP,BIOSSTACK		; Set default stack.
0202   E767             
0203   E767 D3 F1       		OUT (NOROM_RAM0),A		; Turn off ROM. Doesn't matter what we output
0204   E769             
0205   E769 CD 72 E8    		CALL USARTINIT			; Initialize USART
0206   E76C             
0207   E76C 01 F5 FE    		LD	BC,BUFINI			; Initialize pointers for USART buffer
0208   E76F ED 43 45 FF 		LD	(WRPTR),BC
0209   E773 ED 43 47 FF 		LD	(RDPTR),BC
0210   E777             
0211   E777 CD 2B EC    		CALL	cfWait			; Initialize FLASH
0212   E77A 3E 01       		LD 	A,CF_8BIT			; Set IDE to be 8bit
0213   E77C D3 B1       		OUT	(CF_FEATURES),A
0214   E77E 3E EF       		LD	A,CF_SET_FEAT
0215   E780 D3 B7       		OUT	(CF_COMMAND),A
0216   E782             
0217   E782 CD 2B EC    		CALL	cfWait
0218   E785 3E 82       		LD 	A,CF_NOCACHE		; No write cache
0219   E787 D3 B1       		OUT	(CF_FEATURES),A
0220   E789 3E EF       		LD	A,CF_SET_FEAT
0221   E78B D3 B7       		OUT	(CF_COMMAND),A
0222   E78D             
0223   E78D AF          		XOR	A					; set drive byte to A:
0224   E78E 32 04 00    		LD	(userdrv),A
0225   E791             
0226   E791 01 F5 FE    		LD	BC,BUFINI			; reset serial input buffer
0227   E794 ED 43 45 FF 		LD	(WRPTR),BC
0228   E798 ED 43 47 FF 		LD	(RDPTR),BC
0229   E79C             
0230   E79C             
0231   E79C CD 36 EC    		CALL	PRINTSEQ
0232   E79F 5A 38 30 20 		.DB "Z80 Modular Computer by Kaltchuk 2020.",CR,LF
0232   E7A3 4D 6F 64 75 
0232   E7A7 6C 61 72 20 
0232   E7AB 43 6F 6D 70 
0232   E7AF 75 74 65 72 
0232   E7B3 20 62 79 20 
0232   E7B7 4B 61 6C 74 
0232   E7BB 63 68 75 6B 
0232   E7BF 20 32 30 32 
0232   E7C3 30 2E 0D 0A 
0233   E7C7 42 49 4F 53 		.DB "BIOS 1.0B - 128MB Flash, LCD drive.",CR,LF
0233   E7CB 20 31 2E 30 
0233   E7CF 42 20 2D 20 
0233   E7D3 31 32 38 4D 
0233   E7D7 42 20 46 6C 
0233   E7DB 61 73 68 2C 
0233   E7DF 20 4C 43 44 
0233   E7E3 20 64 72 69 
0233   E7E7 76 65 2E 0D 
0233   E7EB 0A 
0234   E7EC 43 50 4D 20 		.DB	"CPM bla, bla, bla",CR,LF,CR,LF,0
0234   E7F0 62 6C 61 2C 
0234   E7F4 20 62 6C 61 
0234   E7F8 2C 20 62 6C 
0234   E7FC 61 0D 0A 0D 
0234   E800 0A 00 
0235   E802             
0236   E802 C3 18 E8    		JP	gocpm
0237   E805             
0238   E805             ;================================================================================================
0239   E805             ; Warm boot
0240   E805             ;================================================================================================
0241   E805             
0242   E805             wboot:
0243   E805 F3          		DI						; Disable interrupts.
0244   E806 31 69 FF    		LD	SP,BIOSSTACK		; Set default stack.
0245   E809             
0246   E809 D3 F0       		OUT (ROM_RAM0),A		; Turn on ROM. Doesn't matter what we output
0247   E80B             
0248   E80B 01 00 16    		LD	BC,01600H			; Copy CP/M ROM (01000h) to RAM (0D000h)
0249   E80E 11 00 D0    		LD	DE,CCP				; Don't copy the BIOS!!!
0250   E811 21 00 10    		LD	HL,ROM_CCP
0251   E814 ED B0       		LDIR
0252   E816             
0253   E816 D3 F1       		OUT (NOROM_RAM0),A		; Turn off ROM. Doesn't matter what we output
0254   E818             
0255   E818             
0256   E818             ;================================================================================================
0257   E818             ; Common code for cold and warm boot
0258   E818             ;================================================================================================
0259   E818             
0260   E818             gocpm:
0261   E818 AF          		XOR	A					; 0 to accumulator
0262   E819 32 E8 FC    		LD	(hstact),A			; host buffer inactive
0263   E81C 32 EA FC    		LD	(unacnt),A			; clear unalloc count
0264   E81F             
0265   E81F 21 80 00    		LD	HL,tpabuf			; ADDress of BIOS DMA buffer.
0266   E822 22 F3 FC    		LD	(dmaAddr),HL
0267   E825             		
0268   E825 3E C3       		LD	A,0C3h				; Opcode for 'JP'.
0269   E827 32 00 00    		LD	(00h),A				; Load at start of RAM.
0270   E82A 21 03 E6    		LD	HL,wboote			; ADDress of jump for a warm boot.
0271   E82D 22 01 00    		LD	(01h),HL
0272   E830 32 05 00    		LD	(05h),A				; Opcode for 'JP'.
0273   E833 21 06 D8    		LD	HL,bdos				; ADDress of jump for the BDOS.
0274   E836 22 06 00    		LD	(06h),HL
0275   E839 32 38 00    		LD	(038H),A			; at 038h write "JP UINT"
0276   E83C 21 51 E8    		LD	HL,UINT				; which is the interrupt routine to catch incoming
0277   E83F 22 39 00    		LD	(039H),HL			; character on the USART
0278   E842 3E 00       		LD	A,0
0279   E844 32 03 00    		LD	(iobyte),A			; Set IOBYTE to 00
0280   E847 3A 04 00    		LD	A,(userdrv)			; Save new drive number (0).
0281   E84A 4F          		LD	C,A					; Pass drive number in C.
0282   E84B             
0283   E84B ED 56       		IM	1
0284   E84D FB          		EI
0285   E84E             	
0286   E84E C3 00 D0    		JP	ccp					; Start CP/M by jumping to the CCP.
0287   E851             
0288   E851             ;================================================================================================
0289   E851             ; Interrupt routine for USART
0290   E851             ;================================================================================================
0291   E851             UINT:
0292   E851 C5          		PUSH	BC
0293   E852 E5          		PUSH	HL
0294   E853             
0295   E853 DB D0       		IN	A,(USART_DAT)		; read incoming byte
0296   E855             ;		OUT	(USART_DAT),A		; send character
0297   E855 ED 4B 45 FF 		LD	BC,(WRPTR)
0298   E859 02          		LD	(BC),A
0299   E85A 03          		INC	BC
0300   E85B 21 45 FF    		LD	HL,BUFEND
0301   E85E 37          		SCF
0302   E85F 3F          		CCF
0303   E860 ED 42       		SBC	HL,BC
0304   E862 20 03       		JR	NZ,EOINT
0305   E864 01 F5 FE    		LD	BC,BUFINI
0306   E867 ED 43 45 FF EOINT:	LD	(WRPTR),BC
0307   E86B             
0308   E86B E1          		POP	HL
0309   E86C C1          		POP	BC
0310   E86D ED 56       		IM	1
0311   E86F FB          		EI
0312   E870 ED 4D       		RETI
0313   E872             
0314   E872             ;================================================================================================
0315   E872             ; Initialize USART
0316   E872             ;================================================================================================
0317   E872             USARTINIT:
0318   E872 3E 00       		LD 	A,0					; Worst case init: put in SYNC mode, 
0319   E874 D3 D1       		OUT	(USART_CMD),A		; send 2 dummy 00 sync chars and reset
0320   E876 00          		NOP
0321   E877 D3 D1       		OUT	(USART_CMD),A
0322   E879 00          		NOP
0323   E87A D3 D1       		OUT	(USART_CMD),A
0324   E87C 3E 40       		LD 	A,040H				; Reset USART
0325   E87E D3 D1       		OUT	(USART_CMD),A
0326   E880 3E 6F       		LD 	A,UMODE				; Set USART mode
0327   E882 D3 D1       		OUT	(USART_CMD),A
0328   E884 3E 15       		LD 	A,UCMD0				; Set USART initial command
0329   E886 D3 D1       		OUT	(USART_CMD),A
0330   E888 C9          		RET
0331   E889             
0332   E889             ;================================================================================================
0333   E889             ; Console I/O routines
0334   E889             ;================================================================================================
0335   E889             ;================================================================================================
0336   E889             ; Console Status (Return A=0FFh if character waiting. Otherwise, A=0)
0337   E889             ;================================================================================================
0338   E889             CONST:
0339   E889 C5          		PUSH	BC
0340   E88A E5          		PUSH	HL
0341   E88B ED 4B 45 FF 		LD	BC,(WRPTR)
0342   E88F 2A 47 FF    		LD	HL,(RDPTR)
0343   E892 AF          		XOR	A					; Reset carry flag
0344   E893 ED 42       		SBC	HL,BC
0345   E895 28 02       		JR	Z,CONVOID
0346   E897 3E FF       		LD	A,0FFH
0347   E899             CONVOID:
0348   E899 E1          		POP	HL
0349   E89A C1          		POP	BC
0350   E89B C9          	  	RET
0351   E89C             
0352   E89C             ;================================================================================================
0353   E89C             ; Console Input (Wait for input and return character in A)
0354   E89C             ;================================================================================================
0355   E89C             CONIN:
0356   E89C C5          		PUSH	BC	
0357   E89D E5          		PUSH	HL	
0358   E89E CD 89 E8    AGAIN:	CALL	CONST
0359   E8A1 FE 00       		CP	0
0360   E8A3 28 F9       		JR	Z,AGAIN			; Keep trying till we receive something
0361   E8A5 ED 4B 47 FF 		LD	BC,(RDPTR)
0362   E8A9 0A          		LD	A,(BC)
0363   E8AA 03          		INC	BC
0364   E8AB 21 45 FF    		LD	HL,BUFEND
0365   E8AE 37          		SCF
0366   E8AF 3F          		CCF
0367   E8B0 ED 42       		SBC	HL,BC
0368   E8B2 20 03       		JR	NZ,EOCONIN
0369   E8B4 01 F5 FE    		LD	BC,BUFINI
0370   E8B7 ED 43 47 FF EOCONIN:	LD	(RDPTR),BC
0371   E8BB E1          		POP	HL
0372   E8BC C1          		POP	BC
0373   E8BD C9          		RET					; Char read returns in A
0374   E8BE             
0375   E8BE             ;================================================================================================
0376   E8BE             ; Console Output (Send character in reg C)
0377   E8BE             ;================================================================================================
0378   E8BE             CONOUT:
0379   E8BE DB D1       		IN	A,(USART_STA)		; read USART status byte
0380   E8C0 E6 04       		AND	04H				; get only the TxEMPTY bit
0381   E8C2 28 FA       		JR	Z,CONOUT
0382   E8C4 79          		LD	A,C
0383   E8C5 D3 D0       		OUT	(USART_DAT),A		; send character
0384   E8C7 C9          		RET
0385   E8C8             
0386   E8C8             ;================================================================================================
0387   E8C8             ; Reader Input
0388   E8C8             ;================================================================================================
0389   E8C8 C3 9C E8    READER:	JP CONIN	
0390   E8CB             
0391   E8CB             ;================================================================================================
0392   E8CB             ; List Output
0393   E8CB             ;================================================================================================
0394   E8CB 3A 03 00    LIST:		LD	A,(iobyte)
0395   E8CE E6 C0       			AND	0C0H			; Get LIST portion of IOBYTE
0396   E8D0 FE C0       			CP	0C0H
0397   E8D2 CA EC E8    			JP	Z,LCD
0398   E8D5 C3 BE E8    			JP CONOUT
0399   E8D8             
0400   E8D8             ;================================================================================================
0401   E8D8             ; Punch Output
0402   E8D8             ;================================================================================================
0403   E8D8 C3 BE E8    PUNCH:	JP CONOUT	
0404   E8DB             
0405   E8DB             ;================================================================================================
0406   E8DB             ; List Status (List = Console)
0407   E8DB             ;================================================================================================
0408   E8DB 3A 03 00    LISTST:		LD	A,(iobyte)
0409   E8DE E6 C0       			AND	0C0H			; Get LIST portion of IOBYTE
0410   E8E0 FE C0       			CP	0C0H
0411   E8E2 CA E8 E8    			JP	Z,LCDST
0412   E8E5 C3 89 E8    			JP CONST
0413   E8E8             
0414   E8E8             ;================================================================================================
0415   E8E8             ; LCD STATUS. Return A=LCD_card_addr. A=0 if no card initialized.
0416   E8E8             ;================================================================================================
0417   E8E8 CD 5B E9    LCDST:		CALL BWAIT
0418   E8EB C9          			RET
0419   E8EC             
0420   E8EC             ;================================================================================================
0421   E8EC             ; LCD OUTPUT. Send C to LCD, if C>1FH (printable range). 
0422   E8EC             ; Accepts also LF, CR and FF (Form Feed = clear LCD).
0423   E8EC             ; If C=DC1, initialize LCD card.
0424   E8EC             ; If C=DC2, position cursor as indicated in regB.
0425   E8EC             ;================================================================================================
0426   E8EC E5          LCD:		PUSH HL
0427   E8ED 79          			LD	A,C
0428   E8EE FE 14       			CP	20
0429   E8F0 FA F8 E8    			JP	M,ASCIILO
0430   E8F3 CD 6D E9    			CALL LCDPUT
0431   E8F6 18 19       			JR	GETOUT
0432   E8F8 FE 0A       ASCIILO:	CP	LF
0433   E8FA CC 8D E9    			CALL Z,LCDLF			; Line Feed
0434   E8FD FE 0D       			CP	CR
0435   E8FF CC 81 E9    			CALL Z,LCDCR			; Carriage Return
0436   E902 FE 0C       			CP	FF
0437   E904 CC 63 E9    			CALL Z,LCDCLEAR			; Form Feed, which is a 'clear LCD'
0438   E907 FE 11       			CP	DC1
0439   E909 CC 13 E9    			CALL Z,LCDINIT			; Initialize LCD card.
0440   E90C FE 12       			CP	DC2
0441   E90E CC 76 E9    			CALL Z,LCDPOS			; Cursor reposition request. New position in regB
0442   E911 E1          GETOUT:		POP	HL
0443   E912 C9          			RET
0444   E913             
0445   E913             ;================================================================================================
0446   E913             ; Initialize LCD
0447   E913             ;================================================================================================
0448   E913 06 0F       LCDINIT:	LD	B,15			; wait 15ms
0449   E915 CD DE E9    			CALL DELAYMS
0450   E918 3E 30       			LD	A,030H			; write command 030h
0451   E91A D3 E0       			OUT	(CMD_WR),A
0452   E91C 06 05       			LD	B,5				; wait 5ms
0453   E91E CD DE E9    			CALL DELAYMS
0454   E921 3E 30       			LD	A,030H			; write command 030h
0455   E923 D3 E0       			OUT	(CMD_WR),A
0456   E925 0E 14       			LD	C,20			; wait (5X20) 100us
0457   E927 CD EA E9    			CALL DELAY5US
0458   E92A 3E 30       			LD	A,030H			; write command 030h
0459   E92C D3 E0       			OUT	(CMD_WR),A
0460   E92E 0E 14       			LD	C,20			; wait (5X20) 100us
0461   E930 CD EA E9    			CALL DELAY5US
0462   E933 3E 38       			LD	A,038H			; write command 038h = function set (8-bits, 2-lines, 5x7dots)
0463   E935 D3 E0       			OUT	(CMD_WR),A
0464   E937 CD 5B E9    			CALL BWAIT
0465   E93A 3E 08       			LD	A,08H			; write command 08h = display (off)
0466   E93C D3 E0       			OUT	(CMD_WR),A
0467   E93E CD 5B E9    			CALL BWAIT
0468   E941 3E 01       			LD	A,01H			; write command 01h = clear display
0469   E943 D3 E0       			OUT	(CMD_WR),A
0470   E945 CD 5B E9    			CALL BWAIT
0471   E948 3E 06       			LD	A,06H			; write command 06h = entry mode (increment)
0472   E94A D3 E0       			OUT	(CMD_WR),A
0473   E94C CD 5B E9    			CALL BWAIT
0474   E94F 3E 0C       			LD	A,0CH			; write command 0Ch = display (on)
0475   E951 D3 E0       			OUT	(CMD_WR),A
0476   E953 3E E0       			LD	A,LCD_ADDR
0477   E955 32 F1 E9    			LD	(LCDSTATUS),A
0478   E958 3E 00       			LD	A,0
0479   E95A C9          			RET
0480   E95B             
0481   E95B             ;================================================================================================
0482   E95B             ; Wait until Busy flag = 0
0483   E95B             ;================================================================================================
0484   E95B DB E2       BWAIT:		IN	A,(CMD_RD)
0485   E95D 07          			RLCA
0486   E95E 38 FB       			JR	C,BWAIT
0487   E960 CB 3F       			SRL	A
0488   E962 C9          			RET
0489   E963             			
0490   E963             ;================================================================================================
0491   E963             ; Clear LCD and goto line 1, column 1.
0492   E963             ;================================================================================================
0493   E963 CD 5B E9    LCDCLEAR:	CALL BWAIT
0494   E966 3E 01       			LD	A,01H
0495   E968 D3 E0       			OUT	(CMD_WR),A
0496   E96A 3E 00       			LD	A,0
0497   E96C C9          			RET
0498   E96D             
0499   E96D             ;================================================================================================
0500   E96D             ; Send to LCD char in regC. Print at current position (what ever it is)
0501   E96D             ;================================================================================================
0502   E96D CD 5B E9    LCDPUT:		CALL BWAIT
0503   E970 79          			LD	A,C	
0504   E971 D3 E1       			OUT	(DAT_WR),A
0505   E973 3E 00       			LD	A,0
0506   E975 C9          			RET
0507   E976             
0508   E976             ;================================================================================================
0509   E976             ; Position LCD cursor at regB.
0510   E976             ;================================================================================================
0511   E976 CD 5B E9    LCDPOS:		CALL BWAIT
0512   E979 78          			LD	A,B
0513   E97A F6 80       			OR	80H
0514   E97C D3 E0       			OUT	(CMD_WR),A
0515   E97E 3E 00       			LD	A,0
0516   E980 C9          			RET
0517   E981             
0518   E981             ;================================================================================================
0519   E981             ; Do CR (Carriage Return)
0520   E981             ;================================================================================================
0521   E981 CD 5B E9    LCDCR:		CALL BWAIT
0522   E984 E6 F0       			AND	0F0H			; Keep line info, set column to 1.
0523   E986 F6 80       			OR	080H
0524   E988 D3 E0       			OUT	(CMD_WR),A
0525   E98A 3E 00       			LD	A,0
0526   E98C C9          			RET
0527   E98D             			
0528   E98D             ;================================================================================================
0529   E98D             ; Do LF (Line Feed)
0530   E98D             ;================================================================================================
0531   E98D CD 5B E9    LCDLF:		CALL BWAIT			; regA holds LCD address counter
0532   E990 57          			LD	D,A
0533   E991 E6 40       			AND	40H				; get only the 7th bit to see on which line the cursor is.
0534   E993 28 26       			JR	Z,LN11
0535   E995 CD 5B E9    			CALL BWAIT
0536   E998 3E C0       			LD	A,0C0H
0537   E99A D3 E0       			OUT	(CMD_WR),A		; set addr counter to source position (2,1)
0538   E99C 21 F2 E9    			LD	HL,BUF
0539   E99F 06 10       			LD	B,10H
0540   E9A1 CD 5B E9    NEWSRC:		CALL BWAIT
0541   E9A4 DB E3       			IN	A,(DAT_RD)		; get data from source position
0542   E9A6 77          			LD	(HL),A			; Store char in buffer
0543   E9A7 23          			INC	HL
0544   E9A8 10 F7       			DJNZ NEWSRC
0545   E9AA CD 63 E9    			CALL LCDCLEAR
0546   E9AD 21 F2 E9    			LD	HL,BUF
0547   E9B0 06 10       			LD	B,10H
0548   E9B2 CD 5B E9    NEWTGT:		CALL BWAIT
0549   E9B5 7E          			LD	A,(HL)
0550   E9B6 23          			INC	HL
0551   E9B7 D3 E1       			OUT	(DAT_WR),A
0552   E9B9 10 F7       			DJNZ NEWTGT
0553   E9BB             
0554   E9BB CD 5B E9    LN11:		CALL BWAIT
0555   E9BE 7A          			LD	A,D
0556   E9BF E6 0F       			AND	0FH
0557   E9C1 F6 C0       			OR	0C0H
0558   E9C3 D3 E0       			OUT	(CMD_WR),A
0559   E9C5 3E 00       			LD	A,0
0560   E9C7 C9          			RET
0561   E9C8             
0562   E9C8             ;================================================================================================
0563   E9C8             ; Delay X seconds, with X passed on reg B
0564   E9C8             ;================================================================================================
0565   E9C8 C5          DELAYS:		PUSH BC
0566   E9C9 E5          			PUSH HL
0567   E9CA 21 8F 02    LOOP0:		LD	HL,655		;2.5				\
0568   E9CD 0E FF       LOOP1:		LD	C,255		;1.75	\			|
0569   E9CF 0D          LOOP2:		DEC	C			;1		|			|
0570   E9D0 00          			NOP				;1		| t=6C+0.5	| 
0571   E9D1 79          			LD	A,C			;1		|			| t=HL(6C+6.5)+1.25
0572   E9D2 20 FB       			JR	NZ,LOOP2	;3/1.75	/			|
0573   E9D4 2B          			DEC	HL			;1					| with HL=655 and c=255, t=1.006sec (WOW!!!)
0574   E9D5 7C          			LD	A,H			;1					|
0575   E9D6 B5          			OR	L			;1					|
0576   E9D7 20 F4       			JR	NZ,LOOP1	;3/1.75				/
0577   E9D9 10 EF       			DJNZ LOOP0		;3.25/2
0578   E9DB E1          			POP	HL
0579   E9DC C1          			POP	BC
0580   E9DD C9          			RET
0581   E9DE             
0582   E9DE             ;================================================================================================
0583   E9DE             ; Delay X miliseconds, with X passed on reg B
0584   E9DE             ;================================================================================================
0585   E9DE C5          DELAYMS:	PUSH BC
0586   E9DF 0E C8       DECB:		LD	C,0C8H
0587   E9E1 00          DECC:		NOP
0588   E9E2 0D          			DEC	C
0589   E9E3 20 FC       			JR	NZ,DECC
0590   E9E5 05          			DEC	B
0591   E9E6 20 F7       			JR	NZ,DECB
0592   E9E8 C1          			POP	BC
0593   E9E9 C9          			RET
0594   E9EA             
0595   E9EA             ;================================================================================================
0596   E9EA             ; Delay 5*X microseconds, with X passed on reg C
0597   E9EA             ;================================================================================================
0598   E9EA C5          DELAY5US:	PUSH BC
0599   E9EB 00          DEC:		NOP
0600   E9EC 0D          			DEC	C
0601   E9ED 20 FC       			JR	NZ,DEC
0602   E9EF C1          			POP	BC
0603   E9F0 C9          			RET
0604   E9F1             
0605   E9F1             ;================================================================================================
0606   E9F1 00          LCDSTATUS	.DB	0			; After LCD has been initialized, it will hold card addr.
0607   E9F2             BUF			.DS	10H			; Buffer for Line Feed operation
0608   EA02             ;================================================================================================
0609   EA02             ; Disk processing entry points
0610   EA02             ;================================================================================================
0611   EA02             seldsk:
0612   EA02 21 00 00    		LD	HL,$0000
0613   EA05 79          		LD	A,C
0614   EA06 FE 10       		CP	16		; 16 for 128MB disk, 8 for 64MB disk
0615   EA08 38 0D       		jr	C,chgdsk	; if invalid drive will give BDOS error
0616   EA0A 3A 04 00    		LD	A,(userdrv)	; so set the drive back to a:
0617   EA0D B9          		CP	C		; If the default disk is not the same as the
0618   EA0E C0          		RET	NZ		; selected drive then return, 
0619   EA0F AF          		XOR	A		; else reset default back to a:
0620   EA10 32 04 00    		LD	(userdrv),A	; otherwise will be stuck in a loop
0621   EA13 32 DE FC    		LD	(sekdsk),A
0622   EA16 C9          		ret
0623   EA17             
0624   EA17 32 DE FC    chgdsk:		LD 	(sekdsk),A
0625   EA1A CB 07       		RLC	a		;*2
0626   EA1C CB 07       		RLC	a		;*4
0627   EA1E CB 07       		RLC	a		;*8
0628   EA20 CB 07       		RLC	a		;*16
0629   EA22 21 36 E6    		LD 	HL,dpbase
0630   EA25 06 00       		LD	b,0
0631   EA27 4F          		LD	c,A	
0632   EA28 09          		ADD	HL,BC
0633   EA29             
0634   EA29 C9          		RET
0635   EA2A             
0636   EA2A             ;------------------------------------------------------------------------------------------------
0637   EA2A             home:
0638   EA2A 3A E9 FC    		ld	a,(hstwrt)	;check for pending write
0639   EA2D B7          		or	a
0640   EA2E 20 03       		jr	nz,homed
0641   EA30 32 E8 FC    		ld	(hstact),a	;clear host active flag
0642   EA33             homed:
0643   EA33 01 00 00    		LD 	BC,0000h
0644   EA36             
0645   EA36             ;------------------------------------------------------------------------------------------------
0646   EA36 ED 43 DF FC settrk:		LD 	(sektrk),BC	; Set track passed from BDOS in register BC.
0647   EA3A C9          		RET
0648   EA3B             
0649   EA3B             ;------------------------------------------------------------------------------------------------
0650   EA3B ED 43 E1 FC setsec:		LD 	(seksec),BC	; Set sector passed from BDOS in register BC.
0651   EA3F C9          		RET
0652   EA40             
0653   EA40             ;------------------------------------------------------------------------------------------------
0654   EA40 ED 43 F3 FC setdma:		LD 	(dmaAddr),BC	; Set DMA ADDress given by registers BC.
0655   EA44 C9          		RET
0656   EA45             
0657   EA45             ;------------------------------------------------------------------------------------------------
0658   EA45 C5          sectran:	PUSH 	BC
0659   EA46 E1          		POP 	HL
0660   EA47 C9          		RET
0661   EA48             
0662   EA48             ;------------------------------------------------------------------------------------------------
0663   EA48             read:
0664   EA48             		;read the selected CP/M sector
0665   EA48 AF          		xor	a
0666   EA49 32 EA FC    		ld	(unacnt),a
0667   EA4C 3E 01       		ld	a,1
0668   EA4E 32 F1 FC    		ld	(readop),a		;read operation
0669   EA51 32 F0 FC    		ld	(rsflag),a		;must read data
0670   EA54 3E 02       		ld	a,wrual
0671   EA56 32 F2 FC    		ld	(wrtype),a		;treat as unalloc
0672   EA59 C3 C3 EA    		jp	rwoper			;to perform the read
0673   EA5C             
0674   EA5C             
0675   EA5C             ;------------------------------------------------------------------------------------------------
0676   EA5C             write:
0677   EA5C             		;write the selected CP/M sector
0678   EA5C AF          		xor	a		;0 to accumulator
0679   EA5D 32 F1 FC    		ld	(readop),a	;not a read operation
0680   EA60 79          		ld	a,c		;write type in c
0681   EA61 32 F2 FC    		ld	(wrtype),a
0682   EA64 FE 02       		cp	wrual		;write unallocated?
0683   EA66 20 17       		jr	nz,chkuna	;check for unalloc
0684   EA68             ;
0685   EA68             ;		write to unallocated, set parameters
0686   EA68 3E 20       		ld	a,blksiz/128	;next unalloc recs
0687   EA6A 32 EA FC    		ld	(unacnt),a
0688   EA6D 3A DE FC    		ld	a,(sekdsk)		;disk to seek
0689   EA70 32 EB FC    		ld	(unadsk),a		;unadsk = sekdsk
0690   EA73 2A DF FC    		ld	hl,(sektrk)
0691   EA76 22 EC FC    		ld	(unatrk),hl		;unatrk = sectrk
0692   EA79 3A E1 FC    		ld	a,(seksec)
0693   EA7C 32 EE FC    		ld	(unasec),a		;unasec = seksec
0694   EA7F             ;
0695   EA7F             chkuna:
0696   EA7F             ;		check for write to unallocated sector
0697   EA7F 3A EA FC    		ld	a,(unacnt)		;any unalloc remain?
0698   EA82 B7          		or	a	
0699   EA83 28 36       		jr	z,alloc		;skip if not
0700   EA85             ;
0701   EA85             ;		more unallocated records remain
0702   EA85 3D          		dec	a		;unacnt = unacnt-1
0703   EA86 32 EA FC    		ld	(unacnt),a
0704   EA89 3A DE FC    		ld	a,(sekdsk)		;same disk?
0705   EA8C 21 EB FC    		ld	hl,unadsk
0706   EA8F BE          		cp	(hl)		;sekdsk = unadsk?
0707   EA90 C2 BB EA    		jp	nz,alloc		;skip if not
0708   EA93             ;
0709   EA93             ;		disks are the same
0710   EA93 21 EC FC    		ld	hl,unatrk
0711   EA96 CD 5A EB    		call	sektrkcmp	;sektrk = unatrk?
0712   EA99 C2 BB EA    		jp	nz,alloc		;skip if not
0713   EA9C             ;
0714   EA9C             ;		tracks are the same
0715   EA9C 3A E1 FC    		ld	a,(seksec)		;same sector?
0716   EA9F 21 EE FC    		ld	hl,unasec
0717   EAA2 BE          		cp	(hl)		;seksec = unasec?
0718   EAA3 C2 BB EA    		jp	nz,alloc		;skip if not
0719   EAA6             ;
0720   EAA6             ;		match, move to next sector for future ref
0721   EAA6 34          		inc	(hl)		;unasec = unasec+1
0722   EAA7 7E          		ld	a,(hl)		;end of track?
0723   EAA8 FE 80       		cp	cpmspt		;count CP/M sectors
0724   EAAA 38 09       		jr	c,noovf		;skip if no overflow
0725   EAAC             ;
0726   EAAC             ;		overflow to next track
0727   EAAC 36 00       		ld	(hl),0		;unasec = 0
0728   EAAE 2A EC FC    		ld	hl,(unatrk)
0729   EAB1 23          		inc	hl
0730   EAB2 22 EC FC    		ld	(unatrk),hl		;unatrk = unatrk+1
0731   EAB5             ;
0732   EAB5             noovf:
0733   EAB5             		;match found, mark as unnecessary read
0734   EAB5 AF          		xor	a		;0 to accumulator
0735   EAB6 32 F0 FC    		ld	(rsflag),a		;rsflag = 0
0736   EAB9 18 08       		jr	rwoper		;to perform the write
0737   EABB             ;
0738   EABB             alloc:
0739   EABB             		;not an unallocated record, requires pre-read
0740   EABB AF          		xor	a		;0 to accum
0741   EABC 32 EA FC    		ld	(unacnt),a		;unacnt = 0
0742   EABF 3C          		inc	a		;1 to accum
0743   EAC0 32 F0 FC    		ld	(rsflag),a		;rsflag = 1
0744   EAC3             
0745   EAC3             ;------------------------------------------------------------------------------------------------
0746   EAC3             rwoper:
0747   EAC3             		;enter here to perform the read/write
0748   EAC3 AF          		xor	a		;zero to accum
0749   EAC4 32 EF FC    		ld	(erflag),a		;no errors (yet)
0750   EAC7 3A E1 FC    		ld	a,(seksec)		;compute host sector
0751   EACA B7          		or	a		;carry = 0
0752   EACB 1F          		rra			;shift right
0753   EACC B7          		or	a		;carry = 0
0754   EACD 1F          		rra			;shift right
0755   EACE 32 E7 FC    		ld	(sekhst),a		;host sector to seek
0756   EAD1             ;
0757   EAD1             ;		active host sector?
0758   EAD1 21 E8 FC    		ld	hl,hstact	;host active flag
0759   EAD4 7E          		ld	a,(hl)
0760   EAD5 36 01       		ld	(hl),1		;always becomes 1
0761   EAD7 B7          		or	a		;was it already?
0762   EAD8 28 21       		jr	z,filhst		;fill host if not
0763   EADA             ;
0764   EADA             ;		host buffer active, same as seek buffer?
0765   EADA 3A DE FC    		ld	a,(sekdsk)
0766   EADD 21 E3 FC    		ld	hl,hstdsk	;same disk?
0767   EAE0 BE          		cp	(hl)		;sekdsk = hstdsk?
0768   EAE1 20 11       		jr	nz,nomatch
0769   EAE3             ;
0770   EAE3             ;		same disk, same track?
0771   EAE3 21 E4 FC    		ld	hl,hsttrk
0772   EAE6 CD 5A EB    		call	sektrkcmp	;sektrk = hsttrk?
0773   EAE9 20 09       		jr	nz,nomatch
0774   EAEB             ;
0775   EAEB             ;		same disk, same track, same buffer?
0776   EAEB 3A E7 FC    		ld	a,(sekhst)
0777   EAEE 21 E6 FC    		ld	hl,hstsec	;sekhst = hstsec?
0778   EAF1 BE          		cp	(hl)
0779   EAF2 28 24       		jr	z,match		;skip if match
0780   EAF4             ;
0781   EAF4             nomatch:
0782   EAF4             		;proper disk, but not correct sector
0783   EAF4 3A E9 FC    		ld	a,(hstwrt)		;host written?
0784   EAF7 B7          		or	a
0785   EAF8 C4 02 EC    		call	nz,writehst	;clear host buff
0786   EAFB             ;
0787   EAFB             filhst:
0788   EAFB             		;may have to fill the host buffer
0789   EAFB 3A DE FC    		ld	a,(sekdsk)
0790   EAFE 32 E3 FC    		ld	(hstdsk),a
0791   EB01 2A DF FC    		ld	hl,(sektrk)
0792   EB04 22 E4 FC    		ld	(hsttrk),hl
0793   EB07 3A E7 FC    		ld	a,(sekhst)
0794   EB0A 32 E6 FC    		ld	(hstsec),a
0795   EB0D 3A F0 FC    		ld	a,(rsflag)		;need to read?
0796   EB10 B7          		or	a
0797   EB11 C4 D9 EB    		call	nz,readhst		;yes, if 1
0798   EB14 AF          		xor	a		;0 to accum
0799   EB15 32 E9 FC    		ld	(hstwrt),a		;no pending write
0800   EB18             ;
0801   EB18             match:
0802   EB18             		;copy data to or from buffer
0803   EB18 3A E1 FC    		ld	a,(seksec)		;mask buffer number
0804   EB1B E6 03       		and	secmsk		;least signif bits
0805   EB1D 6F          		ld	l,a		;ready to shift
0806   EB1E 26 00       		ld	h,0		;double count
0807   EB20 29          		add	hl,hl
0808   EB21 29          		add	hl,hl
0809   EB22 29          		add	hl,hl
0810   EB23 29          		add	hl,hl
0811   EB24 29          		add	hl,hl
0812   EB25 29          		add	hl,hl
0813   EB26 29          		add	hl,hl
0814   EB27             ;		hl has relative host buffer address
0815   EB27 11 F5 FC    		ld	de,hstbuf
0816   EB2A 19          		add	hl,de		;hl = host address
0817   EB2B EB          		ex	de,hl			;now in DE
0818   EB2C 2A F3 FC    		ld	hl,(dmaAddr)		;get/put CP/M data
0819   EB2F 0E 80       		ld	c,128		;length of move
0820   EB31 3A F1 FC    		ld	a,(readop)		;which way?
0821   EB34 B7          		or	a
0822   EB35 20 06       		jr	nz,rwmove		;skip if read
0823   EB37             ;
0824   EB37             ;	write operation, mark and switch direction
0825   EB37 3E 01       		ld	a,1
0826   EB39 32 E9 FC    		ld	(hstwrt),a		;hstwrt = 1
0827   EB3C EB          		ex	de,hl			;source/dest swap
0828   EB3D             ;
0829   EB3D             rwmove:
0830   EB3D             		;C initially 128, DE is source, HL is dest
0831   EB3D 1A          		ld	a,(de)		;source character
0832   EB3E 13          		inc	de
0833   EB3F 77          		ld	(hl),a		;to dest
0834   EB40 23          		inc	hl
0835   EB41 0D          		dec	c		;loop 128 times
0836   EB42 20 F9       		jr	nz,rwmove
0837   EB44             ;
0838   EB44             ;		data has been moved to/from host buffer
0839   EB44 3A F2 FC    		ld	a,(wrtype)		;write type
0840   EB47 FE 01       		cp	wrdir		;to directory?
0841   EB49 3A EF FC    		ld	a,(erflag)		;in case of errors
0842   EB4C C0          		ret	nz			;no further processing
0843   EB4D             ;
0844   EB4D             ;		clear host buffer for directory write
0845   EB4D B7          		or	a		;errors?
0846   EB4E C0          		ret	nz			;skip if so
0847   EB4F AF          		xor	a		;0 to accum
0848   EB50 32 E9 FC    		ld	(hstwrt),a		;buffer written
0849   EB53 CD 02 EC    		call	writehst
0850   EB56 3A EF FC    		ld	a,(erflag)
0851   EB59 C9          		ret
0852   EB5A             
0853   EB5A             ;------------------------------------------------------------------------------------------------
0854   EB5A             ;Utility subroutine for 16-bit compare
0855   EB5A             sektrkcmp:
0856   EB5A             		;HL = .unatrk or .hsttrk, compare with sektrk
0857   EB5A EB          		ex	de,hl
0858   EB5B 21 DF FC    		ld	hl,sektrk
0859   EB5E 1A          		ld	a,(de)		;low byte compare
0860   EB5F BE          		cp	(HL)		;same?
0861   EB60 C0          		ret	nz			;return if not
0862   EB61             ;		low bytes equal, test high 1s
0863   EB61 13          		inc	de
0864   EB62 23          		inc	hl
0865   EB63 1A          		ld	a,(de)
0866   EB64 BE          		cp	(hl)	;sets flags
0867   EB65 C9          		ret
0868   EB66             
0869   EB66             ;================================================================================================
0870   EB66             ; Convert track/head/sector into LBA for physical access to the disk
0871   EB66             ;================================================================================================
0872   EB66             setLBAaddr:	
0873   EB66 2A E4 FC    		LD	HL,(hsttrk)
0874   EB69 CB 05       		RLC	L
0875   EB6B CB 05       		RLC	L
0876   EB6D CB 05       		RLC	L
0877   EB6F CB 05       		RLC	L
0878   EB71 CB 05       		RLC	L
0879   EB73 7D          		LD	A,L
0880   EB74 E6 E0       		AND	0E0H
0881   EB76 6F          		LD	L,A
0882   EB77 3A E6 FC    		LD	A,(hstsec)
0883   EB7A 85          		ADD	A,L
0884   EB7B 32 DA FC    		LD	(lba0),A
0885   EB7E             
0886   EB7E 2A E4 FC    		LD	HL,(hsttrk)
0887   EB81 CB 0D       		RRC	L
0888   EB83 CB 0D       		RRC	L
0889   EB85 CB 0D       		RRC	L
0890   EB87 7D          		LD	A,L
0891   EB88 E6 1F       		AND	01FH
0892   EB8A 6F          		LD	L,A
0893   EB8B CB 04       		RLC	H
0894   EB8D CB 04       		RLC	H
0895   EB8F CB 04       		RLC	H
0896   EB91 CB 04       		RLC	H
0897   EB93 CB 04       		RLC	H
0898   EB95 7C          		LD	A,H
0899   EB96 E6 20       		AND	020H
0900   EB98 67          		LD	H,A
0901   EB99 3A E3 FC    		LD	A,(hstdsk)
0902   EB9C CB 07       		RLC	a
0903   EB9E CB 07       		RLC	a
0904   EBA0 CB 07       		RLC	a
0905   EBA2 CB 07       		RLC	a
0906   EBA4 CB 07       		RLC	a
0907   EBA6 CB 07       		RLC	a
0908   EBA8 E6 C0       		AND	0C0H
0909   EBAA 84          		ADD	A,H
0910   EBAB 85          		ADD	A,L
0911   EBAC 32 DB FC    		LD	(lba1),A
0912   EBAF             		
0913   EBAF             
0914   EBAF 3A E3 FC    		LD	A,(hstdsk)
0915   EBB2 CB 0F       		RRC	A
0916   EBB4 CB 0F       		RRC	A
0917   EBB6 E6 03       		AND	03H
0918   EBB8 32 DC FC    		LD	(lba2),A
0919   EBBB             
0920   EBBB             ; LBA Mode using drive 0 = E0
0921   EBBB 3E E0       		LD	a,0E0H
0922   EBBD 32 DD FC    		LD	(lba3),A
0923   EBC0             
0924   EBC0             
0925   EBC0 3A DA FC    		LD	A,(lba0)
0926   EBC3 D3 B3       		OUT 	(CF_LBA0),A
0927   EBC5             
0928   EBC5 3A DB FC    		LD	A,(lba1)
0929   EBC8 D3 B4       		OUT 	(CF_LBA1),A
0930   EBCA             
0931   EBCA 3A DC FC    		LD	A,(lba2)
0932   EBCD D3 B5       		OUT 	(CF_LBA2),A
0933   EBCF             
0934   EBCF 3A DD FC    		LD	A,(lba3)
0935   EBD2 D3 B6       		OUT 	(CF_LBA3),A
0936   EBD4             
0937   EBD4 3E 01       		LD 	A,1
0938   EBD6 D3 B2       		OUT 	(CF_SECCOUNT),A
0939   EBD8             
0940   EBD8 C9          		RET				
0941   EBD9             
0942   EBD9             ;================================================================================================
0943   EBD9             ; Read physical sector from host
0944   EBD9             ;================================================================================================
0945   EBD9             readhst:
0946   EBD9 F5          		PUSH 	AF
0947   EBDA C5          		PUSH 	BC
0948   EBDB E5          		PUSH 	HL
0949   EBDC             
0950   EBDC CD 2B EC    		CALL 	cfWait
0951   EBDF             
0952   EBDF CD 66 EB    		CALL 	setLBAaddr
0953   EBE2             
0954   EBE2 3E 20       		LD 	A,CF_READ_SEC
0955   EBE4 D3 B7       		OUT 	(CF_COMMAND),A
0956   EBE6             
0957   EBE6 CD 2B EC    		CALL 	cfWait
0958   EBE9             
0959   EBE9 0E 04       		LD 	c,4
0960   EBEB 21 F5 FC    		LD 	HL,hstbuf
0961   EBEE             rd4secs:
0962   EBEE 06 80       		LD 	b,128
0963   EBF0             rdByte:
0964   EBF0 DB B0       		in 	A,(CF_DATA)
0965   EBF2 77          		LD 	(HL),A
0966   EBF3 23          		iNC 	HL
0967   EBF4 05          		dec 	b
0968   EBF5 20 F9       		JR 	NZ, rdByte
0969   EBF7 0D          		dec 	c
0970   EBF8 20 F4       		JR 	NZ,rd4secs
0971   EBFA             
0972   EBFA E1          		POP 	HL
0973   EBFB C1          		POP 	BC
0974   EBFC F1          		POP 	AF
0975   EBFD             
0976   EBFD AF          		XOR 	a
0977   EBFE 32 EF FC    		ld	(erflag),a
0978   EC01 C9          		RET
0979   EC02             
0980   EC02             ;================================================================================================
0981   EC02             ; Write physical sector to host
0982   EC02             ;================================================================================================
0983   EC02             writehst:
0984   EC02 F5          		PUSH 	AF
0985   EC03 C5          		PUSH 	BC
0986   EC04 E5          		PUSH 	HL
0987   EC05             
0988   EC05 CD 2B EC    		CALL 	cfWait
0989   EC08             
0990   EC08 CD 66 EB    		CALL 	setLBAaddr
0991   EC0B             
0992   EC0B 3E 30       		LD 	A,CF_WRITE_SEC
0993   EC0D D3 B7       		OUT 	(CF_COMMAND),A
0994   EC0F             
0995   EC0F CD 2B EC    		CALL 	cfWait
0996   EC12             
0997   EC12 0E 04       		LD 	c,4
0998   EC14 21 F5 FC    		LD 	HL,hstbuf
0999   EC17             wr4secs:
1000   EC17 06 80       		LD 	b,128
1001   EC19 7E          wrByte:		LD 	A,(HL)
1002   EC1A D3 B0       		OUT 	(CF_DATA),A
1003   EC1C 23          		iNC 	HL
1004   EC1D 05          		dec 	b
1005   EC1E 20 F9       		JR 	NZ, wrByte
1006   EC20             
1007   EC20 0D          		dec 	c
1008   EC21 20 F4       		JR 	NZ,wr4secs
1009   EC23             
1010   EC23 E1          		POP 	HL
1011   EC24 C1          		POP 	BC
1012   EC25 F1          		POP 	AF
1013   EC26             
1014   EC26 AF          		XOR 	a
1015   EC27 32 EF FC    		ld	(erflag),a
1016   EC2A C9          		RET
1017   EC2B             
1018   EC2B             ;================================================================================================
1019   EC2B             ; Wait for disk to be ready (busy=0,ready=1)
1020   EC2B             ;================================================================================================
1021   EC2B             cfWait:
1022   EC2B F5          		PUSH 	AF
1023   EC2C             cfWait1:
1024   EC2C DB B7       		in 	A,(CF_STATUS)
1025   EC2E E6 80       		AND 	080H
1026   EC30 FE 80       		cp 	080H
1027   EC32 28 F8       		JR	Z,cfWait1
1028   EC34 F1          		POP 	AF
1029   EC35 C9          		RET
1030   EC36             
1031   EC36             ;================================================================================================
1032   EC36             ; Print (on console) a sequence of characters ending with zero
1033   EC36             ;================================================================================================
1034   EC36             PRINTSEQ:
1035   EC36 E3          		EX 	(SP),HL 		; Push HL and put RET address into HL
1036   EC37 F5          		PUSH 	AF
1037   EC38 C5          		PUSH 	BC
1038   EC39             NEXTCHAR:
1039   EC39 7E          		LD 	A,(HL)
1040   EC3A FE 00       		CP	0
1041   EC3C 28 07       		JR	Z,ENDOFPRINT
1042   EC3E 4F          		LD  	C,A
1043   EC3F CD BE E8    		CALL 	CONOUT		; Print to console
1044   EC42 23          		INC 	HL
1045   EC43 18 F4       		JR	NEXTCHAR
1046   EC45             ENDOFPRINT:
1047   EC45 23          		INC 	HL 			; Get past "null" terminator
1048   EC46 C1          		POP 	BC
1049   EC47 F1          		POP 	AF
1050   EC48 E3          		EX 	(SP),HL 		; Push new RET address on stack and restore HL
1051   EC49 C9          		RET
1052   EC4A             
1053   EC4A             ;================================================================================================
1054   EC4A             ; Data storage
1055   EC4A             ;================================================================================================
1056   EC4A             dirbuf: 	.ds 128 		;scratch directory area
1057   ECCA             alv00: 		.ds 257			;allocation vector 0
1058   EDCB             alv01: 		.ds 257			;allocation vector 1
1059   EECC             alv02: 		.ds 257			;allocation vector 2
1060   EFCD             alv03: 		.ds 257			;allocation vector 3
1061   F0CE             alv04: 		.ds 257			;allocation vector 4
1062   F1CF             alv05: 		.ds 257			;allocation vector 5
1063   F2D0             alv06: 		.ds 257			;allocation vector 6
1064   F3D1             alv07: 		.ds 257			;allocation vector 7
1065   F4D2             alv08: 		.ds 257			;allocation vector 8
1066   F5D3             alv09: 		.ds 257			;allocation vector 9
1067   F6D4             alv10: 		.ds 257			;allocation vector 10
1068   F7D5             alv11: 		.ds 257			;allocation vector 11
1069   F8D6             alv12: 		.ds 257			;allocation vector 12
1070   F9D7             alv13: 		.ds 257			;allocation vector 13
1071   FAD8             alv14: 		.ds 257			;allocation vector 14
1072   FBD9             alv15: 		.ds 257			;allocation vector 15
1073   FCDA             
1074   FCDA 00          lba0		.DB	00h
1075   FCDB 00          lba1		.DB	00h
1076   FCDC 00          lba2		.DB	00h
1077   FCDD 00          lba3		.DB	00h
1078   FCDE             
1079   FCDE             sekdsk:		.ds	1		;seek disk number
1080   FCDF             sektrk:		.ds	2		;seek track number
1081   FCE1             seksec:		.ds	2		;seek sector number
1082   FCE3             ;
1083   FCE3             hstdsk:		.ds	1		;host disk number
1084   FCE4             hsttrk:		.ds	2		;host track number
1085   FCE6             hstsec:		.ds	1		;host sector number
1086   FCE7             ;
1087   FCE7             sekhst:		.ds	1		;seek shr secshf
1088   FCE8             hstact:		.ds	1		;host active flag
1089   FCE9             hstwrt:		.ds	1		;host written flag
1090   FCEA             ;
1091   FCEA             unacnt:		.ds	1		;unalloc rec cnt
1092   FCEB             unadsk:		.ds	1		;last unalloc disk
1093   FCEC             unatrk:		.ds	2		;last unalloc track
1094   FCEE             unasec:		.ds	1		;last unalloc sector
1095   FCEF             ;
1096   FCEF             erflag:		.ds	1		;error reporting
1097   FCF0             rsflag:		.ds	1		;read sector flag
1098   FCF1             readop:		.ds	1		;1 if read operation
1099   FCF2             wrtype:		.ds	1		;write operation type
1100   FCF3             dmaAddr:	.ds	2		;last dma address
1101   FCF5             hstbuf:		.ds	512		;host buffer
1102   FEF5             hstBufEnd:	.EQU	$
1103   FEF5             
1104   FEF5             BUFINI		.EQU	$
1105   FEF5             			.DS	050H
1106   FF45             BUFEND		.EQU	$
1107   FF45             WRPTR:		.DS	2			; write pointer
1108   FF47             RDPTR:		.DS	2			; read pointer
1109   FF49             
1110   FF49             			.DS	020h			; Start of BIOS stack area.
1111   FF69             BIOSSTACK:	.EQU	$
1112   FF69             
1113   FF69             biosEnd:	.EQU	$
1114   FF69             
1115   FF69             		.END
tasm: Number of errors = 0
