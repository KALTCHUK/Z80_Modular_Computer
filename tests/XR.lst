0001   0000             ;*****************************************************************************
0002   0000             ; XR - Xmodem Receive for Z80 CP/M 2.2 using CON:
0003   0000             ; Copyright 2017 Mats Engstrom, SmallRoomLabs
0004   0000             ;
0005   0000             ; Licensed under the MIT license
0006   0000             ;*****************************************************************************
0007   0000             ;
0008   0000             ;	Common entry points and locations
0009   0000             ;
0010   0000             BOOT		.EQU	0000h			; Warm boot/Reset vector
0011   0000             BDOS		.EQU 	0005h			; BDOS function vector
0012   0000             DFCB		.EQU	5CH				; Default File Control Block
0013   0000             DFCBcr		.EQU 	DFCB+32 		; Current record
0014   0000             dbuf		.EQU	0080h
0015   0000             TPA			.EQU	0100H
0016   0000             BIOS		.EQU	0E600h			; Base of BIOS.
0017   0000             
0018   0000             ;
0019   0000             ; BDOS function codes
0020   0000             ;
0021   0000             CLOSEFIL	.EQU	16				; Close File DE=FCBaddr A<handle (FFerr)
0022   0000             DELFILE		.EQU	19				; Delete File DE=FCBaddr A<handle (FFerr)
0023   0000             WRTSEQ		.EQU	21				; Write Sequential DE=FCBaddr A<status (00ok)
0024   0000             FCREATE		.EQU	22				; Make File  DE=FCBaddr A<handle (FFerr)
0025   0000             PUTDMA		.EQU	26				; Set DMA Address DE=addr
0026   0000             
0027   0000             ;
0028   0000             ; ASCII codes
0029   0000             ;
0030   0000             LF			.EQU	'J'-40h			; ^J = LF
0031   0000             CR 			.EQU 	'M'-40h			; ^M = CR
0032   0000             SOH			.EQU	'A'-40h			; ^A = SOH
0033   0000             EOT			.EQU	'D'-40h			; ^D = EOT
0034   0000             ACK			.EQU	'F'-40h			; ^F = ACK
0035   0000             NAK			.EQU	'U'-40h			; ^U = NAK
0036   0000             CAN			.EQU	'X'-40h			; ^X = CAN
0037   0000             
0038   0000             ;
0039   0000             ; BIOS ENTRY POINTS
0040   0000             ;
0041   0000             CONST		.EQU	BIOS+(3*2)		; BIOS entry for Console Status (regA=0FFh, char waiting. regA=0, buff empty)
0042   0000             CONIN		.EQU	BIOS+(3*3)		; BIOS entry for Console Input (console --> regA)
0043   0000             CONOUT		.EQU	BIOS+(3*4)		; BIOS entry for Console Output (regC --> console)
0044   0000             
0045   0000             ;
0046   0000             ; Start of code
0047   0000             ;
0048   0100             			.ORG TPA
0049   0100             
0050   0100 ED 73 63 03 			ld	(oldSP),SP
0051   0104 31 ED 04    			ld	SP,stackend
0052   0107             
0053   0107 21 8E 02    			ld	HL,msgHeader	; Print a greeting
0054   010A CD 51 02    			call	PrintString0
0055   010D             
0056   010D 3A 5D 00    			ld	A,(DFCB+1)	; Check if we got a filename
0057   0110 FE 20       			cp	' '
0058   0112 CA F9 01    			jp	Z,NoFileName
0059   0115             
0060   0115 11 5C 00    			ld  	DE,DFCB		; Then create new file
0061   0118 3E 00       			ld 	A,0		; Start at block 0
0062   011A 32 7C 00    			ld	(DFCBcr),A
0063   011D 0E 16       			ld 	C,FCREATE
0064   011F CD 05 00    			call	BDOS		; Returns A in 255 if error opening
0065   0122 3C          			inc 	A
0066   0123 CA E4 01    			jp	Z,FailCreateFile
0067   0126             
0068   0126 3E 01       			ld 	A,1		; The first packet is number 1
0069   0128 32 67 03    			ld 	(pktNo),A
0070   012B 3E FE       			ld 	A,255-1		; Also store the 1-complement of it
0071   012D 32 68 03    			ld 	(pktNo1c),A
0072   0130             
0073   0130             GetNewPacket:
0074   0130 3E 14       			ld	A,20		; We retry 20 times before giving up
0075   0132 32 65 03    			ld 	(retrycnt),A
0076   0135             
0077   0135             NPloop:
0078   0135 3E 05       			ld 	A,5		; 5 Seconds of timeout before each new block
0079   0137 CD 1C 02    			call	GetCharTmo
0080   013A D2 4C 01    			jp 	NC,NotPacketTimeout
0081   013D             
0082   013D 21 65 03    			ld	HL,retrycnt	; Reached max number of retries?
0083   0140 35          			dec 	(HL)
0084   0141 CA 02 02    			jp 	Z,Failure	; Yes, print message and exit
0085   0144             
0086   0144 0E 15       			ld 	C,NAK		; Send a NAK to the uploader
0087   0146 CD 0C E6    			call	CONOUT
0088   0149 C3 35 01    			jp 	NPloop
0089   014C             
0090   014C             NotPacketTimeout:
0091   014C FE 04       			cp	EOT		; Did uploader say we're finished?
0092   014E CA CA 01    			jp	Z,Done		; Yes, then we're done
0093   0151 FE 18       			cp 	CAN		; Uploader wants to abort transfer?
0094   0153 CA 08 02    			jp 	Z,Cancelled	; Yes, then we're also done
0095   0156 FE 01       			cp	SOH		; Did we get a start-of-new-packet?
0096   0158 C2 35 01    			jp	NZ,NPloop	; No, go back and try again
0097   015B             
0098   015B 21 69 03    			ld	HL,packet	; Save the received char into the...
0099   015E 77          			ld	(HL),A		; ...packet buffer and...
0100   015F 23          			inc 	HL		; ...point to the next location
0101   0160 E5          			push 	HL
0102   0161             
0103   0161 06 83       			ld 	B,131		; Get 131 more characters for a full packet
0104   0163             GetRestOfPacket:
0105   0163 C5          			push 	BC
0106   0164 3E 01       			ld 	A,1
0107   0166 CD 1C 02    			call	GetCharTmo
0108   0169 C1          			pop 	BC
0109   016A             
0110   016A E1          			pop	HL		; Save the received char into the...
0111   016B 77          			ld	(HL),A		; ...packet buffer and...
0112   016C 23          			inc 	HL		; ...point to the next location
0113   016D E5          			push 	HL
0114   016E             
0115   016E 10 F3       			djnz	GetRestOfPacket
0116   0170             
0117   0170 21 6C 03    			ld	HL,packet+3	; Calculate checksum from 128 bytes of data
0118   0173 06 80       			ld	B,128
0119   0175 3E 00       			ld	A,0
0120   0177 86          csloop:		add	A,(HL)		; Just add up the bytes
0121   0178 23          			inc	HL
0122   0179 10 FC       			djnz	csloop
0123   017B             
0124   017B AE          			xor	(HL)		; HL points to the received checksum so
0125   017C C2 02 02    			jp	NZ,Failure	; by xoring it to our sum we check for equality
0126   017F             
0127   017F 3A 67 03    			ld	A,(pktNo)	; Check if agreement of packet numbers
0128   0182 4F          			ld	C,A
0129   0183 3A 6A 03    			ld	A,(packet+1)
0130   0186 B9          			cp	C
0131   0187 C2 02 02    			jp	NZ,Failure
0132   018A             
0133   018A 3A 68 03    			ld	A,(pktNo1c)	; Check if agreement of 1-compl packet numbers
0134   018D 4F          			ld	C,A
0135   018E 3A 6B 03    			ld	A,(packet+2)
0136   0191 B9          			cp	C
0137   0192 C2 02 02    			jp	NZ,Failure
0138   0195             
0139   0195 11 6C 03    			ld	DE,packet+3	; Reset DMA address to the packet data buff
0140   0198 0E 1A       			ld 	C,PUTDMA
0141   019A CD 05 00    			call	BDOS
0142   019D 11 5C 00    			ld  	DE,DFCB		; File Description Block
0143   01A0 0E 15       			ld 	C,WRTSEQ
0144   01A2 CD 05 00    			call	BDOS		; Returns A=0 if ok
0145   01A5 FE 00       			cp	0
0146   01A7 C2 F3 01    			jp	NZ,FailWrite
0147   01AA             
0148   01AA 21 67 03    			ld	HL,pktNo	; Update the packet counters
0149   01AD 34          			inc 	(HL)
0150   01AE 21 68 03    			ld	HL,pktNo1c
0151   01B1 35          			dec	(HL)
0152   01B2             
0153   01B2 0E 06       			ld 	C,ACK		; Tell uploader that we're happy with with
0154   01B4 CD 0C E6    			call	CONOUT		; packet and go back and fetch some more
0155   01B7 C3 30 01    			jp	GetNewPacket
0156   01BA             
0157   01BA             DeleteFile:
0158   01BA 11 5C 00    			ld  	DE,DFCB		; Delete file first
0159   01BD 0E 13       			ld 	C,DELFILE	;
0160   01BF C3 05 00    			jp	BDOS		; Returns A=255 if error, but we don't care
0161   01C2             
0162   01C2             CloseFile:
0163   01C2 11 5C 00    			ld  	DE,DFCB		; Close the file
0164   01C5 0E 10       			ld 	C,CLOSEFIL
0165   01C7 C3 05 00    			jp	BDOS
0166   01CA             
0167   01CA             Done:
0168   01CA CD C2 01    			call	CloseFile
0169   01CD 0E 06       			ld	C,ACK		; Tell uploader we're done
0170   01CF CD 0C E6    			call	CONOUT
0171   01D2 21 10 03    			ld 	HL,msgSucces1	; Print success message and filename
0172   01D5 CD 51 02    			call	PrintString0
0173   01D8 CD 69 02    			call	PrintFilename
0174   01DB 21 18 03    			ld 	HL,msgSucces2
0175   01DE CD 51 02    			call 	PrintString0
0176   01E1 C3 17 02    			jp	Exit
0177   01E4             
0178   01E4             FailCreateFile:
0179   01E4 21 31 03    			ld	HL,msgFailCre
0180   01E7 CD 51 02    			call	PrintString0
0181   01EA CD 69 02    			call	PrintFilename
0182   01ED 21 60 03    			ld	HL,msgCRLF
0183   01F0 C3 17 02    			jp	Exit
0184   01F3             
0185   01F3             FailWrite:
0186   01F3 21 C3 02    			ld	HL,msgFailWrt
0187   01F6 C3 0E 02    			jp	Die
0188   01F9             
0189   01F9             NoFileName:
0190   01F9 21 4D 03    			ld 	HL,msgNoFile
0191   01FC CD 51 02    			call 	PrintString0
0192   01FF C3 17 02    			jp	Exit
0193   0202             
0194   0202             Failure:
0195   0202 21 DE 02    			ld 	HL,msgFailure
0196   0205 C3 0E 02    			jp	Die
0197   0208             
0198   0208             Cancelled:
0199   0208 21 F5 02    			ld 	HL,msgCancel
0200   020B C3 0E 02    			jp	Die
0201   020E             
0202   020E             Die:
0203   020E CD 51 02    			call 	PrintString0	; Prints message and exits from program
0204   0211 CD C2 01    			call	CloseFile
0205   0214 CD BA 01    			call	DeleteFile
0206   0217             Exit:
0207   0217 ED 7B 63 03 			ld	SP,(oldSP)
0208   021B C9          			ret
0209   021C             
0210   021C             
0211   021C             ;
0212   021C             ; Waits for up to A seconds for a character to become available and
0213   021C             ; returns it in A without echo and Carry clear. If timeout then Carry
0214   021C             ; it set.
0215   021C             ;
0216   021C             GetCharTmo:
0217   021C 47          			ld 	B,A
0218   021D             GCtmoa:
0219   021D C5          			push	BC
0220   021E 06 FF       			ld	B,255
0221   0220             GCtmob:
0222   0220 C5          			push	BC
0223   0221 06 FF       			ld	B,255
0224   0223             GCtmoc:
0225   0223 C5          			push	BC
0226   0224 CD 06 E6    			call	CONST
0227   0227 FE 00       			cp	00h		; A char available?
0228   0229 C2 49 02    			jp 	NZ,GotChar	; Yes, get out of loop
0229   022C 2A 00 00    			ld	HL,(0)		; Waste some cycles
0230   022F 2A 00 00    			ld	HL,(0)		; ...
0231   0232 2A 00 00    			ld	HL,(0)		; ...
0232   0235 2A 00 00    			ld	HL,(0)		; ...
0233   0238 2A 00 00    			ld	HL,(0)		; ...
0234   023B 2A 00 00    			ld	HL,(0)		; ...
0235   023E C1          			pop	BC
0236   023F 10 E2       			djnz	GCtmoc
0237   0241 C1          			pop	BC
0238   0242 10 DC       			djnz	GCtmob
0239   0244 C1          			pop	BC
0240   0245 10 D6       			djnz	GCtmoa
0241   0247 37          			scf 			; Set carry signals timeout
0242   0248 C9          			ret
0243   0249             
0244   0249             GotChar:
0245   0249 C1          			pop	BC
0246   024A C1          			pop	BC
0247   024B C1          			pop	BC
0248   024C CD 09 E6    			call	CONIN
0249   024F B7          			or 	A 		; Clear Carry signals success
0250   0250 C9          			ret
0251   0251             
0252   0251             
0253   0251             ;
0254   0251             ; Print message pointed top HL until 0
0255   0251             ;
0256   0251             PrintString0:
0257   0251 7E          			ld	A,(HL)
0258   0252 B7          			or	A		; Check if got zero?
0259   0253 C8          			ret	Z		; If zero return to caller
0260   0254 4F          			ld 	C,A
0261   0255 CD 0C E6    			call	CONOUT		; else print the character
0262   0258 23          			inc	HL
0263   0259 C3 51 02    			jp	PrintString0
0264   025C             
0265   025C             
0266   025C             ;
0267   025C             ; Prints the 'B' bytes long string pointed to by HL, but no spaces
0268   025C             ;
0269   025C             PrintNoSpaceB:
0270   025C C5          			push	BC
0271   025D 7E          			ld	A,(HL)		; Get character pointed to by HL
0272   025E 4F          			ld	C,A
0273   025F FE 20       			cp	' '		; Don't print spaces
0274   0261 C4 0C E6    			call	NZ,CONOUT
0275   0264 C1          			pop	BC
0276   0265 23          			inc	HL		; Advance to next character
0277   0266 10 F4       			djnz	PrintNoSpaceB	; Loop until B=0
0278   0268 C9          			ret
0279   0269             ;
0280   0269             ;
0281   0269             ;
0282   0269             PrintFilename:
0283   0269 3A 5C 00    			ld	A,(DFCB)	; Print the drive
0284   026C B7          			or	A		; If Default drive,then...
0285   026D CA 7B 02    			jp	Z,PFnoDrive	; ...don't print the drive name
0286   0270 C6 40       			add	A,'@'		; The drives are numbered 1-16...
0287   0272 4F          			ld	C,A		; ...so we need to offset to get A..P
0288   0273 CD 0C E6    			call	CONOUT
0289   0276             
0290   0276 0E 3A       			ld	C,':'		; Print colon after the drive name
0291   0278 CD 0C E6    			call	CONOUT
0292   027B             
0293   027B             PFnoDrive:
0294   027B 21 5D 00    			ld	HL,DFCB+1	; Start of filename in File Control Block
0295   027E 06 08       			ld	B,8		; First part is 8 characters
0296   0280 CD 5C 02    			call	PrintNoSpaceB
0297   0283             
0298   0283 0E 2E       			ld	C,'.'		; Print the dot between filname & extension
0299   0285 CD 0C E6    			call	CONOUT
0300   0288             
0301   0288 06 03       			ld 	B,3		; Then print the extension
0302   028A CD 5C 02    			call	PrintNoSpaceB
0303   028D C9          			ret
0304   028E             
0305   028E             ;
0306   028E             ; Message strings
0307   028E             ;
0308   028E 43 50 2F 4D msgHeader	.DB "CP/M XR - Xmodem receive v0.1 / SmallRoomLabs 2017",CR,LF,0
0308   0292 20 58 52 20 
0308   0296 2D 20 58 6D 
0308   029A 6F 64 65 6D 
0308   029E 20 72 65 63 
0308   02A2 65 69 76 65 
0308   02A6 20 76 30 2E 
0308   02AA 31 20 2F 20 
0308   02AE 53 6D 61 6C 
0308   02B2 6C 52 6F 6F 
0308   02B6 6D 4C 61 62 
0308   02BA 73 20 32 30 
0308   02BE 31 37 0D 0A 
0308   02C2 00 
0309   02C3 0D 0A 46 61 msgFailWrt	.DB	CR,LF,"Failed writing to disk",CR,LF,0
0309   02C7 69 6C 65 64 
0309   02CB 20 77 72 69 
0309   02CF 74 69 6E 67 
0309   02D3 20 74 6F 20 
0309   02D7 64 69 73 6B 
0309   02DB 0D 0A 00 
0310   02DE 0D 0A 54 72 msgFailure	.DB	CR,LF,"Transmssion failed",CR,LF,0
0310   02E2 61 6E 73 6D 
0310   02E6 73 73 69 6F 
0310   02EA 6E 20 66 61 
0310   02EE 69 6C 65 64 
0310   02F2 0D 0A 00 
0311   02F5 0D 0A 54 72 msgCancel	.DB	CR,LF,"Transmission cancelled",CR,LF,0
0311   02F9 61 6E 73 6D 
0311   02FD 69 73 73 69 
0311   0301 6F 6E 20 63 
0311   0305 61 6E 63 65 
0311   0309 6C 6C 65 64 
0311   030D 0D 0A 00 
0312   0310 0D 0A 46 69 msgSucces1	.DB	CR,LF,"File ",0
0312   0314 6C 65 20 00 
0313   0318 20 72 65 63 msgSucces2	.DB	" received successfully",CR,LF,0
0313   031C 65 69 76 65 
0313   0320 64 20 73 75 
0313   0324 63 63 65 73 
0313   0328 73 66 75 6C 
0313   032C 6C 79 0D 0A 
0313   0330 00 
0314   0331 46 61 69 6C msgFailCre	.DB	"Failed creating file named ",0
0314   0335 65 64 20 63 
0314   0339 72 65 61 74 
0314   033D 69 6E 67 20 
0314   0341 66 69 6C 65 
0314   0345 20 6E 61 6D 
0314   0349 65 64 20 00 
0315   034D 46 69 6C 65 msgNoFile	.DB	"Filename expeced",CR,LF,0
0315   0351 6E 61 6D 65 
0315   0355 20 65 78 70 
0315   0359 65 63 65 64 
0315   035D 0D 0A 00 
0316   0360 0D 0A 00    msgCRLF		.DB	CR,LF,0
0317   0363             
0318   0363             ;
0319   0363             ; Variables
0320   0363             ;
0321   0363             oldSP		.DS	2	; The orginal SP to be restored before exiting
0322   0365             retrycnt	.DS 1	; Counter for retries before giving up
0323   0366             chksum		.DS	1	; For claculating the ckecksum of the packet
0324   0367             pktNo		.DS 1 	; Current packet Number
0325   0368             pktNo1c		.DS 1 	; Current packet Number 1-complemented
0326   0369             packet		.DS	1	; SOH
0327   036A             			.DS	1	; PacketN
0328   036B             			.DS	1	; -PacketNo,
0329   036C             			.DS	128	; data*128,
0330   03EC             			.DS	1 	; chksum
0331   03ED             
0332   03ED             stack		.DS 256
0333   04ED             stackend	.EQU $
0334   04ED             
0335   04ED             			.ENDtasm: Number of errors = 0
