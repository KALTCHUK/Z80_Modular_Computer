0001   0000             ;==================================================================================
0002   0000             ; Monitor for Z80 Modular Computer by P.R.Kaltchuk 2020
0003   0000             ;==================================================================================
0004   0000             BIOS			.EQU	0E600H		; BIOS entry point
0005   0000             LF			.EQU	0AH			; line feed
0006   0000             FF			.EQU	0CH			; form feed
0007   0000             CR			.EQU	0DH			; carriage return
0008   0000             SPACE			.EQU	020H			; space
0009   0000             COLON			.EQU	03AH			; colon
0010   0000             
0011   0000             READCOLS		.EQU	010H			; parameters used for read memory command (READCMD)
0012   0000             READLINES		.EQU	010H
0013   0000             
0014   0000             ; USART card stuff
0015   0000             USART_DAT		.EQU	0D0H			; USART data addr
0016   0000             USART_CMD		.EQU	0D1H			; USART command addr
0017   0000             USART_STA		.EQU	0D1H			; USART status addr
0018   0000             UMODE			.EQU	06DH			; 8N1 (8 bit, no parity, 1 stop), baud=clock (9600bps)
0019   0000             UCMD0			.EQU	015H			; initial command: Rx enable, Tx enable, reset error flags
0020   0000             
0021   0000             ;================================================================================================
0022   0000             			.ORG 0
0023   0000 C3 33 01    		JP	WAITCMD
0024   0003             MONITOR:
0025   0003 CD BE 05    		CALL	PRINTSEQ
0026   0006 5A 38 30 20 		.TEXT	"Z80 Modular Computer Monitor V.1 by Kaltchuk, Sep/2020"
0026   000A 4D 6F 64 75 
0026   000E 6C 61 72 20 
0026   0012 43 6F 6D 70 
0026   0016 75 74 65 72 
0026   001A 20 4D 6F 6E 
0026   001E 69 74 6F 72 
0026   0022 20 56 2E 31 
0026   0026 20 62 79 20 
0026   002A 4B 61 6C 74 
0026   002E 63 68 75 6B 
0026   0032 2C 20 53 65 
0026   0036 70 2F 32 30 
0026   003A 32 30 
0027   003C 0D 0A 0D 0A 		.DB	CR,LF,CR,LF,0
0027   0040 00 
0028   0041             CMDLIST:
0029   0041 CD BE 05    		CALL	PRINTSEQ
0030   0044 56 61 6C 69 		.TEXT	"Valid commands:"
0030   0048 64 20 63 6F 
0030   004C 6D 6D 61 6E 
0030   0050 64 73 3A 
0031   0053 0D 0A       		.DB	CR,LF
0032   0055 20 20 20 52 		.TEXT	"   Raaaa   read memory starting at aaaa"
0032   0059 61 61 61 61 
0032   005D 20 20 20 72 
0032   0061 65 61 64 20 
0032   0065 6D 65 6D 6F 
0032   0069 72 79 20 73 
0032   006D 74 61 72 74 
0032   0071 69 6E 67 20 
0032   0075 61 74 20 61 
0032   0079 61 61 61 
0033   007C 0D 0A       		.DB	CR,LF
0034   007E 20 20 20 57 		.TEXT	"   Waaaa   write to memory starting at aaaa"
0034   0082 61 61 61 61 
0034   0086 20 20 20 77 
0034   008A 72 69 74 65 
0034   008E 20 74 6F 20 
0034   0092 6D 65 6D 6F 
0034   0096 72 79 20 73 
0034   009A 74 61 72 74 
0034   009E 69 6E 67 20 
0034   00A2 61 74 20 61 
0034   00A6 61 61 61 
0035   00A9 0D 0A       		.DB	CR,LF
0036   00AB 20 20 20 48 		.TEXT	"   H       write intel hex format to memory"
0036   00AF 20 20 20 20 
0036   00B3 20 20 20 77 
0036   00B7 72 69 74 65 
0036   00BB 20 69 6E 74 
0036   00BF 65 6C 20 68 
0036   00C3 65 78 20 66 
0036   00C7 6F 72 6D 61 
0036   00CB 74 20 74 6F 
0036   00CF 20 6D 65 6D 
0036   00D3 6F 72 79 
0037   00D6 0D 0A       		.DB	CR,LF
0038   00D8 20 20 20 4A 		.TEXT	"   Jaaaa   jump to address aaaa"
0038   00DC 61 61 61 61 
0038   00E0 20 20 20 6A 
0038   00E4 75 6D 70 20 
0038   00E8 74 6F 20 61 
0038   00EC 64 64 72 65 
0038   00F0 73 73 20 61 
0038   00F4 61 61 61 
0039   00F7 0D 0A 0D 0A 		.DB	CR,LF,CR,LF
0040   00FB 20 20 20 2A 		.TEXT	"   * Where aaaa is always a 4-character hex value."
0040   00FF 20 57 68 65 
0040   0103 72 65 20 61 
0040   0107 61 61 61 20 
0040   010B 69 73 20 61 
0040   010F 6C 77 61 79 
0040   0113 73 20 61 20 
0040   0117 34 2D 63 68 
0040   011B 61 72 61 63 
0040   011F 74 65 72 20 
0040   0123 68 65 78 20 
0040   0127 76 61 6C 75 
0040   012B 65 2E 
0041   012D 0D 0A 00    		.DB	CR,LF,0
0042   0130             
0043   0130 ED 56       		IM	1
0044   0132 FB          		EI
0045   0133             
0046   0133             ;================================================================================================
0047   0133             ; Wait for command
0048   0133             ;================================================================================================
0049   0133 CD BE 05    WAITCMD:	CALL	PRINTSEQ
0050   0136 0D 0A 3E 00 		.DB	CR,LF,03EH,0
0051   013A             
0052   013A CD 92 05    		CALL CONIN
0053   013D             
0054   013D FE 52       		CP	'R'
0055   013F CA 8F 01    		JP	Z,READCMD
0056   0142 FE 72       		CP	'r'
0057   0144 CA 8F 01    		JP	Z,READCMD
0058   0147             
0059   0147 FE 57       		CP	'W'
0060   0149 CA B4 02    		JP	Z,WRITECMD
0061   014C FE 77       		CP	'w'
0062   014E CA B4 02    		JP	Z,WRITECMD
0063   0151             
0064   0151 FE 48       		CP	'H'
0065   0153 CA 4C 03    		JP	Z,HEXCMD
0066   0156 FE 68       		CP	'h'
0067   0158 CA 4C 03    		JP	Z,HEXCMD
0068   015B             
0069   015B FE 4A       		CP	'J'
0070   015D CA 50 04    		JP	Z,JUMPCMD
0071   0160 FE 6A       		CP	'j'
0072   0162 CA 50 04    		JP	Z,JUMPCMD
0073   0165             
0074   0165 FE 54       		CP	'T'
0075   0167 CA 5B 04    		JP	Z,TESTCMD
0076   016A FE 74       		CP	't'
0077   016C CA 5B 04    		JP	Z,TESTCMD
0078   016F             
0079   016F             UNKNOWNCMD:
0080   016F CD FD 04    		CALL FLUSHBUF
0081   0172 CD BE 05    		CALL	PRINTSEQ
0082   0175 0D 0A       		.DB CR,LF
0083   0177 55 6E 6B 6E 		.TEXT "Unknown command."
0083   017B 6F 77 6E 20 
0083   017F 63 6F 6D 6D 
0083   0183 61 6E 64 2E 
0084   0187 0D 0A 0D 0A 		.DB CR,LF,CR,LF,0
0084   018B 00 
0085   018C C3 41 00    		JP	CMDLIST
0086   018F             
0087   018F             ;================================================================================================
0088   018F             ; Read memory, starting at address aaaa
0089   018F             ;================================================================================================
0090   018F             READCMD:
0091   018F CD 8B 04    		CALL	GETADDR		; DE holds the address to start reading
0092   0192 FE 00       		CP	0
0093   0194 CA 41 00    		JP	Z,CMDLIST
0094   0197 3E F0       		LD	A,0F0H
0095   0199 A3          		AND	E
0096   019A 5F          		LD	E,A			; DE converted from AAAA to AAA0
0097   019B D5          		PUSH	DE
0098   019C DD E1       		POP	IX			; from now on, IX will hold the address
0099   019E CD BE 05    		CALL	PRINTSEQ		; print header
0100   01A1 41 44 44 52 		.TEXT "ADDR: 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F  0123456789ABCDEF"
0100   01A5 3A 20 30 30 
0100   01A9 20 30 31 20 
0100   01AD 30 32 20 30 
0100   01B1 33 20 30 34 
0100   01B5 20 30 35 20 
0100   01B9 30 36 20 30 
0100   01BD 37 20 30 38 
0100   01C1 20 30 39 20 
0100   01C5 30 41 20 30 
0100   01C9 42 20 30 43 
0100   01CD 20 30 44 20 
0100   01D1 30 45 20 30 
0100   01D5 46 20 20 30 
0100   01D9 31 32 33 34 
0100   01DD 35 36 37 38 
0100   01E1 39 41 42 43 
0100   01E5 44 45 46 
0101   01E8 0D 0A       		.DB CR,LF
0102   01EA 2D 2D 2D 2D 		.TEXT "----- -----------------------------------------------  ----------------"
0102   01EE 2D 20 2D 2D 
0102   01F2 2D 2D 2D 2D 
0102   01F6 2D 2D 2D 2D 
0102   01FA 2D 2D 2D 2D 
0102   01FE 2D 2D 2D 2D 
0102   0202 2D 2D 2D 2D 
0102   0206 2D 2D 2D 2D 
0102   020A 2D 2D 2D 2D 
0102   020E 2D 2D 2D 2D 
0102   0212 2D 2D 2D 2D 
0102   0216 2D 2D 2D 2D 
0102   021A 2D 2D 2D 2D 
0102   021E 2D 20 20 2D 
0102   0222 2D 2D 2D 2D 
0102   0226 2D 2D 2D 2D 
0102   022A 2D 2D 2D 2D 
0102   022E 2D 2D 2D 
0103   0231 0D 0A 00    		.DB CR,LF,0
0104   0234 16 10       		LD	D,READLINES	; lines
0105   0236 1E 10       NEWL:		LD	E,READCOLS		; columns
0106   0238 DD E5       		PUSH	IX			; prepare to print address
0107   023A E1          		POP	HL
0108   023B 44          		LD	B,H
0109   023C CD 3E 05    		CALL	HEX2ASCII
0110   023F 4C          		LD	C,H
0111   0240 CD B4 05    		CALL	CONOUT
0112   0243 4D          		LD	C,L
0113   0244 CD B4 05    		CALL	CONOUT
0114   0247 DD E5       		PUSH	IX
0115   0249 E1          		POP	HL
0116   024A 45          		LD	B,L
0117   024B CD 3E 05    		CALL	HEX2ASCII
0118   024E 4C          		LD	C,H
0119   024F CD B4 05    		CALL	CONOUT
0120   0252 4D          		LD	C,L
0121   0253 CD B4 05    		CALL	CONOUT
0122   0256 0E 3A       		LD	C,COLON
0123   0258 CD B4 05    		CALL	CONOUT
0124   025B 0E 20       		LD	C,SPACE
0125   025D CD B4 05    		CALL	CONOUT
0126   0260 DD E5       		PUSH	IX
0127   0262 FD E1       		POP	IY			; IY holds a copy of the 1st memory address from current line
0128   0264 DD 7E 00    NEWC:		LD	A,(IX)		; prepare to print memory contents
0129   0267 47          		LD	B,A
0130   0268 CD 3E 05    		CALL	HEX2ASCII		; now HL contains the ASCII exivalent of memory content
0131   026B 4C          		LD	C,H
0132   026C CD B4 05    		CALL	CONOUT
0133   026F 4D          		LD	C,L
0134   0270 CD B4 05    		CALL	CONOUT
0135   0273 0E 20       		LD	C,SPACE
0136   0275 CD B4 05    		CALL	CONOUT
0137   0278 DD 23       		INC	IX
0138   027A 1D          		DEC	E
0139   027B 20 E7       		JR	NZ,NEWC
0140   027D 0E 20       		LD	C,SPACE
0141   027F CD B4 05    		CALL CONOUT
0142   0282 1E 10       		LD	E,READCOLS		; now start doing the printables' area
0143   0284 FD 7E 00    NEWCP:	LD	A,(IY)
0144   0287 FE 20       		CP	020H
0145   0289 FA 90 02    		JP	M,NOTPTBL
0146   028C 4F          		LD	C,A
0147   028D C3 92 02    		JP 	CONTCP
0148   0290 0E 2E       NOTPTBL:	LD	C,'.'
0149   0292 CD B4 05    CONTCP:	CALL	CONOUT
0150   0295 FD 23       		INC	IY
0151   0297 1D          		DEC	E
0152   0298 20 EA       		JR	NZ,NEWCP
0153   029A 0E 0D       		LD	C,CR
0154   029C CD B4 05    		CALL	CONOUT
0155   029F 0E 0A       		LD	C,LF
0156   02A1 CD B4 05    		CALL	CONOUT
0157   02A4 15          		DEC	D
0158   02A5 20 8F       		JR	NZ,NEWL
0159   02A7 0E 0D       		LD	C,CR
0160   02A9 CD B4 05    		CALL	CONOUT
0161   02AC 0E 0A       		LD	C,LF
0162   02AE CD B4 05    		CALL	CONOUT
0163   02B1 C3 33 01    		JP	WAITCMD
0164   02B4             
0165   02B4             ;================================================================================================
0166   02B4             ; Write to memory, starting at address aaaa
0167   02B4             ;================================================================================================
0168   02B4             WRITECMD:
0169   02B4 CD 8B 04    		CALL	GETADDR		; DE holds the address to start writing
0170   02B7 FE 00       		CP	0
0171   02B9 CA 41 00    		JP	Z,CMDLIST
0172   02BC CD BE 05    		CALL	PRINTSEQ
0173   02BF 53 65 6E 64 		.TEXT "Send data to be written."
0173   02C3 20 64 61 74 
0173   02C7 61 20 74 6F 
0173   02CB 20 62 65 20 
0173   02CF 77 72 69 74 
0173   02D3 74 65 6E 2E 
0174   02D7 0D 0A 00    		.DB CR,LF,0
0175   02DA CD 92 05    NEXTWR:	CALL	CONIN
0176   02DD 67          		LD	H,A
0177   02DE FE 0D       		CP	CR
0178   02E0 28 10       		JR	Z,EOW
0179   02E2 CD 92 05    		CALL	CONIN
0180   02E5 6F          		LD	L,A			; at this point HL holds the value to be written (ASCII)
0181   02E6 FE 0D       		CP	CR
0182   02E8 28 08       		JR	Z,EOW
0183   02EA CD 08 05    		CALL	ASCII2HEX		; B holds the hex value
0184   02ED 78          		LD	A,B
0185   02EE 12          		LD	(DE),A
0186   02EF 13          		INC	DE
0187   02F0 18 E8       		JR	NEXTWR
0188   02F2 CD 92 05    EOW:		CALL	CONIN
0189   02F5 FE 0A       		CP	LF
0190   02F7 CA 2B 03    		JP	Z,TRUEEOW
0191   02FA CD BE 05    		CALL	PRINTSEQ
0192   02FD 0D 0A       		.DB CR,LF
0193   02FF 53 79 6E 74 		.TEXT "Syntax error. Incomplete ASCII pair."
0193   0303 61 78 20 65 
0193   0307 72 72 6F 72 
0193   030B 2E 20 49 6E 
0193   030F 63 6F 6D 70 
0193   0313 6C 65 74 65 
0193   0317 20 41 53 43 
0193   031B 49 49 20 70 
0193   031F 61 69 72 2E 
0194   0323 0D 0A 0D 0A 		.DB CR,LF,CR,LF,0
0194   0327 00 
0195   0328 C3 33 01    		JP	WAITCMD
0196   032B             TRUEEOW:
0197   032B CD BE 05    		CALL	PRINTSEQ
0198   032E 4D 65 6D 6F 		.TEXT "Memory write complete."
0198   0332 72 79 20 77 
0198   0336 72 69 74 65 
0198   033A 20 63 6F 6D 
0198   033E 70 6C 65 74 
0198   0342 65 2E 
0199   0344 0D 0A 0D 0A 		.DB CR,LF,CR,LF,0
0199   0348 00 
0200   0349 C3 33 01    		JP	WAITCMD
0201   034C             
0202   034C             ;================================================================================================
0203   034C             ; Write to memory using Intel hex file format input
0204   034C             ;================================================================================================
0205   034C             HEXCMD:
0206   034C CD BE 05    		CALL	PRINTSEQ
0207   034F 53 65 6E 64 		.TEXT "Send HEX-format data to be written."
0207   0353 20 48 45 58 
0207   0357 2D 66 6F 72 
0207   035B 6D 61 74 20 
0207   035F 64 61 74 61 
0207   0363 20 74 6F 20 
0207   0367 62 65 20 77 
0207   036B 72 69 74 74 
0207   036F 65 6E 2E 
0208   0372 0D 0A 00    		.DB CR,LF,0
0209   0375             NEWHLINE:
0210   0375 DD 21 00 00 		LD	IX,0				; IX will be the accumulator for checksum
0211   0379 CD 92 05    		CALL	CONIN				; get the start code ':'
0212   037C FE 3A       		CP	':'
0213   037E 20 F5       		JR	NZ,NEWHLINE
0214   0380 CD 92 05    		CALL	CONIN				; get byte count
0215   0383 67          		LD	H,A
0216   0384 CD 92 05    		CALL	CONIN
0217   0387 6F          		LD	L,A
0218   0388 CD 08 05    		CALL	ASCII2HEX
0219   038B 48          		LD	C,B				; C = byte count
0220   038C 3E 00       		LD	A,0
0221   038E B9          		CP	C
0222   038F CA 2C 04    		JP	Z,EOHF			; if byte count = 0, we reached the end of write operation
0223   0392 06 00       		LD	B,0
0224   0394 DD 09       		ADD	IX,BC				; update checksum with byte count
0225   0396 C5          		PUSH	BC				; save byte counter on the stack
0226   0397 0E 3A       		LD	C,':'				; start printing ":addr "
0227   0399 CD B4 05    		CALL	CONOUT
0228   039C CD 92 05    		CALL	CONIN				; get address
0229   039F 67          		LD	H,A
0230   03A0 4F          		LD	C,A
0231   03A1 CD B4 05    		CALL	CONOUT
0232   03A4 CD 92 05    		CALL	CONIN
0233   03A7 6F          		LD	L,A
0234   03A8 4F          		LD	C,A
0235   03A9 CD B4 05    		CALL	CONOUT
0236   03AC CD 08 05    		CALL	ASCII2HEX
0237   03AF 50          		LD	D,B				
0238   03B0 CD 92 05    		CALL	CONIN	
0239   03B3 67          		LD	H,A
0240   03B4 4F          		LD	C,A
0241   03B5 CD B4 05    		CALL	CONOUT
0242   03B8 CD 92 05    		CALL	CONIN
0243   03BB 6F          		LD	L,A
0244   03BC 4F          		LD	C,A
0245   03BD CD B4 05    		CALL	CONOUT
0246   03C0 CD 08 05    		CALL	ASCII2HEX
0247   03C3 58          		LD	E,B				; DE = start addr 
0248   03C4 06 00       		LD	B,0
0249   03C6 4A          		LD	C,D
0250   03C7 DD 09       		ADD	IX,BC				; update checksum with addr HI
0251   03C9 4B          		LD	C,E
0252   03CA DD 09       		ADD	IX,BC				; update checksum with addr LO
0253   03CC CD 92 05    		CALL	CONIN				; get record type
0254   03CF 67          		LD	H,A
0255   03D0 CD 92 05    		CALL	CONIN
0256   03D3 6F          		LD	L,A
0257   03D4 CD 08 05    		CALL	ASCII2HEX
0258   03D7 48          		LD	C,B
0259   03D8 06 00       		LD	B,0
0260   03DA DD 09       		ADD	IX,BC				; update checksum with record type
0261   03DC CD 92 05    NEXTD:	CALL	CONIN				; start reading data
0262   03DF 67          		LD	H,A
0263   03E0 CD 92 05    		CALL	CONIN
0264   03E3 6F          		LD	L,A
0265   03E4 CD 08 05    		CALL	ASCII2HEX
0266   03E7 48          		LD	C,B
0267   03E8 06 00       		LD	B,0
0268   03EA DD 09       		ADD	IX,BC				; update checksum data byte
0269   03EC 79          		LD	A,C
0270   03ED 12          		LD	(DE),A			; write data to memory
0271   03EE 13          		INC	DE				; increment memory addr for next write
0272   03EF C1          		POP	BC				; pop byte count from stack
0273   03F0 0D          		DEC	C				; decrement byte counter
0274   03F1 C5          		PUSH	BC				; save byte counter on the stack
0275   03F2 C2 DC 03    		JP	NZ,NEXTD
0276   03F5 CD 92 05    		CALL	CONIN				; get checksum
0277   03F8 67          		LD	H,A
0278   03F9 CD 92 05    		CALL	CONIN
0279   03FC 6F          		LD	L,A
0280   03FD CD 08 05    		CALL	ASCII2HEX			; B = checksum
0281   0400 DD E5       		PUSH	IX
0282   0402 D1          		POP	DE
0283   0403 7B          		LD	A,E
0284   0404 ED 44       		NEG
0285   0406 B8          		CP	B
0286   0407 28 18       		JR	Z,CHECKOK
0287   0409 CD BE 05    		CALL	PRINTSEQ
0288   040C 63 68 65 63 		.TEXT	"checksum error!"
0288   0410 6B 73 75 6D 
0288   0414 20 65 72 72 
0288   0418 6F 72 21 
0289   041B 0D 0A 00    		.DB CR,LF,0
0290   041E C3 75 03    		JP	NEWHLINE
0291   0421 CD BE 05    CHECKOK:	CALL	PRINTSEQ
0292   0424 4F 4B       		.TEXT	"OK"
0293   0426 0D 0A 00    		.DB CR,LF,0
0294   0429 C3 75 03    		JP	NEWHLINE
0295   042C             
0296   042C CD FD 04    EOHF:		CALL	FLUSHBUF
0297   042F CD BE 05    		CALL	PRINTSEQ
0298   0432 4D 65 6D 6F 		.TEXT "Memory write complete."
0298   0436 72 79 20 77 
0298   043A 72 69 74 65 
0298   043E 20 63 6F 6D 
0298   0442 70 6C 65 74 
0298   0446 65 2E 
0299   0448 0D 0A 0D 0A 		.DB CR,LF,CR,LF,0
0299   044C 00 
0300   044D C3 33 01    		JP	WAITCMD
0301   0450             
0302   0450             ;================================================================================================
0303   0450             ; Jump to address aaaa
0304   0450             ;================================================================================================
0305   0450             JUMPCMD:
0306   0450 CD 8B 04    		CALL	GETADDR
0307   0453 FE 00       		CP	0
0308   0455 CA 41 00    		JP	Z,CMDLIST
0309   0458 D5          		PUSH	DE
0310   0459 E1          		POP	HL
0311   045A E9          		JP	(HL)
0312   045B             
0313   045B             ;================================================================================================
0314   045B             ; Test quality of RX. Count how many bytes are not zero in the range f000-f0ff
0315   045B             ;================================================================================================
0316   045B             COUNTER	.EQU	05000H
0317   045B             CHAR		.EQU	05001H
0318   045B             ATARGET	.EQU	04000H
0319   045B             
0320   045B CD 92 05    TESTCMD:	CALL	CONIN				; get CR + LF
0321   045E CD 92 05    		CALL	CONIN
0322   0461             
0323   0461             
0324   0461 3E 00       		LD	A,0
0325   0463 47          		LD	B,A
0326   0464 32 00 50    		LD	(COUNTER),A
0327   0467 3A 01 50    		LD	A,(CHAR)
0328   046A 4F          		LD	C,A
0329   046B 11 00 40    		LD	DE,ATARGET
0330   046E 21 00 50    		LD	HL,COUNTER
0331   0471             
0332   0471 1A          REPT:		LD	A,(DE)
0333   0472 B9          		CP	C
0334   0473 28 01       		JR	Z,EQUAL
0335   0475 34          		INC	(HL)
0336   0476 13          EQUAL:	INC	DE
0337   0477 10 F8       		DJNZ	REPT
0338   0479 3A 00 50    		LD	A,(COUNTER)
0339   047C 47          		LD	B,A
0340   047D CD 3E 05    		CALL	HEX2ASCII
0341   0480 4C          		LD	C,H
0342   0481 CD B4 05    		CALL	CONOUT
0343   0484 4D          		LD	C,L
0344   0485 CD B4 05    		CALL	CONOUT
0345   0488 C3 33 01    		JP	WAITCMD
0346   048B             
0347   048B             ;================================================================================================
0348   048B             ; Get address parameter from command line and return it in DE. If error, A=0.
0349   048B             ;================================================================================================
0350   048B C5          GETADDR:	PUSH	BC
0351   048C E5          		PUSH	HL
0352   048D CD 92 05    		CALL	CONIN
0353   0490 67          		LD	H,A
0354   0491 CD 92 05    		CALL	CONIN
0355   0494 6F          		LD	L,A
0356   0495 CD 08 05    		CALL	ASCII2HEX
0357   0498 50          		LD	D,B
0358   0499 CD 92 05    		CALL	CONIN
0359   049C 67          		LD	H,A
0360   049D CD 92 05    		CALL	CONIN
0361   04A0 6F          		LD	L,A
0362   04A1 CD 08 05    		CALL	ASCII2HEX
0363   04A4 58          		LD	E,B				; now DE contains the address
0364   04A5 CD 92 05    		CALL	CONIN				; ok, so now we expect to find <CR><LF> in the buffer
0365   04A8 FE 0D       		CP	CR
0366   04AA 20 0C       		JR	NZ,SYNERR
0367   04AC CD 92 05    		CALL	CONIN
0368   04AF FE 0A       		CP	LF
0369   04B1 20 05       		JR	NZ,SYNERR
0370   04B3 3E FF       		LD	A,0FFH
0371   04B5 E1          		POP	HL
0372   04B6 C1          		POP	BC
0373   04B7 C9          		RET
0374   04B8 CD FD 04    SYNERR:	CALL	FLUSHBUF
0375   04BB CD BE 05    		CALL	PRINTSEQ
0376   04BE 0D 0A       		.DB CR,LF
0377   04C0 53 79 6E 74 		.TEXT "Syntax error. aaaa must be a 4-character hex number."
0377   04C4 61 78 20 65 
0377   04C8 72 72 6F 72 
0377   04CC 2E 20 61 61 
0377   04D0 61 61 20 6D 
0377   04D4 75 73 74 20 
0377   04D8 62 65 20 61 
0377   04DC 20 34 2D 63 
0377   04E0 68 61 72 61 
0377   04E4 63 74 65 72 
0377   04E8 20 68 65 78 
0377   04EC 20 6E 75 6D 
0377   04F0 62 65 72 2E 
0378   04F4 0D 0A       		.DB CR,LF
0379   04F6 0D 0A 00    		.DB CR,LF,0
0380   04F9 AF          		XOR	A
0381   04FA E1          		POP	HL
0382   04FB C1          		POP	BC
0383   04FC C9          		RET
0384   04FD             
0385   04FD             ;================================================================================================
0386   04FD             ; Flush serial input buffer
0387   04FD             ;================================================================================================
0388   04FD             FLUSHBUF:
0389   04FD CD 7F 05    		CALL	CONST
0390   0500 FE 00       		CP	0
0391   0502 C8          		RET	Z
0392   0503 CD 92 05    		CALL	CONIN
0393   0506 18 F5       		JR	FLUSHBUF
0394   0508             
0395   0508             ;================================================================================================
0396   0508             ; Convert ASCII to HEX (HL --> B)
0397   0508             ;================================================================================================
0398   0508 C5          ASCII2HEX:	PUSH	BC
0399   0509 3E 60       		LD	A,060H
0400   050B 94          		SUB	H
0401   050C 0E 57       		LD	C,057H
0402   050E DA 1B 05    		JP	C,DISCOUNT
0403   0511 3E 40       		LD	A,040H
0404   0513 94          		SUB	H
0405   0514 0E 37       		LD	C,037H
0406   0516 DA 1B 05    		JP	C,DISCOUNT
0407   0519 0E 30       		LD	C,030H
0408   051B             DISCOUNT:
0409   051B 7C          		LD	A,H
0410   051C 91          		SUB	C
0411   051D             CONVL:
0412   051D 47          		LD	B,A
0413   051E CB 20       		SLA	B
0414   0520 CB 20       		SLA	B
0415   0522 CB 20       		SLA	B
0416   0524 CB 20       		SLA	B
0417   0526             
0418   0526 3E 60       		LD	A,060H
0419   0528 95          		SUB	L
0420   0529 0E 57       		LD	C,057H
0421   052B DA 38 05    		JP	C,DISCOUNT2
0422   052E 3E 40       		LD	A,040H
0423   0530 95          		SUB	L
0424   0531 0E 37       		LD	C,037H
0425   0533 DA 38 05    		JP	C,DISCOUNT2
0426   0536 0E 30       		LD	C,030H
0427   0538             DISCOUNT2:
0428   0538 7D          		LD	A,L
0429   0539 91          		SUB	C
0430   053A B0          		OR	B
0431   053B C1          		POP	BC
0432   053C 47          		LD	B,A
0433   053D C9          		RET
0434   053E             
0435   053E             ;================================================================================================
0436   053E             ; Convert HEX to ASCII (B --> HL)
0437   053E             ;================================================================================================
0438   053E C5          HEX2ASCII:	PUSH	BC
0439   053F 78          		LD	A,B
0440   0540 E6 0F       		AND	0FH
0441   0542 6F          		LD	L,A
0442   0543 D6 0A       		SUB	0AH
0443   0545 0E 30       		LD	C,030H
0444   0547 DA 4C 05    		JP	C,COMPENSATE
0445   054A 0E 37       		LD	C,037H
0446   054C             COMPENSATE:
0447   054C 7D          		LD	A,L
0448   054D 81          		ADD	A,C
0449   054E 6F          		LD	L,A
0450   054F 78          		LD	A,B
0451   0550 E6 F0       		AND	0F0H
0452   0552 CB 3F       		SRL	A
0453   0554 CB 3F       		SRL	A
0454   0556 CB 3F       		SRL	A
0455   0558 CB 3F       		SRL	A
0456   055A 67          		LD	H,A
0457   055B D6 0A       		SUB	0AH
0458   055D 0E 30       		LD	C,030H
0459   055F DA 64 05    		JP	C,COMPENSATE2
0460   0562 0E 37       		LD	C,037H
0461   0564             COMPENSATE2:
0462   0564 7C          		LD	A,H
0463   0565 81          		ADD	A,C
0464   0566 67          		LD	H,A
0465   0567 C1          		POP	BC
0466   0568 C9          		RET
0467   0569             
0468   0569             ;================================================================================================
0469   0569             ; Delay X seconds, with X passed on reg B
0470   0569             ;================================================================================================
0471   0569             DELAYS:
0472   0569 C5          		PUSH	BC
0473   056A E5          		PUSH	HL
0474   056B 21 8F 02    LOOP0:	LD	HL,655
0475   056E 0E FF       LOOP1:	LD	C,255		;1.75					\
0476   0570 0D          LOOP2:	DEC	C		;1		\			|
0477   0571 00          		NOP			;1		| t=6(X-1)+1.75	| (7.75+t)(y-1)
0478   0572 79          		LD	A,C		;1		|			|
0479   0573 20 FB       		JR	NZ,LOOP2	;3/1.75	/			|
0480   0575 2B          		DEC	HL		;1					|
0481   0576 7C          		LD	A,H		;1					|
0482   0577 B5          		OR	L		;1					|
0483   0578 20 F4       		JR	NZ,LOOP1	;3/1.75				/
0484   057A 10 EF       		DJNZ	LOOP0
0485   057C E1          		POP	HL
0486   057D C1          		POP	BC
0487   057E C9          		RET
0488   057F             
0489   057F             ;================================================================================================
0490   057F             ; Console Status (Return A=0FFh if character waiting. Otherwise, A=0)
0491   057F             ;================================================================================================
0492   057F             CONST:
0493   057F C5          		PUSH	BC
0494   0580 E5          		PUSH	HL
0495   0581 ED 4B 34 40 		LD	BC,(WRPTR)
0496   0585 2A 36 40    		LD	HL,(RDPTR)
0497   0588 AF          		XOR	A
0498   0589 ED 42       		SBC	HL,BC
0499   058B 28 02       		JR	Z,CONVOID
0500   058D 3E FF       		LD	A,0FFH
0501   058F             CONVOID:
0502   058F E1          		POP	HL
0503   0590 C1          		POP	BC
0504   0591 C9          	  	RET
0505   0592             
0506   0592             ;================================================================================================
0507   0592             ; Console Input (Wait for input and return character in A)
0508   0592             ;================================================================================================
0509   0592             CONIN:
0510   0592 C5          		PUSH	BC	
0511   0593 E5          		PUSH	HL	
0512   0594 CD 7F 05    AGAIN:	CALL	CONST
0513   0597 FE 00       		CP	0
0514   0599 28 F9       		JR	Z,AGAIN			; Keep trying till we receive something
0515   059B ED 4B 36 40 		LD	BC,(RDPTR)
0516   059F 0A          		LD	A,(BC)
0517   05A0 03          		INC	BC
0518   05A1 21 34 40    		LD	HL,BUFEND
0519   05A4 37          		SCF
0520   05A5 3F          		CCF
0521   05A6 ED 42       		SBC	HL,BC
0522   05A8 20 03       		JR	NZ,EOCONIN
0523   05AA 01 00 40    		LD	BC,BUFINI
0524   05AD ED 43 36 40 EOCONIN:	LD	(RDPTR),BC
0525   05B1 E1          		POP	HL
0526   05B2 C1          		POP	BC
0527   05B3 C9          		RET					; Char read returns in A
0528   05B4             
0529   05B4             ;================================================================================================
0530   05B4             ; Console Output (Send character in reg C)
0531   05B4             ;================================================================================================
0532   05B4             CONOUT:
0533   05B4 DB D1       		IN	A,(USART_STA)		; read USART status byte
0534   05B6 E6 04       		AND	04H				; get only the TxEMPTY bit
0535   05B8 28 FA       		JR	Z,CONOUT
0536   05BA 79          		LD	A,C
0537   05BB D3 D0       		OUT	(USART_DAT),A		; send character
0538   05BD C9          		RET
0539   05BE             
0540   05BE             ;================================================================================================
0541   05BE             ; Print (on console) a sequence of characters ending with zero
0542   05BE             ;================================================================================================
0543   05BE             PRINTSEQ:
0544   05BE E3          		EX 	(SP),HL 		; Push HL and put RET address into HL
0545   05BF F5          		PUSH 	AF
0546   05C0 C5          		PUSH 	BC
0547   05C1             NEXTCHAR:
0548   05C1 7E          		LD 	A,(HL)
0549   05C2 FE 00       		CP	0
0550   05C4 28 07       		JR	Z,ENDOFPRINT
0551   05C6 4F          		LD  	C,A
0552   05C7 CD B4 05    		CALL 	CONOUT		; Print to console
0553   05CA 23          		INC 	HL
0554   05CB 18 F4       		JR	NEXTCHAR
0555   05CD             ENDOFPRINT:
0556   05CD 23          		INC 	HL 			; Get past "null" terminator
0557   05CE C1          		POP 	BC
0558   05CF F1          		POP 	AF
0559   05D0 E3          		EX 	(SP),HL 		; Push new RET address on stack and restore HL
0560   05D1 C9          		RET
0561   05D2             
0562   05D2             
0563   05D2             
0564   05D2             
0565   4000             		.ORG	04000H
0566   4000             BUFINI	.EQU	$
0567   4000 48 0A 0D    		.DB	'H',LF,CR
0568   4003 3A 30 41 30 		.TEXT	":0A053000C1F10E77CD89E8C330D188"
0568   4007 35 33 30 30 
0568   400B 30 43 31 46 
0568   400F 31 30 45 37 
0568   4013 37 43 44 38 
0568   4017 39 45 38 43 
0568   401B 33 33 30 44 
0568   401F 31 38 38 
0569   4022 3A 30 30 30 		.TEXT	":00000001FF"
0569   4026 30 30 30 30 
0569   402A 31 46 46 
0570   402D 0A 0D 00 00 		.DB	LF,CR,0,0,0,0,0
0570   4031 00 00 00 
0571   4034             BUFEND	.EQU	$
0572   4034             WRPTR:	.DS	2			; write pointer
0573   4036             RDPTR:	.DS	2			; read pointer
0574   4038             
0575   4038             
0576   4038             
0577   4038             
0578   4038             		.END
tasm: Number of errors = 0
