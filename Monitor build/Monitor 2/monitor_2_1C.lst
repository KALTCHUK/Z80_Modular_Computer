0001   0000             ;================================================================================================
0002   0000             ; MONITOR 2.1C - working on dread.
0003   0000             ;
0004   0000             ;================================================================================================
0005   0000             IOBYTE		.EQU	3
0006   0000             TPA			.EQU	0100H		; Transient Programs Area
0007   0000             MONITOR		.EQU	0D000H		; Monitor entry point
0008   0000             BIOS		.EQU	0E600H		; BIOS entry point
0009   0000             DMA			.EQU	0080H		; Buffer used by Monitor
0010   0000             DISKPAD		.EQU	0E000H		; Draft area used by disk R/W ops
0011   0000             								; (512 bytes between Monitor and BIOS)
0012   0000             
0013   0000             ;================================================================================================
0014   0000             ; BIOS functions.
0015   0000             ;================================================================================================
0016   0000             LEAP		.EQU	3					; 3 bytes for each entry (JP aaaa)
0017   0000             
0018   0000             BOOT:		.EQU	BIOS				;  0 Initialize.
0019   0000             WBOOT:		.EQU	BIOS+(LEAP*1)		;  1 Warm boot.
0020   0000             CONST:		.EQU	BIOS+(LEAP*2)		;  2 Console status.
0021   0000             CONIN:		.EQU	BIOS+(LEAP*3)		;  3 Console input.
0022   0000             CONOUT:		.EQU	BIOS+(LEAP*4)		;  4 Console OUTput.
0023   0000             LIST:		.EQU	BIOS+(LEAP*5)		;  5 List OUTput.
0024   0000             PUNCH:		.EQU	BIOS+(LEAP*6)		;  6 Punch OUTput.
0025   0000             READER:		.EQU	BIOS+(LEAP*7)		;  7 Reader input.
0026   0000             HOME:		.EQU	BIOS+(LEAP*8)		;  8 Home disk.
0027   0000             SELDSK:		.EQU	BIOS+(LEAP*9)		;  9 Select disk.
0028   0000             SETTRK:		.EQU	BIOS+(LEAP*10)		; 10 Select track.
0029   0000             SETSEC:		.EQU	BIOS+(LEAP*11)		; 11 Select sector.
0030   0000             SETDMA:		.EQU	BIOS+(LEAP*12)		; 12 Set DMA ADDress.
0031   0000             READ:		.EQU	BIOS+(LEAP*13)		; 13 Read 128 bytes.
0032   0000             WRITE:		.EQU	BIOS+(LEAP*14)		; 14 Write 128 bytes.
0033   0000             LISTST:		.EQU	BIOS+(LEAP*15)		; 15 List status.
0034   0000             SECTRAN:	.EQU	BIOS+(LEAP*16)		; 16 Sector translate.
0035   0000             PRINTSEQ:	.EQU	BIOS+(LEAP*17)		; not a BIOS function
0036   0000             
0037   0000             ;================================================================================================
0038   0000             ; ASCII characters.
0039   0000             ;================================================================================================
0040   0000             NUL			.EQU	00H
0041   0000             SOH			.EQU	01H
0042   0000             STX			.EQU	02H
0043   0000             ETX			.EQU	03H
0044   0000             EOT			.EQU	04H
0045   0000             ENQ			.EQU	05H
0046   0000             ACK			.EQU	06H
0047   0000             BEL			.EQU	07H
0048   0000             BS			.EQU	08H			; ^H
0049   0000             HT			.EQU	09H
0050   0000             LF			.EQU	0AH
0051   0000             VT			.EQU	0BH
0052   0000             FF			.EQU	0CH
0053   0000             CR			.EQU	0DH
0054   0000             SO			.EQU	0EH
0055   0000             SI			.EQU	0FH
0056   0000             DLE			.EQU	10H
0057   0000             DC1			.EQU	11H
0058   0000             DC2			.EQU	12H
0059   0000             DC3			.EQU	13H
0060   0000             DC4			.EQU	14H
0061   0000             NAK			.EQU	15H			; ^U
0062   0000             SYN			.EQU	16H
0063   0000             ETB			.EQU	17H
0064   0000             CAN			.EQU	18H			; ^X
0065   0000             EM			.EQU	19H
0066   0000             SUB			.EQU	1AH
0067   0000             ESC			.EQU	1BH
0068   0000             FS			.EQU	1CH
0069   0000             GS			.EQU	1DH
0070   0000             RS			.EQU	1EH
0071   0000             US			.EQU	1FH
0072   0000             
0073   0000             ;================================================================================================
0074   0000             ; Some constants
0075   0000             ;================================================================================================
0076   0000             MAXLBUF		.EQU	DMA+80
0077   0000             PROMPT		.EQU	'>'
0078   0000             MAXTRY		.EQU	10
0079   0000             
0080   0000             ;================================================================================================
0081   0000             ; FLASH card stuff
0082   0000             ;================================================================================================
0083   0000             FLASH_ADDR		.EQU	0B0H			; Base I/O address for compact flash card
0084   0000             CF_DATA			.EQU	(FLASH_ADDR+0)	; R/W
0085   0000             CF_FEATURES		.EQU	(FLASH_ADDR+1)	; W
0086   0000             CF_ERROR		.EQU	(FLASH_ADDR+1)	; R
0087   0000             CF_SECCOUNT		.EQU	(FLASH_ADDR+2)	; W
0088   0000             
0089   0000             CF_SECTOR		.EQU	(FLASH_ADDR+3)	; W
0090   0000             CF_CYL_LOW		.EQU	(FLASH_ADDR+4)	; W
0091   0000             CF_CYL_HI		.EQU	(FLASH_ADDR+5)	; W
0092   0000             CF_HEAD			.EQU	(FLASH_ADDR+6)	; W
0093   0000             
0094   0000             CF_LBA0			.EQU	(FLASH_ADDR+3)	; W
0095   0000             CF_LBA1			.EQU	(FLASH_ADDR+4)	; W
0096   0000             CF_LBA2			.EQU	(FLASH_ADDR+5)	; W
0097   0000             CF_LBA3			.EQU	(FLASH_ADDR+6)	; W
0098   0000             
0099   0000             CF_STATUS		.EQU	(FLASH_ADDR+7)	; R
0100   0000             CF_COMMAND		.EQU	(FLASH_ADDR+7)	; W
0101   0000             
0102   0000             ;CF Features
0103   0000             CF_8BIT			.EQU	1
0104   0000             CF_NOCACHE		.EQU	082H
0105   0000             
0106   0000             ;CF Commands
0107   0000             CF_READ_SEC		.EQU	020H
0108   0000             CF_WRITE_SEC	.EQU	030H
0109   0000             CF_SET_FEAT		.EQU 	0EFH
0110   0000             ;================================================================================================
0111   0000             ; MAIN PROGRAM STARTS HERE
0112   0000             ;================================================================================================
0113   D000             			.ORG MONITOR
0114   D000             
0115   D000 CD CB DA    CYCLE:		CALL PRINTENV
0116   D003 CD 56 D9    			CALL LINER					; Call the line manager
0117   D006 3A 80 00    			LD	A,(DMA)
0118   D009 FE 00       			CP	0
0119   D00B 28 F3       			JR	Z,CYCLE					; User ENTERed an empty line. No need to parse.
0120   D00D 21 4C DB    			LD	HL,CMDTBL
0121   D010 CD FF D9    			CALL PARSER					; Find command comparing buffer with Command Table.
0122   D013 3C          			INC	A
0123   D014 28 01       			JR	Z,UNK					; No match found in command table.
0124   D016 E9          			JP	(HL)					; Jump to Command Routine
0125   D017 CD 3B D9    UNK:		CALL UNKNOWN
0126   D01A 18 E4       			JR	CYCLE
0127   D01C             			
0128   D01C             ;================================================================================================
0129   D01C             ; Help for main program
0130   D01C             ;================================================================================================
0131   D01C CD AF D9    HELP:		CALL CRLF
0132   D01F CD 33 E6    			CALL PRINTSEQ
0133   D022 20 4F 70 74 			.DB	" Options:   READ aaaa             read from memory.",CR,LF
0133   D026 69 6F 6E 73 
0133   D02A 3A 20 20 20 
0133   D02E 52 45 41 44 
0133   D032 20 61 61 61 
0133   D036 61 20 20 20 
0133   D03A 20 20 20 20 
0133   D03E 20 20 20 20 
0133   D042 20 20 72 65 
0133   D046 61 64 20 66 
0133   D04A 72 6F 6D 20 
0133   D04E 6D 65 6D 6F 
0133   D052 72 79 2E 0D 
0133   D056 0A 
0134   D057 20 20 20 20 			.DB "            WRITE aaaa,c1 c2 cN   write to memory.",CR,LF
0134   D05B 20 20 20 20 
0134   D05F 20 20 20 20 
0134   D063 57 52 49 54 
0134   D067 45 20 61 61 
0134   D06B 61 61 2C 63 
0134   D06F 31 20 63 32 
0134   D073 20 63 4E 20 
0134   D077 20 20 77 72 
0134   D07B 69 74 65 20 
0134   D07F 74 6F 20 6D 
0134   D083 65 6D 6F 72 
0134   D087 79 2E 0D 0A 
0135   D08B 20 20 20 20 			.DB "            COPY aaaa-bbbb,cccc   copy memory block.",CR,LF
0135   D08F 20 20 20 20 
0135   D093 20 20 20 20 
0135   D097 43 4F 50 59 
0135   D09B 20 61 61 61 
0135   D09F 61 2D 62 62 
0135   D0A3 62 62 2C 63 
0135   D0A7 63 63 63 20 
0135   D0AB 20 20 63 6F 
0135   D0AF 70 79 20 6D 
0135   D0B3 65 6D 6F 72 
0135   D0B7 79 20 62 6C 
0135   D0BB 6F 63 6B 2E 
0135   D0BF 0D 0A 
0136   D0C1 20 20 20 20 			.DB "            FILL aaaa-bbbb,cc     fill memory block.",CR,LF
0136   D0C5 20 20 20 20 
0136   D0C9 20 20 20 20 
0136   D0CD 46 49 4C 4C 
0136   D0D1 20 61 61 61 
0136   D0D5 61 2D 62 62 
0136   D0D9 62 62 2C 63 
0136   D0DD 63 20 20 20 
0136   D0E1 20 20 66 69 
0136   D0E5 6C 6C 20 6D 
0136   D0E9 65 6D 6F 72 
0136   D0ED 79 20 62 6C 
0136   D0F1 6F 63 6B 2E 
0136   D0F5 0D 0A 
0137   D0F7 20 20 20 20 			.DB	"            DREAD aaaa            read from disk.",CR,LF
0137   D0FB 20 20 20 20 
0137   D0FF 20 20 20 20 
0137   D103 44 52 45 41 
0137   D107 44 20 61 61 
0137   D10B 61 61 20 20 
0137   D10F 20 20 20 20 
0137   D113 20 20 20 20 
0137   D117 20 20 72 65 
0137   D11B 61 64 20 66 
0137   D11F 72 6F 6D 20 
0137   D123 64 69 73 6B 
0137   D127 2E 0D 0A 
0138   D12A 20 20 20 20 			.DB "            DOWN d,ttt,ss         download one sector from disk.",CR,LF
0138   D12E 20 20 20 20 
0138   D132 20 20 20 20 
0138   D136 44 4F 57 4E 
0138   D13A 20 64 2C 74 
0138   D13E 74 74 2C 73 
0138   D142 73 20 20 20 
0138   D146 20 20 20 20 
0138   D14A 20 20 64 6F 
0138   D14E 77 6E 6C 6F 
0138   D152 61 64 20 6F 
0138   D156 6E 65 20 73 
0138   D15A 65 63 74 6F 
0138   D15E 72 20 66 72 
0138   D162 6F 6D 20 64 
0138   D166 69 73 6B 2E 
0138   D16A 0D 0A 
0139   D16C 20 20 20 20 			.DB "            UP d,ttt,ss           upload one sector to disk.",CR,LF
0139   D170 20 20 20 20 
0139   D174 20 20 20 20 
0139   D178 55 50 20 64 
0139   D17C 2C 74 74 74 
0139   D180 2C 73 73 20 
0139   D184 20 20 20 20 
0139   D188 20 20 20 20 
0139   D18C 20 20 75 70 
0139   D190 6C 6F 61 64 
0139   D194 20 6F 6E 65 
0139   D198 20 73 65 63 
0139   D19C 74 6F 72 20 
0139   D1A0 74 6F 20 64 
0139   D1A4 69 73 6B 2E 
0139   D1A8 0D 0A 
0140   D1AA 20 20 20 20 			.DB "            VERIFY d              verify disk.",CR,LF
0140   D1AE 20 20 20 20 
0140   D1B2 20 20 20 20 
0140   D1B6 56 45 52 49 
0140   D1BA 46 59 20 64 
0140   D1BE 20 20 20 20 
0140   D1C2 20 20 20 20 
0140   D1C6 20 20 20 20 
0140   D1CA 20 20 76 65 
0140   D1CE 72 69 66 79 
0140   D1D2 20 64 69 73 
0140   D1D6 6B 2E 0D 0A 
0141   D1DA 20 20 20 20 			.DB "            FORMAT d              format disk.",CR,LF
0141   D1DE 20 20 20 20 
0141   D1E2 20 20 20 20 
0141   D1E6 46 4F 52 4D 
0141   D1EA 41 54 20 64 
0141   D1EE 20 20 20 20 
0141   D1F2 20 20 20 20 
0141   D1F6 20 20 20 20 
0141   D1FA 20 20 66 6F 
0141   D1FE 72 6D 61 74 
0141   D202 20 64 69 73 
0141   D206 6B 2E 0D 0A 
0142   D20A 20 20 20 20 			.DB "            XMODEM aaaa           receive file using xmodem protocol.",CR,LF
0142   D20E 20 20 20 20 
0142   D212 20 20 20 20 
0142   D216 58 4D 4F 44 
0142   D21A 45 4D 20 61 
0142   D21E 61 61 61 20 
0142   D222 20 20 20 20 
0142   D226 20 20 20 20 
0142   D22A 20 20 72 65 
0142   D22E 63 65 69 76 
0142   D232 65 20 66 69 
0142   D236 6C 65 20 75 
0142   D23A 73 69 6E 67 
0142   D23E 20 78 6D 6F 
0142   D242 64 65 6D 20 
0142   D246 70 72 6F 74 
0142   D24A 6F 63 6F 6C 
0142   D24E 2E 0D 0A 
0143   D251 20 20 20 20 			.DB "            HEX2COM aaaa          convert intel hex to executable.",CR,LF
0143   D255 20 20 20 20 
0143   D259 20 20 20 20 
0143   D25D 48 45 58 32 
0143   D261 43 4F 4D 20 
0143   D265 61 61 61 61 
0143   D269 20 20 20 20 
0143   D26D 20 20 20 20 
0143   D271 20 20 63 6F 
0143   D275 6E 76 65 72 
0143   D279 74 20 69 6E 
0143   D27D 74 65 6C 20 
0143   D281 68 65 78 20 
0143   D285 74 6F 20 65 
0143   D289 78 65 63 75 
0143   D28D 74 61 62 6C 
0143   D291 65 2E 0D 0A 
0144   D295 20 20 20 20 			.DB "            RUN aaaa              run program.",CR,LF
0144   D299 20 20 20 20 
0144   D29D 20 20 20 20 
0144   D2A1 52 55 4E 20 
0144   D2A5 61 61 61 61 
0144   D2A9 20 20 20 20 
0144   D2AD 20 20 20 20 
0144   D2B1 20 20 20 20 
0144   D2B5 20 20 72 75 
0144   D2B9 6E 20 70 72 
0144   D2BD 6F 67 72 61 
0144   D2C1 6D 2E 0D 0A 
0145   D2C5 20 20 20 20 			.DB "            BOOT",CR,LF,0
0145   D2C9 20 20 20 20 
0145   D2CD 20 20 20 20 
0145   D2D1 42 4F 4F 54 
0145   D2D5 0D 0A 00 
0146   D2D8 C3 00 D0    			JP	CYCLE
0147   D2DB             			
0148   D2DB             ;================================================================================================
0149   D2DB             ; Read memory operations
0150   D2DB             ;================================================================================================
0151   D2DB 11 84 00    MREAD:		LD	DE,DMA+4
0152   D2DE CD 5D DA    			CALL GETWORD		; Get aaaa
0153   D2E1 FE 01       			CP	1				; Is the argument OK?
0154   D2E3 C2 00 D0    			JP	NZ,CYCLE
0155   D2E6 C5          			PUSH BC
0156   D2E7 D1          			POP	DE				; DE will be the address holder
0157   D2E8 7B          			LD	A,E
0158   D2E9 E6 F0       			AND	0F0H
0159   D2EB 5F          			LD	E,A				; trim addr (xxx0)
0160   D2EC CD 05 D3    NEWHDR:		CALL PRINTHDR		; Print the header
0161   D2EF 3E 10       			LD	A,16
0162   D2F1 32 C4 DB    			LD	(LINNUM),A
0163   D2F4             
0164   D2F4 CD EE D3    			CALL SUBMPRN
0165   D2F7             			
0166   D2F7 CD 09 E6    TRYAGAIN:	CALL CONIN			; Wait for user's decision
0167   D2FA FE 0D       			CP	CR
0168   D2FC 28 EE       			JR	Z,NEWHDR
0169   D2FE FE 1B       			CP	ESC
0170   D300 CA 00 D0    			JP	Z,CYCLE
0171   D303 18 F2       			JR	TRYAGAIN
0172   D305             
0173   D305 CD 33 E6    PRINTHDR:	CALL PRINTSEQ
0174   D308 3E 41 44 44 			.DB ">ADDR: 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F  0123456789ABCDEF",CR,LF,
0174   D30C 52 3A 20 30 
0174   D310 30 20 30 31 
0174   D314 20 30 32 20 
0174   D318 30 33 20 30 
0174   D31C 34 20 30 35 
0174   D320 20 30 36 20 
0174   D324 30 37 20 30 
0174   D328 38 20 30 39 
0174   D32C 20 30 41 20 
0174   D330 30 42 20 30 
0174   D334 43 20 30 44 
0174   D338 20 30 45 20 
0174   D33C 30 46 20 20 
0174   D340 30 31 32 33 
0174   D344 34 35 36 37 
0174   D348 38 39 41 42 
0174   D34C 43 44 45 46 
0174   D350 0D 0A 
0175   D352 3E 2D 2D 2D 			.DB ">----- -----------------------------------------------  ----------------",0
0175   D356 2D 2D 20 2D 
0175   D35A 2D 2D 2D 2D 
0175   D35E 2D 2D 2D 2D 
0175   D362 2D 2D 2D 2D 
0175   D366 2D 2D 2D 2D 
0175   D36A 2D 2D 2D 2D 
0175   D36E 2D 2D 2D 2D 
0175   D372 2D 2D 2D 2D 
0175   D376 2D 2D 2D 2D 
0175   D37A 2D 2D 2D 2D 
0175   D37E 2D 2D 2D 2D 
0175   D382 2D 2D 2D 2D 
0175   D386 2D 2D 20 20 
0175   D38A 2D 2D 2D 2D 
0175   D38E 2D 2D 2D 2D 
0175   D392 2D 2D 2D 2D 
0175   D396 2D 2D 2D 2D 
0175   D39A 00 
0176   D39B C9          			RET
0177   D39C             
0178   D39C CD AF D9    PRINTFTR:	CALL CRLF
0179   D39F CD 33 E6    			CALL PRINTSEQ
0180   D3A2 3E 23 3D 3D 			.DB ">#================= <ENTER> = next page, <ESC> = quit =================#",CR,LF,0
0180   D3A6 3D 3D 3D 3D 
0180   D3AA 3D 3D 3D 3D 
0180   D3AE 3D 3D 3D 3D 
0180   D3B2 3D 3D 3D 20 
0180   D3B6 3C 45 4E 54 
0180   D3BA 45 52 3E 20 
0180   D3BE 3D 20 6E 65 
0180   D3C2 78 74 20 70 
0180   D3C6 61 67 65 2C 
0180   D3CA 20 3C 45 53 
0180   D3CE 43 3E 20 3D 
0180   D3D2 20 71 75 69 
0180   D3D6 74 20 3D 3D 
0180   D3DA 3D 3D 3D 3D 
0180   D3DE 3D 3D 3D 3D 
0180   D3E2 3D 3D 3D 3D 
0180   D3E6 3D 3D 3D 23 
0180   D3EA 0D 0A 00 
0181   D3ED C9          			RET
0182   D3EE             
0183   D3EE             SUBMPRN:
0184   D3EE CD AF D9    NEWLINE:	CALL CRLF
0185   D3F1 CD CB DA    			CALL PRINTENV
0186   D3F4 42          			LD	B,D				; Print the address
0187   D3F5 CD 21 DB    			CALL B2HL
0188   D3F8 4C          			LD	C,H
0189   D3F9 CD 0C E6    			CALL CONOUT
0190   D3FC 4D          			LD	C,L
0191   D3FD CD 0C E6    			CALL CONOUT
0192   D400 43          			LD	B,E
0193   D401 CD 21 DB    			CALL B2HL
0194   D404 4C          			LD	C,H
0195   D405 CD 0C E6    			CALL CONOUT
0196   D408 4D          			LD	C,L
0197   D409 CD 0C E6    			CALL CONOUT
0198   D40C 0E 3A       			LD	C,':'
0199   D40E CD 0C E6    			CALL CONOUT
0200   D411 0E 20       			LD	C,' '
0201   D413 CD 0C E6    			CALL CONOUT
0202   D416 06 10       			LD	B,16
0203   D418 C5          NEWCOL:		PUSH BC
0204   D419 1A          			LD	A,(DE)			; Start printing the memory content
0205   D41A 13          			INC	DE
0206   D41B 47          			LD	B,A
0207   D41C CD 21 DB    			CALL B2HL
0208   D41F 4C          			LD	C,H
0209   D420 CD 0C E6    			CALL CONOUT
0210   D423 4D          			LD	C,L
0211   D424 CD 0C E6    			CALL CONOUT
0212   D427 0E 20       			LD	C,' '
0213   D429 CD 0C E6    			CALL CONOUT
0214   D42C C1          			POP	BC
0215   D42D 10 E9       			DJNZ NEWCOL
0216   D42F 0E 20       			LD	C,' '
0217   D431 CD 0C E6    			CALL CONOUT
0218   D434 21 F0 FF    			LD	HL,0FFF0H		; This is -10h
0219   D437 19          			ADD	HL,DE			; Go back to beginning of line
0220   D438 E5          			PUSH HL
0221   D439 D1          			POP	DE
0222   D43A 06 10       			LD	B,16
0223   D43C C5          NEWCOL2:	PUSH BC				; Start printing the printables
0224   D43D 0E 2E       			LD	C,'.'
0225   D43F 1A          			LD	A,(DE)
0226   D440 FE 20       			CP	20H
0227   D442 FA 4B D4    			JP	M,NOTPRTBL
0228   D445 FE 7F       			CP	7FH
0229   D447 F2 4B D4    			JP	P,NOTPRTBL
0230   D44A 4F          			LD	C,A
0231   D44B CD 0C E6    NOTPRTBL:	CALL CONOUT
0232   D44E 13          			INC	DE
0233   D44F C1          			POP	BC
0234   D450 10 EA       			DJNZ NEWCOL2
0235   D452 3A C4 DB    			LD	A,(LINNUM)
0236   D455 3D          			DEC	A
0237   D456 32 C4 DB    			LD	(LINNUM),A
0238   D459 20 93       			JR	NZ,NEWLINE
0239   D45B CD 9C D3    			CALL PRINTFTR		; Print footer message
0240   D45E C9          			RET
0241   D45F             			
0242   D45F             ;================================================================================================
0243   D45F             ; Write memory operations
0244   D45F             ;================================================================================================
0245   D45F 11 85 00    MWRITE:		LD	DE,DMA+5
0246   D462 CD 5D DA    			CALL GETWORD		; Get aaaa
0247   D465 FE 01       			CP	1				; Is the argument OK?
0248   D467 C2 00 D0    			JP	NZ,CYCLE
0249   D46A ED 43 C6 DB 			LD	(AAAA),BC		; Save aaaa
0250   D46E 11 8A 00    			LD	DE,DMA+10
0251   D471 13          MWNEXT:		INC	DE
0252   D472 1A          			LD	A,(DE)
0253   D473 FE 00       			CP	0
0254   D475 CA 00 D0    			JP	Z,CYCLE			; End of char string?
0255   D478 CD 71 DA    			CALL GETBYTE		; Get cc
0256   D47B FE 01       			CP	1				; Is the argument OK?
0257   D47D C2 00 D0    			JP	NZ,CYCLE
0258   D480 2A C6 DB    			LD	HL,(AAAA)
0259   D483 70          			LD	(HL),B			; Put the byte in memory
0260   D484 23          			INC	HL
0261   D485 22 C6 DB    			LD	(AAAA),HL
0262   D488 18 E7       			JR	MWNEXT
0263   D48A             
0264   D48A             ;================================================================================================
0265   D48A             ; Copy memory operations
0266   D48A             ;================================================================================================
0267   D48A 11 84 00    MCOPY:		LD	DE,DMA+4
0268   D48D CD 5D DA    			CALL GETWORD		; Get aaaa
0269   D490 FE 01       			CP	1				; Is the argument OK?
0270   D492 C2 00 D0    			JP	NZ,CYCLE
0271   D495 ED 43 C6 DB 			LD	(AAAA),BC		; Save aaaa
0272   D499 11 8A 00    			LD	DE,DMA+10
0273   D49C CD 5D DA    			CALL GETWORD		; Get bbbb
0274   D49F FE 01       			CP	1				; Is the argument OK?
0275   D4A1 C2 00 D0    			JP	NZ,CYCLE
0276   D4A4 ED 43 C8 DB 			LD	(BBBB),BC		; Save bbbb
0277   D4A8 11 8F 00    			LD	DE,DMA+15
0278   D4AB CD 5D DA    			CALL GETWORD		; Get cccc
0279   D4AE FE 01       			CP	1				; Is the argument OK?
0280   D4B0 C2 00 D0    			JP	NZ,CYCLE
0281   D4B3 ED 43 CA DB 			LD	(CCCC),BC		; Save cccc
0282   D4B7 2A C8 DB    			LD	HL,(BBBB)
0283   D4BA ED 5B C6 DB 			LD	DE,(AAAA)
0284   D4BE AF          			XOR	A				; Reset carry flag
0285   D4BF ED 52       			SBC	HL,DE
0286   D4C1 23          			INC	HL
0287   D4C2 EB          			EX	DE,HL			; HL=source
0288   D4C3 D5          			PUSH DE
0289   D4C4 C1          			POP BC				; BC=counter
0290   D4C5 ED 5B CA DB 			LD	DE,(CCCC)		; DE=target
0291   D4C9 ED B0       			LDIR
0292   D4CB C3 00 D0    			JP	CYCLE
0293   D4CE             
0294   D4CE             ;================================================================================================
0295   D4CE             ; Fill memory operations
0296   D4CE             ;================================================================================================
0297   D4CE 11 84 00    MFILL:		LD	DE,DMA+4
0298   D4D1 CD 5D DA    			CALL GETWORD		; Get aaaa
0299   D4D4 FE 01       			CP	1				; Is the argument OK?
0300   D4D6 C2 00 D0    			JP	NZ,CYCLE
0301   D4D9 ED 43 C6 DB 			LD	(AAAA),BC		; Save aaaa
0302   D4DD 11 8A 00    			LD	DE,DMA+10
0303   D4E0 CD 5D DA    			CALL GETWORD		; Get bbbb
0304   D4E3 FE 01       			CP	1				; Is the argument OK?
0305   D4E5 C2 00 D0    			JP	NZ,CYCLE
0306   D4E8 ED 43 C8 DB 			LD	(BBBB),BC		; Save bbbb
0307   D4EC 11 8F 00    			LD	DE,DMA+15
0308   D4EF CD 71 DA    			CALL GETBYTE		; Get cc
0309   D4F2 FE 01       			CP	1				; Is the argument OK?
0310   D4F4 C2 00 D0    			JP	NZ,CYCLE
0311   D4F7 2A C6 DB    			LD	HL,(AAAA)
0312   D4FA 70          			LD	(HL),B			; Put cc in the 1st position of the area to be filled.
0313   D4FB 2A C8 DB    			LD	HL,(BBBB)
0314   D4FE ED 5B C6 DB 			LD	DE,(AAAA)
0315   D502 AF          			XOR	A				; Reset carry flag
0316   D503 ED 52       			SBC	HL,DE
0317   D505 EB          			EX	DE,HL			; HL=source
0318   D506 D5          			PUSH DE
0319   D507 C1          			POP BC				; BC=counter
0320   D508 E5          			PUSH HL
0321   D509 D1          			POP	DE
0322   D50A 13          			INC DE
0323   D50B ED B0       			LDIR
0324   D50D C3 00 D0    			JP	CYCLE
0325   D510             
0326   D510             ;================================================================================================
0327   D510             ; Xmodem Command
0328   D510             ;================================================================================================
0329   D510 3E C0       XMODEM:		LD	A,0C0H
0330   D512 32 03 00    			LD	(IOBYTE),A
0331   D515 0E 11       			LD	C,DC1
0332   D517 CD 0F E6    			CALL LIST
0333   D51A             			
0334   D51A             			
0335   D51A 11 86 00    			LD	DE,DMA+6
0336   D51D CD 5D DA    			CALL GETWORD		
0337   D520 FE 01       			CP	1					; Is the argument OK?
0338   D522 C2 00 D0    			JP	NZ,CYCLE
0339   D525 ED 43 C6 DB 			LD	(AAAA),BC			; Save address
0340   D529 3E 00       			LD	A,0
0341   D52B 32 CE DB    			LD	(RETRY),A			; Init retry counter
0342   D52E 3C          			INC	A
0343   D52F 32 CF DB    			LD	(BLOCK),A			; Init block counter
0344   D532             
0345   D532 CD ED D5    ALIVE:		CALL SENDNAK
0346   D535             ;***********************************
0347   D535 0E 41       			LD	C,'A'
0348   D537 CD 0F E6    			CALL LIST
0349   D53A             ;***********************************			
0350   D53A 06 05       GET1ST:		LD	B,5
0351   D53C CD F9 D5    			CALL TOCONIN			; 5s timeout
0352   D53F 38 0D       			JR	C,REPEAT			; Timed out?
0353   D541 FE 04       			CP	EOT
0354   D543 28 1A       			JR	Z,GOTEOT			; EOT?
0355   D545 FE 18       			CP	CAN
0356   D547 CA 00 D0    			JP	Z,CYCLE				; CAN?
0357   D54A FE 01       			CP	SOH
0358   D54C 28 1F       			JR	Z,GOTSOH			; SOH?
0359   D54E 3A CE DB    REPEAT:		LD	A,(RETRY)
0360   D551 3C          			INC	A
0361   D552 32 CE DB    			LD	(RETRY),A
0362   D555 FE 0A       			CP	MAXTRY
0363   D557 20 D9       			JR	NZ,ALIVE			; Try again?
0364   D559             OUT3:		
0365   D559 CD F3 D5    			CALL SENDCAN
0366   D55C C3 00 D0    			JP	CYCLE
0367   D55F             			
0368   D55F CD ED D5    GOTEOT:		CALL SENDNAK
0369   D562 06 01       			LD	B,1
0370   D564 CD F9 D5    			CALL TOCONIN
0371   D567 CD E7 D5    			CALL SENDACK
0372   D56A C3 00 D0    			JP	CYCLE
0373   D56D             			
0374   D56D 3E 00       GOTSOH:		LD	A,0
0375   D56F 32 CC DB    			LD	(CHKSUM),A			; Reset checksum
0376   D572 32 CD DB    			LD	(BYTECNT),A			; Reset byte counter
0377   D575 06 01       			LD	B,1
0378   D577 CD F9 D5    			CALL TOCONIN			; Get incoming block number
0379   D57A 38 1F       			JR	C,OUT2				; Timed out?
0380   D57C 4F          			LD	C,A					; Save incoming block number
0381   D57D 06 01       			LD	B,1
0382   D57F CD F9 D5    			CALL TOCONIN			; Get complement of incoming block number
0383   D582 38 17       			JR	C,OUT2				; Timed out?
0384   D584 2F          			CPL
0385   D585 B9          			CP	C
0386   D586 20 13       			JR	NZ,OUT2				; block = //block?
0387   D588 3A CF DB    			LD	A,(BLOCK)
0388   D58B B9          			CP	C					; Is block number what we expected?
0389   D58C 28 16       			JR	Z,RECPACK
0390   D58E 3D          			DEC	A
0391   D58F B9          			CP	C					; block number is the anterior? Probably sender missed our ACK.
0392   D590 20 09       			JR	NZ,OUT2
0393   D592 CD 23 D6    ANTBLK:		CALL PURGE				; Purge input buffer before sending ACK
0394   D595 CD E7 D5    			CALL SENDACK
0395   D598 C3 3A D5    			JP	GET1ST
0396   D59B CD 23 D6    OUT2:		CALL PURGE
0397   D59E CD F3 D5    			CALL SENDCAN
0398   D5A1 C3 00 D0    			JP	CYCLE
0399   D5A4 06 01       RECPACK:	LD	B,1					; Start receiving data packet (128 bytes)
0400   D5A6 CD F9 D5    			CALL TOCONIN
0401   D5A9 38 F0       			JR	C,OUT2				; Timed out?
0402   D5AB 2A C6 DB    			LD	HL,(AAAA)
0403   D5AE 77          			LD	(HL),A				; Put byte in buffer
0404   D5AF 23          			INC	HL					; Inc buffer pointer
0405   D5B0 22 C6 DB    			LD	(AAAA),HL
0406   D5B3 4F          			LD	C,A
0407   D5B4 3A CC DB    			LD	A,(CHKSUM)
0408   D5B7 81          			ADD	A,C
0409   D5B8 32 CC DB    			LD	(CHKSUM),A			; Update checksum
0410   D5BB 3A CD DB    			LD	A,(BYTECNT)			; Inc byte counter
0411   D5BE 3C          			INC	A
0412   D5BF 32 CD DB    			LD	(BYTECNT),A
0413   D5C2 FE 80       			CP	128					; Check if we received a full data packet
0414   D5C4 20 DE       			JR	NZ,RECPACK
0415   D5C6 06 01       			LD	B,1
0416   D5C8 CD F9 D5    			CALL TOCONIN			; Get checksum
0417   D5CB 38 CE       			JR	C,OUT2				; Timed out?
0418   D5CD 4F          			LD	C,A
0419   D5CE 3A CC DB    			LD	A,(CHKSUM)
0420   D5D1 B9          			CP	C
0421   D5D2 C2 4E D5    			JP	NZ,REPEAT			; Checksum OK?
0422   D5D5 3E 00       			LD	A,0
0423   D5D7 32 CE DB    			LD	(RETRY),A			; Reset retry counter
0424   D5DA 3A CF DB    			LD	A,(BLOCK)
0425   D5DD 3C          			INC	A
0426   D5DE 32 CF DB    			LD	(BLOCK),A			; Increment block counter
0427   D5E1             
0428   D5E1 CD E7 D5    			CALL SENDACK
0429   D5E4 C3 3A D5    			JP	GET1ST
0430   D5E7             			
0431   D5E7 0E 06       SENDACK:	LD C,ACK
0432   D5E9 CD 0C E6    			CALL CONOUT
0433   D5EC C9          			RET
0434   D5ED             
0435   D5ED 0E 15       SENDNAK:	LD C,NAK
0436   D5EF CD 0C E6    			CALL CONOUT
0437   D5F2 C9          			RET
0438   D5F3             
0439   D5F3 0E 18       SENDCAN:	LD C,CAN
0440   D5F5 CD 0C E6    			CALL CONOUT
0441   D5F8 C9          			RET
0442   D5F9             
0443   D5F9             ;==================================================================================
0444   D5F9             ; Timed Out Console Input - X seconds, with X passed on reg B
0445   D5F9             ; Incoming byte, if any, returns in A
0446   D5F9             ; Carry flag set if timed out.
0447   D5F9             ;==================================================================================
0448   D5F9 C5          TOCONIN:	PUSH	BC
0449   D5FA E5          			PUSH	HL
0450   D5FB             			
0451   D5FB             ;***********************************
0452   D5FB 0E 54       			LD	C,'T'
0453   D5FD CD 0F E6    			CALL LIST
0454   D600 06 05       			LD	B,5
0455   D602             ;***********************************
0456   D602             			
0457   D602 21 AD 02    LOOP0:		LD	HL,685				;2.5					\
0458   D605 0E 23       LOOP1:		LD	C,35				;1.75	\				|
0459   D607 CD 06 E6    LOOP2:		CALL CONST				;36.5	|t=41.5C+0.5	| 
0460   D60A 3C          			INC	A					;1		|				|
0461   D60B 28 0E       			JR	Z,BWAITING			;3/1.75	|				| t=HL(41.5C+6.5)+1.25
0462   D60D 79          			LD	A,C					;1		|				|
0463   D60E 0D          			DEC	C					;1		|				|
0464   D60F 20 F6       			JR	NZ,LOOP2			;3/1.75	/				| with HL=685 and c=35,
0465   D611 2B          			DEC	HL					;1						|  t=0.9994sec (WOW!!!)
0466   D612 7C          			LD	A,H					;1						|
0467   D613 B5          			OR	L					;1						|
0468   D614 20 EF       			JR	NZ,LOOP1			;3/1.75					/
0469   D616 10 EA       			DJNZ	LOOP0			;3.25/2
0470   D618 37          			SCF
0471   D619 18 05       			JR	TOUT
0472   D61B CD 09 E6    BWAITING:	CALL CONIN
0473   D61E 37          			SCF						; Reset carry flag
0474   D61F 3F          			CCF
0475   D620 E1          TOUT:		POP	HL
0476   D621 C1          			POP	BC
0477   D622 C9          			RET
0478   D623             
0479   D623             ;==================================================================================
0480   D623             ; Purge console input.
0481   D623             ;==================================================================================
0482   D623 06 03       PURGE:		LD	B,3
0483   D625 CD F9 D5    			CALL TOCONIN
0484   D628 30 F9       			JR	NC,PURGE
0485   D62A C9          			RET
0486   D62B             
0487   D62B             ;================================================================================================
0488   D62B             ; Hexadecimal to Executable conversion command.
0489   D62B             ; Record structure:
0490   D62B             ;	<start_code> <byte_count> <address> <record_type> <data>...<data> <checksum>
0491   D62B             ;		':'	        1 byte     2 bytes    00h or 01h       n bytes	    1 byte
0492   D62B             ;
0493   D62B             ; Register usage:
0494   D62B             ;	IX = source address 
0495   D62B             ;	IY = target address
0496   D62B             ;================================================================================================
0497   D62B 11 88 00    HEX2COM:	LD	DE,DMA+8
0498   D62E CD 5D DA    			CALL GETWORD		
0499   D631 FE 01       			CP	1					; Is the argument OK?
0500   D633 C2 00 D0    			JP	NZ,CYCLE
0501   D636 C5          			PUSH BC					; IX holds the source address
0502   D637 DD E1       			POP	IX
0503   D639             			
0504   D639 DD 7E 00    FINDSC:		LD	A,(IX+0)
0505   D63C DD 23       			INC IX
0506   D63E FE 3A       			CP	':'					; Do we have a start code?
0507   D640 20 F7       			JR	NZ,FINDSC
0508   D642 3E 00       			LD	A,0					; Reset checksum
0509   D644 32 CC DB    			LD	(CHKSUM),A
0510   D647 CD D4 D6    			CALL HGB				; Get byte count
0511   D64A 78          			LD	A,B
0512   D64B FE 00       			CP	0
0513   D64D CA 00 D0    			JP	Z,CYCLE				; If byte count=0, we're done.
0514   D650 32 CD DB    			LD	(BYTECNT),A			; Save byte count
0515   D653 CD B6 D6    			CALL UPCHKSUM			; Update checksum
0516   D656 DD 23       			INC	IX
0517   D658 CD DE D6    			CALL HGW				; Get target address
0518   D65B C5          			PUSH BC
0519   D65C FD E1       			POP IY					; IY holds the target address
0520   D65E CD B6 D6    			CALL UPCHKSUM			; Update checksum
0521   D661 41          			LD	B,C
0522   D662 CD B6 D6    			CALL UPCHKSUM			; Update checksum
0523   D665 CD BE D6    			CALL PRTADDR			; Print target address
0524   D668 CD D4 D6    			CALL HGB				; Get record type (just for checksum update)
0525   D66B CD B6 D6    			CALL UPCHKSUM			; Update checksum
0526   D66E DD 23       			INC	IX
0527   D670 3A CD DB    			LD	A,(BYTECNT)
0528   D673 47          			LD	B,A
0529   D674 C5          GETDATA:	PUSH BC
0530   D675 CD D4 D6    			CALL HGB				; Get data byte
0531   D678 FD 70 00    			LD	(IY+0),B
0532   D67B CD B6 D6    			CALL UPCHKSUM			; Update checksum
0533   D67E FD 23       			INC	IY
0534   D680 DD 23       			INC IX
0535   D682 C1          			POP BC
0536   D683 10 EF       			DJNZ GETDATA
0537   D685 CD D4 D6    			CALL HGB				; Get checksum
0538   D688 3A CC DB    			LD	A,(CHKSUM)
0539   D68B ED 44       			NEG
0540   D68D B8          			CP	B
0541   D68E 20 0D       			JR	NZ,CHKSUMER
0542   D690 CD 33 E6    			CALL PRINTSEQ
0543   D693 3A 20 4F 4B 			.DB	": OK.",CR,LF,0
0543   D697 2E 0D 0A 00 
0544   D69B 18 9C       			JR	FINDSC
0545   D69D CD 33 E6    CHKSUMER:	CALL PRINTSEQ
0546   D6A0 3A 20 43 68 			.DB	": Checksum Error.",CR,LF,0
0546   D6A4 65 63 6B 73 
0546   D6A8 75 6D 20 45 
0546   D6AC 72 72 6F 72 
0546   D6B0 2E 0D 0A 00 
0547   D6B4 18 83       			JR	FINDSC
0548   D6B6             
0549   D6B6 3A CC DB    UPCHKSUM:	LD	A,(CHKSUM)
0550   D6B9 80          			ADD	A,B
0551   D6BA 32 CC DB    			LD	(CHKSUM),A
0552   D6BD C9          			RET
0553   D6BE             
0554   D6BE CD CB DA    PRTADDR:	CALL PRINTENV
0555   D6C1 DD 2B       			DEC IX
0556   D6C3 DD 2B       			DEC IX
0557   D6C5 DD 2B       			DEC IX
0558   D6C7 06 04       			LD	B,4
0559   D6C9 DD 4E 00    NXTA:		LD	C,(IX+0)
0560   D6CC CD 0C E6    			CALL CONOUT
0561   D6CF DD 23       			INC	IX
0562   D6D1 10 F6       			DJNZ NXTA
0563   D6D3 C9          			RET
0564   D6D4             			
0565   D6D4 DD E5       HGB:		PUSH IX
0566   D6D6 D1          			POP	DE
0567   D6D7 CD 71 DA    			CALL GETBYTE
0568   D6DA D5          			PUSH DE
0569   D6DB DD E1       			POP IX
0570   D6DD C9          			RET
0571   D6DE             
0572   D6DE DD E5       HGW:		PUSH IX
0573   D6E0 D1          			POP	DE
0574   D6E1 CD 5D DA    			CALL GETWORD
0575   D6E4 D5          			PUSH DE
0576   D6E5 DD E1       			POP IX
0577   D6E7 C9          			RET
0578   D6E8             
0579   D6E8             ;================================================================================================
0580   D6E8             ; Read disk operation (READ D,TTT,SS)
0581   D6E8             ;================================================================================================
0582   D6E8 11 86 00    DREAD:		LD	DE,DMA+6
0583   D6EB CD E9 D7    			CALL GETDTS
0584   D6EE FE 01       			CP	1				; Is the argument OK?
0585   D6F0 C2 00 D0    			JP	NZ,CYCLE
0586   D6F3 CD 4E D8    NEXTSEC:	CALL DTS2LBA
0587   D6F6 CD 13 D7    			CALL PRINTDTS
0588   D6F9 CD 05 D3    			CALL PRINTHDR
0589   D6FC CD 8B D7    			CALL PRINTDSEC
0590   D6FF CD 09 E6    TAGAIN:		CALL CONIN			; Wait for user's decision
0591   D702 FE 0D       			CP	CR
0592   D704 20 06       			JR	NZ,NOTCR
0593   D706 CD 9A D7    			CALL INCDTS
0594   D709 C3 F3 D6    			JP	NEXTSEC
0595   D70C FE 1B       NOTCR:		CP	ESC
0596   D70E CA 00 D0    			JP	Z,CYCLE
0597   D711 18 EC       			JR	TAGAIN
0598   D713             
0599   D713             
0600   D713 CD 33 E6    PRINTDTS:	CALL PRINTSEQ
0601   D716 3E 20 44 54 			.DB	"> DTS: ",0
0601   D71A 53 3A 20 00 
0602   D71E 3A D0 DB    			LD	A,(DSK)
0603   D721 C6 41       			ADD	A,41H
0604   D723 4F          			LD	C,A
0605   D724 CD 0C E6    			CALL CONOUT
0606   D727 0E 2D       			LD	C,'-'
0607   D729 CD 0C E6    			CALL CONOUT
0608   D72C 3A D2 DB    			LD	A,(TRK+1)
0609   D72F CD 7E D7    			CALL PRINTBYTE
0610   D732 3A D1 DB    			LD	A,(TRK)
0611   D735 CD 7E D7    			CALL PRINTBYTE
0612   D738 0E 2D       			LD	C,'-'
0613   D73A CD 0C E6    			CALL CONOUT
0614   D73D 3A D3 DB    			LD	A,(SEC)
0615   D740 CD 7E D7    			CALL PRINTBYTE
0616   D743 CD 33 E6    			CALL PRINTSEQ
0617   D746 20 2C 4C 42 			.DB	" ,LBA: ",0
0617   D74A 41 3A 20 00 
0618   D74E 3A D4 DB    			LD	A,(LBA3)
0619   D751 CD 7E D7    			CALL PRINTBYTE
0620   D754 3A D5 DB    			LD	A,(LBA2)
0621   D757 CD 7E D7    			CALL PRINTBYTE
0622   D75A 3A D6 DB    			LD	A,(LBA1)
0623   D75D CD 7E D7    			CALL PRINTBYTE
0624   D760 3A D7 DB    			LD	A,(LBA0)
0625   D763 CD 7E D7    			CALL PRINTBYTE
0626   D766 CD 33 E6    			CALL PRINTSEQ
0627   D769 20 28 44 49 			.DB	" (DISKPAD = E000)",CR,LF,0
0627   D76D 53 4B 50 41 
0627   D771 44 20 3D 20 
0627   D775 45 30 30 30 
0627   D779 29 0D 0A 00 
0628   D77D             
0629   D77D C9          			RET
0630   D77E             
0631   D77E 47          PRINTBYTE:	LD	B,A
0632   D77F CD 21 DB    			CALL B2HL
0633   D782 4C          			LD	C,H
0634   D783 CD 0C E6    			CALL CONOUT
0635   D786 4D          			LD	C,L
0636   D787 CD 0C E6    			CALL CONOUT
0637   D78A C9          			RET
0638   D78B             
0639   D78B CD CD D8    PRINTDSEC:	CALL DISKREAD
0640   D78E 11 00 E0    			LD	DE,DISKPAD
0641   D791 3E 20       			LD	A,32
0642   D793 32 C4 DB    			LD	(LINNUM),A
0643   D796 CD EE D3    			CALL SUBMPRN
0644   D799 C9          			RET
0645   D79A             
0646   D79A 3A D3 DB    INCDTS:		LD	A,(SEC)
0647   D79D FE 1F       			CP	1FH
0648   D79F 28 05       			JR	Z,ZSEC
0649   D7A1 3C          			INC	A
0650   D7A2 32 D3 DB    			LD	(SEC),A
0651   D7A5 C9          			RET
0652   D7A6 AF          ZSEC:		XOR	A
0653   D7A7 32 D3 DB    			LD	(SEC),A
0654   D7AA 2A D1 DB    			LD	HL,(TRK)
0655   D7AD 01 FF 01    			LD	BC,1FFH
0656   D7B0 37          			SCF
0657   D7B1 3F          			CCF
0658   D7B2 ED 42       			SBC	HL,BC
0659   D7B4 28 08       			JR	Z,ZTRK
0660   D7B6 2A D1 DB    			LD	HL,(TRK)
0661   D7B9 23          			INC	HL
0662   D7BA 22 D1 DB    			LD	(TRK),HL
0663   D7BD C9          			RET
0664   D7BE 21 00 00    ZTRK:		LD	HL,0
0665   D7C1 22 D1 DB    			LD	(TRK),HL
0666   D7C4 3A D0 DB    			LD	A,(DSK)
0667   D7C7 FE 0F       			CP	0FH
0668   D7C9 28 05       			JR	Z,ZDSK
0669   D7CB 3C          			INC	A
0670   D7CC 32 D0 DB    			LD	(DSK),A
0671   D7CF C9          			RET
0672   D7D0 AF          ZDSK:		XOR	A
0673   D7D1 32 D0 DB    			LD	(DSK),A
0674   D7D4 C9          			RET
0675   D7D5             			
0676   D7D5             ;================================================================================================
0677   D7D5             ; Download 1 sector from disk to memory (@ DMIRROR)
0678   D7D5             ;================================================================================================
0679   D7D5 11 85 00    DDOWN:		LD	DE,DMA+5
0680   D7D8 CD E9 D7    			CALL GETDTS
0681   D7DB FE 01       			CP	1				; Is the argument OK?
0682   D7DD C2 00 D0    			JP	NZ,CYCLE
0683   D7E0 CD 4E D8    			CALL DTS2LBA
0684   D7E3 CD CD D8    			CALL DISKREAD
0685   D7E6 C3 00 D0    			JP	CYCLE
0686   D7E9             
0687   D7E9             ;================================================================================================
0688   D7E9             ; Routine to get DTS from command line. DE=line_buf_ptr(should point to where DTS starts).
0689   D7E9             ; Returns A=0 if missing arg, A=1 if OK, A=2 if invalid arg. 
0690   D7E9             ;================================================================================================
0691   D7E9 CD 05 D8    GETDTS:		CALL GETDISK
0692   D7EC FE 01       			CP	1				; Is the argument OK?
0693   D7EE C2 00 D0    			JP	NZ,CYCLE
0694   D7F1 13          			INC DE
0695   D7F2 CD 20 D8    			CALL GETTRACK
0696   D7F5 FE 01       			CP	1				; Is the argument OK?
0697   D7F7 C2 00 D0    			JP	NZ,CYCLE
0698   D7FA 13          			INC	DE
0699   D7FB 13          			INC DE
0700   D7FC CD 3B D8    			CALL GETSECTOR
0701   D7FF FE 01       			CP	1				; Is the argument OK?
0702   D801 C2 00 D0    			JP	NZ,CYCLE
0703   D804 C9          			RET
0704   D805             
0705   D805 1A          GETDISK:	LD	A,(DE)
0706   D806 FE 00       			CP	0
0707   D808 C2 0F D8    			JP	NZ,GD1
0708   D80B CD 92 DA    			CALL GBNA
0709   D80E C9          			RET
0710   D80F D6 41       GD1:		SUB	'A'
0711   D811 32 D0 DB    			LD	(DSK),A
0712   D814 FE 10       			CP	10H
0713   D816 FA 1D D8    			JP	M,GD2
0714   D819 CD B0 DA    			CALL GBIA
0715   D81C C9          			RET
0716   D81D 3E 01       GD2:		LD	A,1
0717   D81F C9          			RET
0718   D820             
0719   D820 3E 30       GETTRACK:	LD	A,'0'
0720   D822 12          			LD	(DE),A
0721   D823 CD 5D DA    			CALL GETWORD
0722   D826 FE 01       			CP	1
0723   D828 C0          			RET	NZ
0724   D829 ED 43 D1 DB 			LD	(TRK),BC
0725   D82D 21 FF 01    			LD	HL,1FFH
0726   D830 37          			SCF
0727   D831 3F          			CCF
0728   D832 ED 42       			SBC	HL,BC
0729   D834 3E 01       			LD	A,1
0730   D836 F0          			RET	P
0731   D837 CD B0 DA    			CALL GBIA
0732   D83A C9          			RET
0733   D83B             
0734   D83B CD 71 DA    GETSECTOR:	CALL GETBYTE
0735   D83E FE 01       			CP	1
0736   D840 C0          			RET	NZ
0737   D841 78          			LD	A,B
0738   D842 32 D3 DB    			LD	(SEC),A
0739   D845 FE 20       			CP	20H
0740   D847 3E 01       			LD	A,1
0741   D849 F8          			RET	M
0742   D84A CD B0 DA    			CALL GBIA
0743   D84D C9          			RET
0744   D84E             			
0745   D84E             ;================================================================================================
0746   D84E             ; Convert disk/track/sector to LBA0,1,2,3.
0747   D84E             ;================================================================================================
0748   D84E 2A D1 DB    DTS2LBA:	LD	HL,(TRK)
0749   D851 CB 05       			RLC	L
0750   D853 CB 05       			RLC	L
0751   D855 CB 05       			RLC	L
0752   D857 CB 05       			RLC	L
0753   D859 CB 05       			RLC	L
0754   D85B 7D          			LD	A,L
0755   D85C E6 E0       			AND	0E0H
0756   D85E 6F          			LD	L,A
0757   D85F 3A D3 DB    			LD	A,(SEC)
0758   D862 85          			ADD	A,L
0759   D863 32 D7 DB    			LD	(LBA0),A
0760   D866 2A D1 DB    			LD	HL,(TRK)
0761   D869 CB 0D       			RRC	L
0762   D86B CB 0D       			RRC	L
0763   D86D CB 0D       			RRC	L
0764   D86F 7D          			LD	A,L
0765   D870 E6 1F       			AND	01FH
0766   D872 6F          			LD	L,A
0767   D873 CB 04       			RLC	H
0768   D875 CB 04       			RLC	H
0769   D877 CB 04       			RLC	H
0770   D879 CB 04       			RLC	H
0771   D87B CB 04       			RLC	H
0772   D87D 7C          			LD	A,H
0773   D87E E6 20       			AND	020H
0774   D880 67          			LD	H,A
0775   D881 3A D0 DB    			LD	A,(DSK)
0776   D884 CB 07       			RLC	A
0777   D886 CB 07       			RLC	A
0778   D888 CB 07       			RLC	A
0779   D88A CB 07       			RLC	A
0780   D88C CB 07       			RLC	A
0781   D88E CB 07       			RLC	A
0782   D890 E6 C0       			AND	0C0H
0783   D892 84          			ADD	A,H
0784   D893 85          			ADD	A,L
0785   D894 32 D6 DB    			LD	(LBA1),A
0786   D897 3A D0 DB    			LD	A,(DSK)
0787   D89A CB 0F       			RRC	A
0788   D89C CB 0F       			RRC	A
0789   D89E E6 03       			AND	03H
0790   D8A0 32 D5 DB    			LD	(LBA2),A
0791   D8A3 3E E0       			LD	A,0E0H
0792   D8A5 32 D4 DB    			LD	(LBA3),A
0793   D8A8 C9          			RET
0794   D8A9             			
0795   D8A9             ;================================================================================================
0796   D8A9             ; Wait for disk to be ready (busy=0,ready=1)
0797   D8A9             ;================================================================================================
0798   D8A9 F5          DWAIT:		PUSH AF
0799   D8AA DB B7       DWAIT1:		IN 	A,(CF_STATUS)
0800   D8AC E6 80       			AND	080H
0801   D8AE FE 80       			CP 	080H
0802   D8B0 28 F8       			JR	Z,DWAIT1
0803   D8B2 F1          			POP	AF
0804   D8B3 C9          			RET
0805   D8B4             
0806   D8B4             ;================================================================================================
0807   D8B4             ; Set LBA on CF
0808   D8B4             ;================================================================================================
0809   D8B4 3A D7 DB    SETLBA:		LD	A,(LBA0)
0810   D8B7 D3 B3       			OUT (CF_LBA0),A
0811   D8B9 3A D6 DB    			LD	A,(LBA1)
0812   D8BC D3 B4       			OUT (CF_LBA1),A
0813   D8BE 3A D5 DB    			LD	A,(LBA2)
0814   D8C1 D3 B5       			OUT (CF_LBA2),A
0815   D8C3 3A D4 DB    			LD	A,(LBA3)
0816   D8C6 D3 B6       			OUT (CF_LBA3),A
0817   D8C8 3E 01       			LD 	A,1
0818   D8CA D3 B2       			OUT (CF_SECCOUNT),A
0819   D8CC C9          			RET				
0820   D8CD             
0821   D8CD             ;================================================================================================
0822   D8CD             ; Read physical one sector from disk and write it on DISKPAD
0823   D8CD             ;================================================================================================
0824   D8CD F5          DISKREAD:	PUSH AF
0825   D8CE C5          			PUSH BC
0826   D8CF E5          			PUSH HL
0827   D8D0             
0828   D8D0 CD A9 D8    			CALL DWAIT
0829   D8D3 CD B4 D8    			CALL SETLBA
0830   D8D6 3E 20       			LD 	A,CF_READ_SEC
0831   D8D8 D3 B7       			OUT (CF_COMMAND),A
0832   D8DA CD A9 D8    			CALL DWAIT
0833   D8DD 0E 04       			LD 	C,4
0834   D8DF 21 00 E0    			LD 	HL,DISKPAD
0835   D8E2 06 80       rd4secs:	LD 	B,128
0836   D8E4 DB B0       rdByte:		IN 	A,(CF_DATA)
0837   D8E6 77          			LD 	(HL),A
0838   D8E7 23          			INC HL
0839   D8E8 05          			DEC B
0840   D8E9 20 F9       			JR 	NZ, rdByte
0841   D8EB 0D          			DEC C
0842   D8EC 20 F4       			JR 	NZ,rd4secs
0843   D8EE             
0844   D8EE E1          			POP HL
0845   D8EF C1          			POP BC
0846   D8F0 F1          			POP AF
0847   D8F1 C9          			RET
0848   D8F2             
0849   D8F2             ;================================================================================================
0850   D8F2             ; Write physical sector from DISKPAD to host
0851   D8F2             ;================================================================================================
0852   D8F2 F5          DISKWRITE:	PUSH AF
0853   D8F3 C5          			PUSH BC
0854   D8F4 E5          			PUSH HL
0855   D8F5             
0856   D8F5 CD A9 D8    			CALL DWAIT
0857   D8F8 CD B4 D8    			CALL SETLBA
0858   D8FB 3E 30       			LD 	A,CF_WRITE_SEC
0859   D8FD D3 B7       			OUT (CF_COMMAND),A
0860   D8FF CD A9 D8    			CALL DWAIT
0861   D902 0E 04       			LD 	C,4
0862   D904 21 00 E0    			LD 	HL,DISKPAD
0863   D907 06 80       wr4secs:	LD 	B,128
0864   D909 7E          wrByte:		LD 	A,(HL)
0865   D90A D3 B0       			OUT (CF_DATA),A
0866   D90C 23          			INC HL
0867   D90D 05          			DEC B
0868   D90E 20 F9       			JR 	NZ,wrByte
0869   D910 0D          			DEC C
0870   D911 20 F4       			JR 	NZ,wr4secs
0871   D913             
0872   D913 E1          			POP HL
0873   D914 C1          			POP BC
0874   D915 F1          			POP AF
0875   D916 C9          			RET
0876   D917             
0877   D917             ;================================================================================================
0878   D917             ; Upload 1 sector from memory (@ DMIRROR) to disk
0879   D917             ;================================================================================================
0880   D917 11 83 00    DUP:		LD	DE,DMA+3
0881   D91A CD E9 D7    			CALL GETDTS
0882   D91D FE 01       			CP	1				; Is the argument OK?
0883   D91F C2 00 D0    			JP	NZ,CYCLE
0884   D922 CD 4E D8    			CALL DTS2LBA
0885   D925 CD F2 D8    			CALL DISKWRITE
0886   D928 C3 00 D0    			JP	CYCLE
0887   D92B             
0888   D92B             ;================================================================================================
0889   D92B             ; Verify disk. Do this on on all sectors of the disk:
0890   D92B             ;
0891   D92B             ;	1. copy sector to DISKPAD
0892   D92B             ;	2. fill sector with 00
0893   D92B             ;	3. verify if all bytes are 00
0894   D92B             ;	4. fill sector with 0FFh
0895   D92B             ;	5. verify if all bytes are 0FFh
0896   D92B             ;	6. copy DISKPAD back to sector
0897   D92B             ;
0898   D92B             ; If during the verification a byte doesn't match, print error message and continue.
0899   D92B             ;================================================================================================
0900   D92B C9          DVERIFY:	RET
0901   D92C             
0902   D92C             ;================================================================================================
0903   D92C             ; Format a disk.
0904   D92C             ;================================================================================================
0905   D92C C9          DFORMAT:	RET
0906   D92D             
0907   D92D             ;================================================================================================
0908   D92D             ; Run (Execute) Command
0909   D92D             ;================================================================================================
0910   D92D 11 83 00    RUN:		LD	DE,DMA+3
0911   D930 CD 5D DA    			CALL GETWORD		
0912   D933 FE 01       			CP	1				; Is the argument OK?
0913   D935 C2 00 D0    			JP	NZ,CYCLE
0914   D938 C5          			PUSH BC
0915   D939 E1          			POP	HL
0916   D93A E9          			JP	(HL)			; Continue execution where user requested. His responsability!
0917   D93B             
0918   D93B             ;================================================================================================
0919   D93B             ; Unknown Command message. HL has the address of the line buffer.
0920   D93B             ;================================================================================================
0921   D93B CD CB DA    UNKNOWN:	CALL PRINTENV
0922   D93E 21 80 00    			LD	HL,DMA
0923   D941 7E          UNEXT:		LD	A,(HL)
0924   D942 FE 00       			CP	0
0925   D944 28 07       			JR	Z,UEND
0926   D946 4F          			LD	C,A
0927   D947 CD 0C E6    			CALL CONOUT
0928   D94A 23          			INC	HL
0929   D94B 18 F4       			JR	UNEXT
0930   D94D 0E 3F       UEND:		LD	C,'?'
0931   D94F CD 0C E6    			CALL CONOUT
0932   D952 CD AF D9    			CALL CRLF
0933   D955 C9          			RET
0934   D956             
0935   D956             ;================================================================================================
0936   D956             ; Routine to manage line input from console. Returns A=0FFh if user typed Ctrl-Z (ETX).
0937   D956             ;================================================================================================
0938   D956 21 80 00    LINER:		LD	HL,DMA
0939   D959 22 C2 DB    			LD	(LBUFPTR),HL			; Init line buffer pointer.
0940   D95C CD 09 E6    WAITCHAR:	CALL CONIN					; Wait till user types something.
0941   D95F FE 03       			CP	ETX						; Is it Ctrl-C?
0942   D961 28 42       			JR	Z,GOTETX
0943   D963 FE 1A       			CP	SUB						; Is is Ctrl-Z?
0944   D965 28 3E       			JR	Z,GOTSUB
0945   D967 FE 18       			CP	CAN
0946   D969 28 40       			JR	Z,GOTCAN				; Is it <CAN>? (= delete line).
0947   D96B FE 0D       			CP	CR
0948   D96D 28 29       			JR	Z,GOTCR					; Is it <ENTER>?
0949   D96F FE 08       			CP	BS
0950   D971 28 1E       			JR	Z,GOTBS					; Is it <BS>? (= backspace).
0951   D973 2A C2 DB    			LD	HL,(LBUFPTR)			; None of the above options, so let's put it in the buffer.
0952   D976 01 D0 00    			LD	BC,MAXLBUF				; But 1st, we have to check if we still have space.
0953   D979 37          			SCF
0954   D97A 3F          			CCF
0955   D97B ED 42       			SBC	HL,BC
0956   D97D 28 0E       			JR	Z,LBUFFULL				; Is buffer full?
0957   D97F 2A C2 DB    			LD	HL,(LBUFPTR)
0958   D982 77          			LD	(HL),A
0959   D983 23          			INC	HL
0960   D984 22 C2 DB    			LD	(LBUFPTR),HL
0961   D987 4F          			LD	C,A
0962   D988 CD 0C E6    OUTWAIT:	CALL CONOUT
0963   D98B 18 CF       			JR	WAITCHAR
0964   D98D             
0965   D98D 0E 07       LBUFFULL:	LD	C,BEL					; Buffer is full. Just ring the bell.
0966   D98F 18 F7       			JR	OUTWAIT
0967   D991             
0968   D991 16 01       GOTBS:		LD	D,1						; We got a backspace.
0969   D993 CD BA D9    AFTGOTBS:	CALL BSPROC
0970   D996 18 C4       			JR	WAITCHAR
0971   D998             
0972   D998 2A C2 DB    GOTCR:		LD	HL,(LBUFPTR)			; We got an ENTER, which means the the user
0973   D99B 3E 00       			LD	A,0						; has finished typing the command line.
0974   D99D 77          			LD	(HL),A
0975   D99E CD AF D9    			CALL CRLF
0976   D9A1 CD E8 D9    			CALL UPPER					; Convert line to uppercase before parsing.
0977   D9A4 C9          			RET
0978   D9A5             GOTETX:
0979   D9A5 CD AF D9    GOTSUB:		CALL CRLF					; User abort request (Ctrl-C or Ctrl-Z).
0980   D9A8 3E 0C       			LD	A,FF
0981   D9AA C9          			RET
0982   D9AB             			
0983   D9AB 16 00       GOTCAN:		LD	D,0						; We got a line delete.
0984   D9AD 18 E4       			JR	AFTGOTBS
0985   D9AF             			
0986   D9AF 0E 0D       CRLF:		LD	C,CR
0987   D9B1 CD 0C E6    			CALL CONOUT
0988   D9B4 0E 0A       			LD	C,LF
0989   D9B6 CD 0C E6    			CALL CONOUT					; Output <CR><LF>.
0990   D9B9 C9          			RET
0991   D9BA             
0992   D9BA             ;================================================================================================
0993   D9BA             ; Routine to do the backspace and line delete. D=1, backspace; D=0, delete line.
0994   D9BA             ;================================================================================================
0995   D9BA 2A C2 DB    BSPROC:		LD	HL,(LBUFPTR)
0996   D9BD 01 80 00    			LD	BC,DMA
0997   D9C0 37          			SCF
0998   D9C1 3F          			CCF
0999   D9C2 ED 42       			SBC	HL,BC
1000   D9C4 28 1C       			JR	Z,LBUFEMPTY
1001   D9C6 2A C2 DB    			LD	HL,(LBUFPTR)
1002   D9C9 2B          			DEC	HL
1003   D9CA 22 C2 DB    			LD	(LBUFPTR),HL
1004   D9CD 0E 08       			LD	C,BS
1005   D9CF CD 0C E6    			CALL CONOUT
1006   D9D2 0E 20       			LD	C,' '
1007   D9D4 CD 0C E6    			CALL CONOUT
1008   D9D7 0E 08       			LD	C,BS
1009   D9D9 CD 0C E6    			CALL CONOUT
1010   D9DC 7A          			LD	A,D
1011   D9DD FE 01       			CP	1
1012   D9DF C8          			RET	Z
1013   D9E0 18 D8       			JR	BSPROC
1014   D9E2             
1015   D9E2 0E 07       LBUFEMPTY:	LD	C,BEL
1016   D9E4 CD 0C E6    			CALL CONOUT
1017   D9E7 C9          			RET
1018   D9E8             			
1019   D9E8             ;================================================================================================
1020   D9E8             ; Routine to convert line buffer content to upper case
1021   D9E8             ;================================================================================================
1022   D9E8 21 7F 00    UPPER:		LD	HL,DMA-1
1023   D9EB 23          NEXT2UP:	INC	HL
1024   D9EC 7E          			LD	A,(HL)
1025   D9ED FE 00       			CP	0
1026   D9EF C8          			RET	Z
1027   D9F0 FE 61       			CP	'a'
1028   D9F2 FA EB D9    			JP	M,NEXT2UP
1029   D9F5 FE 7B       			CP	'{'
1030   D9F7 F2 EB D9    			JP	P,NEXT2UP
1031   D9FA D6 20       			SUB	20H
1032   D9FC 77          			LD	(HL),A
1033   D9FD 18 EC       			JR	NEXT2UP
1034   D9FF             			
1035   D9FF             ;================================================================================================
1036   D9FF             ; Routine to parse command. HL=cmd_table_pointer.
1037   D9FF             ; regA=cmd_num or FFh if no match. HL=jump_address or 0000 if no match.
1038   D9FF             ;================================================================================================
1039   D9FF C5          PARSER:		PUSH BC
1040   DA00 D5          			PUSH DE
1041   DA01 11 80 00    			LD	DE,DMA
1042   DA04 3E 00       			LD	A,0
1043   DA06 32 C1 DB    			LD	(CMDNUM),A		; Init command number.
1044   DA09 1A          NEXT2PARS:	LD	A,(DE)
1045   DA0A BE          			CP	(HL)
1046   DA0B 20 04       			JR	NZ,NOTEQU
1047   DA0D 23          			INC	HL
1048   DA0E 13          			INC	DE
1049   DA0F 18 F8       			JR	NEXT2PARS
1050   DA11 7E          NOTEQU:		LD	A,(HL)
1051   DA12 FE 1E       			CP	RS
1052   DA14 28 04       			JR	Z,ISRS
1053   DA16 FE 03       			CP	ETX
1054   DA18 20 22       			JR	NZ,NEXTCMD
1055   DA1A 1A          ISRS:		LD	A,(DE)
1056   DA1B FE 00       			CP	0
1057   DA1D 28 04       			JR	Z,ISZERO
1058   DA1F FE 20       			CP	' '
1059   DA21 20 19       			JR	NZ,NEXTCMD
1060   DA23 7E          ISZERO:		LD	A,(HL)
1061   DA24 FE 03       			CP	ETX
1062   DA26 28 03       			JR	Z,CMDMATCH
1063   DA28 23          			INC	HL
1064   DA29 18 F8       			JR	ISZERO
1065   DA2B 23          CMDMATCH:	INC	HL
1066   DA2C E5          			PUSH HL
1067   DA2D D1          			POP	DE				; DE=addr of jump table
1068   DA2E 26 00       			LD	H,0
1069   DA30 3A C1 DB    			LD	A,(CMDNUM)
1070   DA33 6F          			LD	L,A
1071   DA34 E5          			PUSH HL
1072   DA35 C1          			POP	BC
1073   DA36 09          			ADD	HL,BC			; command_number * 2
1074   DA37 09          			ADD	HL,BC			; command_number * 3
1075   DA38 19          			ADD HL,DE
1076   DA39 D1          			POP	DE
1077   DA3A C1          			POP	BC
1078   DA3B C9          			RET					; A=command_number, HL=jump_address
1079   DA3C 7E          NEXTCMD:	LD	A,(HL)
1080   DA3D FE 1E       			CP	RS
1081   DA3F 28 07       			JR	Z,ISRS2
1082   DA41 FE 03       			CP	ETX
1083   DA43 28 10       			JR	Z,NOMATCH
1084   DA45 23          			INC	HL
1085   DA46 18 F4       			JR	NEXTCMD
1086   DA48 23          ISRS2:		INC	HL
1087   DA49 3A C1 DB    			LD	A,(CMDNUM)
1088   DA4C 3C          			INC	A
1089   DA4D 32 C1 DB    			LD	(CMDNUM),A
1090   DA50 11 80 00    			LD	DE,DMA
1091   DA53 18 B4       			JR	NEXT2PARS
1092   DA55 21 00 00    NOMATCH:	LD	HL,0
1093   DA58 3E FF       			LD	A,0FFH
1094   DA5A D1          			POP	DE
1095   DA5B C1          			POP	BC
1096   DA5C C9          			RET
1097   DA5D             
1098   DA5D             ;================================================================================================
1099   DA5D             ; Routine to get word from command line. DE=line_buf_ptr(should point to where word starts).
1100   DA5D             ; If successfull, return word in BC. A=0 if missing arg, A=1 if OK, A=2 if invalid arg. 
1101   DA5D             ;================================================================================================
1102   DA5D CD 71 DA    GETWORD:	CALL GETBYTE
1103   DA60 FE 01       			CP	1
1104   DA62 C0          			RET	NZ
1105   DA63 48          			LD	C,B
1106   DA64 13          			INC	DE
1107   DA65 CD 71 DA    			CALL GETBYTE
1108   DA68 FE 01       			CP	1
1109   DA6A C0          			RET NZ
1110   DA6B 78          			LD	A,B
1111   DA6C 41          			LD	B,C
1112   DA6D 4F          			LD	C,A
1113   DA6E 3E 01       			LD	A,1
1114   DA70 C9          			RET
1115   DA71             			
1116   DA71             ;================================================================================================
1117   DA71             ; Routine to get byte from command line. DE=line_buf_ptr(should point to where byte starts).
1118   DA71             ; If successfull, return byte in regB. A=0 if missing arg, A=1 if OK, A=2 if invalid arg. 
1119   DA71             ;================================================================================================
1120   DA71 1A          GETBYTE:	LD	A,(DE)
1121   DA72 FE 00       			CP	0
1122   DA74 28 1C       			JR	Z,GBNA				; End of buffer and no arg found.
1123   DA76 FE 20       			CP	' '
1124   DA78 28 33       			JR	Z,GBSPC				; Trim the space.
1125   DA7A 67          			LD	H,A
1126   DA7B CD D1 DA    			CALL ISITHEX
1127   DA7E FE 01       			CP	1
1128   DA80 20 2E       			JR	NZ,GBIA				; Invalid arg.
1129   DA82 13          			INC	DE
1130   DA83 1A          			LD	A,(DE)
1131   DA84 6F          			LD	L,A
1132   DA85 CD D1 DA    			CALL ISITHEX
1133   DA88 FE 01       			CP	1
1134   DA8A 20 24       			JR	NZ,GBIA				; Invalid arg.
1135   DA8C CD EB DA    			CALL HL2B				; Convert ASCII pair to byte
1136   DA8F 3E 01       			LD	A,1
1137   DA91 C9          			RET
1138   DA92 CD 33 E6    GBNA:		CALL PRINTSEQ
1139   DA95 3E 4D 69 73 			.DB	">Missing argument.",CR,LF,0
1139   DA99 73 69 6E 67 
1139   DA9D 20 61 72 67 
1139   DAA1 75 6D 65 6E 
1139   DAA5 74 2E 0D 0A 
1139   DAA9 00 
1140   DAAA 3E 00       			LD	A,0
1141   DAAC C9          			RET
1142   DAAD 13          GBSPC:		INC	DE
1143   DAAE 18 C1       			JR	GETBYTE
1144   DAB0 CD 33 E6    GBIA:		CALL PRINTSEQ
1145   DAB3 3E 49 6E 76 			.DB	">Invalid argument.",CR,LF,0
1145   DAB7 61 6C 69 64 
1145   DABB 20 61 72 67 
1145   DABF 75 6D 65 6E 
1145   DAC3 74 2E 0D 0A 
1145   DAC7 00 
1146   DAC8 3E 02       			LD	A,2
1147   DACA C9          			RET
1148   DACB             
1149   DACB 0E 3E       PRINTENV:	LD	C,PROMPT
1150   DACD CD 0C E6    			CALL CONOUT
1151   DAD0 C9          			RET
1152   DAD1             
1153   DAD1 FE 47       ISITHEX:	CP	'G'
1154   DAD3 F2 E5 DA    			JP	P,NOTHEX
1155   DAD6 FE 41       			CP	'A'
1156   DAD8 F2 E8 DA    			JP	P,ISHEX
1157   DADB FE 40       			CP	040H
1158   DADD F2 E5 DA    			JP	P,NOTHEX
1159   DAE0 FE 30       			CP	'0'
1160   DAE2 F2 E8 DA    			JP	P,ISHEX
1161   DAE5 3E 00       NOTHEX:		LD	A,0
1162   DAE7 C9          			RET
1163   DAE8 3E 01       ISHEX:		LD	A,1
1164   DAEA C9          			RET
1165   DAEB             
1166   DAEB             ;================================================================================================
1167   DAEB             ; Convert ASCII to HEX (HL --> B)
1168   DAEB             ;================================================================================================
1169   DAEB C5          HL2B:		PUSH BC
1170   DAEC 3E 60       			LD	A,060H
1171   DAEE 94          			SUB	H
1172   DAEF 0E 57       			LD	C,057H
1173   DAF1 DA FE DA    			JP	C,DISCOUNT
1174   DAF4 3E 40       			LD	A,040H
1175   DAF6 94          			SUB	H
1176   DAF7 0E 37       			LD	C,037H
1177   DAF9 DA FE DA    			JP	C,DISCOUNT
1178   DAFC 0E 30       			LD	C,030H
1179   DAFE 7C          DISCOUNT:	LD	A,H
1180   DAFF 91          			SUB	C
1181   DB00 47          CONVL:		LD	B,A
1182   DB01 CB 20       			SLA	B
1183   DB03 CB 20       			SLA	B
1184   DB05 CB 20       			SLA	B
1185   DB07 CB 20       			SLA	B
1186   DB09 3E 60       			LD	A,060H
1187   DB0B 95          			SUB	L
1188   DB0C 0E 57       			LD	C,057H
1189   DB0E DA 1B DB    			JP	C,DISCOUNT2
1190   DB11 3E 40       			LD	A,040H
1191   DB13 95          			SUB	L
1192   DB14 0E 37       			LD	C,037H
1193   DB16 DA 1B DB    			JP	C,DISCOUNT2
1194   DB19 0E 30       			LD	C,030H
1195   DB1B 7D          DISCOUNT2:	LD	A,L
1196   DB1C 91          			SUB	C
1197   DB1D B0          			OR	B
1198   DB1E C1          			POP	BC
1199   DB1F 47          			LD	B,A
1200   DB20 C9          			RET
1201   DB21             
1202   DB21             ;================================================================================================
1203   DB21             ; Convert HEX to ASCII (B --> HL)
1204   DB21             ;================================================================================================
1205   DB21 C5          B2HL:		PUSH	BC
1206   DB22 78          			LD	A,B
1207   DB23 E6 0F       			AND	0FH
1208   DB25 6F          			LD	L,A
1209   DB26 D6 0A       			SUB	0AH
1210   DB28 0E 30       			LD	C,030H
1211   DB2A DA 2F DB    			JP	C,COMPENSE
1212   DB2D 0E 37       			LD	C,037H
1213   DB2F 7D          COMPENSE:	LD	A,L
1214   DB30 81          			ADD	A,C
1215   DB31 6F          			LD	L,A
1216   DB32 78          			LD	A,B
1217   DB33 E6 F0       			AND	0F0H
1218   DB35 CB 3F       			SRL	A
1219   DB37 CB 3F       			SRL	A
1220   DB39 CB 3F       			SRL	A
1221   DB3B CB 3F       			SRL	A
1222   DB3D 67          			LD	H,A
1223   DB3E D6 0A       			SUB	0AH
1224   DB40 0E 30       			LD	C,030H
1225   DB42 DA 47 DB    			JP	C,COMPENSE2
1226   DB45 0E 37       			LD	C,037H
1227   DB47 7C          COMPENSE2:	LD	A,H
1228   DB48 81          			ADD	A,C
1229   DB49 67          			LD	H,A
1230   DB4A C1          			POP	BC
1231   DB4B C9          			RET
1232   DB4C             
1233   DB4C             ;================================================================================================
1234   DB4C 3F 1E       CMDTBL:		.DB	"?",RS
1235   DB4E 42 4F 4F 54 			.DB	"BOOT",RS
1235   DB52 1E 
1236   DB53 58 4D 4F 44 			.DB	"XMODEM",RS
1236   DB57 45 4D 1E 
1237   DB5A 48 45 58 32 			.DB	"HEX2COM",RS
1237   DB5E 43 4F 4D 1E 
1238   DB62 52 55 4E 1E 			.DB	"RUN",RS
1239   DB66 52 45 41 44 			.DB	"READ",RS
1239   DB6A 1E 
1240   DB6B 44 52 45 41 			.DB	"DREAD",RS
1240   DB6F 44 1E 
1241   DB71 57 52 49 54 			.DB	"WRITE",RS
1241   DB75 45 1E 
1242   DB77 43 4F 50 59 			.DB	"COPY",RS
1242   DB7B 1E 
1243   DB7C 46 49 4C 4C 			.DB	"FILL",RS
1243   DB80 1E 
1244   DB81 44 4F 57 4E 			.DB	"DOWN",RS
1244   DB85 1E 
1245   DB86 55 50 1E    			.DB	"UP",RS
1246   DB89 46 4F 52 4D 			.DB	"FORMAT",RS
1246   DB8D 41 54 1E 
1247   DB90 56 45 52 49 			.DB	"VERIFY",ETX
1247   DB94 46 59 03 
1248   DB97             
1249   DB97 C3 1C D0    JMPTBL:		JP	HELP
1250   DB9A C3 03 E6    			JP	WBOOT
1251   DB9D C3 10 D5    			JP	XMODEM
1252   DBA0 C3 2B D6    			JP	HEX2COM
1253   DBA3 C3 2D D9    			JP	RUN
1254   DBA6 C3 DB D2    			JP	MREAD
1255   DBA9 C3 E8 D6    			JP	DREAD
1256   DBAC C3 5F D4    			JP	MWRITE
1257   DBAF C3 8A D4    			JP	MCOPY
1258   DBB2 C3 CE D4    			JP	MFILL
1259   DBB5 C3 D5 D7    			JP	DDOWN
1260   DBB8 C3 17 D9    			JP	DUP
1261   DBBB C3 2C D9    			JP	DFORMAT
1262   DBBE C3 2B D9    			JP	DVERIFY
1263   DBC1             			
1264   DBC1             ;================================================================================================
1265   DBC1 00          CMDNUM		.DB	0
1266   DBC2 00 00       LBUFPTR		.DW	0
1267   DBC4 00          LINNUM		.DB	0
1268   DBC5 00          COLNUM		.DB	0
1269   DBC6 00 00       AAAA		.DW	0
1270   DBC8 00 00       BBBB		.DW	0
1271   DBCA 00 00       CCCC		.DW	0
1272   DBCC 00          CHKSUM	 	.DB	0					; Checksum for xmodem
1273   DBCD 00          BYTECNT		.DB	0					; Byte counter for xmodem and hex2com
1274   DBCE 00          RETRY		.DB 0					; Retry counter for xmodem
1275   DBCF 00          BLOCK		.DB	0					; Block counter for xmodem
1276   DBD0 00          DSK			.DB	0					; Disk number [00,0F]
1277   DBD1 00 00       TRK			.DW	0					; Track number [0,1FF]
1278   DBD3 00          SEC			.DB	0					; Sector number [0,1F]
1279   DBD4 00          LBA3		.DB	0
1280   DBD5 00          LBA2		.DB	0
1281   DBD6 00          LBA1		.DB	0
1282   DBD7 00          LBA0		.DB	0
1283   DBD8             
1284   DBD8             			.END
tasm: Number of errors = 0
