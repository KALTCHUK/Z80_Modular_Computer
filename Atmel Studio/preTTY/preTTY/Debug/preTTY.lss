
preTTY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000206  00800100  00800100  0000022e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000022e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000805  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b4  00000000  00000000  00000afd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002fd  00000000  00000000  000011b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  000014b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003fa  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000123  00000000  00000000  0000197a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001a9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 c1 00 	jmp	0x182	; 0x182 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 90 00 	jmp	0x120	; 0x120 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	23 e0       	ldi	r18, 0x03	; 3
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 cc 00 	call	0x198	; 0x198 <main>
  88:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init_DDR>:
		DDRD &= 0x03;		// mask = In In In In In X  X  X  --> &00000111
	}
	else
	{
		DDRB |= 0x03;		// mask =  X   X   X   X   X  Out Out Out --> |00000111
		DDRD |= 0xf8;		// mask = Out Out Out Out Out  X   X  X   --> |11111000
  90:	84 b1       	in	r24, 0x04	; 4
  92:	88 7f       	andi	r24, 0xF8	; 248
  94:	84 b9       	out	0x04, r24	; 4
  96:	87 b1       	in	r24, 0x07	; 7
  98:	88 7f       	andi	r24, 0xF8	; 248
  9a:	87 b9       	out	0x07, r24	; 7
  9c:	8a b1       	in	r24, 0x0a	; 10
  9e:	83 70       	andi	r24, 0x03	; 3
  a0:	8a b9       	out	0x0a, r24	; 10
  a2:	08 95       	ret

000000a4 <init_USART>:
  a4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  a8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  ac:	88 e1       	ldi	r24, 0x18	; 24
  ae:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  b2:	86 e0       	ldi	r24, 0x06	; 6
  b4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  b8:	08 95       	ret

000000ba <TX_buff_use>:
  ba:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <TX_wr_ptr>
  be:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <TX_wr_ptr+0x1>
  c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  ca:	28 1b       	sub	r18, r24
  cc:	39 0b       	sbc	r19, r25
  ce:	c9 01       	movw	r24, r18
  d0:	99 23       	and	r25, r25
  d2:	24 f4       	brge	.+8      	; 0xdc <TX_buff_use+0x22>
  d4:	88 27       	eor	r24, r24
  d6:	99 27       	eor	r25, r25
  d8:	82 1b       	sub	r24, r18
  da:	93 0b       	sbc	r25, r19
  dc:	08 95       	ret

000000de <send_char>:
  de:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  e2:	85 ff       	sbrs	r24, 5
  e4:	fc cf       	rjmp	.-8      	; 0xde <send_char>
  e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ea:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  ee:	9c 01       	movw	r18, r24
  f0:	2f 5f       	subi	r18, 0xFF	; 255
  f2:	3f 4f       	sbci	r19, 0xFF	; 255
  f4:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <_edata+0x1>
  f8:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
  fc:	fc 01       	movw	r30, r24
  fe:	ea 5f       	subi	r30, 0xFA	; 250
 100:	fd 4f       	sbci	r31, 0xFD	; 253
 102:	80 81       	ld	r24, Z
 104:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 108:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 10c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 110:	81 15       	cp	r24, r1
 112:	91 40       	sbci	r25, 0x01	; 1
 114:	21 f4       	brne	.+8      	; 0x11e <send_char+0x40>
 116:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 11a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 11e:	08 95       	ret

00000120 <__vector_18>:

// ************************** //
// *** INTERRUPT SERVICES *** //
// ************************** //
ISR(USART_RX_vect)		// Catch an incoming char on the serial port and put it on the RX_buff
{
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	2f 93       	push	r18
 12c:	3f 93       	push	r19
 12e:	4f 93       	push	r20
 130:	8f 93       	push	r24
 132:	9f 93       	push	r25
 134:	ef 93       	push	r30
 136:	ff 93       	push	r31
	RX_buff[RX_wr_ptr++] = UDR0;
 138:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <RX_wr_ptr>
 13c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <RX_wr_ptr+0x1>
 140:	9c 01       	movw	r18, r24
 142:	2f 5f       	subi	r18, 0xFF	; 255
 144:	3f 4f       	sbci	r19, 0xFF	; 255
 146:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <RX_wr_ptr+0x1>
 14a:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <RX_wr_ptr>
 14e:	40 91 c6 00 	lds	r20, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 152:	fc 01       	movw	r30, r24
 154:	ea 5f       	subi	r30, 0xFA	; 250
 156:	fe 4f       	sbci	r31, 0xFE	; 254
 158:	40 83       	st	Z, r20
	if (RX_wr_ptr == MAX_BUFF_SIZE)
 15a:	21 15       	cp	r18, r1
 15c:	31 40       	sbci	r19, 0x01	; 1
 15e:	21 f4       	brne	.+8      	; 0x168 <__vector_18+0x48>
	RX_wr_ptr = 0;
 160:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <RX_wr_ptr+0x1>
 164:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <RX_wr_ptr>
	reti();
 168:	18 95       	reti
}
 16a:	ff 91       	pop	r31
 16c:	ef 91       	pop	r30
 16e:	9f 91       	pop	r25
 170:	8f 91       	pop	r24
 172:	4f 91       	pop	r20
 174:	3f 91       	pop	r19
 176:	2f 91       	pop	r18
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <__vector_1>:

ISR(INT0_vect)			// Houston, we got a chip_select... CPU wants something
{
 182:	1f 92       	push	r1
 184:	0f 92       	push	r0
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	0f 92       	push	r0
 18a:	11 24       	eor	r1, r1
	// ...
	reti();
 18c:	18 95       	reti
}
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <main>:
// ****** MAIN PROGRAM ****** //
// ************************** //

int main(void)
{
	init_DDR();
 198:	0e 94 48 00 	call	0x90	; 0x90 <init_DDR>
	init_USART(UBRR_9600);
 19c:	81 e8       	ldi	r24, 0x81	; 129
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 52 00 	call	0xa4	; 0xa4 <init_USART>
	sei();
 1a4:	78 94       	sei
	
	while (1)
	{
		if(TX_buff_use() > 0)
 1a6:	0e 94 5d 00 	call	0xba	; 0xba <TX_buff_use>
 1aa:	18 16       	cp	r1, r24
 1ac:	19 06       	cpc	r1, r25
 1ae:	dc f7       	brge	.-10     	; 0x1a6 <main+0xe>
		{
			send_char();
 1b0:	0e 94 6f 00 	call	0xde	; 0xde <send_char>
 1b4:	f8 cf       	rjmp	.-16     	; 0x1a6 <main+0xe>

000001b6 <_exit>:
 1b6:	f8 94       	cli

000001b8 <__stop_program>:
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <__stop_program>
