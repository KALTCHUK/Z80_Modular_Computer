0001   0000             ;==================================================================================
0002   0000             ; XML.ASM version 1 - Kaltchuk, feb/2021
0003   0000             ;
0004   0000             ; This program implements xmodem protocol on CP/M.
0005   0000             ; (3 bytes header, 128byte data packets, 1byte CheckSum).
0006   0000             ;
0007   0000             : +-------- header --------+------- data packet -------+
0008   0000             ; |                        |                           |
0009   0000             ;  <SOH> <BlkNum> </BlkNum> <byte1> <byte2>...<byte128> <ChkSum>
0010   0000             ;==================================================================================
0011   0000             REBOOT		.EQU	0H
0012   0000             BDOS		.EQU	5H
0013   0000             TPA			.EQU	0100H
0014   0000             BIOS		.EQU	0E600h			; Base of BIOS.
0015   0000             
0016   0000             FCB			.EQU	0005CH
0017   0000             DMA			.EQU	080H
0018   0000             
0019   0000             CONST		.EQU	BIOS+(3*2)		; BIOS entry for Console Status (regA=0FFh, char waiting. regA=0, buff empty)
0020   0000             CONIN		.EQU	BIOS+(3*3)		; BIOS entry for Console Input (console --> regA)
0021   0000             CONOUT		.EQU	BIOS+(3*4)		; BIOS entry for Console Output (regC --> console)
0022   0000             
0023   0000             C_STRING	.EQU	9				; BDOS functions
0024   0000             F_CLOSE		.EQU	16
0025   0000             F_DELETE	.EQU	19
0026   0000             F_WRITE		.EQU	21
0027   0000             F_MAKE		.EQU	22
0028   0000             F_DMAOFF	.EQU	26
0029   0000             
0030   0000             SOH			.EQU	01H				; ASCII characters
0031   0000             EOT			.EQU	04H
0032   0000             ACK			.EQU	06H
0033   0000             LF			.EQU	0AH
0034   0000             CR			.EQU	0DH
0035   0000             NAK			.EQU	015H
0036   0000             CAN			.EQU	018H
0037   0000             SUB			.EQU	01AH
0038   0000             
0039   0000             MAXTRY		.EQU	10
0040   0000             
0041   0000             LCD_CARD	.EQU	0E0H			; LCD card base address
0042   0000             DAT_WR		.EQU	LCD_CARD+1
0043   0000             DAT_RD		.EQU	LCD_CARD+3
0044   0000             CMD_WR		.EQU	LCD_CARD
0045   0000             CMD_RD		.EQU	LCD_CARD+2
0046   0000             ;==================================================================================
0047   0100             			.ORG TPA
0048   0100             
0049   0100 31 D9 04    			LD	SP,STACK			; Set default stack.
0050   0103 3A 5D 00    			LD	A,(FCB+1)
0051   0106 FE 20       			CP	' '					; Test if program has argument (file name)
0052   0108 20 0B       			JR	NZ,START
0053   010A 11 75 03    			LD	DE,MSGNOARG
0054   010D 0E 09       			LD	C,C_STRING
0055   010F CD 05 00    			CALL BDOS
0056   0112 C3 00 00    			JP	REBOOT
0057   0115             			
0058   0115 11 54 03    START:		LD	DE,MSGOK
0059   0118 0E 09       			LD	C,C_STRING
0060   011A CD 05 00    			CALL BDOS
0061   011D CD D0 02    			CALL LCDINIT
0062   0120 CD 11 03    			CALL LCDCLEAR
0063   0123 CD 3A 03    			CALL LCDPRINT
0064   0126 53 54 41 52 			.DB	"START",0
0064   012A 54 00 
0065   012C             			
0066   012C 3E 00       			LD	A,0
0067   012E 32 D6 03    			LD	(RETRY),A			; Init retry counter
0068   0131 3C          			INC	A
0069   0132 32 D7 03    			LD	(BLOCK),A			; Init block counter
0070   0135 CD 04 02    			CALL DELFILE			; Delete file
0071   0138 CD 0D 02    			CALL MAKEFILE			; Create file
0072   013B FE 04       			CP	4					; 0, 1, 2 or 3 = OK
0073   013D FA 46 01    			JP	M,ALIVE				; File created OK?
0074   0140 CD 2B 02    OUT1:		CALL SENDCAN
0075   0143 C3 00 00    			JP	REBOOT
0076   0146             
0077   0146 CD 25 02    ALIVE:		CALL SENDNAK
0078   0149 06 05       GET1ST:		LD	B,5
0079   014B CD 61 02    			CALL TOCONIN			; 5s timeout
0080   014E 38 0C       			JR	C,REPEAT			; Timed out?
0081   0150 FE 04       			CP	EOT
0082   0152 28 18       			JR	Z,GOTEOT			; EOT?
0083   0154 FE 18       			CP	CAN
0084   0156 28 25       			JR	Z,GOTCAN			; CAN?
0085   0158 FE 01       			CP	SOH
0086   015A 28 27       			JR	Z,GOTSOH			; SOH?
0087   015C 3A D6 03    REPEAT:		LD	A,(RETRY)
0088   015F 3C          			INC	A
0089   0160 32 D6 03    			LD	(RETRY),A
0090   0163 FE 0A       			CP	MAXTRY
0091   0165 20 DF       			JR	NZ,ALIVE			; Try again?
0092   0167 CD 04 02    OUT3:		CALL DELFILE
0093   016A 18 D4       			JR	OUT1
0094   016C CD 25 02    GOTEOT:		CALL SENDNAK
0095   016F 06 01       			LD	B,1
0096   0171 CD 61 02    			CALL TOCONIN
0097   0174 CD 1F 02    			CALL SENDACK
0098   0177 CD 16 02    			CALL CLOSFILE
0099   017A C3 00 00    			JP	REBOOT
0100   017D CD 04 02    GOTCAN:		CALL DELFILE
0101   0180 C3 00 00    			JP	REBOOT
0102   0183 3E 00       GOTSOH:		LD	A,0
0103   0185 32 D5 03    			LD	(CHKSUM),A			; Reset checksum
0104   0188 21 80 00    			LD	HL,DMA
0105   018B 22 D3 03    			LD	(BUFPTR),HL			; Reset buffer pointer
0106   018E 06 01       			LD	B,1
0107   0190 CD 61 02    			CALL TOCONIN			; Get incoming block number
0108   0193 38 1F       			JR	C,OUT2				; Timed out?
0109   0195 4F          			LD	C,A					; Save incoming block number
0110   0196 06 01       			LD	B,1
0111   0198 CD 61 02    			CALL TOCONIN			; Get complement of incoming block number
0112   019B 38 17       			JR	C,OUT2				; Timed out?
0113   019D 2F          			CPL
0114   019E B9          			CP	C
0115   019F 20 13       			JR	NZ,OUT2				; block = //block?
0116   01A1 3A D7 03    			LD	A,(BLOCK)
0117   01A4 B9          			CP	C					; Is block number what we expected?
0118   01A5 28 15       			JR	Z,RECPACK
0119   01A7 3D          			DEC	A
0120   01A8 B9          			CP	C					; block number is the anterior? Probably sender missed our ACK.
0121   01A9 20 09       			JR	NZ,OUT2
0122   01AB CD 84 02    ANTBLK:		CALL PURGE				; Purge input buffer before sending ACK
0123   01AE CD 1F 02    			CALL SENDACK
0124   01B1 C3 49 01    			JP	GET1ST
0125   01B4 CD 84 02    OUT2:		CALL PURGE
0126   01B7 CD 2B 02    			CALL SENDCAN
0127   01BA 18 C1       			JR	GOTCAN
0128   01BC 06 01       RECPACK:	LD	B,1					; Start receiving data packet (128 bytes)
0129   01BE CD 61 02    			CALL TOCONIN
0130   01C1 38 F1       			JR	C,OUT2				; Timed out?
0131   01C3 2A D3 03    			LD	HL,(BUFPTR)
0132   01C6 77          			LD	(HL),A				; Put byte in buffer
0133   01C7 23          			INC	HL					; Inc buffer pointer
0134   01C8 22 D3 03    			LD	(BUFPTR),HL
0135   01CB 4F          			LD	C,A
0136   01CC 3A D5 03    			LD	A,(CHKSUM)
0137   01CF 81          			ADD	A,C
0138   01D0 32 D5 03    			LD	(CHKSUM),A			; Update checksum
0139   01D3 01 00 01    			LD	BC,TPA
0140   01D6 AF          			XOR	A					; Reset carry flag
0141   01D7 ED 42       			SBC	HL,BC				; If buffer pointer = TPA, we got a full buffer 
0142   01D9 20 E1       			JR	NZ,RECPACK
0143   01DB CD 31 02    			CALL WRITEBLK
0144   01DE FE 00       			CP	0
0145   01E0 C2 67 01    			JP	NZ,OUT3				; Write op OK?
0146   01E3 06 01       			LD	B,1
0147   01E5 CD 61 02    			CALL TOCONIN			; Get checksum
0148   01E8 38 CA       			JR	C,OUT2				; Timed out?
0149   01EA 4F          			LD	C,A
0150   01EB 3A D5 03    			LD	A,(CHKSUM)
0151   01EE B9          			CP	C
0152   01EF C2 5C 01    			JP	NZ,REPEAT			; Checksum OK?
0153   01F2 3E 00       			LD	A,0
0154   01F4 32 D6 03    			LD	(RETRY),A			; Reset retry counter
0155   01F7 3A D7 03    			LD	A,(BLOCK)
0156   01FA 3C          			INC	A
0157   01FB 32 D7 03    			LD	(BLOCK),A			; Increment block counter
0158   01FE CD 1F 02    			CALL SENDACK
0159   0201 C3 49 01    			JP	GET1ST
0160   0204             			
0161   0204             ;==================================================================================
0162   0204             ; Delete file. RegA returns 0, 1, 2 or 3 if successful.
0163   0204             ;==================================================================================
0164   0204 0E 13       DELFILE:	LD	C,F_DELETE
0165   0206 11 5C 00    			LD	DE,FCB
0166   0209 CD 05 00    			CALL BDOS
0167   020C C9          			RET
0168   020D             			
0169   020D             ;==================================================================================
0170   020D             ; Make file. RegA returns 0, 1, 2 or 3 if successful.
0171   020D             ;==================================================================================
0172   020D 0E 16       MAKEFILE:	LD	C,F_MAKE
0173   020F 11 5C 00    			LD	DE,FCB
0174   0212 CD 05 00    			CALL BDOS
0175   0215 C9          			RET
0176   0216             
0177   0216             ;==================================================================================
0178   0216             ; Close file. RegA returns 0, 1, 2 or 3 if successful.
0179   0216             ;==================================================================================
0180   0216 0E 10       CLOSFILE:	LD	C,F_CLOSE
0181   0218 11 5C 00    			LD	DE,FCB
0182   021B CD 05 00    			CALL BDOS
0183   021E C9          			RET
0184   021F             			
0185   021F             ;==================================================================================
0186   021F             ; Send ACK
0187   021F             ;==================================================================================
0188   021F 0E 06       SENDACK:	LD C,ACK
0189   0221 CD 0C E6    			CALL CONOUT
0190   0224 C9          			RET
0191   0225             
0192   0225             ;==================================================================================
0193   0225             ; Send NAK
0194   0225             ;==================================================================================
0195   0225 0E 15       SENDNAK:	LD C,NAK
0196   0227 CD 0C E6    			CALL CONOUT
0197   022A C9          			RET
0198   022B             
0199   022B             ;==================================================================================
0200   022B             ; Send CAN
0201   022B             ;==================================================================================
0202   022B 0E 18       SENDCAN:	LD C,CAN
0203   022D CD 0C E6    			CALL CONOUT
0204   0230 C9          			RET
0205   0231             
0206   0231             ;==================================================================================
0207   0231             ; Write block to file. RegA returns 0 if successful.
0208   0231             ;==================================================================================
0209   0231 CD 3A 03    WRITEBLK:	CALL LCDPRINT
0210   0234 42 4C 4F 43 			.DB	"BLOCK ",0
0210   0238 4B 20 00 
0211   023B 3A D7 03    			LD	A,(BLOCK)
0212   023E 47          			LD	B,A
0213   023F CD 8C 02    			CALL B2HL
0214   0242 4C          			LD	C,H
0215   0243 CD 19 03    			CALL LCDPUT
0216   0246 4D          			LD	C,L
0217   0247 CD 19 03    			CALL LCDPUT
0218   024A             			
0219   024A 0E 1A       			LD	C,F_DMAOFF			; Set DMA before writing.
0220   024C 11 80 00    			LD	DE,DMA
0221   024F CD 05 00    			CALL BDOS
0222   0252 0E 15       			LD	C,F_WRITE			; Write buffer to disk.
0223   0254 11 5C 00    			LD	DE,FCB
0224   0257 CD 05 00    			CALL BDOS
0225   025A 21 80 00    			LD	HL,DMA
0226   025D 22 D3 03    			LD	(BUFPTR),HL			; Reset buffer pointer
0227   0260 C9          			RET
0228   0261             
0229   0261             ;==================================================================================
0230   0261             ; Timed Out Console Input - X seconds, with X passed on reg B
0231   0261             ; Incoming byte, if any, returns in A
0232   0261             ; Carry flag set if timed out.
0233   0261             ;==================================================================================
0234   0261 C5          TOCONIN:	PUSH	BC
0235   0262 E5          			PUSH	HL
0236   0263 21 AD 02    LOOP0:		LD	HL,685				;2.5					\
0237   0266 0E 23       LOOP1:		LD	C,35				;1.75	\				|
0238   0268 CD 06 E6    LOOP2:		CALL CONST				;36.5	|t=41.5C+0.5	| 
0239   026B 3C          			INC	A					;1		|				|
0240   026C 28 0E       			JR	Z,BWAITING			;3/1.75	|				| t=HL(41.5C+6.5)+1.25
0241   026E 79          			LD	A,C					;1		|				|
0242   026F 0D          			DEC	C					;1		|				|
0243   0270 20 F6       			JR	NZ,LOOP2			;3/1.75	/				| with HL=685 and c=35,
0244   0272 2B          			DEC	HL					;1						|  t=0.9994sec (WOW!!!)
0245   0273 7C          			LD	A,H					;1						|
0246   0274 B5          			OR	L					;1						|
0247   0275 20 EF       			JR	NZ,LOOP1			;3/1.75					/
0248   0277 10 EA       			DJNZ	LOOP0			;3.25/2
0249   0279 37          			SCF
0250   027A 18 05       			JR	TOUT
0251   027C CD 09 E6    BWAITING:	CALL CONIN
0252   027F 37          			SCF						; Reset carry flag
0253   0280 3F          			CCF
0254   0281 E1          TOUT:		POP	HL
0255   0282 C1          			POP	BC
0256   0283 C9          			RET
0257   0284             
0258   0284             ;==================================================================================
0259   0284             ; Purge console input.
0260   0284             ;==================================================================================
0261   0284 06 03       PURGE:		LD	B,3
0262   0286 CD 61 02    			CALL TOCONIN
0263   0289 30 F9       			JR	NC,PURGE
0264   028B C9          			RET
0265   028C             
0266   028C             ;================================================================================================
0267   028C             ; Convert HEX to ASCII (B --> HL)
0268   028C             ;================================================================================================
0269   028C C5          B2HL:		PUSH BC
0270   028D 78          			LD	A,B
0271   028E E6 0F       			AND	0FH
0272   0290 6F          			LD	L,A
0273   0291 D6 0A       			SUB	0AH
0274   0293 0E 30       			LD	C,030H
0275   0295 DA 9A 02    			JP	C,COMPENSE
0276   0298 0E 37       			LD	C,037H
0277   029A 7D          COMPENSE:	LD	A,L
0278   029B 81          			ADD	A,C
0279   029C 6F          			LD	L,A
0280   029D 78          			LD	A,B
0281   029E E6 F0       			AND	0F0H
0282   02A0 CB 3F       			SRL	A
0283   02A2 CB 3F       			SRL	A
0284   02A4 CB 3F       			SRL	A
0285   02A6 CB 3F       			SRL	A
0286   02A8 67          			LD	H,A
0287   02A9 D6 0A       			SUB	0AH
0288   02AB 0E 30       			LD	C,030H
0289   02AD DA B2 02    			JP	C,COMPENSE2
0290   02B0 0E 37       			LD	C,037H
0291   02B2 7C          COMPENSE2:	LD	A,H
0292   02B3 81          			ADD	A,C
0293   02B4 67          			LD	H,A
0294   02B5 C1          			POP	BC
0295   02B6 C9          			RET
0296   02B7             
0297   02B7             ;**********************************************************************************
0298   02B7             ;                                  LCD STUFF
0299   02B7             ;**********************************************************************************
0300   02B7             ;================================================================================================
0301   02B7             ; Delay X miliseconds, with X passed on reg B
0302   02B7             ;================================================================================================
0303   02B7             DELAYMS:
0304   02B7 C5          		PUSH	BC
0305   02B8 0E C8       DECB:		LD	C,0C8H
0306   02BA 00          DECC:		NOP
0307   02BB 0D          		DEC	C
0308   02BC 20 FC       		JR	NZ,DECC
0309   02BE 05          		DEC	B
0310   02BF 20 F7       		JR	NZ,DECB
0311   02C1 C1          		POP	BC
0312   02C2 C9          		RET
0313   02C3             
0314   02C3             ;================================================================================================
0315   02C3             ; Delay 5*X microseconds, with X passed on reg C
0316   02C3             ;================================================================================================
0317   02C3             DELAY5US:
0318   02C3 C5          		PUSH	BC
0319   02C4 00          DEC:		NOP
0320   02C5 0D          		DEC	C
0321   02C6 20 FC       		JR	NZ,DEC
0322   02C8 C1          		POP	BC
0323   02C9 C9          		RET
0324   02CA             
0325   02CA             ;================================================================================================
0326   02CA             ; Wait until Busy flag = 0
0327   02CA             ;================================================================================================
0328   02CA DB E2       BWAIT:	IN A,(CMD_RD)
0329   02CC 07          		RLCA
0330   02CD 38 FB       		JR	C,BWAIT
0331   02CF C9          		RET
0332   02D0             
0333   02D0             ;================================================================================================
0334   02D0             ; Initialize LCD
0335   02D0             ;================================================================================================
0336   02D0             LCDINIT:
0337   02D0 06 0F       		LD	B,15			; wait 15ms
0338   02D2 CD B7 02    		CALL	DELAYMS
0339   02D5 3E 30       		LD	A,030H		; write command 030h
0340   02D7 D3 E0       		OUT	(CMD_WR),A
0341   02D9 06 05       		LD	B,5			; wait 5ms
0342   02DB CD B7 02    		CALL	DELAYMS
0343   02DE 3E 30       		LD	A,030H		; write command 030h
0344   02E0 D3 E0       		OUT	(CMD_WR),A
0345   02E2 0E 14       		LD	C,20			; wait (5X20) 100us
0346   02E4 CD C3 02    		CALL	DELAY5US
0347   02E7 3E 30       		LD	A,030H		; write command 030h
0348   02E9 D3 E0       		OUT	(CMD_WR),A
0349   02EB 0E 14       		LD	C,20			; wait (5X20) 100us
0350   02ED CD C3 02    		CALL	DELAY5US
0351   02F0 3E 38       		LD	A,038H		; write command 038h = function set (8-bits, 2-lines, 5x7dots)
0352   02F2 D3 E0       		OUT	(CMD_WR),A
0353   02F4 CD CA 02    		CALL	BWAIT
0354   02F7 3E 08       		LD	A,08H			; write command 08h = display (off)
0355   02F9 D3 E0       		OUT	(CMD_WR),A
0356   02FB CD CA 02    		CALL	BWAIT
0357   02FE 3E 01       		LD	A,01H			; write command 01h = clear display
0358   0300 D3 E0       		OUT	(CMD_WR),A
0359   0302 CD CA 02    		CALL	BWAIT
0360   0305 3E 06       		LD	A,06H			; write command 06h = entry mode (increment)
0361   0307 D3 E0       		OUT	(CMD_WR),A
0362   0309 CD CA 02    		CALL	BWAIT
0363   030C 3E 0C       		LD	A,0CH			; write command 0Ch = display (on)
0364   030E D3 E0       		OUT	(CMD_WR),A
0365   0310 C9          		RET
0366   0311             
0367   0311             ;================================================================================================
0368   0311             ; Clear LCD and goto line 1, column 1.
0369   0311             ;================================================================================================
0370   0311             LCDCLEAR:
0371   0311 CD CA 02    		CALL	BWAIT
0372   0314 3E 01       		LD	A,01H			; write command 01h = clear display
0373   0316 D3 E0       		OUT	(CMD_WR),A
0374   0318 C9          		RET
0375   0319             
0376   0319             ;================================================================================================
0377   0319             ; Send to LCD char in regC. Print at current position (what ever it is)
0378   0319             ;================================================================================================
0379   0319             LCDPUT:
0380   0319 CD CA 02    		CALL	BWAIT
0381   031C 79          		LD	A,C			; write command 01h = clear display
0382   031D D3 E1       		OUT	(DAT_WR),A
0383   031F C9          		RET
0384   0320             
0385   0320             ;================================================================================================
0386   0320             ; Position LCD cursor at line regH, column regL.
0387   0320             ;================================================================================================
0388   0320             LCDPOS:
0389   0320 25          		DEC	H
0390   0321 CB 24       		SLA	H
0391   0323 CB 24       		SLA	H
0392   0325 CB 24       		SLA	H
0393   0327 CB 24       		SLA	H
0394   0329 CB 24       		SLA	H
0395   032B CB 24       		SLA	H
0396   032D 7C          		LD	A,H
0397   032E 2D          		DEC	L
0398   032F B5          		OR	L
0399   0330 F6 80       		OR	080H
0400   0332 67          		LD	H,A
0401   0333 CD CA 02    		CALL	BWAIT
0402   0336 7C          		LD	A,H
0403   0337 D3 E0       		OUT	(CMD_WR),A
0404   0339 C9          		RET
0405   033A             
0406   033A             ;================================================================================================
0407   033A             ; Send to LCD a sequence of characters ending with zero
0408   033A             ;================================================================================================
0409   033A             LCDPRINT:
0410   033A CD 11 03    		CALL LCDCLEAR
0411   033D E3          		EX 	(SP),HL 		; Push HL and put RET address into HL
0412   033E F5          		PUSH 	AF
0413   033F C5          		PUSH 	BC
0414   0340             NEXTCHAR:
0415   0340 7E          		LD 	A,(HL)
0416   0341 FE 00       		CP	0
0417   0343 28 0A       		JR	Z,ENDOFPRINT
0418   0345 4F          		LD	C,A
0419   0346 CD CA 02    		CALL	BWAIT
0420   0349 79          		LD	A,C
0421   034A D3 E1       		OUT	(DAT_WR),A
0422   034C 23          		INC 	HL
0423   034D 18 F1       		JR	NEXTCHAR
0424   034F             ENDOFPRINT:
0425   034F 23          		INC 	HL 			; Get past "null" terminator
0426   0350 C1          		POP 	BC
0427   0351 F1          		POP 	AF
0428   0352 E3          		EX 	(SP),HL 		; Push new RET address on stack and restore HL
0429   0353 C9          		RET
0430   0354             
0431   0354             ;==================================================================================
0432   0354 58 4D 4F 44 MSGOK:		.DB	"XMODEM 1.0 - Receiving file..."
0432   0358 45 4D 20 31 
0432   035C 2E 30 20 2D 
0432   0360 20 52 65 63 
0432   0364 65 69 76 69 
0432   0368 6E 67 20 66 
0432   036C 69 6C 65 2E 
0432   0370 2E 2E 
0433   0372 0D 0A 24    			.DB	CR,LF,"$"
0434   0375             			
0435   0375 58 4D 4F 44 MSGNOARG:	.DB	"XMODEM 1.0 - Receive a file from console and store it on disk."
0435   0379 45 4D 20 31 
0435   037D 2E 30 20 2D 
0435   0381 20 52 65 63 
0435   0385 65 69 76 65 
0435   0389 20 61 20 66 
0435   038D 69 6C 65 20 
0435   0391 66 72 6F 6D 
0435   0395 20 63 6F 6E 
0435   0399 73 6F 6C 65 
0435   039D 20 61 6E 64 
0435   03A1 20 73 74 6F 
0435   03A5 72 65 20 69 
0435   03A9 74 20 6F 6E 
0435   03AD 20 64 69 73 
0435   03B1 6B 2E 
0436   03B3 0D 0A       			.DB	CR,LF,
0437   03B5 55 73 65 3A 			.DB	"Use: XMODEM [drive:]filename.$"
0437   03B9 20 58 4D 4F 
0437   03BD 44 45 4D 20 
0437   03C1 5B 64 72 69 
0437   03C5 76 65 3A 5D 
0437   03C9 66 69 6C 65 
0437   03CD 6E 61 6D 65 
0437   03D1 2E 24 
0438   03D3             
0439   03D3 00 00       BUFPTR		.DW	0					; Buffer pointer
0440   03D5 00          CHKSUM	 	.DB	0					; Checksum
0441   03D6 00          RETRY		.DB 0					; Retry counter
0442   03D7 00          BLOCK		.DB	0					; Block counter
0443   03D8 00          USELCD		.DB	0					; Use LCD? 1=yes
0444   03D9             
0445   03D9             			.DS	0100h				; Start of stack area.
0446   04D9             STACK		.EQU	$
0447   04D9             
0448   04D9             
0449   04D9             
0450   04D9             
0451   04D9             
0452   04D9             			.END
tasm: Number of errors = 0
