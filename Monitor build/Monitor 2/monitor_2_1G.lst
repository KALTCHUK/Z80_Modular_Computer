0001   0000             ;================================================================================================
0002   0000             ; MONITOR 2.0  - USE WITH VT100 TERMINAL
0003   0000             ; MONITOR 2.1B - Unified command set, no more environment change.
0004   0000             ; MONITOR 2.1C - working on dread.
0005   0000             ; MONITOR 2.1D - implement ascii2com function.
0006   0000             ; MONITOR 2.1E - implement memory compare function.
0007   0000             ; MONITOR 2.1F - Improved memory compare function. Find difference before displaying content.
0008   0000             ;                Put some NOPs in DISKWRITE and DISKREAD.
0009   0000             ; MONITOR 2.1G - implement disk verification function.
0010   0000             ;================================================================================================
0011   0000             IOBYTE		.EQU	3
0012   0000             TPA			.EQU	0100H				; Transient Programs Area
0013   0000             MONITOR		.EQU	0D000H				; Monitor entry point
0014   0000             BIOS		.EQU	0E600H				; BIOS entry point
0015   0000             DMA			.EQU	0080H				; Buffer used by Monitor
0016   0000             DISKPAD		.EQU	0E000H				; Draft area used by disk R/W ops
0017   0000             DISKBKUP	.EQU	0E200H				; Backup area used by disk verify operation
0018   0000             
0019   0000             ;================================================================================================
0020   0000             ; BIOS functions.
0021   0000             ;================================================================================================
0022   0000             LEAP		.EQU	3					; 3 bytes for each entry (JP aaaa)
0023   0000             
0024   0000             BOOT:		.EQU	BIOS				;  0 Initialize.
0025   0000             WBOOT:		.EQU	BIOS+(LEAP*1)		;  1 Warm boot.
0026   0000             CONST:		.EQU	BIOS+(LEAP*2)		;  2 Console status.
0027   0000             CONIN:		.EQU	BIOS+(LEAP*3)		;  3 Console input.
0028   0000             CONOUT:		.EQU	BIOS+(LEAP*4)		;  4 Console OUTput.
0029   0000             LIST:		.EQU	BIOS+(LEAP*5)		;  5 List OUTput.
0030   0000             PUNCH:		.EQU	BIOS+(LEAP*6)		;  6 Punch OUTput.
0031   0000             READER:		.EQU	BIOS+(LEAP*7)		;  7 Reader input.
0032   0000             HOME:		.EQU	BIOS+(LEAP*8)		;  8 Home disk.
0033   0000             SELDSK:		.EQU	BIOS+(LEAP*9)		;  9 Select disk.
0034   0000             SETTRK:		.EQU	BIOS+(LEAP*10)		; 10 Select track.
0035   0000             SETSEC:		.EQU	BIOS+(LEAP*11)		; 11 Select sector.
0036   0000             SETDMA:		.EQU	BIOS+(LEAP*12)		; 12 Set DMA ADDress.
0037   0000             READ:		.EQU	BIOS+(LEAP*13)		; 13 Read 128 bytes.
0038   0000             WRITE:		.EQU	BIOS+(LEAP*14)		; 14 Write 128 bytes.
0039   0000             LISTST:		.EQU	BIOS+(LEAP*15)		; 15 List status.
0040   0000             SECTRAN:	.EQU	BIOS+(LEAP*16)		; 16 Sector translate.
0041   0000             PRINTSEQ:	.EQU	BIOS+(LEAP*17)		; not a BIOS function
0042   0000             
0043   0000             ;================================================================================================
0044   0000             ; ASCII characters.
0045   0000             ;================================================================================================
0046   0000             NUL			.EQU	00H
0047   0000             SOH			.EQU	01H
0048   0000             STX			.EQU	02H
0049   0000             ETX			.EQU	03H
0050   0000             EOT			.EQU	04H
0051   0000             ENQ			.EQU	05H
0052   0000             ACK			.EQU	06H
0053   0000             BEL			.EQU	07H
0054   0000             BS			.EQU	08H			; ^H
0055   0000             HT			.EQU	09H
0056   0000             LF			.EQU	0AH
0057   0000             VT			.EQU	0BH
0058   0000             FF			.EQU	0CH
0059   0000             CR			.EQU	0DH
0060   0000             SO			.EQU	0EH
0061   0000             SI			.EQU	0FH
0062   0000             DLE			.EQU	10H
0063   0000             DC1			.EQU	11H
0064   0000             DC2			.EQU	12H
0065   0000             DC3			.EQU	13H
0066   0000             DC4			.EQU	14H
0067   0000             NAK			.EQU	15H			; ^U
0068   0000             SYN			.EQU	16H
0069   0000             ETB			.EQU	17H
0070   0000             CAN			.EQU	18H			; ^X
0071   0000             EM			.EQU	19H
0072   0000             SUB			.EQU	1AH
0073   0000             ESC			.EQU	1BH
0074   0000             FS			.EQU	1CH
0075   0000             GS			.EQU	1DH
0076   0000             RS			.EQU	1EH
0077   0000             US			.EQU	1FH
0078   0000             
0079   0000             ;================================================================================================
0080   0000             ; Some constants
0081   0000             ;================================================================================================
0082   0000             MAXLBUF		.EQU	DMA+80
0083   0000             PROMPT		.EQU	'>'
0084   0000             MAXTRY		.EQU	10
0085   0000             
0086   0000             ;================================================================================================
0087   0000             ; FLASH card stuff
0088   0000             ;================================================================================================
0089   0000             FLASH_ADDR		.EQU	0B0H			; Base I/O address for compact flash card
0090   0000             CF_DATA			.EQU	(FLASH_ADDR+0)	; R/W
0091   0000             CF_FEATURES		.EQU	(FLASH_ADDR+1)	; W
0092   0000             CF_ERROR		.EQU	(FLASH_ADDR+1)	; R
0093   0000             CF_SECCOUNT		.EQU	(FLASH_ADDR+2)	; W
0094   0000             
0095   0000             CF_SECTOR		.EQU	(FLASH_ADDR+3)	; W
0096   0000             CF_CYL_LOW		.EQU	(FLASH_ADDR+4)	; W
0097   0000             CF_CYL_HI		.EQU	(FLASH_ADDR+5)	; W
0098   0000             CF_HEAD			.EQU	(FLASH_ADDR+6)	; W
0099   0000             
0100   0000             CF_LBA0			.EQU	(FLASH_ADDR+3)	; W
0101   0000             CF_LBA1			.EQU	(FLASH_ADDR+4)	; W
0102   0000             CF_LBA2			.EQU	(FLASH_ADDR+5)	; W
0103   0000             CF_LBA3			.EQU	(FLASH_ADDR+6)	; W
0104   0000             
0105   0000             CF_STATUS		.EQU	(FLASH_ADDR+7)	; R
0106   0000             CF_COMMAND		.EQU	(FLASH_ADDR+7)	; W
0107   0000             
0108   0000             ;CF Features
0109   0000             CF_8BIT			.EQU	1
0110   0000             CF_NOCACHE		.EQU	082H
0111   0000             
0112   0000             ;CF Commands
0113   0000             CF_READ_SEC		.EQU	020H
0114   0000             CF_WRITE_SEC	.EQU	030H
0115   0000             CF_SET_FEAT		.EQU 	0EFH
0116   0000             ;================================================================================================
0117   0000             ; MAIN PROGRAM STARTS HERE
0118   0000             ;================================================================================================
0119   D000             			.ORG MONITOR
0120   D000             
0121   D000 CD BA DD    CYCLE:		CALL PRINTENV
0122   D003 CD 45 DC    			CALL LINER					; Call the line manager
0123   D006 3A 80 00    			LD	A,(DMA)
0124   D009 FE 00       			CP	0
0125   D00B 28 F3       			JR	Z,CYCLE					; User ENTERed an empty line. No need to parse.
0126   D00D 21 3B DE    			LD	HL,CMDTBL
0127   D010 CD EE DC    			CALL PARSER					; Find command comparing buffer with Command Table.
0128   D013 3C          			INC	A
0129   D014 28 01       			JR	Z,UNK					; No match found in command table.
0130   D016 E9          			JP	(HL)					; Jump to Command Routine
0131   D017 CD 2A DC    UNK:		CALL UNKNOWN
0132   D01A 18 E4       			JR	CYCLE
0133   D01C             			
0134   D01C             ;================================================================================================
0135   D01C             ; Help for main program
0136   D01C             ;================================================================================================
0137   D01C CD 9E DC    HELP:		CALL CRLF
0138   D01F CD 33 E6    			CALL PRINTSEQ
0139   D022 20 4F 70 74 			.DB	" Options:   READ aaaa             read from memory.",CR,LF
0139   D026 69 6F 6E 73 
0139   D02A 3A 20 20 20 
0139   D02E 52 45 41 44 
0139   D032 20 61 61 61 
0139   D036 61 20 20 20 
0139   D03A 20 20 20 20 
0139   D03E 20 20 20 20 
0139   D042 20 20 72 65 
0139   D046 61 64 20 66 
0139   D04A 72 6F 6D 20 
0139   D04E 6D 65 6D 6F 
0139   D052 72 79 2E 0D 
0139   D056 0A 
0140   D057 20 20 20 20 			.DB "            WRITE aaaa,c1 c2 cN   write to memory.",CR,LF
0140   D05B 20 20 20 20 
0140   D05F 20 20 20 20 
0140   D063 57 52 49 54 
0140   D067 45 20 61 61 
0140   D06B 61 61 2C 63 
0140   D06F 31 20 63 32 
0140   D073 20 63 4E 20 
0140   D077 20 20 77 72 
0140   D07B 69 74 65 20 
0140   D07F 74 6F 20 6D 
0140   D083 65 6D 6F 72 
0140   D087 79 2E 0D 0A 
0141   D08B 20 20 20 20 			.DB "            COPY aaaa-bbbb,cccc   copy memory block.",CR,LF
0141   D08F 20 20 20 20 
0141   D093 20 20 20 20 
0141   D097 43 4F 50 59 
0141   D09B 20 61 61 61 
0141   D09F 61 2D 62 62 
0141   D0A3 62 62 2C 63 
0141   D0A7 63 63 63 20 
0141   D0AB 20 20 63 6F 
0141   D0AF 70 79 20 6D 
0141   D0B3 65 6D 6F 72 
0141   D0B7 79 20 62 6C 
0141   D0BB 6F 63 6B 2E 
0141   D0BF 0D 0A 
0142   D0C1 20 20 20 20 			.DB "            FILL aaaa-bbbb,cc     fill memory block.",CR,LF
0142   D0C5 20 20 20 20 
0142   D0C9 20 20 20 20 
0142   D0CD 46 49 4C 4C 
0142   D0D1 20 61 61 61 
0142   D0D5 61 2D 62 62 
0142   D0D9 62 62 2C 63 
0142   D0DD 63 20 20 20 
0142   D0E1 20 20 66 69 
0142   D0E5 6C 6C 20 6D 
0142   D0E9 65 6D 6F 72 
0142   D0ED 79 20 62 6C 
0142   D0F1 6F 63 6B 2E 
0142   D0F5 0D 0A 
0143   D0F7 20 20 20 20 			.DB "            COMPARE aaaa,bbbb     compare memory areas.",CR,LF
0143   D0FB 20 20 20 20 
0143   D0FF 20 20 20 20 
0143   D103 43 4F 4D 50 
0143   D107 41 52 45 20 
0143   D10B 61 61 61 61 
0143   D10F 2C 62 62 62 
0143   D113 62 20 20 20 
0143   D117 20 20 63 6F 
0143   D11B 6D 70 61 72 
0143   D11F 65 20 6D 65 
0143   D123 6D 6F 72 79 
0143   D127 20 61 72 65 
0143   D12B 61 73 2E 0D 
0143   D12F 0A 
0144   D130 20 20 20 20 			.DB	"            DREAD aaaa            read from disk.",CR,LF
0144   D134 20 20 20 20 
0144   D138 20 20 20 20 
0144   D13C 44 52 45 41 
0144   D140 44 20 61 61 
0144   D144 61 61 20 20 
0144   D148 20 20 20 20 
0144   D14C 20 20 20 20 
0144   D150 20 20 72 65 
0144   D154 61 64 20 66 
0144   D158 72 6F 6D 20 
0144   D15C 64 69 73 6B 
0144   D160 2E 0D 0A 
0145   D163 20 20 20 20 			.DB "            DOWN d,ttt,ss         download one sector from disk.",CR,LF
0145   D167 20 20 20 20 
0145   D16B 20 20 20 20 
0145   D16F 44 4F 57 4E 
0145   D173 20 64 2C 74 
0145   D177 74 74 2C 73 
0145   D17B 73 20 20 20 
0145   D17F 20 20 20 20 
0145   D183 20 20 64 6F 
0145   D187 77 6E 6C 6F 
0145   D18B 61 64 20 6F 
0145   D18F 6E 65 20 73 
0145   D193 65 63 74 6F 
0145   D197 72 20 66 72 
0145   D19B 6F 6D 20 64 
0145   D19F 69 73 6B 2E 
0145   D1A3 0D 0A 
0146   D1A5 20 20 20 20 			.DB "            UP d,ttt,ss           upload one sector to disk.",CR,LF
0146   D1A9 20 20 20 20 
0146   D1AD 20 20 20 20 
0146   D1B1 55 50 20 64 
0146   D1B5 2C 74 74 74 
0146   D1B9 2C 73 73 20 
0146   D1BD 20 20 20 20 
0146   D1C1 20 20 20 20 
0146   D1C5 20 20 75 70 
0146   D1C9 6C 6F 61 64 
0146   D1CD 20 6F 6E 65 
0146   D1D1 20 73 65 63 
0146   D1D5 74 6F 72 20 
0146   D1D9 74 6F 20 64 
0146   D1DD 69 73 6B 2E 
0146   D1E1 0D 0A 
0147   D1E3 20 20 20 20 			.DB "            VERIFY d              verify disk.",CR,LF
0147   D1E7 20 20 20 20 
0147   D1EB 20 20 20 20 
0147   D1EF 56 45 52 49 
0147   D1F3 46 59 20 64 
0147   D1F7 20 20 20 20 
0147   D1FB 20 20 20 20 
0147   D1FF 20 20 20 20 
0147   D203 20 20 76 65 
0147   D207 72 69 66 79 
0147   D20B 20 64 69 73 
0147   D20F 6B 2E 0D 0A 
0148   D213 20 20 20 20 			.DB "            FORMAT d              format disk.",CR,LF
0148   D217 20 20 20 20 
0148   D21B 20 20 20 20 
0148   D21F 46 4F 52 4D 
0148   D223 41 54 20 64 
0148   D227 20 20 20 20 
0148   D22B 20 20 20 20 
0148   D22F 20 20 20 20 
0148   D233 20 20 66 6F 
0148   D237 72 6D 61 74 
0148   D23B 20 64 69 73 
0148   D23F 6B 2E 0D 0A 
0149   D243 20 20 20 20 			.DB "            XMODEM aaaa           receive file using xmodem protocol.",CR,LF
0149   D247 20 20 20 20 
0149   D24B 20 20 20 20 
0149   D24F 58 4D 4F 44 
0149   D253 45 4D 20 61 
0149   D257 61 61 61 20 
0149   D25B 20 20 20 20 
0149   D25F 20 20 20 20 
0149   D263 20 20 72 65 
0149   D267 63 65 69 76 
0149   D26B 65 20 66 69 
0149   D26F 6C 65 20 75 
0149   D273 73 69 6E 67 
0149   D277 20 78 6D 6F 
0149   D27B 64 65 6D 20 
0149   D27F 70 72 6F 74 
0149   D283 6F 63 6F 6C 
0149   D287 2E 0D 0A 
0150   D28A 20 20 20 20 			.DB "            HEX2COM aaaa          convert intel hex to executable.",CR,LF
0150   D28E 20 20 20 20 
0150   D292 20 20 20 20 
0150   D296 48 45 58 32 
0150   D29A 43 4F 4D 20 
0150   D29E 61 61 61 61 
0150   D2A2 20 20 20 20 
0150   D2A6 20 20 20 20 
0150   D2AA 20 20 63 6F 
0150   D2AE 6E 76 65 72 
0150   D2B2 74 20 69 6E 
0150   D2B6 74 65 6C 20 
0150   D2BA 68 65 78 20 
0150   D2BE 74 6F 20 65 
0150   D2C2 78 65 63 75 
0150   D2C6 74 61 62 6C 
0150   D2CA 65 2E 0D 0A 
0151   D2CE 20 20 20 20 			.DB "            ASCII2COM aaaa        convert ASCII to executable.",CR,LF
0151   D2D2 20 20 20 20 
0151   D2D6 20 20 20 20 
0151   D2DA 41 53 43 49 
0151   D2DE 49 32 43 4F 
0151   D2E2 4D 20 61 61 
0151   D2E6 61 61 20 20 
0151   D2EA 20 20 20 20 
0151   D2EE 20 20 63 6F 
0151   D2F2 6E 76 65 72 
0151   D2F6 74 20 41 53 
0151   D2FA 43 49 49 20 
0151   D2FE 74 6F 20 65 
0151   D302 78 65 63 75 
0151   D306 74 61 62 6C 
0151   D30A 65 2E 0D 0A 
0152   D30E 20 20 20 20 			.DB "            RUN aaaa              run program.",CR,LF
0152   D312 20 20 20 20 
0152   D316 20 20 20 20 
0152   D31A 52 55 4E 20 
0152   D31E 61 61 61 61 
0152   D322 20 20 20 20 
0152   D326 20 20 20 20 
0152   D32A 20 20 20 20 
0152   D32E 20 20 72 75 
0152   D332 6E 20 70 72 
0152   D336 6F 67 72 61 
0152   D33A 6D 2E 0D 0A 
0153   D33E 20 20 20 20 			.DB "            BOOT",CR,LF,0
0153   D342 20 20 20 20 
0153   D346 20 20 20 20 
0153   D34A 42 4F 4F 54 
0153   D34E 0D 0A 00 
0154   D351 C3 00 D0    			JP	CYCLE
0155   D354             			
0156   D354             ;================================================================================================
0157   D354             ; Read memory operations - READ AAAA
0158   D354             ;================================================================================================
0159   D354 11 84 00    MREAD:		LD	DE,DMA+4
0160   D357 CD 4C DD    			CALL GETWORD		; Get aaaa
0161   D35A FE 01       			CP	1				; Is the argument OK?
0162   D35C C2 00 D0    			JP	NZ,CYCLE
0163   D35F C5          			PUSH BC
0164   D360 D1          			POP	DE				; DE will be the address holder
0165   D361 7B          			LD	A,E
0166   D362 E6 F0       			AND	0F0H
0167   D364 5F          			LD	E,A				; trim addr (xxx0)
0168   D365 CD 7E D3    NEWHDR:		CALL PRINTHDR		; Print the header
0169   D368 3E 10       			LD	A,16
0170   D36A 32 CB DE    			LD	(LINNUM),A
0171   D36D             
0172   D36D CD 67 D4    			CALL SUBMPRN
0173   D370             			
0174   D370 CD 09 E6    TRYAGAIN:	CALL CONIN			; Wait for user's decision
0175   D373 FE 0D       			CP	CR
0176   D375 28 EE       			JR	Z,NEWHDR
0177   D377 FE 1B       			CP	ESC
0178   D379 CA 00 D0    			JP	Z,CYCLE
0179   D37C 18 F2       			JR	TRYAGAIN
0180   D37E             
0181   D37E CD 33 E6    PRINTHDR:	CALL PRINTSEQ
0182   D381 3E 41 44 44 			.DB ">ADDR: 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F  0123456789ABCDEF",CR,LF,
0182   D385 52 3A 20 30 
0182   D389 30 20 30 31 
0182   D38D 20 30 32 20 
0182   D391 30 33 20 30 
0182   D395 34 20 30 35 
0182   D399 20 30 36 20 
0182   D39D 30 37 20 30 
0182   D3A1 38 20 30 39 
0182   D3A5 20 30 41 20 
0182   D3A9 30 42 20 30 
0182   D3AD 43 20 30 44 
0182   D3B1 20 30 45 20 
0182   D3B5 30 46 20 20 
0182   D3B9 30 31 32 33 
0182   D3BD 34 35 36 37 
0182   D3C1 38 39 41 42 
0182   D3C5 43 44 45 46 
0182   D3C9 0D 0A 
0183   D3CB 3E 2D 2D 2D 			.DB ">----- -----------------------------------------------  ----------------",0
0183   D3CF 2D 2D 20 2D 
0183   D3D3 2D 2D 2D 2D 
0183   D3D7 2D 2D 2D 2D 
0183   D3DB 2D 2D 2D 2D 
0183   D3DF 2D 2D 2D 2D 
0183   D3E3 2D 2D 2D 2D 
0183   D3E7 2D 2D 2D 2D 
0183   D3EB 2D 2D 2D 2D 
0183   D3EF 2D 2D 2D 2D 
0183   D3F3 2D 2D 2D 2D 
0183   D3F7 2D 2D 2D 2D 
0183   D3FB 2D 2D 2D 2D 
0183   D3FF 2D 2D 20 20 
0183   D403 2D 2D 2D 2D 
0183   D407 2D 2D 2D 2D 
0183   D40B 2D 2D 2D 2D 
0183   D40F 2D 2D 2D 2D 
0183   D413 00 
0184   D414 C9          			RET
0185   D415             
0186   D415 CD 9E DC    PRINTFTR:	CALL CRLF
0187   D418 CD 33 E6    			CALL PRINTSEQ
0188   D41B 3E 23 3D 3D 			.DB ">#================= <ENTER> = next page, <ESC> = quit =================#",CR,LF,0
0188   D41F 3D 3D 3D 3D 
0188   D423 3D 3D 3D 3D 
0188   D427 3D 3D 3D 3D 
0188   D42B 3D 3D 3D 20 
0188   D42F 3C 45 4E 54 
0188   D433 45 52 3E 20 
0188   D437 3D 20 6E 65 
0188   D43B 78 74 20 70 
0188   D43F 61 67 65 2C 
0188   D443 20 3C 45 53 
0188   D447 43 3E 20 3D 
0188   D44B 20 71 75 69 
0188   D44F 74 20 3D 3D 
0188   D453 3D 3D 3D 3D 
0188   D457 3D 3D 3D 3D 
0188   D45B 3D 3D 3D 3D 
0188   D45F 3D 3D 3D 23 
0188   D463 0D 0A 00 
0189   D466 C9          			RET
0190   D467             
0191   D467             SUBMPRN:
0192   D467 CD B3 D4    NEWLINE:	CALL PRINTADDR
0193   D46A 06 10       			LD	B,16
0194   D46C C5          NEWCOL:		PUSH BC
0195   D46D 1A          			LD	A,(DE)			; Start printing the memory content
0196   D46E 13          			INC	DE
0197   D46F 47          			LD	B,A
0198   D470 CD 10 DE    			CALL B2HL
0199   D473 4C          			LD	C,H
0200   D474 CD 0C E6    			CALL CONOUT
0201   D477 4D          			LD	C,L
0202   D478 CD 0C E6    			CALL CONOUT
0203   D47B 0E 20       			LD	C,' '
0204   D47D CD 0C E6    			CALL CONOUT
0205   D480 C1          			POP	BC
0206   D481 10 E9       			DJNZ NEWCOL
0207   D483 0E 20       			LD	C,' '
0208   D485 CD 0C E6    			CALL CONOUT
0209   D488 21 F0 FF    			LD	HL,0FFF0H		; This is -10h
0210   D48B 19          			ADD	HL,DE			; Go back to beginning of line
0211   D48C E5          			PUSH HL
0212   D48D D1          			POP	DE
0213   D48E 06 10       			LD	B,16
0214   D490 C5          NEWCOL2:	PUSH BC				; Start printing the printables
0215   D491 0E 2E       			LD	C,'.'
0216   D493 1A          			LD	A,(DE)
0217   D494 FE 20       			CP	20H
0218   D496 FA 9F D4    			JP	M,NOTPRTBL
0219   D499 FE 7F       			CP	7FH
0220   D49B F2 9F D4    			JP	P,NOTPRTBL
0221   D49E 4F          			LD	C,A
0222   D49F CD 0C E6    NOTPRTBL:	CALL CONOUT
0223   D4A2 13          			INC	DE
0224   D4A3 C1          			POP	BC
0225   D4A4 10 EA       			DJNZ NEWCOL2
0226   D4A6 3A CB DE    			LD	A,(LINNUM)
0227   D4A9 3D          			DEC	A
0228   D4AA 32 CB DE    			LD	(LINNUM),A
0229   D4AD 20 B8       			JR	NZ,NEWLINE
0230   D4AF CD 15 D4    			CALL PRINTFTR		; Print footer message
0231   D4B2 C9          			RET
0232   D4B3             
0233   D4B3 CD 9E DC    PRINTADDR:	CALL CRLF
0234   D4B6 CD BA DD    			CALL PRINTENV
0235   D4B9 42          			LD	B,D				; Print the address
0236   D4BA CD 10 DE    			CALL B2HL
0237   D4BD 4C          			LD	C,H
0238   D4BE CD 0C E6    			CALL CONOUT
0239   D4C1 4D          			LD	C,L
0240   D4C2 CD 0C E6    			CALL CONOUT
0241   D4C5 43          			LD	B,E
0242   D4C6 CD 10 DE    			CALL B2HL
0243   D4C9 4C          			LD	C,H
0244   D4CA CD 0C E6    			CALL CONOUT
0245   D4CD 4D          			LD	C,L
0246   D4CE CD 0C E6    			CALL CONOUT
0247   D4D1 0E 3A       			LD	C,':'
0248   D4D3 CD 0C E6    			CALL CONOUT
0249   D4D6 0E 20       			LD	C,' '
0250   D4D8 CD 0C E6    			CALL CONOUT
0251   D4DB C9          			RET
0252   D4DC             			
0253   D4DC             ;================================================================================================
0254   D4DC             ; Write memory operations - WRITE AAAA,C1 C2 C3...
0255   D4DC             ;================================================================================================
0256   D4DC 11 85 00    MWRITE:		LD	DE,DMA+5
0257   D4DF CD 4C DD    			CALL GETWORD		; Get aaaa
0258   D4E2 FE 01       			CP	1				; Is the argument OK?
0259   D4E4 C2 00 D0    			JP	NZ,CYCLE
0260   D4E7 ED 43 CD DE 			LD	(AAAA),BC		; Save aaaa
0261   D4EB 11 8A 00    			LD	DE,DMA+10
0262   D4EE 13          MWNEXT:		INC	DE
0263   D4EF 1A          			LD	A,(DE)
0264   D4F0 FE 00       			CP	0
0265   D4F2 CA 00 D0    			JP	Z,CYCLE			; End of char string?
0266   D4F5 CD 60 DD    			CALL GETBYTE		; Get cc
0267   D4F8 FE 01       			CP	1				; Is the argument OK?
0268   D4FA C2 00 D0    			JP	NZ,CYCLE
0269   D4FD 2A CD DE    			LD	HL,(AAAA)
0270   D500 70          			LD	(HL),B			; Put the byte in memory
0271   D501 23          			INC	HL
0272   D502 22 CD DE    			LD	(AAAA),HL
0273   D505 18 E7       			JR	MWNEXT
0274   D507             
0275   D507             ;================================================================================================
0276   D507             ; Copy memory operations - COPY AAAA-BBBB,CCCC
0277   D507             ;================================================================================================
0278   D507 11 84 00    MCOPY:		LD	DE,DMA+4
0279   D50A CD 4C DD    			CALL GETWORD		; Get aaaa
0280   D50D FE 01       			CP	1				; Is the argument OK?
0281   D50F C2 00 D0    			JP	NZ,CYCLE
0282   D512 ED 43 CD DE 			LD	(AAAA),BC		; Save aaaa
0283   D516 11 8A 00    			LD	DE,DMA+10
0284   D519 CD 4C DD    			CALL GETWORD		; Get bbbb
0285   D51C FE 01       			CP	1				; Is the argument OK?
0286   D51E C2 00 D0    			JP	NZ,CYCLE
0287   D521 ED 43 CF DE 			LD	(BBBB),BC		; Save bbbb
0288   D525 11 8F 00    			LD	DE,DMA+15
0289   D528 CD 4C DD    			CALL GETWORD		; Get cccc
0290   D52B FE 01       			CP	1				; Is the argument OK?
0291   D52D C2 00 D0    			JP	NZ,CYCLE
0292   D530 ED 43 D1 DE 			LD	(CCCC),BC		; Save cccc
0293   D534 2A CF DE    			LD	HL,(BBBB)
0294   D537 ED 5B CD DE 			LD	DE,(AAAA)
0295   D53B AF          			XOR	A				; Reset carry flag
0296   D53C ED 52       			SBC	HL,DE
0297   D53E 23          			INC	HL
0298   D53F EB          			EX	DE,HL			; HL=source
0299   D540 D5          			PUSH DE
0300   D541 C1          			POP BC				; BC=counter
0301   D542 ED 5B D1 DE 			LD	DE,(CCCC)		; DE=target
0302   D546 ED B0       			LDIR
0303   D548 C3 00 D0    			JP	CYCLE
0304   D54B             
0305   D54B             ;================================================================================================
0306   D54B             ; Fill memory operations - FILL AAAA-BBBB,CC
0307   D54B             ;================================================================================================
0308   D54B 11 84 00    MFILL:		LD	DE,DMA+4
0309   D54E CD 4C DD    			CALL GETWORD		; Get aaaa
0310   D551 FE 01       			CP	1				; Is the argument OK?
0311   D553 C2 00 D0    			JP	NZ,CYCLE
0312   D556 ED 43 CD DE 			LD	(AAAA),BC		; Save aaaa
0313   D55A 11 8A 00    			LD	DE,DMA+10
0314   D55D CD 4C DD    			CALL GETWORD		; Get bbbb
0315   D560 FE 01       			CP	1				; Is the argument OK?
0316   D562 C2 00 D0    			JP	NZ,CYCLE
0317   D565 ED 43 CF DE 			LD	(BBBB),BC		; Save bbbb
0318   D569 11 8F 00    			LD	DE,DMA+15
0319   D56C CD 60 DD    			CALL GETBYTE		; Get cc
0320   D56F FE 01       			CP	1				; Is the argument OK?
0321   D571 C2 00 D0    			JP	NZ,CYCLE
0322   D574 CD 7A D5    			CALL MFPRIM			; Call the primitiv for memory fill.
0323   D577 C3 00 D0    			JP	CYCLE
0324   D57A             			
0325   D57A 2A CD DE    MFPRIM:		LD	HL,(AAAA)		; This routine is also used by disk verify.
0326   D57D 70          			LD	(HL),B			; Put cc in the 1st position of the area to be filled.
0327   D57E 2A CF DE    			LD	HL,(BBBB)
0328   D581 ED 5B CD DE 			LD	DE,(AAAA)
0329   D585 AF          			XOR	A				; Reset carry flag
0330   D586 ED 52       			SBC	HL,DE
0331   D588 EB          			EX	DE,HL			; HL=source
0332   D589 D5          			PUSH DE
0333   D58A C1          			POP BC				; BC=counter
0334   D58B E5          			PUSH HL
0335   D58C D1          			POP	DE
0336   D58D 13          			INC DE
0337   D58E ED B0       			LDIR
0338   D590 C9          			RET
0339   D591             
0340   D591             ;================================================================================================
0341   D591             ; Compare two memory areas - COMPARE AAAA,BBBB
0342   D591             ;================================================================================================
0343   D591 11 87 00    MCOMP:		LD	DE,DMA+7
0344   D594 CD 4C DD    			CALL GETWORD		; Get aaaa
0345   D597 FE 01       			CP	1				; Is the argument OK?
0346   D599 C2 00 D0    			JP	NZ,CYCLE
0347   D59C ED 43 CD DE 			LD	(AAAA),BC		; Save aaaa
0348   D5A0 C5          			PUSH BC
0349   D5A1 DD E1       			POP	IX
0350   D5A3 11 8D 00    			LD	DE,DMA+13
0351   D5A6 CD 4C DD    			CALL GETWORD		; Get bbbb
0352   D5A9 FE 01       			CP	1				; Is the argument OK?
0353   D5AB C2 00 D0    			JP	NZ,CYCLE
0354   D5AE ED 43 CF DE 			LD	(BBBB),BC		; Save bbbb
0355   D5B2 C5          			PUSH BC
0356   D5B3 FD E1       			POP	IY
0357   D5B5 DD 7E 00    MCNBC:		LD	A,(IX+0)
0358   D5B8 FD 46 00    			LD	B,(IY+0)
0359   D5BB B8          			CP	B
0360   D5BC 20 06       			JR	NZ,MCDIF
0361   D5BE DD 23       			INC	IX
0362   D5C0 FD 23       			INC IY
0363   D5C2 18 F1       			JR	MCNBC
0364   D5C4 DD E5       MCDIF:		PUSH IX
0365   D5C6 C1          			POP	BC
0366   D5C7 79          			LD	A,C
0367   D5C8 E6 F0       			AND	0F0H
0368   D5CA 4F          			LD	C,A
0369   D5CB ED 43 CD DE 			LD	(AAAA),BC		; Save new aaaa
0370   D5CF FD E5       			PUSH IY
0371   D5D1 C1          			POP	BC
0372   D5D2 79          			LD	A,C
0373   D5D3 E6 F0       			AND	0F0H
0374   D5D5 4F          			LD	C,A
0375   D5D6 ED 43 CF DE 			LD	(BBBB),BC		; Save new bbbb
0376   D5DA ED 5B CD DE MCNEWL:		LD	DE,(AAAA)
0377   D5DE CD B3 D4    			CALL PRINTADDR
0378   D5E1 06 10       			LD	B,16
0379   D5E3 C5          MCNEWC:		PUSH BC
0380   D5E4 1A          			LD	A,(DE)			; Start printing the 1st memory area content
0381   D5E5 13          			INC	DE
0382   D5E6 47          			LD	B,A
0383   D5E7 CD 10 DE    			CALL B2HL
0384   D5EA 4C          			LD	C,H
0385   D5EB CD 0C E6    			CALL CONOUT
0386   D5EE 4D          			LD	C,L
0387   D5EF CD 0C E6    			CALL CONOUT
0388   D5F2 0E 20       			LD	C,' '
0389   D5F4 CD 0C E6    			CALL CONOUT
0390   D5F7 C1          			POP	BC
0391   D5F8 10 E9       			DJNZ MCNEWC
0392   D5FA             			
0393   D5FA DD 2A CD DE 			LD	IX,(AAAA)
0394   D5FE ED 5B CF DE 			LD	DE,(BBBB)
0395   D602 CD B3 D4    			CALL PRINTADDR
0396   D605 06 10       			LD	B,16
0397   D607 C5          MCNEWAC:	PUSH BC
0398   D608 1A          			LD	A,(DE)			; Start printing the 2nd memory area content
0399   D609 DD 46 00    			LD	B,(IX)
0400   D60C DD 23       			INC	IX
0401   D60E 13          			INC	DE
0402   D60F B8          			CP	B
0403   D610 20 0A       			JR	NZ,DIFFER		; if the content is equal, just print '='
0404   D612 0E 3D       			LD	C,'='
0405   D614 CD 0C E6    			CALL CONOUT
0406   D617 CD 0C E6    			CALL CONOUT
0407   D61A 18 0C       			JR	POSDIF
0408   D61C 47          DIFFER:		LD	B,A
0409   D61D CD 10 DE    			CALL B2HL
0410   D620 4C          			LD	C,H
0411   D621 CD 0C E6    			CALL CONOUT
0412   D624 4D          			LD	C,L
0413   D625 CD 0C E6    			CALL CONOUT
0414   D628 0E 20       POSDIF:		LD	C,' '
0415   D62A CD 0C E6    			CALL CONOUT
0416   D62D C1          			POP	BC
0417   D62E 10 D7       			DJNZ MCNEWAC
0418   D630 DD 22 CD DE 			LD	(AAAA),IX		; save memory positions
0419   D634 ED 53 CF DE 			LD	(BBBB),DE
0420   D638 CD 9E DC    			CALL CRLF			; print the footer
0421   D63B CD 33 E6    			CALL PRINTSEQ
0422   D63E 3E 20 20 20 			.DB ">      <ENTER> = next line, <ESC> = quit",CR,LF,0
0422   D642 20 20 20 3C 
0422   D646 45 4E 54 45 
0422   D64A 52 3E 20 3D 
0422   D64E 20 6E 65 78 
0422   D652 74 20 6C 69 
0422   D656 6E 65 2C 20 
0422   D65A 3C 45 53 43 
0422   D65E 3E 20 3D 20 
0422   D662 71 75 69 74 
0422   D666 0D 0A 00 
0423   D669 CD 09 E6    MCAGAIN:	CALL CONIN			; Wait for user's decision
0424   D66C FE 0D       			CP	CR
0425   D66E CA DA D5    			JP	Z,MCNEWL
0426   D671 FE 1B       			CP	ESC
0427   D673 CA 00 D0    			JP	Z,CYCLE
0428   D676 18 F1       			JR	MCAGAIN
0429   D678             
0430   D678             ;================================================================================================
0431   D678             ; Xmodem Command - XMODEM AAAA
0432   D678             ;================================================================================================
0433   D678 3E C0       XMODEM:		LD	A,0C0H
0434   D67A 32 03 00    			LD	(IOBYTE),A			; Set LCD as LIST device.
0435   D67D 0E 11       			LD	C,DC1
0436   D67F CD 0F E6    			CALL LIST
0437   D682             			
0438   D682             			
0439   D682 11 86 00    			LD	DE,DMA+6
0440   D685 CD 4C DD    			CALL GETWORD		
0441   D688 FE 01       			CP	1					; Is the argument OK?
0442   D68A C2 00 D0    			JP	NZ,CYCLE
0443   D68D ED 43 CD DE 			LD	(AAAA),BC			; Save address
0444   D691 3E 00       			LD	A,0
0445   D693 32 D5 DE    			LD	(RETRY),A			; Init retry counter
0446   D696 3C          			INC	A
0447   D697 32 D6 DE    			LD	(BLOCK),A			; Init block counter
0448   D69A             
0449   D69A CD 55 D7    ALIVE:		CALL SENDNAK
0450   D69D             ;***********************************
0451   D69D 0E 41       			LD	C,'A'
0452   D69F CD 0F E6    			CALL LIST
0453   D6A2             ;***********************************			
0454   D6A2 06 05       GET1ST:		LD	B,5
0455   D6A4 CD 61 D7    			CALL TOCONIN			; 5s timeout
0456   D6A7 38 0D       			JR	C,REPEAT			; Timed out?
0457   D6A9 FE 04       			CP	EOT
0458   D6AB 28 1A       			JR	Z,GOTEOT			; EOT?
0459   D6AD FE 18       			CP	CAN
0460   D6AF CA 00 D0    			JP	Z,CYCLE				; CAN?
0461   D6B2 FE 01       			CP	SOH
0462   D6B4 28 1F       			JR	Z,GOTSOH			; SOH?
0463   D6B6 3A D5 DE    REPEAT:		LD	A,(RETRY)
0464   D6B9 3C          			INC	A
0465   D6BA 32 D5 DE    			LD	(RETRY),A
0466   D6BD FE 0A       			CP	MAXTRY
0467   D6BF 20 D9       			JR	NZ,ALIVE			; Try again?
0468   D6C1             OUT3:		
0469   D6C1 CD 5B D7    			CALL SENDCAN
0470   D6C4 C3 00 D0    			JP	CYCLE
0471   D6C7             			
0472   D6C7 CD 55 D7    GOTEOT:		CALL SENDNAK
0473   D6CA 06 01       			LD	B,1
0474   D6CC CD 61 D7    			CALL TOCONIN
0475   D6CF CD 4F D7    			CALL SENDACK
0476   D6D2 C3 00 D0    			JP	CYCLE
0477   D6D5             			
0478   D6D5 3E 00       GOTSOH:		LD	A,0
0479   D6D7 32 D3 DE    			LD	(CHKSUM),A			; Reset checksum
0480   D6DA 32 D4 DE    			LD	(BYTECNT),A			; Reset byte counter
0481   D6DD 06 01       			LD	B,1
0482   D6DF CD 61 D7    			CALL TOCONIN			; Get incoming block number
0483   D6E2 38 1F       			JR	C,OUT2				; Timed out?
0484   D6E4 4F          			LD	C,A					; Save incoming block number
0485   D6E5 06 01       			LD	B,1
0486   D6E7 CD 61 D7    			CALL TOCONIN			; Get complement of incoming block number
0487   D6EA 38 17       			JR	C,OUT2				; Timed out?
0488   D6EC 2F          			CPL
0489   D6ED B9          			CP	C
0490   D6EE 20 13       			JR	NZ,OUT2				; block = //block?
0491   D6F0 3A D6 DE    			LD	A,(BLOCK)
0492   D6F3 B9          			CP	C					; Is block number what we expected?
0493   D6F4 28 16       			JR	Z,RECPACK
0494   D6F6 3D          			DEC	A
0495   D6F7 B9          			CP	C					; block number is the anterior? Probably sender missed our ACK.
0496   D6F8 20 09       			JR	NZ,OUT2
0497   D6FA CD 8B D7    ANTBLK:		CALL PURGE				; Purge input buffer before sending ACK
0498   D6FD CD 4F D7    			CALL SENDACK
0499   D700 C3 A2 D6    			JP	GET1ST
0500   D703 CD 8B D7    OUT2:		CALL PURGE
0501   D706 CD 5B D7    			CALL SENDCAN
0502   D709 C3 00 D0    			JP	CYCLE
0503   D70C 06 01       RECPACK:	LD	B,1					; Start receiving data packet (128 bytes)
0504   D70E CD 61 D7    			CALL TOCONIN
0505   D711 38 F0       			JR	C,OUT2				; Timed out?
0506   D713 2A CD DE    			LD	HL,(AAAA)
0507   D716 77          			LD	(HL),A				; Put byte in buffer
0508   D717 23          			INC	HL					; Inc buffer pointer
0509   D718 22 CD DE    			LD	(AAAA),HL
0510   D71B 4F          			LD	C,A
0511   D71C 3A D3 DE    			LD	A,(CHKSUM)
0512   D71F 81          			ADD	A,C
0513   D720 32 D3 DE    			LD	(CHKSUM),A			; Update checksum
0514   D723 3A D4 DE    			LD	A,(BYTECNT)			; Inc byte counter
0515   D726 3C          			INC	A
0516   D727 32 D4 DE    			LD	(BYTECNT),A
0517   D72A FE 80       			CP	128					; Check if we received a full data packet
0518   D72C 20 DE       			JR	NZ,RECPACK
0519   D72E 06 01       			LD	B,1
0520   D730 CD 61 D7    			CALL TOCONIN			; Get checksum
0521   D733 38 CE       			JR	C,OUT2				; Timed out?
0522   D735 4F          			LD	C,A
0523   D736 3A D3 DE    			LD	A,(CHKSUM)
0524   D739 B9          			CP	C
0525   D73A C2 B6 D6    			JP	NZ,REPEAT			; Checksum OK?
0526   D73D 3E 00       			LD	A,0
0527   D73F 32 D5 DE    			LD	(RETRY),A			; Reset retry counter
0528   D742 3A D6 DE    			LD	A,(BLOCK)
0529   D745 3C          			INC	A
0530   D746 32 D6 DE    			LD	(BLOCK),A			; Increment block counter
0531   D749             
0532   D749 CD 4F D7    			CALL SENDACK
0533   D74C C3 A2 D6    			JP	GET1ST
0534   D74F             			
0535   D74F 0E 06       SENDACK:	LD C,ACK
0536   D751 CD 0C E6    			CALL CONOUT
0537   D754 C9          			RET
0538   D755             
0539   D755 0E 15       SENDNAK:	LD C,NAK
0540   D757 CD 0C E6    			CALL CONOUT
0541   D75A C9          			RET
0542   D75B             
0543   D75B 0E 18       SENDCAN:	LD C,CAN
0544   D75D CD 0C E6    			CALL CONOUT
0545   D760 C9          			RET
0546   D761             
0547   D761             ;==================================================================================
0548   D761             ; Timed Out Console Input - X seconds, with X passed on reg B
0549   D761             ; Incoming byte, if any, returns in A
0550   D761             ; Carry flag set if timed out.
0551   D761             ;==================================================================================
0552   D761 C5          TOCONIN:	PUSH	BC
0553   D762 E5          			PUSH	HL
0554   D763             			
0555   D763             ;***********************************
0556   D763 0E 54       			LD	C,'T'
0557   D765 CD 0F E6    			CALL LIST
0558   D768 06 05       			LD	B,5
0559   D76A             ;***********************************
0560   D76A             			
0561   D76A 21 AD 02    LOOP0:		LD	HL,685				;2.5					\
0562   D76D 0E 23       LOOP1:		LD	C,35				;1.75	\				|
0563   D76F CD 06 E6    LOOP2:		CALL CONST				;36.5	|t=41.5C+0.5	| 
0564   D772 3C          			INC	A					;1		|				|
0565   D773 28 0E       			JR	Z,BWAITING			;3/1.75	|				| t=HL(41.5C+6.5)+1.25
0566   D775 79          			LD	A,C					;1		|				|
0567   D776 0D          			DEC	C					;1		|				|
0568   D777 20 F6       			JR	NZ,LOOP2			;3/1.75	/				| with HL=685 and c=35,
0569   D779 2B          			DEC	HL					;1						|  t=0.9994sec (WOW!!!)
0570   D77A 7C          			LD	A,H					;1						|
0571   D77B B5          			OR	L					;1						|
0572   D77C 20 EF       			JR	NZ,LOOP1			;3/1.75					/
0573   D77E 10 EA       			DJNZ	LOOP0			;3.25/2
0574   D780 37          			SCF
0575   D781 18 05       			JR	TOUT
0576   D783 CD 09 E6    BWAITING:	CALL CONIN
0577   D786 37          			SCF						; Reset carry flag
0578   D787 3F          			CCF
0579   D788 E1          TOUT:		POP	HL
0580   D789 C1          			POP	BC
0581   D78A C9          			RET
0582   D78B             
0583   D78B             ;==================================================================================
0584   D78B             ; Purge console input.
0585   D78B             ;==================================================================================
0586   D78B 06 03       PURGE:		LD	B,3
0587   D78D CD 61 D7    			CALL TOCONIN
0588   D790 30 F9       			JR	NC,PURGE
0589   D792 C9          			RET
0590   D793             
0591   D793             ;================================================================================================
0592   D793             ; Hexadecimal to Executable conversion command HEX2COM AAAA
0593   D793             ; Record structure:
0594   D793             ;	<start_code> <byte_count> <address> <record_type> <data>...<data> <checksum>
0595   D793             ;		':'	        1 byte     2 bytes    00h or 01h       n bytes	    1 byte
0596   D793             ;
0597   D793             ; Register usage:
0598   D793             ;	IX = source address 
0599   D793             ;	IY = target address
0600   D793             ;================================================================================================
0601   D793 11 88 00    HEX2COM:	LD	DE,DMA+8
0602   D796 CD 4C DD    			CALL GETWORD		
0603   D799 FE 01       			CP	1					; Is the argument OK?
0604   D79B C2 00 D0    			JP	NZ,CYCLE
0605   D79E C5          			PUSH BC					; IX holds the source address
0606   D79F DD E1       			POP	IX
0607   D7A1             			
0608   D7A1 DD 7E 00    FINDSC:		LD	A,(IX+0)
0609   D7A4 DD 23       			INC IX
0610   D7A6 FE 3A       			CP	':'					; Do we have a start code?
0611   D7A8 20 F7       			JR	NZ,FINDSC
0612   D7AA 3E 00       			LD	A,0					; Reset checksum
0613   D7AC 32 D3 DE    			LD	(CHKSUM),A
0614   D7AF CD 3C D8    			CALL HGB				; Get byte count
0615   D7B2 78          			LD	A,B
0616   D7B3 FE 00       			CP	0
0617   D7B5 CA 00 D0    			JP	Z,CYCLE				; If byte count=0, we're done.
0618   D7B8 32 D4 DE    			LD	(BYTECNT),A			; Save byte count
0619   D7BB CD 1E D8    			CALL UPCHKSUM			; Update checksum
0620   D7BE DD 23       			INC	IX
0621   D7C0 CD 46 D8    			CALL HGW				; Get target address
0622   D7C3 C5          			PUSH BC
0623   D7C4 FD E1       			POP IY					; IY holds the target address
0624   D7C6 CD 1E D8    			CALL UPCHKSUM			; Update checksum
0625   D7C9 41          			LD	B,C
0626   D7CA CD 1E D8    			CALL UPCHKSUM			; Update checksum
0627   D7CD CD 26 D8    			CALL PRTADDR			; Print target address
0628   D7D0 CD 3C D8    			CALL HGB				; Get record type (just for checksum update)
0629   D7D3 CD 1E D8    			CALL UPCHKSUM			; Update checksum
0630   D7D6 DD 23       			INC	IX
0631   D7D8 3A D4 DE    			LD	A,(BYTECNT)
0632   D7DB 47          			LD	B,A
0633   D7DC C5          GETDATA:	PUSH BC
0634   D7DD CD 3C D8    			CALL HGB				; Get data byte
0635   D7E0 FD 70 00    			LD	(IY+0),B
0636   D7E3 CD 1E D8    			CALL UPCHKSUM			; Update checksum
0637   D7E6 FD 23       			INC	IY
0638   D7E8 DD 23       			INC IX
0639   D7EA C1          			POP BC
0640   D7EB 10 EF       			DJNZ GETDATA
0641   D7ED CD 3C D8    			CALL HGB				; Get checksum
0642   D7F0 3A D3 DE    			LD	A,(CHKSUM)
0643   D7F3 ED 44       			NEG
0644   D7F5 B8          			CP	B
0645   D7F6 20 0D       			JR	NZ,CHKSUMER
0646   D7F8 CD 33 E6    			CALL PRINTSEQ
0647   D7FB 3A 20 4F 4B 			.DB	": OK.",CR,LF,0
0647   D7FF 2E 0D 0A 00 
0648   D803 18 9C       			JR	FINDSC
0649   D805 CD 33 E6    CHKSUMER:	CALL PRINTSEQ
0650   D808 3A 20 43 68 			.DB	": Checksum Error.",CR,LF,0
0650   D80C 65 63 6B 73 
0650   D810 75 6D 20 45 
0650   D814 72 72 6F 72 
0650   D818 2E 0D 0A 00 
0651   D81C 18 83       			JR	FINDSC
0652   D81E             
0653   D81E 3A D3 DE    UPCHKSUM:	LD	A,(CHKSUM)
0654   D821 80          			ADD	A,B
0655   D822 32 D3 DE    			LD	(CHKSUM),A
0656   D825 C9          			RET
0657   D826             
0658   D826 CD BA DD    PRTADDR:	CALL PRINTENV
0659   D829 DD 2B       			DEC IX
0660   D82B DD 2B       			DEC IX
0661   D82D DD 2B       			DEC IX
0662   D82F 06 04       			LD	B,4
0663   D831 DD 4E 00    NXTA:		LD	C,(IX+0)
0664   D834 CD 0C E6    			CALL CONOUT
0665   D837 DD 23       			INC	IX
0666   D839 10 F6       			DJNZ NXTA
0667   D83B C9          			RET
0668   D83C             			
0669   D83C DD E5       HGB:		PUSH IX
0670   D83E D1          			POP	DE
0671   D83F CD 60 DD    			CALL GETBYTE
0672   D842 D5          			PUSH DE
0673   D843 DD E1       			POP IX
0674   D845 C9          			RET
0675   D846             
0676   D846 DD E5       HGW:		PUSH IX
0677   D848 D1          			POP	DE
0678   D849 CD 4C DD    			CALL GETWORD
0679   D84C D5          			PUSH DE
0680   D84D DD E1       			POP IX
0681   D84F C9          			RET
0682   D850             
0683   D850             ;================================================================================================
0684   D850             ; ASCII to Executable conversion command - ASCII2COM AAAA
0685   D850             ; Each pair of characters is converted to one byte. The executable is loaded @ 0100h (TPA).
0686   D850             ;	IX = source address 
0687   D850             ;	IY = target address
0688   D850             ;================================================================================================
0689   D850 11 8A 00    ASCII2COM:	LD	DE,DMA+10
0690   D853 CD 4C DD    			CALL GETWORD		
0691   D856 FE 01       			CP	1					; Is the argument OK?
0692   D858 C2 00 D0    			JP	NZ,CYCLE
0693   D85B C5          			PUSH BC					; IX holds the source address
0694   D85C DD E1       			POP	IX
0695   D85E FD 21 00 01 			LD	IY,0100H
0696   D862             
0697   D862 DD 7E 00    A2CNB:		LD	A,(IX+0)
0698   D865 CD C0 DD    			CALL ISITHEX
0699   D868 FE 01       			CP	1
0700   D86A 20 10       			JR	NZ,A2CEND
0701   D86C CD 3C D8    			CALL HGB
0702   D86F FE 01       			CP	1
0703   D871 20 09       			JR	NZ,A2CEND
0704   D873 FD 70 00    			LD	(IY+0),B
0705   D876 FD 23       			INC	IY
0706   D878 DD 23       			INC IX
0707   D87A 18 E6       			JR	A2CNB
0708   D87C             			
0709   D87C CD 33 E6    A2CEND:		CALL PRINTSEQ
0710   D87F 3E 54 61 72 			.DB	">Target contains ",0
0710   D883 67 65 74 20 
0710   D887 63 6F 6E 74 
0710   D88B 61 69 6E 73 
0710   D88F 20 00 
0711   D891 01 00 01    			LD	BC,0100H
0712   D894 FD E5       			PUSH IY
0713   D896 E1          			POP	HL
0714   D897 37          			SCF
0715   D898 3F          			CCF
0716   D899 ED 42       			SBC	HL,BC
0717   D89B 22 CD DE    			LD	(AAAA),HL			; AAAA contains total bytes written.
0718   D89E 44          			LD	B,H
0719   D89F CD 10 DE    			CALL B2HL				; Convert MSByte to ASCII
0720   D8A2 4C          			LD	C,H
0721   D8A3 CD 0C E6    			CALL CONOUT
0722   D8A6 4D          			LD	C,L
0723   D8A7 CD 0C E6    			CALL CONOUT
0724   D8AA 2A CD DE    			LD	HL,(AAAA)
0725   D8AD 45          			LD	B,L
0726   D8AE CD 10 DE    			CALL B2HL				; Convert LSByte to ASCII
0727   D8B1 4C          			LD	C,H
0728   D8B2 CD 0C E6    			CALL CONOUT
0729   D8B5 4D          			LD	C,L
0730   D8B6 CD 0C E6    			CALL CONOUT
0731   D8B9 CD 33 E6    			CALL PRINTSEQ
0732   D8BC 68 20 62 79 			.DB	"h bytes.",CR,LF,0
0732   D8C0 74 65 73 2E 
0732   D8C4 0D 0A 00 
0733   D8C7 C9          			RET
0734   D8C8             			
0735   D8C8             ;================================================================================================
0736   D8C8             ; Read disk operation - READ D,TTT,SS
0737   D8C8             ;================================================================================================
0738   D8C8 11 86 00    DREAD:		LD	DE,DMA+6
0739   D8CB CD C9 D9    			CALL GETDTS
0740   D8CE FE 01       			CP	1				; Is the argument OK?
0741   D8D0 C2 00 D0    			JP	NZ,CYCLE
0742   D8D3 CD 2E DA    NEXTSEC:	CALL DTS2LBA
0743   D8D6 CD F3 D8    			CALL PRINTDTS
0744   D8D9 CD 7E D3    			CALL PRINTHDR
0745   D8DC CD 6B D9    			CALL PRINTDSEC
0746   D8DF CD 09 E6    TAGAIN:		CALL CONIN			; Wait for user's decision
0747   D8E2 FE 0D       			CP	CR
0748   D8E4 20 06       			JR	NZ,NOTCR
0749   D8E6 CD 7A D9    			CALL INCDTS
0750   D8E9 C3 D3 D8    			JP	NEXTSEC
0751   D8EC FE 1B       NOTCR:		CP	ESC
0752   D8EE CA 00 D0    			JP	Z,CYCLE
0753   D8F1 18 EC       			JR	TAGAIN
0754   D8F3             
0755   D8F3             
0756   D8F3 CD 33 E6    PRINTDTS:	CALL PRINTSEQ
0757   D8F6 3E 20 44 54 			.DB	"> DTS: ",0
0757   D8FA 53 3A 20 00 
0758   D8FE 3A D7 DE    			LD	A,(DSK)
0759   D901 C6 41       			ADD	A,41H
0760   D903 4F          			LD	C,A
0761   D904 CD 0C E6    			CALL CONOUT
0762   D907 0E 2D       			LD	C,'-'
0763   D909 CD 0C E6    			CALL CONOUT
0764   D90C 3A D9 DE    			LD	A,(TRK+1)
0765   D90F CD 5E D9    			CALL PRINTBYTE
0766   D912 3A D8 DE    			LD	A,(TRK)
0767   D915 CD 5E D9    			CALL PRINTBYTE
0768   D918 0E 2D       			LD	C,'-'
0769   D91A CD 0C E6    			CALL CONOUT
0770   D91D 3A DA DE    			LD	A,(SEC)
0771   D920 CD 5E D9    			CALL PRINTBYTE
0772   D923 CD 33 E6    			CALL PRINTSEQ
0773   D926 20 2C 4C 42 			.DB	" ,LBA: ",0
0773   D92A 41 3A 20 00 
0774   D92E 3A DB DE    			LD	A,(LBA3)
0775   D931 CD 5E D9    			CALL PRINTBYTE
0776   D934 3A DC DE    			LD	A,(LBA2)
0777   D937 CD 5E D9    			CALL PRINTBYTE
0778   D93A 3A DD DE    			LD	A,(LBA1)
0779   D93D CD 5E D9    			CALL PRINTBYTE
0780   D940 3A DE DE    			LD	A,(LBA0)
0781   D943 CD 5E D9    			CALL PRINTBYTE
0782   D946 CD 33 E6    			CALL PRINTSEQ
0783   D949 20 28 44 49 			.DB	" (DISKPAD = E000)",CR,LF,0
0783   D94D 53 4B 50 41 
0783   D951 44 20 3D 20 
0783   D955 45 30 30 30 
0783   D959 29 0D 0A 00 
0784   D95D             
0785   D95D C9          			RET
0786   D95E             
0787   D95E 47          PRINTBYTE:	LD	B,A
0788   D95F CD 10 DE    			CALL B2HL
0789   D962 4C          			LD	C,H
0790   D963 CD 0C E6    			CALL CONOUT
0791   D966 4D          			LD	C,L
0792   D967 CD 0C E6    			CALL CONOUT
0793   D96A C9          			RET
0794   D96B             
0795   D96B CD AD DA    PRINTDSEC:	CALL DISKREAD
0796   D96E 11 00 E0    			LD	DE,DISKPAD
0797   D971 3E 20       			LD	A,32
0798   D973 32 CB DE    			LD	(LINNUM),A
0799   D976 CD 67 D4    			CALL SUBMPRN
0800   D979 C9          			RET
0801   D97A             
0802   D97A 3A DA DE    INCDTS:		LD	A,(SEC)
0803   D97D FE 1F       			CP	1FH
0804   D97F 28 05       			JR	Z,ZSEC
0805   D981 3C          			INC	A
0806   D982 32 DA DE    			LD	(SEC),A
0807   D985 C9          			RET
0808   D986 AF          ZSEC:		XOR	A
0809   D987 32 DA DE    			LD	(SEC),A
0810   D98A 2A D8 DE    			LD	HL,(TRK)
0811   D98D 01 FF 01    			LD	BC,1FFH
0812   D990 37          			SCF
0813   D991 3F          			CCF
0814   D992 ED 42       			SBC	HL,BC
0815   D994 28 08       			JR	Z,ZTRK
0816   D996 2A D8 DE    			LD	HL,(TRK)
0817   D999 23          			INC	HL
0818   D99A 22 D8 DE    			LD	(TRK),HL
0819   D99D C9          			RET
0820   D99E 21 00 00    ZTRK:		LD	HL,0
0821   D9A1 22 D8 DE    			LD	(TRK),HL
0822   D9A4 3A D7 DE    			LD	A,(DSK)
0823   D9A7 FE 0F       			CP	0FH
0824   D9A9 28 05       			JR	Z,ZDSK
0825   D9AB 3C          			INC	A
0826   D9AC 32 D7 DE    			LD	(DSK),A
0827   D9AF C9          			RET
0828   D9B0 AF          ZDSK:		XOR	A
0829   D9B1 32 D7 DE    			LD	(DSK),A
0830   D9B4 C9          			RET
0831   D9B5             			
0832   D9B5             ;================================================================================================
0833   D9B5             ; Download 1 sector from disk to memory (@ DMIRROR)
0834   D9B5             ;================================================================================================
0835   D9B5 11 85 00    DDOWN:		LD	DE,DMA+5
0836   D9B8 CD C9 D9    			CALL GETDTS
0837   D9BB FE 01       			CP	1				; Is the argument OK?
0838   D9BD C2 00 D0    			JP	NZ,CYCLE
0839   D9C0 CD 2E DA    			CALL DTS2LBA
0840   D9C3 CD AD DA    			CALL DISKREAD
0841   D9C6 C3 00 D0    			JP	CYCLE
0842   D9C9             
0843   D9C9             ;================================================================================================
0844   D9C9             ; Routine to get DTS from command line. DE=line_buf_ptr(should point to where DTS starts).
0845   D9C9             ; Returns A=0 if missing arg, A=1 if OK, A=2 if invalid arg. 
0846   D9C9             ;================================================================================================
0847   D9C9 CD E5 D9    GETDTS:		CALL GETDISK
0848   D9CC FE 01       			CP	1				; Is the argument OK?
0849   D9CE C2 00 D0    			JP	NZ,CYCLE
0850   D9D1 13          			INC DE
0851   D9D2 CD 00 DA    			CALL GETTRACK
0852   D9D5 FE 01       			CP	1				; Is the argument OK?
0853   D9D7 C2 00 D0    			JP	NZ,CYCLE
0854   D9DA 13          			INC	DE
0855   D9DB 13          			INC DE
0856   D9DC CD 1B DA    			CALL GETSECTOR
0857   D9DF FE 01       			CP	1				; Is the argument OK?
0858   D9E1 C2 00 D0    			JP	NZ,CYCLE
0859   D9E4 C9          			RET
0860   D9E5             
0861   D9E5 1A          GETDISK:	LD	A,(DE)
0862   D9E6 FE 00       			CP	0
0863   D9E8 C2 EF D9    			JP	NZ,GD1
0864   D9EB CD 81 DD    			CALL GBNA
0865   D9EE C9          			RET
0866   D9EF D6 41       GD1:		SUB	'A'
0867   D9F1 32 D7 DE    			LD	(DSK),A
0868   D9F4 FE 10       			CP	10H
0869   D9F6 FA FD D9    			JP	M,GD2
0870   D9F9 CD 9F DD    			CALL GBIA
0871   D9FC C9          			RET
0872   D9FD 3E 01       GD2:		LD	A,1
0873   D9FF C9          			RET
0874   DA00             
0875   DA00 3E 30       GETTRACK:	LD	A,'0'
0876   DA02 12          			LD	(DE),A
0877   DA03 CD 4C DD    			CALL GETWORD
0878   DA06 FE 01       			CP	1
0879   DA08 C0          			RET	NZ
0880   DA09 ED 43 D8 DE 			LD	(TRK),BC
0881   DA0D 21 FF 01    			LD	HL,1FFH
0882   DA10 37          			SCF
0883   DA11 3F          			CCF
0884   DA12 ED 42       			SBC	HL,BC
0885   DA14 3E 01       			LD	A,1
0886   DA16 F0          			RET	P
0887   DA17 CD 9F DD    			CALL GBIA
0888   DA1A C9          			RET
0889   DA1B             
0890   DA1B CD 60 DD    GETSECTOR:	CALL GETBYTE
0891   DA1E FE 01       			CP	1
0892   DA20 C0          			RET	NZ
0893   DA21 78          			LD	A,B
0894   DA22 32 DA DE    			LD	(SEC),A
0895   DA25 FE 20       			CP	20H
0896   DA27 3E 01       			LD	A,1
0897   DA29 F8          			RET	M
0898   DA2A CD 9F DD    			CALL GBIA
0899   DA2D C9          			RET
0900   DA2E             			
0901   DA2E             ;================================================================================================
0902   DA2E             ; Convert disk/track/sector to LBA0,1,2,3.
0903   DA2E             ;================================================================================================
0904   DA2E 2A D8 DE    DTS2LBA:	LD	HL,(TRK)
0905   DA31 CB 05       			RLC	L
0906   DA33 CB 05       			RLC	L
0907   DA35 CB 05       			RLC	L
0908   DA37 CB 05       			RLC	L
0909   DA39 CB 05       			RLC	L
0910   DA3B 7D          			LD	A,L
0911   DA3C E6 E0       			AND	0E0H
0912   DA3E 6F          			LD	L,A
0913   DA3F 3A DA DE    			LD	A,(SEC)
0914   DA42 85          			ADD	A,L
0915   DA43 32 DE DE    			LD	(LBA0),A
0916   DA46 2A D8 DE    			LD	HL,(TRK)
0917   DA49 CB 0D       			RRC	L
0918   DA4B CB 0D       			RRC	L
0919   DA4D CB 0D       			RRC	L
0920   DA4F 7D          			LD	A,L
0921   DA50 E6 1F       			AND	01FH
0922   DA52 6F          			LD	L,A
0923   DA53 CB 04       			RLC	H
0924   DA55 CB 04       			RLC	H
0925   DA57 CB 04       			RLC	H
0926   DA59 CB 04       			RLC	H
0927   DA5B CB 04       			RLC	H
0928   DA5D 7C          			LD	A,H
0929   DA5E E6 20       			AND	020H
0930   DA60 67          			LD	H,A
0931   DA61 3A D7 DE    			LD	A,(DSK)
0932   DA64 CB 07       			RLC	A
0933   DA66 CB 07       			RLC	A
0934   DA68 CB 07       			RLC	A
0935   DA6A CB 07       			RLC	A
0936   DA6C CB 07       			RLC	A
0937   DA6E CB 07       			RLC	A
0938   DA70 E6 C0       			AND	0C0H
0939   DA72 84          			ADD	A,H
0940   DA73 85          			ADD	A,L
0941   DA74 32 DD DE    			LD	(LBA1),A
0942   DA77 3A D7 DE    			LD	A,(DSK)
0943   DA7A CB 0F       			RRC	A
0944   DA7C CB 0F       			RRC	A
0945   DA7E E6 03       			AND	03H
0946   DA80 32 DC DE    			LD	(LBA2),A
0947   DA83 3E E0       			LD	A,0E0H
0948   DA85 32 DB DE    			LD	(LBA3),A
0949   DA88 C9          			RET
0950   DA89             			
0951   DA89             ;================================================================================================
0952   DA89             ; Wait for disk to be ready (busy=0,ready=1)
0953   DA89             ;================================================================================================
0954   DA89 F5          DWAIT:		PUSH AF
0955   DA8A DB B7       DWAIT1:		IN 	A,(CF_STATUS)
0956   DA8C E6 80       			AND	080H
0957   DA8E FE 80       			CP 	080H
0958   DA90 28 F8       			JR	Z,DWAIT1
0959   DA92 F1          			POP	AF
0960   DA93 C9          			RET
0961   DA94             
0962   DA94             ;================================================================================================
0963   DA94             ; Set LBA on CF
0964   DA94             ;================================================================================================
0965   DA94 3A DE DE    SETLBA:		LD	A,(LBA0)
0966   DA97 D3 B3       			OUT (CF_LBA0),A
0967   DA99 3A DD DE    			LD	A,(LBA1)
0968   DA9C D3 B4       			OUT (CF_LBA1),A
0969   DA9E 3A DC DE    			LD	A,(LBA2)
0970   DAA1 D3 B5       			OUT (CF_LBA2),A
0971   DAA3 3A DB DE    			LD	A,(LBA3)
0972   DAA6 D3 B6       			OUT (CF_LBA3),A
0973   DAA8 3E 01       			LD 	A,1
0974   DAAA D3 B2       			OUT (CF_SECCOUNT),A
0975   DAAC C9          			RET				
0976   DAAD             
0977   DAAD             ;================================================================================================
0978   DAAD             ; Read physical one sector from disk and write it on DISKPAD
0979   DAAD             ;================================================================================================
0980   DAAD F5          DISKREAD:	PUSH AF
0981   DAAE C5          			PUSH BC
0982   DAAF E5          			PUSH HL
0983   DAB0             
0984   DAB0 CD 89 DA    			CALL DWAIT
0985   DAB3 CD 94 DA    			CALL SETLBA
0986   DAB6 3E 20       			LD 	A,CF_READ_SEC
0987   DAB8 D3 B7       			OUT (CF_COMMAND),A
0988   DABA CD 89 DA    			CALL DWAIT
0989   DABD 0E 04       			LD 	C,4
0990   DABF 21 00 E0    			LD 	HL,DISKPAD
0991   DAC2 06 80       rd4secs:	LD 	B,128
0992   DAC4 00          rdByte:		NOP
0993   DAC5 00          			NOP
0994   DAC6 00          			NOP
0995   DAC7 DB B0       			IN 	A,(CF_DATA)
0996   DAC9 77          			LD 	(HL),A
0997   DACA 23          			INC HL
0998   DACB 05          			DEC B
0999   DACC 20 F6       			JR 	NZ, rdByte
1000   DACE 0D          			DEC C
1001   DACF 20 F1       			JR 	NZ,rd4secs
1002   DAD1             
1003   DAD1 E1          			POP HL
1004   DAD2 C1          			POP BC
1005   DAD3 F1          			POP AF
1006   DAD4 C9          			RET
1007   DAD5             
1008   DAD5             ;================================================================================================
1009   DAD5             ; Write physical sector from DISKPAD to host.
1010   DAD5             ;================================================================================================
1011   DAD5 F5          DISKWRITE:	PUSH AF
1012   DAD6 C5          			PUSH BC
1013   DAD7 E5          			PUSH HL
1014   DAD8             
1015   DAD8 CD 89 DA    			CALL DWAIT
1016   DADB CD 94 DA    			CALL SETLBA
1017   DADE 3E 30       			LD 	A,CF_WRITE_SEC
1018   DAE0 D3 B7       			OUT (CF_COMMAND),A
1019   DAE2 CD 89 DA    			CALL DWAIT
1020   DAE5 0E 04       			LD 	C,4
1021   DAE7 21 00 E0    			LD 	HL,DISKPAD
1022   DAEA 06 80       wr4secs:	LD 	B,128
1023   DAEC 00          wrByte:		NOP
1024   DAED 00          			NOP
1025   DAEE 00          			NOP
1026   DAEF 7E          			LD 	A,(HL)
1027   DAF0 D3 B0       			OUT (CF_DATA),A
1028   DAF2 23          			INC HL
1029   DAF3 05          			DEC B
1030   DAF4 20 F6       			JR 	NZ,wrByte
1031   DAF6 0D          			DEC C
1032   DAF7 20 F1       			JR 	NZ,wr4secs
1033   DAF9             
1034   DAF9 E1          			POP HL
1035   DAFA C1          			POP BC
1036   DAFB F1          			POP AF
1037   DAFC C9          			RET
1038   DAFD             
1039   DAFD             ;================================================================================================
1040   DAFD             ; Upload 1 sector from memory (@ DMIRROR) to disk - UP D,TTT,SS
1041   DAFD             ;================================================================================================
1042   DAFD 11 83 00    DUP:		LD	DE,DMA+3
1043   DB00 CD C9 D9    			CALL GETDTS
1044   DB03 FE 01       			CP	1				; Is the argument OK?
1045   DB05 C2 00 D0    			JP	NZ,CYCLE
1046   DB08 CD 2E DA    			CALL DTS2LBA
1047   DB0B CD D5 DA    			CALL DISKWRITE
1048   DB0E C3 00 D0    			JP	CYCLE
1049   DB11             
1050   DB11             ;================================================================================================
1051   DB11             ; Verify disk. Do this on on all sectors of the disk - VERIFY D
1052   DB11             ;================================================================================================
1053   DB11 11 87 00    DVERIFY:	LD	DE,DMA+7
1054   DB14 CD E5 D9    			CALL GETDISK
1055   DB17 FE 01       			CP	1				; Is the argument OK?
1056   DB19 C2 00 D0    			JP	NZ,CYCLE
1057   DB1C 21 00 00    			LD	HL,0
1058   DB1F 22 D8 DE    			LD	(TRK),HL
1059   DB22 21 00 E0    			LD	HL,DISKPAD
1060   DB25 22 CD DE    			LD	(AAAA),HL		; AAAA will hold beginning of DISKPAD
1061   DB28 21 FF E1    			LD	HL,DISKPAD+1FFH
1062   DB2B 22 CF DE    			LD	(BBBB),HL		; BBBB will hold end of DISKPAD
1063   DB2E 3E 00       NEWTRK:		LD	A,0
1064   DB30 32 DA DE    			LD	(SEC),A
1065   DB33 CD 33 E6    			CALL PRINTSEQ
1066   DB36 0D 0A 54 72 			.DB	CR,LF,"Track ",0
1066   DB3A 61 63 6B 20 
1066   DB3E 00 
1067   DB3F 2A D8 DE    			LD	HL,(TRK)
1068   DB42 44          			LD	B,H
1069   DB43 CD 0F DC    			CALL PRTB2HL
1070   DB46 2A D8 DE    			LD	HL,(TRK)
1071   DB49 45          			LD	B,L
1072   DB4A CD 0F DC    			CALL PRTB2HL
1073   DB4D CD 2E DA    NEWSEC:		CALL DTS2LBA
1074   DB50 CD 84 DB    			CALL BKUP			; Backup content of sector before tests
1075   DB53 3E 00       			LD	A,0				; Test R/W filling sector with 00
1076   DB55 CD A2 DB    			CALL BLKTEST
1077   DB58 3E FF       			LD	A,0FFH			; Test R/W filling sector with FF
1078   DB5A CD A2 DB    			CALL BLKTEST
1079   DB5D 3E AA       			LD	A,0AAH			; Test R/W filling sector with AA
1080   DB5F CD A2 DB    			CALL BLKTEST
1081   DB62 3E 55       			LD	A,55H			; Test R/W filling sector with 55
1082   DB64 CD A2 DB    			CALL BLKTEST
1083   DB67 CD 93 DB    			CALL RESBKUP		; restore original content to sector
1084   DB6A 3A DA DE    			LD	A,(SEC)
1085   DB6D 3C          			INC	A
1086   DB6E 32 DA DE    			LD	(SEC),A
1087   DB71 FE 20       			CP	20H
1088   DB73 20 D8       			JR	NZ,NEWSEC
1089   DB75 2A D8 DE    			LD	HL,(TRK)
1090   DB78 23          			INC	HL
1091   DB79 22 D8 DE    			LD (TRK),HL
1092   DB7C 7C          			LD	A,H
1093   DB7D FE 02       			CP	2
1094   DB7F 20 AD       			JR	NZ,NEWTRK
1095   DB81 C3 00 D0    			JP	CYCLE
1096   DB84             
1097   DB84 CD AD DA    BKUP:		CALL DISKREAD		; Read sector and copy DISKPAD to DISKBKUP
1098   DB87 21 00 E0    			LD	HL,DISKPAD
1099   DB8A 11 00 E2    			LD	DE,DISKBKUP
1100   DB8D 01 00 02    			LD	BC,0200H
1101   DB90 ED B0       			LDIR
1102   DB92 C9          			RET
1103   DB93             			
1104   DB93 21 00 E2    RESBKUP:	LD	HL,DISKBKUP		; Copy DISKBKUP to DISKPAD and write sector
1105   DB96 11 00 E0    			LD	DE,DISKPAD
1106   DB99 01 00 02    			LD	BC,0200H
1107   DB9C ED B0       			LDIR
1108   DB9E CD D5 DA    			CALL DISKWRITE
1109   DBA1 C9          			RET
1110   DBA2             
1111   DBA2 47          BLKTEST:	LD	B,A
1112   DBA3 32 D1 DE    			LD	(CCCC),A
1113   DBA6 CD 7A D5    			CALL MFPRIM
1114   DBA9 CD D5 DA    			CALL DISKWRITE
1115   DBAC CD AD DA    			CALL DISKREAD
1116   DBAF 3A D1 DE    			LD	A,(CCCC)
1117   DBB2 21 00 E0    			LD	HL,DISKPAD
1118   DBB5 06 00       			LD	B,0
1119   DBB7 BE          VBT1:		CP	(HL)
1120   DBB8 20 11       			JR	NZ,VMISMATCH
1121   DBBA 23          			INC	HL
1122   DBBB 10 FA       			DJNZ VBT1
1123   DBBD 06 00       			LD	B,0
1124   DBBF BE          VBT2:		CP	(HL)
1125   DBC0 20 09       			JR	NZ,VMISMATCH
1126   DBC2 23          			INC	HL
1127   DBC3 10 FA       			DJNZ VBT2
1128   DBC5 0E 2E       			LD	C,'.'
1129   DBC7 CD 0C E6    			CALL CONOUT
1130   DBCA C9          			RET
1131   DBCB             
1132   DBCB CD 33 E6    VMISMATCH:	CALL PRINTSEQ
1133   DBCE 0D 0A 45 72 			.DB	CR,LF,"Error on sector ",0
1133   DBD2 72 6F 72 20 
1133   DBD6 6F 6E 20 73 
1133   DBDA 65 63 74 6F 
1133   DBDE 72 20 00 
1134   DBE1 3A DA DE    			LD	A,(SEC)
1135   DBE4 47          			LD	B,A
1136   DBE5 CD 0F DC    			CALL PRTB2HL
1137   DBE8 CD 33 E6    			CALL PRINTSEQ
1138   DBEB 20 43 6F 6E 			.DB	" Continue test? (Y/N)",CR,LF,0
1138   DBEF 74 69 6E 75 
1138   DBF3 65 20 74 65 
1138   DBF7 73 74 3F 20 
1138   DBFB 28 59 2F 4E 
1138   DBFF 29 0D 0A 00 
1139   DC03 CD 09 E6    			CALL CONIN
1140   DC06 FE 59       			CP	'Y'
1141   DC08 C8          			RET	Z
1142   DC09 FE 79       			CP	'y'
1143   DC0B C8          			RET	Z
1144   DC0C C3 00 D0    			JP	CYCLE
1145   DC0F             
1146   DC0F CD 10 DE    PRTB2HL:	CALL B2HL
1147   DC12 4C          			LD	C,H
1148   DC13 CD 0C E6    			CALL CONOUT
1149   DC16 4D          			LD	C,L
1150   DC17 CD 0C E6    			CALL CONOUT
1151   DC1A C9          			RET
1152   DC1B             			
1153   DC1B             ;================================================================================================
1154   DC1B             ; Format a disk - FORMAT D
1155   DC1B             ;================================================================================================
1156   DC1B C9          DFORMAT:	RET
1157   DC1C             
1158   DC1C             ;================================================================================================
1159   DC1C             ; Run (Execute) Command - RUN AAAA
1160   DC1C             ;================================================================================================
1161   DC1C 11 83 00    RUN:		LD	DE,DMA+3
1162   DC1F CD 4C DD    			CALL GETWORD		
1163   DC22 FE 01       			CP	1				; Is the argument OK?
1164   DC24 C2 00 D0    			JP	NZ,CYCLE
1165   DC27 C5          			PUSH BC
1166   DC28 E1          			POP	HL
1167   DC29 E9          			JP	(HL)			; Continue execution where user requested. His responsability!
1168   DC2A             
1169   DC2A             ;================================================================================================
1170   DC2A             ; Unknown Command message. HL has the address of the line buffer.
1171   DC2A             ;================================================================================================
1172   DC2A CD BA DD    UNKNOWN:	CALL PRINTENV
1173   DC2D 21 80 00    			LD	HL,DMA
1174   DC30 7E          UNEXT:		LD	A,(HL)
1175   DC31 FE 00       			CP	0
1176   DC33 28 07       			JR	Z,UEND
1177   DC35 4F          			LD	C,A
1178   DC36 CD 0C E6    			CALL CONOUT
1179   DC39 23          			INC	HL
1180   DC3A 18 F4       			JR	UNEXT
1181   DC3C 0E 3F       UEND:		LD	C,'?'
1182   DC3E CD 0C E6    			CALL CONOUT
1183   DC41 CD 9E DC    			CALL CRLF
1184   DC44 C9          			RET
1185   DC45             
1186   DC45             ;================================================================================================
1187   DC45             ; Routine to manage line input from console. Returns A=0FFh if user typed Ctrl-Z (ETX).
1188   DC45             ;================================================================================================
1189   DC45 21 80 00    LINER:		LD	HL,DMA
1190   DC48 22 C9 DE    			LD	(LBUFPTR),HL			; Init line buffer pointer.
1191   DC4B CD 09 E6    WAITCHAR:	CALL CONIN					; Wait till user types something.
1192   DC4E FE 03       			CP	ETX						; Is it Ctrl-C?
1193   DC50 28 42       			JR	Z,GOTETX
1194   DC52 FE 1A       			CP	SUB						; Is is Ctrl-Z?
1195   DC54 28 3E       			JR	Z,GOTSUB
1196   DC56 FE 18       			CP	CAN
1197   DC58 28 40       			JR	Z,GOTCAN				; Is it <CAN>? (= delete line).
1198   DC5A FE 0D       			CP	CR
1199   DC5C 28 29       			JR	Z,GOTCR					; Is it <ENTER>?
1200   DC5E FE 08       			CP	BS
1201   DC60 28 1E       			JR	Z,GOTBS					; Is it <BS>? (= backspace).
1202   DC62 2A C9 DE    			LD	HL,(LBUFPTR)			; None of the above options, so let's put it in the buffer.
1203   DC65 01 D0 00    			LD	BC,MAXLBUF				; But 1st, we have to check if we still have space.
1204   DC68 37          			SCF
1205   DC69 3F          			CCF
1206   DC6A ED 42       			SBC	HL,BC
1207   DC6C 28 0E       			JR	Z,LBUFFULL				; Is buffer full?
1208   DC6E 2A C9 DE    			LD	HL,(LBUFPTR)
1209   DC71 77          			LD	(HL),A
1210   DC72 23          			INC	HL
1211   DC73 22 C9 DE    			LD	(LBUFPTR),HL
1212   DC76 4F          			LD	C,A
1213   DC77 CD 0C E6    OUTWAIT:	CALL CONOUT
1214   DC7A 18 CF       			JR	WAITCHAR
1215   DC7C             
1216   DC7C 0E 07       LBUFFULL:	LD	C,BEL					; Buffer is full. Just ring the bell.
1217   DC7E 18 F7       			JR	OUTWAIT
1218   DC80             
1219   DC80 16 01       GOTBS:		LD	D,1						; We got a backspace.
1220   DC82 CD A9 DC    AFTGOTBS:	CALL BSPROC
1221   DC85 18 C4       			JR	WAITCHAR
1222   DC87             
1223   DC87 2A C9 DE    GOTCR:		LD	HL,(LBUFPTR)			; We got an ENTER, which means the the user
1224   DC8A 3E 00       			LD	A,0						; has finished typing the command line.
1225   DC8C 77          			LD	(HL),A
1226   DC8D CD 9E DC    			CALL CRLF
1227   DC90 CD D7 DC    			CALL UPPER					; Convert line to uppercase before parsing.
1228   DC93 C9          			RET
1229   DC94             GOTETX:
1230   DC94 CD 9E DC    GOTSUB:		CALL CRLF					; User abort request (Ctrl-C or Ctrl-Z).
1231   DC97 3E 0C       			LD	A,FF
1232   DC99 C9          			RET
1233   DC9A             			
1234   DC9A 16 00       GOTCAN:		LD	D,0						; We got a line delete.
1235   DC9C 18 E4       			JR	AFTGOTBS
1236   DC9E             			
1237   DC9E 0E 0D       CRLF:		LD	C,CR
1238   DCA0 CD 0C E6    			CALL CONOUT
1239   DCA3 0E 0A       			LD	C,LF
1240   DCA5 CD 0C E6    			CALL CONOUT					; Output <CR><LF>.
1241   DCA8 C9          			RET
1242   DCA9             
1243   DCA9             ;================================================================================================
1244   DCA9             ; Routine to do the backspace and line delete. D=1, backspace; D=0, delete line.
1245   DCA9             ;================================================================================================
1246   DCA9 2A C9 DE    BSPROC:		LD	HL,(LBUFPTR)
1247   DCAC 01 80 00    			LD	BC,DMA
1248   DCAF 37          			SCF
1249   DCB0 3F          			CCF
1250   DCB1 ED 42       			SBC	HL,BC
1251   DCB3 28 1C       			JR	Z,LBUFEMPTY
1252   DCB5 2A C9 DE    			LD	HL,(LBUFPTR)
1253   DCB8 2B          			DEC	HL
1254   DCB9 22 C9 DE    			LD	(LBUFPTR),HL
1255   DCBC 0E 08       			LD	C,BS
1256   DCBE CD 0C E6    			CALL CONOUT
1257   DCC1 0E 20       			LD	C,' '
1258   DCC3 CD 0C E6    			CALL CONOUT
1259   DCC6 0E 08       			LD	C,BS
1260   DCC8 CD 0C E6    			CALL CONOUT
1261   DCCB 7A          			LD	A,D
1262   DCCC FE 01       			CP	1
1263   DCCE C8          			RET	Z
1264   DCCF 18 D8       			JR	BSPROC
1265   DCD1             
1266   DCD1 0E 07       LBUFEMPTY:	LD	C,BEL
1267   DCD3 CD 0C E6    			CALL CONOUT
1268   DCD6 C9          			RET
1269   DCD7             			
1270   DCD7             ;================================================================================================
1271   DCD7             ; Routine to convert line buffer content to upper case
1272   DCD7             ;================================================================================================
1273   DCD7 21 7F 00    UPPER:		LD	HL,DMA-1
1274   DCDA 23          NEXT2UP:	INC	HL
1275   DCDB 7E          			LD	A,(HL)
1276   DCDC FE 00       			CP	0
1277   DCDE C8          			RET	Z
1278   DCDF FE 61       			CP	'a'
1279   DCE1 FA DA DC    			JP	M,NEXT2UP
1280   DCE4 FE 7B       			CP	'{'
1281   DCE6 F2 DA DC    			JP	P,NEXT2UP
1282   DCE9 D6 20       			SUB	20H
1283   DCEB 77          			LD	(HL),A
1284   DCEC 18 EC       			JR	NEXT2UP
1285   DCEE             			
1286   DCEE             ;================================================================================================
1287   DCEE             ; Routine to parse command. HL=cmd_table_pointer.
1288   DCEE             ; regA=cmd_num or FFh if no match. HL=jump_address or 0000 if no match.
1289   DCEE             ;================================================================================================
1290   DCEE C5          PARSER:		PUSH BC
1291   DCEF D5          			PUSH DE
1292   DCF0 11 80 00    			LD	DE,DMA
1293   DCF3 3E 00       			LD	A,0
1294   DCF5 32 C8 DE    			LD	(CMDNUM),A		; Init command number.
1295   DCF8 1A          NEXT2PARS:	LD	A,(DE)
1296   DCF9 BE          			CP	(HL)
1297   DCFA 20 04       			JR	NZ,NOTEQU
1298   DCFC 23          			INC	HL
1299   DCFD 13          			INC	DE
1300   DCFE 18 F8       			JR	NEXT2PARS
1301   DD00 7E          NOTEQU:		LD	A,(HL)
1302   DD01 FE 1E       			CP	RS
1303   DD03 28 04       			JR	Z,ISRS
1304   DD05 FE 03       			CP	ETX
1305   DD07 20 22       			JR	NZ,NEXTCMD
1306   DD09 1A          ISRS:		LD	A,(DE)
1307   DD0A FE 00       			CP	0
1308   DD0C 28 04       			JR	Z,ISZERO
1309   DD0E FE 20       			CP	' '
1310   DD10 20 19       			JR	NZ,NEXTCMD
1311   DD12 7E          ISZERO:		LD	A,(HL)
1312   DD13 FE 03       			CP	ETX
1313   DD15 28 03       			JR	Z,CMDMATCH
1314   DD17 23          			INC	HL
1315   DD18 18 F8       			JR	ISZERO
1316   DD1A 23          CMDMATCH:	INC	HL
1317   DD1B E5          			PUSH HL
1318   DD1C D1          			POP	DE				; DE=addr of jump table
1319   DD1D 26 00       			LD	H,0
1320   DD1F 3A C8 DE    			LD	A,(CMDNUM)
1321   DD22 6F          			LD	L,A
1322   DD23 E5          			PUSH HL
1323   DD24 C1          			POP	BC
1324   DD25 09          			ADD	HL,BC			; command_number * 2
1325   DD26 09          			ADD	HL,BC			; command_number * 3
1326   DD27 19          			ADD HL,DE
1327   DD28 D1          			POP	DE
1328   DD29 C1          			POP	BC
1329   DD2A C9          			RET					; A=command_number, HL=jump_address
1330   DD2B 7E          NEXTCMD:	LD	A,(HL)
1331   DD2C FE 1E       			CP	RS
1332   DD2E 28 07       			JR	Z,ISRS2
1333   DD30 FE 03       			CP	ETX
1334   DD32 28 10       			JR	Z,NOMATCH
1335   DD34 23          			INC	HL
1336   DD35 18 F4       			JR	NEXTCMD
1337   DD37 23          ISRS2:		INC	HL
1338   DD38 3A C8 DE    			LD	A,(CMDNUM)
1339   DD3B 3C          			INC	A
1340   DD3C 32 C8 DE    			LD	(CMDNUM),A
1341   DD3F 11 80 00    			LD	DE,DMA
1342   DD42 18 B4       			JR	NEXT2PARS
1343   DD44 21 00 00    NOMATCH:	LD	HL,0
1344   DD47 3E FF       			LD	A,0FFH
1345   DD49 D1          			POP	DE
1346   DD4A C1          			POP	BC
1347   DD4B C9          			RET
1348   DD4C             
1349   DD4C             ;================================================================================================
1350   DD4C             ; Routine to get word from command line. DE=line_buf_ptr(should point to where word starts).
1351   DD4C             ; If successfull, return word in BC. A=0 if missing arg, A=1 if OK, A=2 if invalid arg. 
1352   DD4C             ;================================================================================================
1353   DD4C CD 60 DD    GETWORD:	CALL GETBYTE
1354   DD4F FE 01       			CP	1
1355   DD51 C0          			RET	NZ
1356   DD52 48          			LD	C,B
1357   DD53 13          			INC	DE
1358   DD54 CD 60 DD    			CALL GETBYTE
1359   DD57 FE 01       			CP	1
1360   DD59 C0          			RET NZ
1361   DD5A 78          			LD	A,B
1362   DD5B 41          			LD	B,C
1363   DD5C 4F          			LD	C,A
1364   DD5D 3E 01       			LD	A,1
1365   DD5F C9          			RET
1366   DD60             			
1367   DD60             ;================================================================================================
1368   DD60             ; Routine to get byte from command line. DE=line_buf_ptr(should point to where byte starts).
1369   DD60             ; If successfull, return byte in regB. A=0 if missing arg, A=1 if OK, A=2 if invalid arg. 
1370   DD60             ;================================================================================================
1371   DD60 1A          GETBYTE:	LD	A,(DE)
1372   DD61 FE 00       			CP	0
1373   DD63 28 1C       			JR	Z,GBNA				; End of buffer and no arg found.
1374   DD65 FE 20       			CP	' '
1375   DD67 28 33       			JR	Z,GBSPC				; Trim the space.
1376   DD69 67          			LD	H,A
1377   DD6A CD C0 DD    			CALL ISITHEX
1378   DD6D FE 01       			CP	1
1379   DD6F 20 2E       			JR	NZ,GBIA				; Invalid arg.
1380   DD71 13          			INC	DE
1381   DD72 1A          			LD	A,(DE)
1382   DD73 6F          			LD	L,A
1383   DD74 CD C0 DD    			CALL ISITHEX
1384   DD77 FE 01       			CP	1
1385   DD79 20 24       			JR	NZ,GBIA				; Invalid arg.
1386   DD7B CD DA DD    			CALL HL2B				; Convert ASCII pair to byte
1387   DD7E 3E 01       			LD	A,1
1388   DD80 C9          			RET
1389   DD81 CD 33 E6    GBNA:		CALL PRINTSEQ
1390   DD84 3E 4D 69 73 			.DB	">Missing argument.",CR,LF,0
1390   DD88 73 69 6E 67 
1390   DD8C 20 61 72 67 
1390   DD90 75 6D 65 6E 
1390   DD94 74 2E 0D 0A 
1390   DD98 00 
1391   DD99 3E 00       			LD	A,0
1392   DD9B C9          			RET
1393   DD9C 13          GBSPC:		INC	DE
1394   DD9D 18 C1       			JR	GETBYTE
1395   DD9F CD 33 E6    GBIA:		CALL PRINTSEQ
1396   DDA2 3E 49 6E 76 			.DB	">Invalid argument.",CR,LF,0
1396   DDA6 61 6C 69 64 
1396   DDAA 20 61 72 67 
1396   DDAE 75 6D 65 6E 
1396   DDB2 74 2E 0D 0A 
1396   DDB6 00 
1397   DDB7 3E 02       			LD	A,2
1398   DDB9 C9          			RET
1399   DDBA             
1400   DDBA 0E 3E       PRINTENV:	LD	C,PROMPT
1401   DDBC CD 0C E6    			CALL CONOUT
1402   DDBF C9          			RET
1403   DDC0             
1404   DDC0 FE 47       ISITHEX:	CP	'G'
1405   DDC2 F2 D4 DD    			JP	P,NOTHEX
1406   DDC5 FE 41       			CP	'A'
1407   DDC7 F2 D7 DD    			JP	P,ISHEX
1408   DDCA FE 40       			CP	040H
1409   DDCC F2 D4 DD    			JP	P,NOTHEX
1410   DDCF FE 30       			CP	'0'
1411   DDD1 F2 D7 DD    			JP	P,ISHEX
1412   DDD4 3E 00       NOTHEX:		LD	A,0
1413   DDD6 C9          			RET
1414   DDD7 3E 01       ISHEX:		LD	A,1
1415   DDD9 C9          			RET
1416   DDDA             
1417   DDDA             ;================================================================================================
1418   DDDA             ; Convert ASCII to HEX (HL --> B)
1419   DDDA             ;================================================================================================
1420   DDDA C5          HL2B:		PUSH BC
1421   DDDB 3E 60       			LD	A,060H
1422   DDDD 94          			SUB	H
1423   DDDE 0E 57       			LD	C,057H
1424   DDE0 DA ED DD    			JP	C,DISCOUNT
1425   DDE3 3E 40       			LD	A,040H
1426   DDE5 94          			SUB	H
1427   DDE6 0E 37       			LD	C,037H
1428   DDE8 DA ED DD    			JP	C,DISCOUNT
1429   DDEB 0E 30       			LD	C,030H
1430   DDED 7C          DISCOUNT:	LD	A,H
1431   DDEE 91          			SUB	C
1432   DDEF 47          CONVL:		LD	B,A
1433   DDF0 CB 20       			SLA	B
1434   DDF2 CB 20       			SLA	B
1435   DDF4 CB 20       			SLA	B
1436   DDF6 CB 20       			SLA	B
1437   DDF8 3E 60       			LD	A,060H
1438   DDFA 95          			SUB	L
1439   DDFB 0E 57       			LD	C,057H
1440   DDFD DA 0A DE    			JP	C,DISCOUNT2
1441   DE00 3E 40       			LD	A,040H
1442   DE02 95          			SUB	L
1443   DE03 0E 37       			LD	C,037H
1444   DE05 DA 0A DE    			JP	C,DISCOUNT2
1445   DE08 0E 30       			LD	C,030H
1446   DE0A 7D          DISCOUNT2:	LD	A,L
1447   DE0B 91          			SUB	C
1448   DE0C B0          			OR	B
1449   DE0D C1          			POP	BC
1450   DE0E 47          			LD	B,A
1451   DE0F C9          			RET
1452   DE10             
1453   DE10             ;================================================================================================
1454   DE10             ; Convert HEX to ASCII (B --> HL)
1455   DE10             ;================================================================================================
1456   DE10 C5          B2HL:		PUSH	BC
1457   DE11 78          			LD	A,B
1458   DE12 E6 0F       			AND	0FH
1459   DE14 6F          			LD	L,A
1460   DE15 D6 0A       			SUB	0AH
1461   DE17 0E 30       			LD	C,030H
1462   DE19 DA 1E DE    			JP	C,COMPENSE
1463   DE1C 0E 37       			LD	C,037H
1464   DE1E 7D          COMPENSE:	LD	A,L
1465   DE1F 81          			ADD	A,C
1466   DE20 6F          			LD	L,A
1467   DE21 78          			LD	A,B
1468   DE22 E6 F0       			AND	0F0H
1469   DE24 CB 3F       			SRL	A
1470   DE26 CB 3F       			SRL	A
1471   DE28 CB 3F       			SRL	A
1472   DE2A CB 3F       			SRL	A
1473   DE2C 67          			LD	H,A
1474   DE2D D6 0A       			SUB	0AH
1475   DE2F 0E 30       			LD	C,030H
1476   DE31 DA 36 DE    			JP	C,COMPENSE2
1477   DE34 0E 37       			LD	C,037H
1478   DE36 7C          COMPENSE2:	LD	A,H
1479   DE37 81          			ADD	A,C
1480   DE38 67          			LD	H,A
1481   DE39 C1          			POP	BC
1482   DE3A C9          			RET
1483   DE3B             
1484   DE3B             ;================================================================================================
1485   DE3B 3F 1E       CMDTBL:		.DB	"?",RS
1486   DE3D 42 4F 4F 54 			.DB	"BOOT",RS
1486   DE41 1E 
1487   DE42 58 4D 4F 44 			.DB	"XMODEM",RS
1487   DE46 45 4D 1E 
1488   DE49 48 45 58 32 			.DB	"HEX2COM",RS
1488   DE4D 43 4F 4D 1E 
1489   DE51 41 53 43 49 			.DB	"ASCII2COM",RS
1489   DE55 49 32 43 4F 
1489   DE59 4D 1E 
1490   DE5B 43 4F 4D 50 			.DB	"COMPARE",RS
1490   DE5F 41 52 45 1E 
1491   DE63 52 55 4E 1E 			.DB	"RUN",RS
1492   DE67 52 45 41 44 			.DB	"READ",RS
1492   DE6B 1E 
1493   DE6C 44 52 45 41 			.DB	"DREAD",RS
1493   DE70 44 1E 
1494   DE72 57 52 49 54 			.DB	"WRITE",RS
1494   DE76 45 1E 
1495   DE78 43 4F 50 59 			.DB	"COPY",RS
1495   DE7C 1E 
1496   DE7D 46 49 4C 4C 			.DB	"FILL",RS
1496   DE81 1E 
1497   DE82 44 4F 57 4E 			.DB	"DOWN",RS
1497   DE86 1E 
1498   DE87 55 50 1E    			.DB	"UP",RS
1499   DE8A 46 4F 52 4D 			.DB	"FORMAT",RS
1499   DE8E 41 54 1E 
1500   DE91 56 45 52 49 			.DB	"VERIFY",ETX
1500   DE95 46 59 03 
1501   DE98             
1502   DE98 C3 1C D0    JMPTBL:		JP	HELP
1503   DE9B C3 03 E6    			JP	WBOOT
1504   DE9E C3 78 D6    			JP	XMODEM
1505   DEA1 C3 93 D7    			JP	HEX2COM
1506   DEA4 C3 50 D8    			JP	ASCII2COM
1507   DEA7 C3 91 D5    			JP	MCOMP
1508   DEAA C3 1C DC    			JP	RUN
1509   DEAD C3 54 D3    			JP	MREAD
1510   DEB0 C3 C8 D8    			JP	DREAD
1511   DEB3 C3 DC D4    			JP	MWRITE
1512   DEB6 C3 07 D5    			JP	MCOPY
1513   DEB9 C3 4B D5    			JP	MFILL
1514   DEBC C3 B5 D9    			JP	DDOWN
1515   DEBF C3 FD DA    			JP	DUP
1516   DEC2 C3 1B DC    			JP	DFORMAT
1517   DEC5 C3 11 DB    			JP	DVERIFY
1518   DEC8             			
1519   DEC8             ;================================================================================================
1520   DEC8 00          CMDNUM		.DB	0
1521   DEC9 00 00       LBUFPTR		.DW	0
1522   DECB 00          LINNUM		.DB	0
1523   DECC 00          COLNUM		.DB	0
1524   DECD 00 00       AAAA		.DW	0
1525   DECF 00 00       BBBB		.DW	0
1526   DED1 00 00       CCCC		.DW	0
1527   DED3 00          CHKSUM	 	.DB	0					; Checksum for xmodem
1528   DED4 00          BYTECNT		.DB	0					; Byte counter for xmodem and hex2com
1529   DED5 00          RETRY		.DB 0					; Retry counter for xmodem
1530   DED6 00          BLOCK		.DB	0					; Block counter for xmodem
1531   DED7 00          DSK			.DB	0					; Disk number [00,0F]
1532   DED8 00 00       TRK			.DW	0					; Track number [0,1FF]
1533   DEDA 00          SEC			.DB	0					; Sector number [0,1F]
1534   DEDB 00          LBA3		.DB	0
1535   DEDC 00          LBA2		.DB	0
1536   DEDD 00          LBA1		.DB	0
1537   DEDE 00          LBA0		.DB	0
1538   DEDF             
1539   DEDF             			.END
tasm: Number of errors = 0
