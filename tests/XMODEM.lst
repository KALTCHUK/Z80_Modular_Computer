0001   0000             ;==================================================================================
0002   0000             ; XMODEM.ASM version 1 - Kaltchuk, feb/2021
0003   0000             ;
0004   0000             ; This program implements xmodem protocol on CP/M.
0005   0000             ; (3 bytes header, 128byte data packets, 1byte CheckSum).
0006   0000             ;
0007   0000             : +-------- header --------+------- data packet -------+
0008   0000             ; |                        |                           |
0009   0000             ;  <SOH> <BlkNum> </BlkNum> <byte1> <byte2>...<byte128> <ChkSum>
0010   0000             ;==================================================================================
0011   0000             REBOOT		.EQU	0H
0012   0000             BDOS		.EQU	5H
0013   0000             TPA			.EQU	0100H
0014   0000             BIOS		.EQU	0E600h			; Base of BIOS.
0015   0000             
0016   0000             FCB			.EQU	0005CH
0017   0000             DMA			.EQU	080H
0018   0000             
0019   0000             CONST		.EQU	BIOS+(3*2)		; BIOS entry for Console Status (regA=0FFh, char waiting. regA=0, buff empty)
0020   0000             CONIN		.EQU	BIOS+(3*3)		; BIOS entry for Console Input (console --> regA)
0021   0000             CONOUT		.EQU	BIOS+(3*4)		; BIOS entry for Console Output (regC --> console)
0022   0000             
0023   0000             C_STRING	.EQU	9				; BDOS functions
0024   0000             F_CLOSE		.EQU	16
0025   0000             F_DELETE	.EQU	19
0026   0000             F_WRITE		.EQU	21
0027   0000             F_MAKE		.EQU	22
0028   0000             F_DMAOFF	.EQU	26
0029   0000             
0030   0000             SOH			.EQU	01H				; ASCII characters
0031   0000             EOT			.EQU	04H
0032   0000             ACK			.EQU	06H
0033   0000             LF			.EQU	0AH
0034   0000             CR			.EQU	0DH
0035   0000             NAK			.EQU	015H
0036   0000             CAN			.EQU	018H
0037   0000             SUB			.EQU	01AH
0038   0000             
0039   0000             MAXTRY		.EQU	10
0040   0000             ;==================================================================================
0041   0100             			.ORG TPA
0042   0100             
0043   0100 31 D5 02    			LD	SP,STACK			; Set default stack.
0044   0103 3A 5D 00    			LD	A,(FCB+1)
0045   0106 FE 20       			CP	' '					; Test if program has argument (file name)
0046   0108 20 0B       			JR	NZ,START
0047   010A 11 52 02    			LD	DE,MSG
0048   010D 0E 09       			LD	C,C_STRING
0049   010F CD 05 00    			CALL BDOS
0050   0112 C3 00 00    			JP	REBOOT
0051   0115             			
0052   0115 3E 00       START:		LD	A,0
0053   0117 32 B3 02    			LD	(RETRY),A			; Init retry counter
0054   011A 3C          			INC	A
0055   011B 32 B4 02    			LD	(BLOCK),A			; Init block counter
0056   011E CD EC 01    			CALL DELFILE			; Delete file
0057   0121 CD F5 01    			CALL MAKEFILE			; Create file
0058   0124 FE 04       			CP	4					; 0, 1, 2 or 3 = OK
0059   0126 FA 2F 01    			JP	M,ALIVE				; File created OK?
0060   0129 CD 13 02    OUT1:		CALL SENDCAN
0061   012C C3 00 00    			JP	REBOOT
0062   012F             
0063   012F CD 0D 02    ALIVE:		CALL SENDNAK
0064   0132 06 0A       GET1ST:		LD	B,10
0065   0134 CD 28 02    			CALL TOCONIN			;10s timeout
0066   0137 38 0C       			JR	C,REPEAT			; Timed out?
0067   0139 FE 04       			CP	EOT
0068   013B 28 18       			JR	Z,GOTEOT			; EOT?
0069   013D FE 18       			CP	CAN
0070   013F 28 25       			JR	Z,GOTCAN			; CAN?
0071   0141 FE 01       			CP	SOH
0072   0143 28 27       			JR	Z,GOTSOH			; SOH?
0073   0145 3A B3 02    REPEAT:		LD	A,(RETRY)
0074   0148 3C          			INC	A
0075   0149 32 B3 02    			LD	(RETRY),A
0076   014C FE 0A       			CP	MAXTRY
0077   014E 20 DF       			JR	NZ,ALIVE			; Try again?
0078   0150 CD EC 01    OUT3:		CALL DELFILE
0079   0153 18 D4       			JR	OUT1
0080   0155 CD 0D 02    GOTEOT:		CALL SENDNAK
0081   0158 06 01       			LD	B,1
0082   015A CD 28 02    			CALL TOCONIN
0083   015D CD 07 02    			CALL SENDACK
0084   0160 CD FE 01    			CALL CLOSFILE
0085   0163 C3 00 00    			JP	REBOOT
0086   0166 CD EC 01    GOTCAN:		CALL DELFILE
0087   0169 C3 00 00    			JP	REBOOT
0088   016C 3E 00       GOTSOH:		LD	A,0
0089   016E 32 B2 02    			LD	(CHKSUM),A			; Reset checksum
0090   0171 21 80 00    			LD	HL,DMA
0091   0174 22 B0 02    			LD	(BUFPTR),HL			; Reset buffer pointer
0092   0177 06 01       			LD	B,1
0093   0179 CD 28 02    			CALL TOCONIN			; Get incoming block number
0094   017C 38 1F       			JR	C,OUT2				; Timed out?
0095   017E 4F          			LD	C,A					; Save incoming block number
0096   017F 06 01       			LD	B,1
0097   0181 CD 28 02    			CALL TOCONIN			; Get complement of incoming block number
0098   0184 38 17       			JR	C,OUT2				; Timed out?
0099   0186 2F          			CPL
0100   0187 B9          			CP	C
0101   0188 20 13       			JR	NZ,OUT2				; block = //block?
0102   018A 3A B4 02    			LD	A,(BLOCK)
0103   018D B9          			CP	C					; Is block number what we expected?
0104   018E 28 15       			JR	Z,RECPACK
0105   0190 3D          			DEC	A
0106   0191 B9          			CP	C					; block number is the anterior? Probably sender missed our ACK.
0107   0192 20 09       			JR	NZ,OUT2
0108   0194 CD 4A 02    ANTBLK:		CALL PURGE				; Purge input buffer before sending ACK
0109   0197 CD 07 02    			CALL SENDACK
0110   019A C3 32 01    			JP	GET1ST
0111   019D CD 4A 02    OUT2:		CALL PURGE
0112   01A0 CD 13 02    			CALL SENDCAN
0113   01A3 18 C1       			JR	GOTCAN
0114   01A5 06 01       RECPACK:	LD	B,1					; Start receiving data packet (128 bytes)
0115   01A7 CD 28 02    			CALL TOCONIN
0116   01AA 38 F1       			JR	C,OUT2				; Timed out?
0117   01AC 2A B0 02    			LD	HL,(BUFPTR)
0118   01AF 77          			LD	(HL),A				; Put byte in buffer
0119   01B0 23          			INC	HL					; Inc buffer pointer
0120   01B1 22 B0 02    			LD	(BUFPTR),HL
0121   01B4 4F          			LD	C,A
0122   01B5 3A B2 02    			LD	A,(CHKSUM)
0123   01B8 81          			ADD	A,C
0124   01B9 32 B2 02    			LD	(CHKSUM),A			; Update checksum
0125   01BC 01 00 01    			LD	BC,TPA
0126   01BF AF          			XOR	A					; Reset carry flag
0127   01C0 ED 42       			SBC	HL,BC				; If buffer pointer = TPA, we got a full buffer 
0128   01C2 20 E1       			JR	NZ,RECPACK
0129   01C4 CD 19 02    			CALL WRITEBLK
0130   01C7 FE 00       			CP	0
0131   01C9 20 85       			JR	NZ,OUT3				; Write op OK?
0132   01CB 06 01       			LD	B,1
0133   01CD CD 28 02    			CALL TOCONIN			; Get checksum
0134   01D0 38 CB       			JR	C,OUT2				; Timed out?
0135   01D2 4F          			LD	C,A
0136   01D3 3A B2 02    			LD	A,(CHKSUM)
0137   01D6 B9          			CP	C
0138   01D7 C2 45 01    			JP	NZ,REPEAT			; Checksum OK?
0139   01DA 3E 00       			LD	A,0
0140   01DC 32 B3 02    			LD	(RETRY),A			; Reset retry counter
0141   01DF 3A B4 02    			LD	A,(BLOCK)
0142   01E2 3C          			INC	A
0143   01E3 32 B4 02    			LD	(BLOCK),A			; Increment block counter
0144   01E6 CD 07 02    			CALL SENDACK
0145   01E9 C3 32 01    			JP	GET1ST
0146   01EC             			
0147   01EC             ;==================================================================================
0148   01EC             ; Delete file. RegA returns 0, 1, 2 or 3 if successful.
0149   01EC             ;==================================================================================
0150   01EC 0E 13       DELFILE:	LD	C,F_DELETE			; Delete file
0151   01EE 11 5C 00    			LD	DE,FCB
0152   01F1 CD 05 00    			CALL BDOS
0153   01F4 C9          			RET
0154   01F5             			
0155   01F5             ;==================================================================================
0156   01F5             ; Make file. RegA returns 0, 1, 2 or 3 if successful.
0157   01F5             ;==================================================================================
0158   01F5 0E 16       MAKEFILE:	LD	C,F_MAKE			; Create file
0159   01F7 11 5C 00    			LD	DE,FCB
0160   01FA CD 05 00    			CALL BDOS
0161   01FD C9          			RET
0162   01FE             
0163   01FE             ;==================================================================================
0164   01FE             ; Close file. RegA returns 0, 1, 2 or 3 if successful.
0165   01FE             ;==================================================================================
0166   01FE 0E 10       CLOSFILE:	LD	C,F_CLOSE			; Close file
0167   0200 11 5C 00    			LD	DE,FCB
0168   0203 CD 05 00    			CALL BDOS
0169   0206 C9          			RET
0170   0207             			
0171   0207             ;==================================================================================
0172   0207             ; Send ACK
0173   0207             ;==================================================================================
0174   0207 0E 06       SENDACK:	LD C,ACK
0175   0209 CD 0C E6    			CALL CONOUT
0176   020C C9          			RET
0177   020D             
0178   020D             ;==================================================================================
0179   020D             ; Send NAK
0180   020D             ;==================================================================================
0181   020D 0E 15       SENDNAK:	LD C,NAK
0182   020F CD 0C E6    			CALL CONOUT
0183   0212 C9          			RET
0184   0213             
0185   0213             ;==================================================================================
0186   0213             ; Send CAN
0187   0213             ;==================================================================================
0188   0213 0E 18       SENDCAN:	LD C,CAN
0189   0215 CD 0C E6    			CALL CONOUT
0190   0218 C9          			RET
0191   0219             
0192   0219             ;==================================================================================
0193   0219             ; Write block to file. RegA returns 0 if successful.
0194   0219             ;==================================================================================
0195   0219 0E 15       WRITEBLK:	LD	C,F_WRITE			; Write buffer to disk.
0196   021B 11 5C 00    			LD	DE,FCB
0197   021E CD 05 00    			CALL BDOS
0198   0221 21 80 00    			LD	HL,DMA
0199   0224 22 B0 02    			LD	(BUFPTR),HL			; Reset buffer pointer
0200   0227 C9          			RET
0201   0228             
0202   0228             ;==================================================================================
0203   0228             ; Timed Out Console Input - X seconds, with X passed on reg B
0204   0228             ; Incoming byte, if any, returns in A
0205   0228             ; Carry flag set if timed out.
0206   0228             ;==================================================================================
0207   0228 C5          TOCONIN:	PUSH	BC
0208   0229 E5          			PUSH	HL
0209   022A 21 8F 02    LOOP0:		LD	HL,655				;2.5					\
0210   022D 0E FF       LOOP1:		LD	C,255				;1.75	\				|
0211   022F 0D          LOOP2:		DEC	C					;1		|				|
0212   0230 CD 06 E6    			CALL CONST				;36.5	|t=41.5C+0.5	| 
0213   0233 3C          			INC	A					;1		|				|
0214   0234 28 0D       			JR	Z,BWAITING			;3/1.75	|				| t=HL(41.5C+6.5)+1.25
0215   0236 79          			LD	A,C					;1		|				|
0216   0237 20 F6       			JR	NZ,LOOP2			;3/1.75	/				| with HL=685 and c=35,
0217   0239 2B          			DEC	HL					;1						|  t=0.9994sec (WOW!!!)
0218   023A 7C          			LD	A,H					;1						|
0219   023B B5          			OR	L					;1						|
0220   023C 20 EF       			JR	NZ,LOOP1			;3/1.75					/
0221   023E 10 EA       			DJNZ	LOOP0			;3.25/2
0222   0240 37          			SCF
0223   0241 18 04       			JR	TOUT
0224   0243 CD 09 E6    BWAITING:	CALL CONIN
0225   0246 AF          			XOR	A					; Reset carry flag
0226   0247 E1          TOUT:		POP	HL
0227   0248 C1          			POP	BC
0228   0249 C9          			RET
0229   024A             
0230   024A             ;==================================================================================
0231   024A             ; Purge console input.
0232   024A             ;==================================================================================
0233   024A 06 03       PURGE:		LD	B,3
0234   024C CD 28 02    			CALL TOCONIN
0235   024F 30 F9       			JR	NC,PURGE
0236   0251 C9          			RET
0237   0252             
0238   0252             ;==================================================================================
0239   0252 58 4D 4F 44 MSG:		.DB	"XMODEM 1.0 - Receive a file from console and store it on disk."
0239   0256 45 4D 20 31 
0239   025A 2E 30 20 2D 
0239   025E 20 52 65 63 
0239   0262 65 69 76 65 
0239   0266 20 61 20 66 
0239   026A 69 6C 65 20 
0239   026E 66 72 6F 6D 
0239   0272 20 63 6F 6E 
0239   0276 73 6F 6C 65 
0239   027A 20 61 6E 64 
0239   027E 20 73 74 6F 
0239   0282 72 65 20 69 
0239   0286 74 20 6F 6E 
0239   028A 20 64 69 73 
0239   028E 6B 2E 
0240   0290 0D 0A       			.DB	CR,LF
0241   0292 55 73 65 3A 			.DB	"Use: XMODEM [drive:]filename.$"
0241   0296 20 58 4D 4F 
0241   029A 44 45 4D 20 
0241   029E 5B 64 72 69 
0241   02A2 76 65 3A 5D 
0241   02A6 66 69 6C 65 
0241   02AA 6E 61 6D 65 
0241   02AE 2E 24 
0242   02B0             
0243   02B0 00 00       BUFPTR		.DW	0					; Buffer pointer
0244   02B2 00          CHKSUM	 	.DB	0					; Checksum
0245   02B3 00          RETRY		.DB 0					; Retry counter
0246   02B4 00          BLOCK		.DB	0					; Block counter
0247   02B5             
0248   02B5             			.DS	020h				; Start of stack area.
0249   02D5             STACK		.EQU	$
0250   02D5             
0251   02D5             
0252   02D5             			.END
tasm: Number of errors = 0
